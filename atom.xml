<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://nitgod1996.com</id>
    <title>宁理大神1996</title>
    <subtitle></subtitle>
    <icon>https://nitgod1996.com/images/favicon.ico</icon>
    <link href="https://nitgod1996.com" />
    <author>
      <name>宁理大神1996</name>
    </author>
    <updated>2021-08-10T14:06:13.000Z</updated>
    <entry>
        <id>https://nitgod1996.com/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/</id>
        <title>ps学习之路</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/"/>
        <content type="html">&lt;h1 id=&#34;一-ps基础教程&#34;&gt;&lt;a href=&#34;#一、-ps基础教程&#34; class=&#34;headerlink&#34; title=&#34;一、 ps基础教程&#34;&gt;&lt;/a&gt;一、 ps基础教程&lt;/h1&gt;&lt;h2 id=&#34;1-调整图层&#34;&gt;&lt;a href=&#34;#1-调整图层&#34; class=&#34;headerlink&#34; title=&#34;1. 调整图层&#34;&gt;&lt;/a&gt;1. &lt;strong&gt;调整图层&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221140722.png&#34; alt=&#34;image-20210810221140722&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-污点去除工具&#34;&gt;&lt;a href=&#34;#2-污点去除工具&#34; class=&#34;headerlink&#34; title=&#34;2. 污点去除工具&#34;&gt;&lt;/a&gt;2. &lt;strong&gt;污点去除工具&lt;/strong&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221218328.png&#34; alt=&#34;image-20210810221218328&#34;&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221227889.png&#34; alt=&#34;image-20210810221227889&#34;&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221250330.png&#34; alt=&#34;image-20210810221250330&#34;&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221259847.png&#34; alt=&#34;image-20210810221259847&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-导入图片&#34;&gt;&lt;a href=&#34;#3-导入图片&#34; class=&#34;headerlink&#34; title=&#34;3. 导入图片&#34;&gt;&lt;/a&gt;3. &lt;strong&gt;导入图片&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;添加新的图层：文件&amp;gt;打开&lt;/li&gt;
&lt;li&gt;添加到图层：文件→置入嵌入对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-调整大小&#34;&gt;&lt;a href=&#34;#4-调整大小&#34; class=&#34;headerlink&#34; title=&#34;4. 调整大小&#34;&gt;&lt;/a&gt;4. &lt;strong&gt;调整大小&lt;/strong&gt;&lt;/h2&gt;&lt;h3 id=&#34;41-缩放&#34;&gt;&lt;a href=&#34;#4-1-缩放&#34; class=&#34;headerlink&#34; title=&#34;4.1 缩放&#34;&gt;&lt;/a&gt;4.1 缩放&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;Ctrl+T&lt;/strong&gt;： 编辑→自由变换：。按住&lt;strong&gt;shift&lt;/strong&gt;不成比例放大/缩小&lt;/p&gt;
&lt;h3 id=&#34;42-裁剪&#34;&gt;&lt;a href=&#34;#4-2-裁剪&#34; class=&#34;headerlink&#34; title=&#34;4.2 裁剪&#34;&gt;&lt;/a&gt;4.2 裁剪&lt;/h3&gt;&lt;p&gt;左侧工具栏&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811105954296.png&#34; alt=&#34;image-20210811105954296&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-快速选择&#34;&gt;&lt;a href=&#34;#5-快速选择&#34; class=&#34;headerlink&#34; title=&#34;5. 快速选择&#34;&gt;&lt;/a&gt;5. &lt;strong&gt;快速选择&lt;/strong&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810222803903.png&#34; alt=&#34;image-20210810222803903&#34;&gt;&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810222821041.png&#34; alt=&#34;image-20210810222821041&#34;&gt;&lt;/p&gt;
&lt;p&gt;按住&lt;strong&gt;Alt&lt;/strong&gt;可以减掉多选的部分&lt;/p&gt;
&lt;h2 id=&#34;6-蒙版去除背景&#34;&gt;&lt;a href=&#34;#6-蒙版：去除背景&#34; class=&#34;headerlink&#34; title=&#34;6. 蒙版：去除背景&#34;&gt;&lt;/a&gt;6. &lt;strong&gt;蒙版&lt;/strong&gt;：去除背景&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;手动擦除&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810224839694.png&#34; alt=&#34;image-20210810224839694&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过快速选择&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111927148.png&#34; alt=&#34;image-20210811111927148&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过快速选择选中铅笔&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811112022283.png&#34; alt=&#34;image-20210811112022283&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加&lt;strong&gt;蒙版&lt;/strong&gt;去除背景&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811112050594.png&#34; alt=&#34;image-20210811112050594&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;显示其他图层当做新背景&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811112117201.png&#34; alt=&#34;image-20210811112117201&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;7-存储格式的区别&#34;&gt;&lt;a href=&#34;#7-存储格式的区别&#34; class=&#34;headerlink&#34; title=&#34;7. 存储格式的区别&#34;&gt;&lt;/a&gt;7. &lt;strong&gt;存储格式的区别&lt;/strong&gt;&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;PSD：ps格式，含所有编辑内容&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JPEG：在线发布的照片的最佳格式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PNG：包含透明度的图像&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;魔棒&lt;/strong&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103015647.png&#34; alt=&#34;image-20210811103015647&#34;&gt;：消除背景。&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103045724.png&#34; alt=&#34;image-20210811103045724&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;delete：&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103101940.png&#34; alt=&#34;image-20210811103101940&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+D：取消选择；或者选择→取消选择&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103138038.png&#34; alt=&#34;image-20210811103138038&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;存储为PNG&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-调配颜色&#34;&gt;&lt;a href=&#34;#8-调配颜色&#34; class=&#34;headerlink&#34; title=&#34;8. 调配颜色&#34;&gt;&lt;/a&gt;8. &lt;strong&gt;调配颜色&lt;/strong&gt;&lt;/h2&gt;&lt;p&gt;图像→调整→&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;亮度/对比度：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;亮度：增强高光&lt;/li&gt;
&lt;li&gt;对比度：让亮的地方更亮，暗的更暗&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;饱和度&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;自然饱和度：暗色的强度&lt;/li&gt;
&lt;li&gt;饱和度：所有颜色的强度，也就是&lt;strong&gt;鲜艳程度&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滤镜&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;图像→调整→照片滤镜：设置普通滤镜，复古、暖色、冷色等&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;滤镜→转为智能滤镜；滤镜→风格化→可转为&lt;strong&gt;油画&lt;/strong&gt;、&lt;strong&gt;浮雕&lt;/strong&gt;等&lt;/p&gt;
&lt;p&gt;设置好后，如果想更改，则双击油画滤镜图层&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120840955.png&#34; alt=&#34;image-20210811120840955&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;还原：编辑→还原&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;阴影/高光&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;阴影：阴影部分的颜色强度（一般照片的背景）&lt;/li&gt;
&lt;li&gt;高光：高光部分的颜色强度（一般是聚焦的部分）&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;黑白&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;9-仿制图章工具复制纹理图案&#34;&gt;&lt;a href=&#34;#9-仿制图章工具：复制纹理图案&#34; class=&#34;headerlink&#34; title=&#34;9. 仿制图章工具：复制纹理图案&#34;&gt;&lt;/a&gt;9. &lt;strong&gt;仿制图章工具&lt;/strong&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111116706.png&#34; alt=&#34;image-20210811111116706&#34;&gt;：复制纹理图案&lt;/h2&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111131419.png&#34; alt=&#34;image-20210811111131419&#34;&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111307849.png&#34; alt=&#34;image-20210811111307849&#34;&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111430576.png&#34; alt=&#34;image-20210811111430576&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;点击图章按钮&lt;/li&gt;
&lt;li&gt;按住Alt，点击要复制的中心&lt;/li&gt;
&lt;li&gt;松开Alt，在想要的地方进行复制填补&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;10-下拉菜单和透明度设置光照&#34;&gt;&lt;a href=&#34;#10-下拉菜单和透明度设置光照&#34; class=&#34;headerlink&#34; title=&#34;10. 下拉菜单和透明度设置光照&#34;&gt;&lt;/a&gt;10. 下拉菜单和透明度设置光照&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120209104.png&#34; alt=&#34;image-20210811120209104&#34;&gt;&lt;/p&gt;
&lt;p&gt;效果图：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120222978.png&#34; alt=&#34;image-20210811120222978&#34;&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120227848.png&#34; alt=&#34;image-20210811120227848&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;11-选择颜色&#34;&gt;&lt;a href=&#34;#11-选择颜色&#34; class=&#34;headerlink&#34; title=&#34;11. 选择颜色&#34;&gt;&lt;/a&gt;11. 选择颜色&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;吸管取色器&lt;/strong&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121249769.png&#34; alt=&#34;image-20210811121249769&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;色板选择&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121637303.png&#34; alt=&#34;image-20210811121637303&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;拾色器&lt;/strong&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121659893.png&#34; alt=&#34;image-20210811121659893&#34;&gt;&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121712644.png&#34; alt=&#34;image-20210811121712644&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;快速切换前/后景色，黑白前/后景色&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121901093.png&#34; alt=&#34;image-20210811121901093&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;12-画笔&#34;&gt;&lt;a href=&#34;#12-画笔&#34; class=&#34;headerlink&#34; title=&#34;12. 画笔&#34;&gt;&lt;/a&gt;12. 画笔&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;点击画笔工具&lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811122227074.png&#34; alt=&#34;image-20210811122227074&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置画笔&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811122245898.png&#34; alt=&#34;image-20210811122245898&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;设置透明度和流量&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811122312596.png&#34; alt=&#34;image-20210811122312596&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <updated>2021-08-10T14:06:13.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</id>
        <title>python使用技巧</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"/>
        <content type="html">&lt;h2 id=&#34;1-python2转python3&#34;&gt;&lt;a href=&#34;#1-python2转python3&#34; class=&#34;headerlink&#34; title=&#34;1. python2转python3&#34;&gt;&lt;/a&gt;1. python2转python3&lt;/h2&gt;&lt;p&gt;网上经常找到一些源码是使用python2的，看起来非常不方便，而python官方其实自带了python2转3的脚本，就在python3/Tools/scripts目录下&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20210727215611838.png&#34; alt=&#34;image-20210727215611838&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;使用方法：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;把2to3.py复制到要转换的python2代码&lt;strong&gt;同目录&lt;/strong&gt;下&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在该目录启动cmd控制台，输入&lt;/p&gt;
&lt;pre class=&#34; language-bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;python 2to3.py -w 文件夹/文件名
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20210727215820184.png&#34; alt=&#34;image-20210727215820184&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20210727215908158.png&#34; alt=&#34;image-20210727215908158&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我把python.exe重命名为了python39.exe，所以这里用的是python39&lt;/p&gt;
&lt;/blockquote&gt;
</content>
        <updated>2021-07-27T13:53:26.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/07/27/note/Python/pytorch/</id>
        <title>pytorch</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/07/27/note/Python/pytorch/"/>
        <content type="html">&lt;h1 id=&#34;一-安装&#34;&gt;&lt;a href=&#34;#一、-安装&#34; class=&#34;headerlink&#34; title=&#34;一、 安装&#34;&gt;&lt;/a&gt;一、 安装&lt;/h1&gt;&lt;p&gt;安装步骤详细看&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzMDEzMzA5L2FydGljbGUvZGV0YWlscy8xMDM5NjU2MTk=&#34;&gt;https://blog.csdn.net/qq_23013309/article/details/103965619&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;以下主要记录一些遇到的坑&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;我因为电脑上装了好几个版本的python，所以把python.exe以版本号重命名了，使用pip时按python39 -m pip install 包名安装。正常情况下只需pip install 包名即可&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-cuda安装成功但torchcudais_available输出false&#34;&gt;&lt;a href=&#34;#1-cuda安装成功，但torch-cuda-is-available-输出False&#34; class=&#34;headerlink&#34; title=&#34;1. cuda安装成功，但torch.cuda.is_available()输出False&#34;&gt;&lt;/a&gt;1. cuda安装成功，但torch.cuda.is_available()输出False&lt;/h2&gt;&lt;p&gt;原因是torch和torchvision安装成了cpu版&lt;/p&gt;
&lt;p&gt;解决方法：去&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb3dubG9hZC5weXRvcmNoLm9yZy93aGwvdG9yY2hfc3RhYmxlLmh0bWw=&#34;&gt;官网&lt;/span&gt;下载GPU版的torch（cu开头的）。下载完在文件路径用pip安装即可&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/image-20210727212106336.png&#34; alt=&#34;image-20210727212106336&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34; language-bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;python39 -m pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; torch-1.8.0-cp39-cp39-win_amd64.whl
python39 -m pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; torch-1.9.0+cu111-cp39-cp39-win_amd64.whl
或
pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; torch-1.8.0-cp39-cp39-win_amd64.whl
pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; torch-1.9.0+cu111-cp39-cp39-win_amd64.whl
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;要注意和python版本对应，如python38就下载cp38，否则安装不了，下载cp37的也不行&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-安装torch时报错torch-1x0-cp3x-cp3xm-win_amd64whl-is-not-a-supported-wheel-on-this-platform&#34;&gt;&lt;a href=&#34;#2-安装torch时报错torch-1-X-0-cp3X-cp3Xm-win-amd64-whl-is-not-a-supported-wheel-on-this-platform&#34; class=&#34;headerlink&#34; title=&#34;2. 安装torch时报错torch-1.X.0-cp3X-cp3Xm-win_amd64.whl is not a supported wheel on this platform.&#34;&gt;&lt;/a&gt;2. 安装torch时报错torch-1.X.0-cp3X-cp3Xm-win_amd64.whl is not a supported wheel on this platform.&lt;/h2&gt;&lt;p&gt;原因是python版本对不上，上面讲到过，python39就下cp39，不要下cp37、cp38什么的&lt;/p&gt;
&lt;h2 id=&#34;3-torch安装完成后import-torch报错runtimeerror-module-compiled-against-api-version-0xc-but-this-version-of-numpy-is-0xb&#34;&gt;&lt;a href=&#34;#3-torch安装完成后import-torch报错RuntimeError-module-compiled-against-API-version-0xc-but-this-version-of-numpy-is-0xb&#34; class=&#34;headerlink&#34; title=&#34;3. torch安装完成后import torch报错RuntimeError: module compiled against API version 0xc but this version of numpy is 0xb&#34;&gt;&lt;/a&gt;3. torch安装完成后import torch报错RuntimeError: module compiled against API version 0xc but this version of numpy is 0xb&lt;/h2&gt;&lt;p&gt;原因：numpy版本跟不上&lt;/p&gt;
&lt;p&gt;解决：更新numpy&lt;/p&gt;
&lt;pre class=&#34; language-bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;python39 -m pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; numpy --upgrade 
或
pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; numpy --upgrade 
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;pytorch简介&#34;&gt;&lt;a href=&#34;#pytorch简介&#34; class=&#34;headerlink&#34; title=&#34;pytorch简介&#34;&gt;&lt;/a&gt;pytorch简介&lt;/h1&gt;&lt;p&gt;pytorch是深度学习的框架，或者说是库。类似sklearn之于机器学习。&lt;/p&gt;
&lt;h2 id=&#34;1-基本概念&#34;&gt;&lt;a href=&#34;#1-基本概念&#34; class=&#34;headerlink&#34; title=&#34;1. 基本概念&#34;&gt;&lt;/a&gt;1. 基本概念&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;张量（tensor）：&lt;/strong&gt;即向量，类似于&lt;code&gt;NumPy&lt;/code&gt;的&lt;code&gt;ndarray&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;tensor&lt;/code&gt;可以使用像标准的NumPy一样的各种索引操作：如&lt;code&gt;x[:,1]&lt;/code&gt;返回&lt;strong&gt;张量x&lt;/strong&gt;第2列的内容&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-基本用法&#34;&gt;&lt;a href=&#34;#2-基本用法&#34; class=&#34;headerlink&#34; title=&#34;2. 基本用法&#34;&gt;&lt;/a&gt;2. 基本用法&lt;/h2&gt;&lt;h3 id=&#34;21-初始化张量&#34;&gt;&lt;a href=&#34;#2-1-初始化张量&#34; class=&#34;headerlink&#34; title=&#34;2.1 初始化张量&#34;&gt;&lt;/a&gt;2.1 初始化张量&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt; 创建一个没有初始化5*3的矩阵&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;empty&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
tensor([[2.2391e-19, 4.5869e-41, 1.4191e-17],
        [4.5869e-41, 0.0000e+00, 0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00],
        [0.0000e+00, 0.0000e+00, 0.0000e+00]])&#34;&#34;&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;创建一个随机矩阵&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
tensor([[0.5307, 0.9752, 0.5376],
        [0.2789, 0.7219, 0.1254],
        [0.6700, 0.6100, 0.3484],
        [0.0922, 0.0779, 0.2446],
        [0.2967, 0.9481, 0.1311]])&#34;&#34;&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造一个填满&lt;code&gt;0&lt;/code&gt;且数据类型为&lt;code&gt;long&lt;/code&gt;的矩阵:&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;long&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建全为&lt;code&gt;1&lt;/code&gt;的矩阵&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ones&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接从&lt;strong&gt;数据&lt;/strong&gt;构造张量&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;tensor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#tensor([5.5000, 3.0000])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-获取张量信息&#34;&gt;&lt;a href=&#34;#2-2-获取张量信息&#34; class=&#34;headerlink&#34; title=&#34;2.2 获取张量信息&#34;&gt;&lt;/a&gt;2.2 获取张量信息&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;获取张量形状&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#x是5*3的矩阵&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#torch.Size([5, 3])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;torch.Size&lt;/code&gt;本质上还是&lt;code&gt;tuple&lt;/code&gt;，所以支持tuple的一切操作。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;改变张量形状&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#size(4,4)&lt;/span&gt;
y&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;view&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#size(16)&lt;/span&gt;
z&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;view&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#size(2,8),-1表示自动匹配，如此处-1=4*4/8=2，即2行8列&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;23-张量运算&#34;&gt;&lt;a href=&#34;#2-3-张量运算&#34; class=&#34;headerlink&#34; title=&#34;2.3 张量运算&#34;&gt;&lt;/a&gt;2.3 张量运算&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;加法&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;y
torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#以上等价，张量对应位置相加&lt;/span&gt;
torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;out&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#把和赋值给result&lt;/span&gt;
y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add_&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#y=y+x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;任何一个in-place改变张量的操作后面都固定一个&lt;code&gt;_&lt;/code&gt;。例如&lt;code&gt;x.copy_(y)&lt;/code&gt;、&lt;code&gt;x.t_()&lt;/code&gt;将更改x&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;24-对接numpy&#34;&gt;&lt;a href=&#34;#2-4-对接numpy&#34; class=&#34;headerlink&#34; title=&#34;2.4 对接numpy&#34;&gt;&lt;/a&gt;2.4 对接&lt;code&gt;numpy&lt;/code&gt;&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;tensor转numpy&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;numpy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#b=[1. 1. 1. 1. 1.]&lt;/span&gt;
a&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add_&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#a.add_(1)和torch.add(a,1,a)可以让b和a同步更新。操作符=则不行&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#a=tensor([2., 2., 2., 2., 2.])&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#b=[2. 2. 2. 2. 2.]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;numpy转tensor&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;from_numpy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#a=tensor([1. 1. 1. 1. 1.])&lt;/span&gt;
np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;add&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; out&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#a=tensor([2., 2., 2., 2., 2.])&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#b=[2. 2. 2. 2. 2.]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;25-将张量移动到指定设备cpugpu&#34;&gt;&lt;a href=&#34;#2-5-将张量移动到指定设备（CPU-GPU）&#34; class=&#34;headerlink&#34; title=&#34;2.5 将张量移动到指定设备（CPU/GPU）&#34;&gt;&lt;/a&gt;2.5 将张量移动到指定设备（CPU/GPU）&lt;/h3&gt;&lt;p&gt;张量可以使用&lt;code&gt;.to&lt;/code&gt;方法移动到任何设备（device）上：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 当GPU可用时,我们可以运行以下代码&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 我们将使用`torch.device`来将tensor移入和移出GPU&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cuda&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;is_available&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    device &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;device&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cuda&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# a CUDA device object&lt;/span&gt;
    y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ones_like&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; device&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;device&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 直接在GPU上创建tensor&lt;/span&gt;
    x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;device&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;                       &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 或者使用`.to(&#34;cuda&#34;)`方法&lt;/span&gt;
    z &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; y
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;z&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;z&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cpu&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;double&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;       &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# `.to`也能在移动时改变dtype&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;tensor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.0445&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; device&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;cuda:0&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
tensor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.0445&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float64&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二-torchnn&#34;&gt;&lt;a href=&#34;#二、-torch-nn&#34; class=&#34;headerlink&#34; title=&#34;二、  torch.nn&#34;&gt;&lt;/a&gt;二、  &lt;code&gt;torch.nn&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&#34;1-torchnnparameter&#34;&gt;&lt;a href=&#34;#1-torch-nn-Parameter&#34; class=&#34;headerlink&#34; title=&#34;1. torch.nn.Parameter()&#34;&gt;&lt;/a&gt;1. &lt;code&gt;torch.nn.Parameter()&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kOGI3N2NjMDI0MTA=&#34;&gt;https://www.jianshu.com/p/d8b77cc02410&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;pytorch中用于保存Variable的函数。一般将参数W和b转换成parameter类型，可供训练中改动&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Parameter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Tensor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;RNN_HID_SIZE&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; input_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Parameter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Tensor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;RNN_HID_SIZE&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#parameter.data得到tensor数据 &lt;/span&gt;
W&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;uniform_&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;stdv&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stdv&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#初始化&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;将一个不可训练的类型Tensor转换成可以训练的类型parameter&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并将这个parameter绑定到这个module里面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;经过类型转换这个self.v变成了模型的一部分，成为了模型中根据训练可以改动的参数了。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;三-torchnnfunctional&#34;&gt;&lt;a href=&#34;#三、-torch-nn-functional&#34; class=&#34;headerlink&#34; title=&#34;三、 torch.nn.functional&#34;&gt;&lt;/a&gt;三、 &lt;code&gt;torch.nn.functional&lt;/code&gt;&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这是pytorch的主要库，里边包含了绝大部分的深度学习函数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-激活函数&#34;&gt;&lt;a href=&#34;#1-激活函数&#34; class=&#34;headerlink&#34; title=&#34;1. 激活函数&#34;&gt;&lt;/a&gt;1. 激活函数&lt;/h2&gt;&lt;h3 id=&#34;11-relu&#34;&gt;&lt;a href=&#34;#1-1-relu&#34; class=&#34;headerlink&#34; title=&#34;1.1 relu()&#34;&gt;&lt;/a&gt;1.1 &lt;code&gt;relu()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/image-20210621220811079.png&#34; alt=&#34;image-20210621220811079&#34;&gt; &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;调用方法&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;functional&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;relu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; inplace&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#input：函数中的自变量x&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也可自定义&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;relu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;maximum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-线性函数&#34;&gt;&lt;a href=&#34;#2-线性函数&#34; class=&#34;headerlink&#34; title=&#34;2. 线性函数&#34;&gt;&lt;/a&gt;2. 线性函数&lt;/h2&gt;&lt;h3 id=&#34;21-linear&#34;&gt;&lt;a href=&#34;#2-1-linear&#34; class=&#34;headerlink&#34; title=&#34;2.1 linear()&#34;&gt;&lt;/a&gt;2.1 &lt;code&gt;linear()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;$$&lt;br&gt;f(x)=ax+b&lt;br&gt;$$&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;functional&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linear&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weight&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; bias&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#input: 自变量x&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#weight: 权重a&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#bias: 偏置b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-损失函数&#34;&gt;&lt;a href=&#34;#3-损失函数&#34; class=&#34;headerlink&#34; title=&#34;3. 损失函数&#34;&gt;&lt;/a&gt;3. 损失函数&lt;/h2&gt;&lt;h3 id=&#34;31-交叉熵误差cross_entropy&#34;&gt;&lt;a href=&#34;#3-1-交叉熵误差cross-entropy&#34; class=&#34;headerlink&#34; title=&#34;3.1 交叉熵误差cross_entropy()&#34;&gt;&lt;/a&gt;3.1 交叉熵误差&lt;code&gt;cross_entropy()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/image-20210622160932219.png&#34; alt=&#34;image-20210622160932219&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;调用方法：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;functional&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cross_entropy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weight&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_average&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#input: 预测值&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#target: 监督值&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#（大概应该是这样？）&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也可自定义&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cross_entropy_error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    损失函数：交叉熵误差
    :param y: 预测值，np数组
    :param t: 监督值,np数组
    :return: 交叉熵误差float
    &#34;&#34;&#34;&lt;/span&gt;
    delta&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#10的-7次，为了防止log0导致的下溢&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;delta&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;32-二元交叉熵binary_cross_entropy&#34;&gt;&lt;a href=&#34;#3-2-二元交叉熵binary-cross-entropy&#34; class=&#34;headerlink&#34; title=&#34;3.2 二元交叉熵binary_cross_entropy()&#34;&gt;&lt;/a&gt;3.2 二元交叉熵&lt;code&gt;binary_cross_entropy()&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/equation-1628496458752.svg&#34; alt=&#34;[公式]&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中， &lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/equation%20(3).svg&#34; alt=&#34;[公式]&#34;&gt;， &lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/equation%20(4).svg&#34; alt=&#34;[公式]&#34;&gt; 。&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;functional&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;binary_cross_entropy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weight&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_average&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-二元逻辑交叉熵binary_cross_entropy_with_logits&#34;&gt;&lt;a href=&#34;#3-3-二元逻辑交叉熵binary-cross-entropy-with-logits&#34; class=&#34;headerlink&#34; title=&#34;3.3 二元逻辑交叉熵binary_cross_entropy_with_logits()&#34;&gt;&lt;/a&gt;3.3 二元逻辑交叉熵&lt;code&gt;binary_cross_entropy_with_logits()&lt;/code&gt;&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;with_logits就是把sigmod函数&lt;strong&gt;集成&lt;/strong&gt;进交叉熵函数，就不需要之后再调用一边sigmod函数了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 &lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/equation%20(5)-1628496675068.svg&#34; alt=&#34;[公式]&#34;&gt; 外边复合一层sigmoid函数，即 &lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/equation%20(6).svg&#34; alt=&#34;[公式]&#34;&gt; ，损失函数变为：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/07/27/note/Python/pytorch/equation%20(7)-1628496675069.svg&#34; alt=&#34;[公式]&#34;&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;自定义&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;functional&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;binary_cross_entropy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weight&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_average&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    :param input: 输入，任意形状的张量--神经网络预测结果
    :param target: 靶向值，即用于验证的标签值：与输入形状相同的张量
    :param weight: 权重，可用于mask的作用，和input形状一致
    :return: 损失值（误差），可能是向量，也可能是一个float值
    &#34;&#34;&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也可自定义&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;binary_cross_entropy_with_logits&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; target&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weight&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; size_average&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; reduce&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    损失函数，二元交叉熵。可以直接调用nn.functional.binary_cross_entropy_with_logits()
    :param size_average: 可选，已弃用。是否求平均：默认情况下，损失是批次中每个损失元素的平均值。注意，对于有些损失，每个样品有多个元素。
    :param reduce: 可选，不推荐使用。是否压缩，如把向量求和；
    :return: 损失值（误差），可能是向量，也可能是一个float值
    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;not&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; input&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;raise&lt;/span&gt; ValueError&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Target size (&amp;amp;#123;&amp;amp;#125;) must be the same as input size (&amp;amp;#123;&amp;amp;#125;)&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;format&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;target&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; input&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    max_val &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;input&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;clamp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;min&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; input &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; target &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; max_val &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;max_val&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;input &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; max_val&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; weight &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;not&lt;/span&gt; None&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; loss &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; weight

    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;not&lt;/span&gt; reduce&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; loss
    &lt;span class=&#34;token keyword&#34;&gt;elif&lt;/span&gt; size_average&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; loss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; loss&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;四-torchtensor&#34;&gt;&lt;a href=&#34;#四、-torch-Tensor&#34; class=&#34;headerlink&#34; title=&#34;四、 torch.Tensor&#34;&gt;&lt;/a&gt;四、 &lt;code&gt;torch.Tensor&lt;/code&gt;&lt;/h1&gt;&lt;p&gt;Tensor：张量，也就是向量。相当于numpy的array&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;torch.Tensor(2,3)&lt;/code&gt;：随机生成2X3的矩阵，float类型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Data tyoe&lt;/th&gt;
&lt;th&gt;CPU tensor&lt;/th&gt;
&lt;th&gt;GPU tensor&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;32-bit floating point&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.FloatTensor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.FloatTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64-bit floating point&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.DoubleTensor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.DoubleTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16-bit floating point&lt;/td&gt;
&lt;td&gt;N/A&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.HalfTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-bit integer (unsigned)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.ByteTensor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.ByteTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8-bit integer (signed)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.CharTensor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.CharTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16-bit integer (signed)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.ShortTensor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.ShortTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32-bit integer (signed)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.IntTensor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.IntTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64-bit integer (signed)&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.LongTensor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;torch.cuda.LongTensor&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;code&gt;torch.Tensor&lt;/code&gt;是默认的tensor类型（&lt;code&gt;torch.FlaotTensor&lt;/code&gt;）的简称。&lt;/p&gt;
</content>
        <updated>2021-07-27T13:13:27.403Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/06/25/note/Python/numpy/</id>
        <title>numpy常用函数</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/06/25/note/Python/numpy/"/>
        <content type="html">&lt;h1 id=&#34;一-常用函数&#34;&gt;&lt;a href=&#34;#一、-常用函数&#34; class=&#34;headerlink&#34; title=&#34;一、 常用函数&#34;&gt;&lt;/a&gt;一、 常用函数&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;注意：文本以array代表np.array类型的&lt;strong&gt;对象&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-创建&#34;&gt;&lt;a href=&#34;#1-创建&#34; class=&#34;headerlink&#34; title=&#34;1. 创建&#34;&gt;&lt;/a&gt;1. 创建&lt;/h2&gt;&lt;h3 id=&#34;11-自定义创建&#34;&gt;&lt;a href=&#34;#1-1-自定义创建&#34; class=&#34;headerlink&#34; title=&#34;1.1 自定义创建&#34;&gt;&lt;/a&gt;1.1 自定义创建&lt;/h3&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
array&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#定义一个numpy类型矩阵&lt;/span&gt;
np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#括号里直接放数组，则是把list类型转换成numpy&lt;/span&gt;
np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;int&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#也可以放表达式，输出结果是bool型的numpy，x是数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;指定形状创建&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros_like&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#返回形状和x一致的矩阵，元素全部为0&lt;/span&gt;
np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#输出形状为shape(1,2)的全是0的矩阵&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;循环形式创建&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt; x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#在-5.0到5.0以0.1为单位(左闭右开)生成numpy数组[-5.0，-4.9....。4.9]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-随机创建&#34;&gt;&lt;a href=&#34;#1-2-随机创建&#34; class=&#34;headerlink&#34; title=&#34;1.2 随机创建&#34;&gt;&lt;/a&gt;1.2 随机创建&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;随机抽取数创建：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;choice&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#从list中随机抽取n个元素组成array&lt;/span&gt;
np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;choice&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#从[0,a)中随机抽取b个元素组成array&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;生成随机数创建：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#随机创建一个长10000的向量&lt;/span&gt;
a2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#随机创建一个100*100的向量&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;rand生成的随机数是&amp;lt;1的&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;2-nparray的性质&#34;&gt;&lt;a href=&#34;#2-np-array的性质&#34; class=&#34;headerlink&#34; title=&#34;2. np.array的性质&#34;&gt;&lt;/a&gt;2. np.array的性质&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;np.array是n维向量（矩阵），在Python中，多维向量类型常用的主要有3个：list、DataFrame和np.array。后两者显然更适合科研数据处理，其中，dataframe主要倾向于&lt;strong&gt;数据类型&lt;/strong&gt;、&lt;strong&gt;数据格式&lt;/strong&gt;等处理；np.array主要倾向于&lt;strong&gt;矩阵运算&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-矩阵运算&#34;&gt;&lt;a href=&#34;#3-矩阵运算&#34; class=&#34;headerlink&#34; title=&#34;3. 矩阵运算&#34;&gt;&lt;/a&gt;3. 矩阵运算&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;乘法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.dot(x,y)&lt;/code&gt;：矩阵乘法（行X列），&lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;不一定是&lt;code&gt;np.array&lt;/code&gt;类型&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x*y&lt;/code&gt;：对应位置相乘。1. &lt;code&gt;x&lt;/code&gt;必须是&lt;code&gt;np.array&lt;/code&gt;类型。2. &lt;code&gt;x&lt;/code&gt;和&lt;code&gt;y&lt;/code&gt;必须形状相同&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;加减法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x+y&lt;/code&gt;/&lt;code&gt;x-y&lt;/code&gt;：对应位置相加/键、减&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;逻辑运算：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;x&amp;lt;2&lt;/code&gt;：每个元素和2比较，返回一个bool类型矩阵&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
[[False False]
 [False  True]
 [ True  True]]
&#34;&#34;&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;求和：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;np.sum(x)&lt;/code&gt;：&lt;strong&gt;所有&lt;/strong&gt;元素相加&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;4-增删改查&#34;&gt;&lt;a href=&#34;#4-增删改查&#34; class=&#34;headerlink&#34; title=&#34;4. 增删改查&#34;&gt;&lt;/a&gt;4. 增删改查&lt;/h2&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
              &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;41-增&#34;&gt;&lt;a href=&#34;#4-1-增&#34; class=&#34;headerlink&#34; title=&#34;4.1 增&#34;&gt;&lt;/a&gt;4.1 增&lt;/h3&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;b&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;insert&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#b是被插数组（二维）,a是插入数组（一维），第一个0是插入的位置，第二个0表示插入的是一位数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;42-删&#34;&gt;&lt;a href=&#34;#4-2-删&#34; class=&#34;headerlink&#34; title=&#34;4.2 删&#34;&gt;&lt;/a&gt;4.2 删&lt;/h3&gt;&lt;h3 id=&#34;43-改&#34;&gt;&lt;a href=&#34;#4-3-改&#34; class=&#34;headerlink&#34; title=&#34;4.3 改&#34;&gt;&lt;/a&gt;4.3 改&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;类型转换：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array.astype(np.float32) &lt;/code&gt;：转换成固定的数据类型float32并返回&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;矩阵转置：&lt;/strong&gt;（行列互换）&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x.T&lt;/code&gt;：直接.T即可&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;44-查&#34;&gt;&lt;a href=&#34;#4-4-查&#34; class=&#34;headerlink&#34; title=&#34;4.4 查&#34;&gt;&lt;/a&gt;4.4 查&lt;/h3&gt;&lt;p&gt;和dataframe的&lt;code&gt;.iloc[]&lt;/code&gt;用法差不多&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;取单个元素：&lt;/strong&gt;&lt;code&gt;x[1,1]&lt;/code&gt;：#矩阵第2行第2列的元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;取行向量：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[1]&lt;/code&gt;：第&lt;strong&gt;2&lt;/strong&gt;行的向量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x[1,...]&lt;/code&gt;：第&lt;strong&gt;2&lt;/strong&gt;的向量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x[[1,2]]&lt;/code&gt;：第&lt;strong&gt;2,3&lt;/strong&gt;行的向量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;取列向量：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;x[:,1]&lt;/code&gt;  ：矩阵第&lt;strong&gt;2&lt;/strong&gt;列的向量（从0开始）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x[...,1]&lt;/code&gt;：第&lt;strong&gt;2&lt;/strong&gt;列向量&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y[:,[1,2]]&lt;/code&gt;：矩阵第&lt;strong&gt;2,3&lt;/strong&gt;列的向量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;获取矩阵形状：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;array.shape[n]&lt;/code&gt;：返回矩阵第&lt;strong&gt;n+1&lt;/strong&gt;维的长度&lt;/p&gt;
&lt;p&gt;如：&lt;code&gt;x[0]&lt;/code&gt;返回&lt;strong&gt;3&lt;/strong&gt;，&lt;code&gt;x[1]&lt;/code&gt;返回&lt;strong&gt;2&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​    最外面那层&lt;code&gt;[]&lt;/code&gt;包裹的就是第1维（行）&lt;/p&gt;
&lt;p&gt;​    里面一层&lt;code&gt;[]&lt;/code&gt;是第2维（列）&lt;/p&gt;
&lt;p&gt;​    再里面是第3维&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;np.shape(x)&lt;/code&gt;：返回矩阵&lt;code&gt;x&lt;/code&gt;的各维度长度，此例返回**(3, 2)**&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;np.ndim(x)&lt;/code&gt;：返回矩阵的&lt;strong&gt;维数&lt;/strong&gt;，此例返回&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;获取特殊值的索引：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;array.argmax()&lt;/code&gt;：返回向量最大值的索引&lt;/li&gt;
&lt;li&gt;&lt;code&gt;np.argmax(array,axis=n)&lt;/code&gt;：返回向量在&lt;strong&gt;第n+1维&lt;/strong&gt;最大值的索引，可不写&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二-其他函数&#34;&gt;&lt;a href=&#34;#二、-其他函数&#34; class=&#34;headerlink&#34; title=&#34;二、 其他函数&#34;&gt;&lt;/a&gt;二、 其他函数&lt;/h1&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;
&lt;span class=&#34;token number&#34;&gt;9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; numpy&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;frombuffer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;buffer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dtype&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;float&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; count&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; offset&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#通过使用指定的缓冲区来创建数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;参数&lt;/p&gt;
&lt;p&gt;  缓冲区：它表示暴露缓冲区接口的对象。&lt;/p&gt;
&lt;p&gt;  dtype：代表返回的数据类型数组的数据类型。&lt;/p&gt;
&lt;p&gt;  count：代表返回的ndarray的长度。默认值为-1。&lt;/p&gt;
&lt;p&gt;  偏移量：代表读取的起始位置。默认值为0。&lt;/p&gt;
&lt;h3 id=&#34;23-迭代nditer&#34;&gt;&lt;a href=&#34;#2-3-迭代nditer&#34; class=&#34;headerlink&#34; title=&#34;2.3 迭代nditer&#34;&gt;&lt;/a&gt;2.3 迭代nditer&lt;/h3&gt;&lt;p&gt;it=np.nditer(a, flags=[&lt;strong&gt;‘multi_index’&lt;/strong&gt;], op_flags=[&lt;strong&gt;‘readwrite’&lt;/strong&gt;])&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;flags&lt;/th&gt;
&lt;th&gt;op_flags&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;迭代的数组&lt;/td&gt;
&lt;td&gt;&lt;strong&gt;‘multi_index’*&lt;em&gt;&lt;strong&gt;：正常迭代（&lt;/strong&gt;每次迭代可以跟踪一种索引类型&lt;/em&gt;*）&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;设置对原数组的权限  默认read_only&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;while not it.finished:&lt;br&gt;   print(it[0],it.multi_index)&lt;br&gt;   it.iternext()&lt;/p&gt;
&lt;p&gt;/&lt;/p&gt;
&lt;p&gt;for x in it:&lt;/p&gt;
&lt;p&gt;·it.finished:迭代器是否到最后&lt;/p&gt;
&lt;p&gt;·it.iternext()：迭代器往后迭代一个位置&lt;/p&gt;
&lt;p&gt;·it.multi_index:迭代器所指元素在原数组的位置（行列…）&lt;/p&gt;
</content>
        <updated>2021-06-25T12:38:09.829Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/06/21/note/Python/jupyter/</id>
        <title>jupty使用方法</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/06/21/note/Python/jupyter/"/>
        <content type="html">&lt;h1 id=&#34;安装&#34;&gt;&lt;a href=&#34;#安装&#34; class=&#34;headerlink&#34; title=&#34;安装&#34;&gt;&lt;/a&gt;安装&lt;/h1&gt;&lt;p&gt;安装了anaconda, 直接使用命令行： &lt;code&gt;conda install jupyter notebook&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;使用命令行： &lt;code&gt;pip install jupyter&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;打开&#34;&gt;&lt;a href=&#34;#打开&#34; class=&#34;headerlink&#34; title=&#34;打开&#34;&gt;&lt;/a&gt;打开&lt;/h1&gt;&lt;p&gt;使用命令行： &lt;code&gt;jupyter notebook&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;关闭&#34;&gt;&lt;a href=&#34;#关闭&#34; class=&#34;headerlink&#34; title=&#34;关闭&#34;&gt;&lt;/a&gt;关闭&lt;/h1&gt;&lt;p&gt;在命令符提示窗口：ctrl+C停止服务，双击则跳过确认&lt;/p&gt;
&lt;h1 id=&#34;简要说明&#34;&gt;&lt;a href=&#34;#简要说明&#34; class=&#34;headerlink&#34; title=&#34;简要说明&#34;&gt;&lt;/a&gt;简要说明&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;选择markdown时，可编辑标题和文本&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/21/note/Python/jupyter/201803171927340&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;使用快捷键shift+enter : 执行单元格代码并移动到下一个单元格 run cell,select below&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;              ctrl+enter : 运行当前单元格代码 run selected cells
              
              alt+enter : 运行当前单元格代码并创建下一个单元格 run cell and insert below
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/21/note/Python/jupyter/20180317193059669&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;&lt;p&gt;选择单元格，enter进入编辑格式，esc进入命令格式。 进入命令格式后，H–查看所有快捷键，M–切换成markdown单元，Y–切换成代码单元，B–在本单元的下方增加一个单元 。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Jupyter Note 的markdown单元格内可以使用latex语法进行数学公式编辑。&lt;/p&gt;
&lt;p&gt;文本行中插入数学公式用一对$  ;&lt;/p&gt;
&lt;p&gt;文本行中插入数学块用一对 $$.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/21/note/Python/jupyter/20180317203421119&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;&lt;p&gt;接收HTML代码，可以在markdown单元格内实现更加丰富的样式，添加图片等。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/21/note/Python/jupyter/2018031722555929&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可以将notebook导出为多种格式–HTML, Markdown, ReST, PDF(通过Latex), Raw Python.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;魔术关键字  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lweXRob24ucmVhZHRoZWRvY3MuaW8vZW4vc3RhYmxlL2ludGVyYWN0aXZlL21hZ2ljcy5odG1s&#34;&gt;http://ipython.readthedocs.io/en/stable/interactive/magics.html&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;幻灯片的制作   &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84NjExNzYxM2I3YTY=&#34;&gt;https://www.jianshu.com/p/86117613b7a6&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;查看.ipynb文件的方法               &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;①GitHub中直接打开 ②可以把 .ipynb 文件对应的github之类的下载链接复制到 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9uYnZpZXdlci5qdXB5dGVyLm9yZy8=&#34;&gt;https://nbviewer.jupyter.org/&lt;/span&gt; 中查看 ③安装anaconda, 把 .ipynb 文件复制到C：Users\name目录下面,打开Jupyter notebook. 或cmd,先cd到目标文件夹再jupyter notebook&lt;/p&gt;
&lt;ol start=&#34;10&#34;&gt;
&lt;li&gt;运行python文件：&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;①%run file.py ②！python test.py  &lt;/p&gt;
&lt;p&gt;导入外部代码：    %load test.py&lt;/p&gt;
&lt;ol start=&#34;11&#34;&gt;
&lt;li&gt;&lt;p&gt;为Jupyter Notebook 添加目录 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNDAyOTU3OD9yZWZlcj1sZWFybk1M&#34;&gt;点击打开链接&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用matplotlib：  %matplotlib inline&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/21/note/Python/jupyter/20180317233738117&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;————————————————&lt;br&gt;版权声明：本文为CSDN博主「李国菁」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。&lt;br&gt;原文链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MTk1MTk3L2FydGljbGUvZGV0YWlscy83OTU5NDczNQ==&#34;&gt;https://blog.csdn.net/qq_38195197/article/details/79594735&lt;/span&gt;&lt;/p&gt;
</content>
        <updated>2021-06-21T08:13:57.416Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</id>
        <title>西瓜书复习及其部分代码实现</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
        <content type="html">&lt;h1 id=&#34;数学符号&#34;&gt;&lt;a href=&#34;#数学符号&#34; class=&#34;headerlink&#34; title=&#34;数学符号&#34;&gt;&lt;/a&gt;数学符号&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;argmin&lt;/code&gt;：表示函数取最小值时自变量的集合&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;一-绪论&#34;&gt;&lt;a href=&#34;#一、-绪论&#34; class=&#34;headerlink&#34; title=&#34;一、 绪论&#34;&gt;&lt;/a&gt;一、 绪论&lt;/h1&gt;&lt;h2 id=&#34;1-基本术语及概念&#34;&gt;&lt;a href=&#34;#1-基本术语及概念&#34; class=&#34;headerlink&#34; title=&#34;1. 基本术语及概念&#34;&gt;&lt;/a&gt;1. 基本术语及概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;特征(feature)&lt;strong&gt;：样本的某个&lt;/strong&gt;属性&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;属性空间/样本空间&lt;/strong&gt;：一条属性是一个&lt;strong&gt;维度&lt;/strong&gt;，n条属性看作是&lt;strong&gt;n维空间&lt;/strong&gt;。每个样本可以在该空间找到自己的&lt;strong&gt;坐标&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;维数&lt;/strong&gt;：样本的特征/属性数&lt;/li&gt;
&lt;li&gt;**数据集(dataSet)**：一组样本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;标记&lt;/strong&gt;：训练样本的&lt;strong&gt;结果&lt;/strong&gt;。如西瓜是好瓜还是坏瓜。&lt;/li&gt;
&lt;li&gt;**样例(example)**：拥有标记信息的示例 &lt;/li&gt;
&lt;li&gt;&lt;strong&gt;分类(classificaation)/回归(regression)&lt;strong&gt;：预测&lt;/strong&gt;离散值&lt;/strong&gt;为分类，如好瓜、坏瓜；预测&lt;strong&gt;连续值&lt;/strong&gt;为回归，如成熟度0.95&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最小二乘&lt;/strong&gt;：最小二乘法是一种数学优化技术，它通过&lt;strong&gt;最小化误差的平方和&lt;/strong&gt;找到一组数据的&lt;strong&gt;最佳函数&lt;/strong&gt;匹配。&lt;ul&gt;
&lt;li&gt;几何意义：求一条线使得所有点到该线的&lt;strong&gt;距离平方和&lt;/strong&gt;最小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;权重ω：&lt;/strong&gt;代表各参数的&lt;strong&gt;重要性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;偏置b：&lt;/strong&gt;在神经网络中表示该神经元被激活的&lt;strong&gt;容易程度&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激活函数：&lt;/strong&gt;神经网络中，将每层输入信号(a=wx+b)转换为输出信号，其作用是决定该神经元是否被激活&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-激活函数&#34;&gt;&lt;a href=&#34;#2-激活函数&#34; class=&#34;headerlink&#34; title=&#34;2. 激活函数&#34;&gt;&lt;/a&gt;2. 激活函数&lt;/h2&gt;&lt;p&gt;有下激活函数所示，绝大多数激活函数在特定范围为0，即不被激活，也就意味着该神经元对后序网络没有信息传递&lt;/p&gt;
&lt;h3 id=&#34;21-阶跃函数&#34;&gt;&lt;a href=&#34;#2-1-阶跃函数&#34; class=&#34;headerlink&#34; title=&#34;2.1 阶跃函数&#34;&gt;&lt;/a&gt;2.1 阶跃函数&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220755046.png&#34; alt=&#34;image-20210621220755046&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-sigmoid函数&#34;&gt;&lt;a href=&#34;#2-2-sigmoid函数&#34; class=&#34;headerlink&#34; title=&#34;2.2 sigmoid函数&#34;&gt;&lt;/a&gt;2.2 sigmoid函数&lt;/h3&gt;&lt;p&gt;​     &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220802439.png&#34; alt=&#34;image-20210621220802439&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;23-relu函数&#34;&gt;&lt;a href=&#34;#2-3-ReLU函数&#34; class=&#34;headerlink&#34; title=&#34;2.3 ReLU函数&#34;&gt;&lt;/a&gt;2.3 ReLU函数&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220811079.png&#34; alt=&#34;image-20210621220811079&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-softmax函数最后一层输出层的激活函数&#34;&gt;&lt;a href=&#34;#2-4-softmax函数（最后一层输出层的激活函数）&#34; class=&#34;headerlink&#34; title=&#34;2.4 softmax函数（最后一层输出层的激活函数）&#34;&gt;&lt;/a&gt;2.4 softmax函数（最后一层输出层的激活函数）&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220818680.png&#34; alt=&#34;image-20210621220818680&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;25-函数图&#34;&gt;&lt;a href=&#34;#2-5-函数图&#34; class=&#34;headerlink&#34; title=&#34;2.5 函数图&#34;&gt;&lt;/a&gt;2.5 函数图&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220826903.png&#34; alt=&#34;image-20210621220826903&#34;&gt;其中：深蓝色的是relu，虚线是阶跃函数，蓝绿色的是sigmod函数&lt;/p&gt;
&lt;h2 id=&#34;3-梯度下降法&#34;&gt;&lt;a href=&#34;#3-梯度下降法&#34; class=&#34;headerlink&#34; title=&#34;3. 梯度下降法&#34;&gt;&lt;/a&gt;3. 梯度下降法&lt;/h2&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210710171023412.png&#34; alt=&#34;image-20210710171023412&#34;&gt;θ是属性集合，在一维函数是x，二维函数一般是x、y&lt;/p&gt;
&lt;p&gt;因为是往梯度负方向走，所以是减法&lt;/p&gt;
&lt;h2 id=&#34;梯度&#34;&gt;&lt;a href=&#34;#梯度&#34; class=&#34;headerlink&#34; title=&#34;梯度&#34;&gt;&lt;/a&gt;梯度&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbm9sdXllL3AvMTExMDg1MTMuaHRtbA==&#34;&gt;https://www.cnblogs.com/noluye/p/11108513.html&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;缺点&#34;&gt;&lt;a href=&#34;#缺点：&#34; class=&#34;headerlink&#34; title=&#34;缺点：&#34;&gt;&lt;/a&gt;缺点：&lt;/h2&gt;&lt;p&gt;​    可能会因为梯度过小，无法收敛，如下图(x,y)=(3,-3)时&lt;/p&gt;
&lt;h2 id=&#34;代码实现&#34;&gt;&lt;a href=&#34;#代码实现：&#34; class=&#34;headerlink&#34; title=&#34;代码实现：&#34;&gt;&lt;/a&gt;代码实现：&lt;/h2&gt;&lt;p&gt;以f(x,y)=−e−(x2+y2)为例&lt;/p&gt;
&lt;h4 id=&#34;1-定义目标函数&#34;&gt;&lt;a href=&#34;#1-定义目标函数&#34; class=&#34;headerlink&#34; title=&#34;1. 定义目标函数&#34;&gt;&lt;/a&gt;1. 定义目标函数&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;def func_2d(x):
    :param x: 自变量，一维数组x[]
    :return: 因变量，标量y
    return - math.exp(-(x[0] ** 2 + x[1] ** 2))
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-求出梯度函数&#34;&gt;&lt;a href=&#34;#2-求出梯度函数&#34; class=&#34;headerlink&#34; title=&#34;2. 求出梯度函数&#34;&gt;&lt;/a&gt;2. 求出梯度函数&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;def grad_2d(x):
    :param x: 自变量，二维向量
    :return: 因变量，二维向量
    deriv0 = 2 * x[0] * math.exp(-(x[0] ** 2 + x[1] ** 2))
    deriv1 = 2 * x[1] * math.exp(-(x[0] ** 2 + x[1] ** 2))
    return np.array([deriv0, deriv1])    
 
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;3-实现梯度下降法&#34;&gt;&lt;a href=&#34;#3-实现梯度下降法&#34; class=&#34;headerlink&#34; title=&#34;3. 实现梯度下降法&#34;&gt;&lt;/a&gt;3. 实现梯度下降法&lt;/h4&gt;&lt;pre&gt;&lt;code&gt;def gradient_descent_2d(grad, cur_x=np.array([0.1, 0.1]), learning_rate=0.01, precision=0.0001, max_iters=10000):
    二维问题的梯度下降法
    :param grad: 目标函数的梯度，以函数传参
    :param cur_x: 起始点，通过参数可以提供初始值
    :param learning_rate: 学习率，也相当于设置的步长（上式α）
    :param precision: 设置收敛精度
    :param max_iters: 最大迭代次数
    :return: 局部最小值 x*
    for i in range(max_iters):
        grad_cur = grad(cur_x) #更新梯度
        if np.linalg.norm(grad_cur, ord=2) &amp;lt; precision:
            break  # 当梯度趋近为 0 时，视为收敛
        cur_x = cur_x - grad_cur * learning_rate#迭代自变量
 
公式：
 

        print(&amp;quot;第&amp;quot;, i, &amp;quot;次迭代：x 值为 &amp;quot;, cur_x)

    print(&amp;quot;局部最小值 x =&amp;quot;, cur_x)
    return cur_x
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二-模型评估与选择&#34;&gt;&lt;a href=&#34;#二、-模型评估与选择&#34; class=&#34;headerlink&#34; title=&#34;二、 模型评估与选择&#34;&gt;&lt;/a&gt;二、 模型评估与选择&lt;/h1&gt;&lt;h2 id=&#34;1-误差与过拟合&#34;&gt;&lt;a href=&#34;#1-误差与过拟合&#34; class=&#34;headerlink&#34; title=&#34;1. 误差与过拟合&#34;&gt;&lt;/a&gt;1. 误差与过拟合&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;训练误差/经验误差&lt;/strong&gt;：学习器在训练集上的误差&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;泛化误差&lt;/strong&gt;：在&lt;strong&gt;新样本&lt;/strong&gt;（不知道的样本）上的误差&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在建立学习器时，我们往往使用一组样本，将其分为训练样本和测试样本，训练和测试用的是同一样本。&lt;/p&gt;
&lt;p&gt;精度accuracy是学习器预测结果相较于测试样本标记的正确率，当测试样本足够大时，精确到可能能到100%，但会造成&lt;strong&gt;过拟合&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;因为我们希望是学习器在&lt;strong&gt;新样本&lt;/strong&gt;上的预测效果好，而非是训练和测试的样本&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;过拟合&lt;/strong&gt;：对训练样本&lt;strong&gt;非一般&lt;/strong&gt;的特征学习，导致泛化能力不足。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-评估方法&#34;&gt;&lt;a href=&#34;#2-评估方法&#34; class=&#34;headerlink&#34; title=&#34;2. 评估方法&#34;&gt;&lt;/a&gt;2. 评估方法&lt;/h2&gt;&lt;p&gt;我们对学习器的&lt;strong&gt;泛化误差&lt;/strong&gt;进行评估，以此来评价这个学习器的好坏&lt;/p&gt;
&lt;h1 id=&#34;三-线性模型&#34;&gt;&lt;a href=&#34;#三、-线性模型&#34; class=&#34;headerlink&#34; title=&#34;三、 线性模型&#34;&gt;&lt;/a&gt;三、 线性模型&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;这里是开始的重点，主要是线性回归和逻辑回归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;线性模型&lt;/strong&gt;：通过属性的线性组合来进行预测&lt;br&gt;$$&lt;br&gt;f(x)=w_1x_1+w_2x_2+…+w_dx_d+b&lt;br&gt;$$&lt;br&gt;用向量形式，写成&lt;br&gt;$$&lt;br&gt;f(\boldsymbol{x})=\boldsymbol{w}^T\boldsymbol{x}+b&lt;br&gt;$$&lt;br&gt;其中，&lt;code&gt;x&lt;/code&gt;：属性，&lt;code&gt;w&lt;/code&gt;：属性&lt;strong&gt;权重&lt;/strong&gt;，&lt;code&gt;b&lt;/code&gt;：偏移&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此，只需**求出&lt;code&gt;w=(w1,w2..)&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;**，模型即可确定。而几何意义上看是一条直线把样本分成了2个阵营（二分类）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;最小二乘&lt;/strong&gt;：最小二乘法是一种数学优化技术，它通过&lt;strong&gt;最小化误差的平方和&lt;/strong&gt;找到一组数据的&lt;strong&gt;最佳函数&lt;/strong&gt;匹配。&lt;ul&gt;
&lt;li&gt;几何意义：求一条线使得所有点到该线的&lt;strong&gt;距离平方和&lt;/strong&gt;最小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-线性回归linear-regression&#34;&gt;&lt;a href=&#34;#1-线性回归（linear-regression）&#34; class=&#34;headerlink&#34; title=&#34;1. 线性回归（linear regression）&#34;&gt;&lt;/a&gt;1. 线性回归（linear regression）&lt;/h2&gt;&lt;p&gt;回归一般用于预测&lt;strong&gt;连续值&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-算法原理&#34;&gt;&lt;a href=&#34;#1-1-算法原理&#34; class=&#34;headerlink&#34; title=&#34;1.1 算法原理&#34;&gt;&lt;/a&gt;1.1 算法原理&lt;/h3&gt;&lt;p&gt;试图通过学得一个&lt;strong&gt;线性模型&lt;/strong&gt;来预测数据&lt;br&gt;$$&lt;br&gt;f(\boldsymbol{x})=\boldsymbol{w}^T\boldsymbol{x}+b\tag{1.1}&lt;br&gt;$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;所以，只需求出&lt;strong&gt;权重w&lt;/strong&gt;和&lt;strong&gt;偏移b&lt;/strong&gt;，即可得出线性模型&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;111-单属性线性回归&#34;&gt;&lt;a href=&#34;#1-1-1-单属性线性回归&#34; class=&#34;headerlink&#34; title=&#34;1.1.1 单属性线性回归&#34;&gt;&lt;/a&gt;1.1.1 单属性线性回归&lt;/h4&gt;&lt;p&gt;当每条样本仅有一个属性时：&lt;/p&gt;
&lt;p&gt;对于每条样本数据的预测，即为&lt;br&gt;$$&lt;br&gt;f({x_i})={w_i}{x_i}+b,使得f(x_i)\simeq y_i\tag{1.2}&lt;br&gt;$$&lt;br&gt;其中，&lt;code&gt;f(x)&lt;/code&gt;是是样本的&lt;strong&gt;预测数据&lt;/strong&gt;。&lt;code&gt;yi&lt;/code&gt;是样本的&lt;strong&gt;测试数据&lt;/strong&gt;，&lt;code&gt;f(x)&lt;/code&gt;应尽量趋近&lt;code&gt;y&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;最常用的是通过&lt;strong&gt;均方误差最小化&lt;/strong&gt;来求&lt;code&gt;w&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;，也称&lt;strong&gt;欧几里得距离&lt;/strong&gt;，是L0范数&lt;br&gt;$$&lt;br&gt;\DeclareMathOperator*{\argmin}{argmin}&lt;br&gt;(w^*,b^*)=\argmin\limits_{(w,b)}\sum_{i=1}^{m}(f(x_i)-y_i)^2=\argmin\limits_{(w,b)}\sum_{i=1}^{m}(y_i-wx_i-b)^2\tag{1.3}&lt;br&gt;$$&lt;br&gt;公式(1.3)的意思是：f(xi)和yi均方差取最小时(w,b)的集合&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基于均方误差最小化进行模型求解的方法成为&lt;strong&gt;最小二乘法&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;几何意义：找一条直线使所有样本到该直线的欧氏距离之和最小。如物理实验的描点画直线&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对公式(1.3)求最小化时自变量&lt;code&gt;w&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;的取值，称为线性回归的最小二乘&lt;strong&gt;参数估计&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;分别对&lt;code&gt;w&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;求偏导，令偏导为0即可求出&lt;code&gt;w&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;的取值&lt;/p&gt;
&lt;h4 id=&#34;112-多元线性回归&#34;&gt;&lt;a href=&#34;#1-1-2-多元线性回归&#34; class=&#34;headerlink&#34; title=&#34;1.1.2 多元线性回归&#34;&gt;&lt;/a&gt;1.1.2 多元线性回归&lt;/h4&gt;&lt;p&gt;当每条样本有n条属性时，&lt;code&gt;w&lt;/code&gt;和&lt;code&gt;x&lt;/code&gt;是矩阵形式，&lt;code&gt;y&lt;/code&gt;也是向量形式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;X&lt;/strong&gt;是数据集，最后一个元素恒置1；&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/20170817104340827&#34; alt=&#34;这里写图片描述&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;y&lt;/strong&gt;是样本标记&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210610202842085.png&#34; alt=&#34;image-20210610202842085&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;预测模型即为&lt;br&gt;$$&lt;br&gt;f(\boldsymbol{x_i})=\boldsymbol{w}^T\boldsymbol{x_i}+b,使得f(x_i)\simeq y_i\tag{1.4}&lt;br&gt;$$&lt;br&gt;为方便讨论将&lt;strong&gt;ω&lt;/strong&gt;和&lt;strong&gt;b&lt;/strong&gt;写在一起，如下。&lt;br&gt;$$&lt;br&gt;\widehat{w}=(w;b)\tag{1.5}&lt;br&gt;$$&lt;br&gt;此处省略推导过程，利用&lt;strong&gt;最小二乘法&lt;/strong&gt;对&lt;strong&gt;ω&lt;/strong&gt;和&lt;strong&gt;b&lt;/strong&gt;进行估计，得出&lt;br&gt;$$&lt;br&gt;\boldsymbol{\widehat{w}^*=(X^TX)^{-1}X^Ty}\tag{1.6}&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;那么线性回归模型即为&lt;br&gt;$$&lt;br&gt;f(\widehat{\boldsymbol{x}}&lt;em&gt;i)=\widehat{\boldsymbol{x}}&lt;/em&gt;{i}^{T}\boldsymbol{(X^TX)^{-1}X^Ty}\tag{1.7}&lt;br&gt;$$&lt;br&gt;然而&lt;strong&gt;X&lt;/strong&gt;常常&lt;strong&gt;不满秩&lt;/strong&gt;，如变量数超过样本数。此时可解出多个解，&lt;strong&gt;均能使均方误差最小化&lt;/strong&gt;。此时选择哪个解由算法偏好决定，常见的是引入&lt;strong&gt;正则化&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;​        就是通过一顿操作求出了样本每个特征的&lt;strong&gt;权重&lt;/strong&gt;和&lt;strong&gt;偏移&lt;/strong&gt;（&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210610211038636.png&#34; alt=&#34;image-20210610211038636&#34;&gt;)，然后通过它预测&lt;strong&gt;新样本&lt;/strong&gt;。线性回归的&lt;strong&gt;学习器&lt;/strong&gt;就是&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210610211038636.png&#34; alt=&#34;image-20210610211038636&#34;&gt;&lt;/p&gt;
&lt;p&gt;​        类似于物理实验描点画直线，最终得到&lt;strong&gt;学习模型（学习器）&lt;/strong&gt;。只不过这里是多元的直线&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/u=3884380577,2563057688&amp;fm=15&amp;gp=0.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-python代码实现&#34;&gt;&lt;a href=&#34;#1-2-Python代码实现&#34; class=&#34;headerlink&#34; title=&#34;1.2 Python代码实现&#34;&gt;&lt;/a&gt;1.2 Python代码实现&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Python有装门用于机器学习的sklearn库，可直接利用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#1. 读取数据&lt;/span&gt;
dataset &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;F:\project\watermelon\melon_data1.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#2. 定义样本属性和训练目标，此例是用密度预测含糖率&lt;/span&gt;
X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;密度&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#其中属性值是二维向量：n个样本;n个属性/样本&lt;/span&gt;
Y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;含糖率&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#3. 切分训练集和验证集&lt;/span&gt;
X_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;X_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; model_selection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_test_split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;test_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;random_state&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#4. 建立模型&lt;/span&gt;
log_model &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; LinearRegression&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#5. 训练&lt;/span&gt;
log_model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_train&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#6. 预测&lt;/span&gt;
Y_pred &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; log_model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;predict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#7. 评估（此处用均方差）&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mean&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_pred&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Y_test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关于sklearn.linear_model.LinearRegression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;已知线性模型是&lt;br&gt;$$&lt;br&gt;f(\boldsymbol{x})=\boldsymbol{w}^T\boldsymbol{x}+b&lt;br&gt;$$&lt;br&gt;其中：&lt;/p&gt;
&lt;p&gt;​    -&lt;code&gt;w&lt;/code&gt;是权重，表示特征的重要程度。一维向量&lt;/p&gt;
&lt;p&gt;​    -&lt;code&gt;b&lt;/code&gt;是偏置，模型的偏移量。单个数值&lt;/p&gt;
&lt;p&gt;​    -&lt;code&gt;x&lt;/code&gt;是样本，一组特征值。一维向量&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;LinearRegression&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fit_intercept&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; normalize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; copy_X&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n_jobs&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; positive&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
       创建线性回归模型，以下参数均为可选，一般来说都选默认值
    :param fit_intercept: bool, default=True.是否计算此模型的截距b。如果设置为False，则在计算中不使用截距（即数据应居中）。
    :param normalize: bool, default=False。如果为真，回归系数X将在回归前通过减去平均值并除以l2范数进行归一化。
    :param copy_X: bool, default=True。如果为True，则复制X；否则，它可能会被覆盖。
    :param n_jobs: int, default=None。用于计算的作业数。
    :param positive: bool, default=False。设置为True时，强制系数为正。只有密集阵列才支持此选项。
    :return: sklearn.linear_model._logistic.LogisticRegression
    &#34;&#34;&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数&lt;code&gt;LinearRegression()&lt;/code&gt;返回一个&lt;code&gt;LogisticRegression&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用属性（成员变量）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coef_&lt;/code&gt;：&lt;strong&gt;array&lt;/strong&gt;。（系数），指的是权重&lt;code&gt;w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intercept_ &lt;/code&gt;：&lt;strong&gt;float&lt;/strong&gt;。模型的偏置&lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用函数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fit(X, y, sample_weight=None)&lt;/code&gt;：拟合线性模型（以最小二乘法，即求最小均方差）。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;：训练样本特征值。二维数组（行-样本，列-特征）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;y&lt;/code&gt;：靶值。一维数组，样本的结果值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sample_weight&lt;/code&gt;：每个样品的单独重量（暂时不清楚，可能是属性的权重2？）&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return：&lt;/strong&gt;self。返回拟合后的线性模型，这种不需要去接收，属于修改型的函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predict(X)&lt;/code&gt;：预测&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;：用于预测的样本&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return：&lt;/strong&gt;array。样本的预测值 &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_params(deep=True)&lt;/code&gt;：以字典形式返回模型参数，包括但不限于&lt;code&gt;fit_intercept&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;deep&lt;/code&gt;：如果为True，则将返回此估计器的参数以及作为估计器的包含子对象。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return：&lt;/strong&gt;dict&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_params(**params)&lt;/code&gt;：设置参数&lt;ul&gt;
&lt;li&gt;&lt;code&gt;**params&lt;/code&gt;：dict&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-对数几率回归逻辑回归&#34;&gt;&lt;a href=&#34;#2-对数几率回归（逻辑回归）&#34; class=&#34;headerlink&#34; title=&#34;2. 对数几率回归（逻辑回归）&#34;&gt;&lt;/a&gt;2. 对数几率回归（逻辑回归）&lt;/h2&gt;&lt;p&gt;虽然叫作&lt;strong&gt;回归&lt;/strong&gt;，但逻辑回归是&lt;strong&gt;分类器&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;21-与线性回归的区别&#34;&gt;&lt;a href=&#34;#2-1-与线性回归的区别&#34; class=&#34;headerlink&#34; title=&#34;2.1 与线性回归的区别&#34;&gt;&lt;/a&gt;2.1 与线性回归的区别&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;逻辑回归和线性回归一样，都是求ω和b。即学习器均是β=(ω:b)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;liner回归：&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 1. 主要学习**线性模型**。
 2. 预测一般是预测该样本在线性模型上的取值（当然取值也可以看做分类）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;logic回归：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过学习后的&lt;strong&gt;模型&lt;/strong&gt;对新样本进行&lt;strong&gt;分类&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;主要通过&lt;strong&gt;跃迁函数（sigmod）&lt;/strong&gt;加强分类效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-sigmod函数&#34;&gt;&lt;a href=&#34;#2-2-sigmod函数&#34; class=&#34;headerlink&#34; title=&#34;2.2 sigmod函数&#34;&gt;&lt;/a&gt;2.2 sigmod函数&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621165221963.png&#34; alt=&#34;image-20210621165221963&#34;&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621170226764.png&#34; alt=&#34;image-20210621170226764&#34;&gt;&lt;/p&gt;
&lt;p&gt;意义：大于0判正，大于0判负&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为单位阶跃函数不连续，所以用sigmod函数（对数几率函数logistic function）替代，因此称为对数几率回归/逻辑回归&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;23-算法原理&#34;&gt;&lt;a href=&#34;#2-3-算法原理&#34; class=&#34;headerlink&#34; title=&#34;2.3 算法原理&#34;&gt;&lt;/a&gt;2.3 算法原理&lt;/h3&gt;&lt;p&gt;与线性回归稍有不同，这是用于&lt;strong&gt;分类&lt;/strong&gt;学习的算法，目标值是离散的&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png&#34; alt=&#34;image-20210621163134066&#34;&gt;&lt;/p&gt;
&lt;p&gt;​    其公式是线性回归和跃迁函数的结合&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;线性函数&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621171121845.png&#34; alt=&#34;image-20210621171121845&#34;&gt;与&lt;em&gt;sigmod&lt;/em&gt;函数&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621165221963.png&#34; alt=&#34;image-20210621165221963&#34;&gt;结合→&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png&#34; alt=&#34;image-20210621163134066&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;推出&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621171318629.png&#34; alt=&#34;image-20210621171318629&#34;&gt;，y以0.5为临界点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;得出极大似然函数&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621171854071.png&#34; alt=&#34;image-20210621171854071&#34;&gt;。求出其取&lt;strong&gt;最小值&lt;/strong&gt;时&lt;em&gt;β&lt;/em&gt;的取值即为模型解参数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中，&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621172030205.png&#34; alt=&#34;image-20210621172030205&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以&lt;strong&gt;梯度下降法&lt;/strong&gt;或&lt;strong&gt;牛顿法&lt;/strong&gt;解&lt;/p&gt;
&lt;p&gt;其中关于β的一阶、二阶导数分别为&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621172247380.png&#34; alt=&#34;image-20210621172247380&#34;&gt;可用来求梯度&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621172300230.png&#34; alt=&#34;image-20210621172300230&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;总结：&lt;/strong&gt;logic回归就是求模型&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png&#34; alt=&#34;image-20210621163134066&#34;&gt;的参数ω和b。&lt;/p&gt;
&lt;h3 id=&#34;24-代码&#34;&gt;&lt;a href=&#34;#2-4-代码&#34; class=&#34;headerlink&#34; title=&#34;2.4 代码&#34;&gt;&lt;/a&gt;2.4 代码&lt;/h3&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#1. 读取数据&lt;/span&gt;
dataset &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;F:\project\watermelon\melon_data1.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#2. 定义样本属性和训练目标，此例是用密度预测含糖率&lt;/span&gt;
X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loc&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;密度&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;含糖率&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#其中属性值是二维向量：n个样本;n个属性/样本&lt;/span&gt;
Y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;含糖率&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#3. 切分训练集和验证集&lt;/span&gt;
X_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;X_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; model_selection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_test_split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;test_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;random_state&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#4. 建立模型&lt;/span&gt;
log_model &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; LogisticRegression&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#逻辑回归，就是对数线性回归，离散分类&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#5. 训练&lt;/span&gt;
log_model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Y_train&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#6. 预测&lt;/span&gt;
Y_pred &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; log_model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;predict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X_test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#7. 评估（此处用精确度，即预测到到的/没预测到的）&lt;/span&gt;
&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_pred&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;Y_test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Y_test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;关于sklearn.linear_model.LogisticRegression&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;已知逻辑回归模型&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png&#34; alt=&#34;image-20210621163134066&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;​    -&lt;code&gt;w&lt;/code&gt;是权重，表示特征的重要程度。一维向量&lt;/p&gt;
&lt;p&gt;​    -&lt;code&gt;b&lt;/code&gt;是偏置，模型的偏移量。单个数值&lt;/p&gt;
&lt;p&gt;​    -&lt;code&gt;x&lt;/code&gt;是样本，一组特征值。一维向量&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;LogisticRegression&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;penalty&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;l2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dual&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; tol&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.0001&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; C&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; fit_intercept&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; intercept_scaling&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; class_weight&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; random_state&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; solver&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lbfgs&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; max_iter&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; multi_class&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;auto&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; verbose&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; warm_start&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n_jobs&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; l1_ratio&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#虽然有这么多的参数，但一般默认就行&lt;/span&gt;
log_model &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; LogisticRegression&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#直接这样就行&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;函数&lt;code&gt;LogisticRegression()&lt;/code&gt;返回一个&lt;code&gt;LogisticRegression&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用属性（成员变量）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;coef_&lt;/code&gt;：&lt;strong&gt;array&lt;/strong&gt;。（系数），指的是权重&lt;code&gt;w&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;intercept_ &lt;/code&gt;：&lt;strong&gt;float&lt;/strong&gt;。模型的偏置&lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;classes_ &lt;/code&gt;：&lt;strong&gt;ndarray&lt;/strong&gt;。分类器已知的类标签列表（逻辑回归可以是多分类）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_iter_&lt;/code&gt;：&lt;strong&gt;ndarray&lt;/strong&gt; 。各分类的实际&lt;strong&gt;迭代次数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用函数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;fit(X, y, sample_weight=None)&lt;/code&gt;：拟合模型。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predict(X)&lt;/code&gt;：预测&lt;/li&gt;
&lt;li&gt;&lt;code&gt;get_params(deep=True)&lt;/code&gt;：以字典形式返回模型参数，包括但不限于&lt;code&gt;fit_intercept&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;set_params(**params)&lt;/code&gt;：设置参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;decision_function(X)&lt;/code&gt;：预测样本的置信度。样本的置信度与样本到超平面的有符号距离成正比。&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;四-决策树&#34;&gt;&lt;a href=&#34;#四、-决策树&#34; class=&#34;headerlink&#34; title=&#34;四、 决策树&#34;&gt;&lt;/a&gt;四、 决策树&lt;/h1&gt;&lt;p&gt;决策树主要就是靠计算&lt;strong&gt;信息增益&lt;/strong&gt;或&lt;strong&gt;基尼指数&lt;/strong&gt;决定选哪条支线，属于&lt;strong&gt;分类&lt;/strong&gt;算法。&lt;/p&gt;
&lt;h1 id=&#34;五-神经网络初阶&#34;&gt;&lt;a href=&#34;#五、-神经网络初阶&#34; class=&#34;headerlink&#34; title=&#34;五、 神经网络初阶&#34;&gt;&lt;/a&gt;五、 神经网络初阶&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;神经网络这块西瓜书讲得不是很详细，而且神经网络本来就是不小于机器学习的模块，所以我这里主要参考了别的一些专门讲&lt;strong&gt;深度学习&lt;/strong&gt;的书。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考：《深度学习入门&lt;em&gt;基于python的理论与实现&lt;/em&gt;》&lt;/p&gt;
&lt;p&gt;神经网络是个层次递进的结构，每层通过一定的函数计算到下一层，如图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/neural_network.jpg&#34; alt=&#34;neural_network&#34;&gt;&lt;/p&gt;
&lt;p&gt;在此之前，先来熟悉一下神经网络的一些概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;权重ω：&lt;/strong&gt;代表各参数的&lt;strong&gt;重要性&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;偏置b：&lt;/strong&gt;在神经网络中表示该神经元被激活的&lt;strong&gt;容易程度&lt;/strong&gt;；&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;激活函数：&lt;/strong&gt;神经网络中，将每层输入信号(a=wx+b)转换为输出信号，其作用是决定该神经元是否被激活&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;张量(tensor)：&lt;/strong&gt;神经网络使用的数据存储在&lt;strong&gt;多维Numpy 数组&lt;/strong&gt;中，也叫&lt;strong&gt;张量（tensor）&lt;/strong&gt;。&lt;font color=&#34;red&#34;&gt;所以张量其实就是多维数组&lt;/font&gt;，之所以不能叫做矩阵，矩阵只是二维的数组，张量所指的维度是没有限制的。一般来说，当前所有机器学习系统都使用张量作为基本数据结构。张量这一概念的核心在于，它是一个&lt;strong&gt;数据容器&lt;/strong&gt;。它包含的数据几乎总是&lt;strong&gt;数值数据&lt;/strong&gt;，因此它是数字的容器。&lt;strong&gt;矩阵&lt;/strong&gt;就是&lt;strong&gt;二维张量&lt;/strong&gt;。张量是矩阵向&lt;strong&gt;任意维度&lt;/strong&gt;的扩展。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;梯度(grad)：&lt;/strong&gt;由&lt;strong&gt;全部&lt;/strong&gt;变量的&lt;strong&gt;偏导数&lt;/strong&gt;汇总而成的&lt;strong&gt;张量&lt;/strong&gt;称为**梯度(gradient)**。如grad_xy=(dz/dx,dz/dy)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-激活函数&#34;&gt;&lt;a href=&#34;#1-激活函数&#34; class=&#34;headerlink&#34; title=&#34;1. 激活函数&#34;&gt;&lt;/a&gt;1. 激活函数&lt;/h2&gt;&lt;p&gt;有下激活函数所示，绝大多数激活函数在特定范围为0，即不被激活，也就意味着该神经元对后序网络没有信息传递&lt;/p&gt;
&lt;h3 id=&#34;11-阶跃函数&#34;&gt;&lt;a href=&#34;#1-1-阶跃函数&#34; class=&#34;headerlink&#34; title=&#34;1.1 阶跃函数&#34;&gt;&lt;/a&gt;1.1 阶跃函数&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220755046.png&#34; alt=&#34;image-20210621220755046&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-sigmoid函数&#34;&gt;&lt;a href=&#34;#1-2-sigmoid函数&#34; class=&#34;headerlink&#34; title=&#34;1.2 sigmoid函数&#34;&gt;&lt;/a&gt;1.2 sigmoid函数&lt;/h3&gt;&lt;p&gt;​     &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220802439.png&#34; alt=&#34;image-20210621220802439&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;13-relu函数&#34;&gt;&lt;a href=&#34;#1-3-ReLU函数&#34; class=&#34;headerlink&#34; title=&#34;1.3 ReLU函数&#34;&gt;&lt;/a&gt;1.3 ReLU函数&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220811079.png&#34; alt=&#34;image-20210621220811079&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;14-softmax函数最后一层输出层的激活函数&#34;&gt;&lt;a href=&#34;#1-4-softmax函数（最后一层输出层的激活函数）&#34; class=&#34;headerlink&#34; title=&#34;1.4 softmax函数（最后一层输出层的激活函数）&#34;&gt;&lt;/a&gt;1.4 softmax函数（最后一层输出层的激活函数）&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220818680.png&#34; alt=&#34;image-20210621220818680&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;15-函数图&#34;&gt;&lt;a href=&#34;#1-5-函数图&#34; class=&#34;headerlink&#34; title=&#34;1.5 函数图&#34;&gt;&lt;/a&gt;1.5 函数图&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220826903.png&#34; alt=&#34;image-20210621220826903&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中：深蓝色的是relu，黑色虚线是阶跃函数，蓝绿色的是sigmod函数&lt;/p&gt;
&lt;h2 id=&#34;2-神经网络的层次递进&#34;&gt;&lt;a href=&#34;#2-神经网络的层次递进&#34; class=&#34;headerlink&#34; title=&#34;2. 神经网络的层次递进&#34;&gt;&lt;/a&gt;2. 神经网络的层次递进&lt;/h2&gt;&lt;p&gt;如上图：&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/neural_network.jpg&#34; alt=&#34;neural_network&#34;&gt;&lt;/p&gt;
&lt;p&gt;其中&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621221751826.png&#34; alt=&#34;image-20210621221751826&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;X&lt;/strong&gt;：特征矩阵。&lt;strong&gt;ω&lt;/strong&gt;：各属性权重的矩阵。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;注意以下几点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;输出层&lt;/strong&gt;神经元一般取决于&lt;strong&gt;分类数&lt;/strong&gt;（几分类就几个），&lt;strong&gt;输入&lt;/strong&gt;神经元一般取决于&lt;strong&gt;属性/特征&lt;/strong&gt;个数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;x-&amp;gt;a(隐藏层)-&amp;gt;输出层&lt;/strong&gt;是&lt;strong&gt;矩阵运算&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;x&lt;/code&gt;是输入&lt;code&gt;1*n&lt;/code&gt;的向量，&lt;code&gt;n&lt;/code&gt;代表&lt;strong&gt;特征值数量&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​      &lt;code&gt;ω&lt;/code&gt;是&lt;code&gt;n*m&lt;/code&gt;的权值，行：n个特征值，列：下一层 m个神经元&lt;/p&gt;
&lt;p&gt;​      &lt;code&gt;b&lt;/code&gt;是&lt;code&gt;1*m&lt;/code&gt;的向量（b的每个元素并不一样）&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;p&gt;**激活函数&lt;code&gt;h()&lt;/code&gt;**用于隐藏层将输入→输出，及&lt;code&gt;a()→z()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输出层的激活函数&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621222800025.png&#34; alt=&#34;image-20210621222800025&#34;&gt;要视情况而定，&lt;/p&gt;
&lt;p&gt;一般而言：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;回归（连续）：恒等函数（输入即输出）&lt;/li&gt;
&lt;li&gt;分类：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;​       二元分类：&lt;code&gt;sigmoid()&lt;/code&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220802439.png&#34; alt=&#34;image-20210621220802439&#34;&gt;&lt;/p&gt;
&lt;p&gt;​       多分类：&lt;code&gt;softmax()&lt;/code&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621223227999.png&#34; alt=&#34;image-20210621223227999&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-神经网络的学习&#34;&gt;&lt;a href=&#34;#3-神经网络的学习&#34; class=&#34;headerlink&#34; title=&#34;3. 神经网络的学习&#34;&gt;&lt;/a&gt;3. 神经网络的学习&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;模型的学习主要是为了找到合适的**权重&lt;code&gt;ω&lt;/code&gt;&lt;strong&gt;和&lt;/strong&gt;偏置&lt;code&gt;b&lt;/code&gt;**。学习的过程就是&lt;code&gt;ω&lt;/code&gt;和&lt;code&gt;b&lt;/code&gt;&lt;strong&gt;更新&lt;/strong&gt;的过程&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大致学习过程如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;初始化：&lt;/strong&gt;选取初始权重&lt;code&gt;ω&lt;/code&gt;和偏置&lt;code&gt;b&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预测：&lt;/strong&gt;根据损失函数求误差&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;损失函数求梯度：&lt;/strong&gt;主要是求关于&lt;strong&gt;权重&lt;/strong&gt;的梯度。一般用求导公式或&lt;strong&gt;误差反向传播算法&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;更新权重：&lt;/strong&gt;向损失函数&lt;strong&gt;梯度反方向&lt;/strong&gt;更新&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;预测：&lt;/strong&gt;是否满足要求？是→结束；否→继续3,4,5&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;31-特征提取与算法设计&#34;&gt;&lt;a href=&#34;#3-1-特征提取与算法设计&#34; class=&#34;headerlink&#34; title=&#34;3.1 特征提取与算法设计&#34;&gt;&lt;/a&gt;3.1 特征提取与算法设计&lt;/h3&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621223607967.png&#34; alt=&#34;image-20210621223607967&#34;&gt;&lt;/p&gt;
&lt;p&gt;神经网络是没有人为介入，自动提取特征值的。如直接提取图像的本质数据（像素什么的）&lt;/p&gt;
&lt;h3 id=&#34;32-损失函数&#34;&gt;&lt;a href=&#34;#3-2-损失函数&#34; class=&#34;headerlink&#34; title=&#34;3.2 损失函数&#34;&gt;&lt;/a&gt;3.2 损失函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;用于表示神经网络&lt;strong&gt;优劣&lt;/strong&gt;的指标，损失&lt;strong&gt;越小&lt;/strong&gt;，神经网络性能越好。类似误差率。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过不断更新&lt;strong&gt;权重ω&lt;/strong&gt;来使损失最小化→以使神经网络最优&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一般使用&lt;strong&gt;梯度下降法&lt;/strong&gt;，沿损失函数&lt;strong&gt;梯度反方向&lt;/strong&gt;（损失函数减小的方向）更新权重&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;梯度&lt;/strong&gt;可以直接求导公式求，也可以用&lt;strong&gt;误差反向传播法&lt;/strong&gt;求梯度&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一般用的比较多的损失函数是&lt;strong&gt;均方误差&lt;/strong&gt;和&lt;strong&gt;交叉熵误差&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;321-均方误差&#34;&gt;&lt;a href=&#34;#3-2-1-均方误差&#34; class=&#34;headerlink&#34; title=&#34;3.2.1 均方误差&#34;&gt;&lt;/a&gt;3.2.1 均方误差&lt;/h4&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622160555811.png&#34; alt=&#34;image-20210622160555811&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;yk&lt;/code&gt;和&lt;code&gt;tk&lt;/code&gt;分别是预测值和实际值，y是长度为n的一维向量&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mean_squared_error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    损失函数：均方误差
    :param y: 预测值,np数组
    :param t: 监督值,np数组
    :return: 均方误差float
    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;322-交叉熵误差&#34;&gt;&lt;a href=&#34;#3-2-2-交叉熵误差&#34; class=&#34;headerlink&#34; title=&#34;3.2.2 交叉熵误差&#34;&gt;&lt;/a&gt;3.2.2 交叉熵误差&lt;/h4&gt;&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622160932219.png&#34; alt=&#34;image-20210622160932219&#34;&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cross_entropy_error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    损失函数：交叉熵误差
    :param y: 预测值，np数组
    :param t: 监督值,np数组
    :return: 交叉熵误差float
    &#34;&#34;&#34;&lt;/span&gt;
    delta&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#10的-7次，为了防止log0导致的下溢&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;delta&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-神经网络学习&#34;&gt;&lt;a href=&#34;#3-3-神经网络学习&#34; class=&#34;headerlink&#34; title=&#34;3.3 神经网络学习&#34;&gt;&lt;/a&gt;3.3 神经网络学习&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;步骤：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;抽取mini-batch&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;计算梯度（权重的梯度）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;更新参数（权重，沿梯度反方向更新）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;重复123&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;代码：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;神经网络类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;初始化权重&lt;/li&gt;
&lt;li&gt;预测函数&lt;/li&gt;
&lt;li&gt;损失函数&lt;/li&gt;
&lt;li&gt;精确率函数&lt;/li&gt;
&lt;li&gt;梯度下降函数&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练学习类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;MNIST上导入训练集和数据集&lt;/li&gt;
&lt;li&gt;设定学习参数（训练次数、神经网络各层神经元数、小批量样本数、学习率等）&lt;/li&gt;
&lt;li&gt;迭代计算，各权重沿自己梯度反方向更新，并保存精度变化&lt;/li&gt;
&lt;li&gt;绘制图形&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;34-误差反向传播求梯度&#34;&gt;&lt;a href=&#34;#3-4-误差反向传播求梯度&#34; class=&#34;headerlink&#34; title=&#34;3.4 误差反向传播求梯度&#34;&gt;&lt;/a&gt;3.4 误差反向传播求梯度&lt;/h3&gt;&lt;p&gt;通过反向传播求得损失函数的梯度（各自变量的导数），然后即可沿梯度反方向&lt;strong&gt;更新权重&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;反向传播可以比较&lt;strong&gt;快&lt;/strong&gt;地计算出梯度。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;原理：局部求导&lt;/p&gt;
&lt;p&gt;公式：输出梯度=输入梯度*本层导数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上和复合函数求导是一样的道理，图中：上面的是价格，下面的是梯度&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/3.jpg&#34; alt=&#34;neural_network&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;341-关于affine层的矩阵反向求导&#34;&gt;&lt;a href=&#34;#3-4-1-关于Affine层的矩阵反向求导&#34; class=&#34;headerlink&#34; title=&#34;3.4.1 关于Affine层的矩阵反向求导&#34;&gt;&lt;/a&gt;3.4.1 关于Affine层的矩阵反向求导&lt;/h4&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622162354257.png&#34; alt=&#34;image-20210622162354257&#34;&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;p&gt;​    X：特征值向量（N*m）；&lt;/p&gt;
&lt;p&gt;​    W：权重矩阵（m*n）；&lt;/p&gt;
&lt;p&gt;​    B：偏移向量（1*n）；&lt;/p&gt;
&lt;p&gt;​    Y：输出数组（N*n）&lt;/p&gt;
&lt;p&gt;​        N为批量数，因为小批量处理可以输入N组向量输出N组向量，通过矩阵乘法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;反向传播：&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622165007115.png&#34; alt=&#34;image-20210622165007115&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; L是损失函数，Y作为loss函数的自变量，&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622165455298.png&#34; alt=&#34;image-20210622165455298&#34;&gt;是上游传来的导数&lt;/p&gt;
&lt;p&gt; 对于&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210726173859452.png&#34; alt=&#34;image-20210726173859452&#34;&gt;，W相当于是常数；同理，对于&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210726173914864.png&#34; alt=&#34;image-20210726173914864&#34;&gt;，X是常数&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#34;red&#34;&gt;Affine层各权重梯度求出后实时保存&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Affine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;W
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b
        
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;original_x_shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 权重和偏置参数的导数&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 对应张量（相当于维度，矩阵是二维张量）&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;original_x_shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape
        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x
        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; out
    
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#反向传播&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
        dout是上游传下来的梯度
        &#34;&#34;&#34;&lt;/span&gt;
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# Affine层各权重梯度求出后实时保存&lt;/span&gt;
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;original_x_shape&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 还原输入数据的形状（对应张量）&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;342-最上游导数生成softmax_with_loss损失函数相对于softmax的输出y的伪梯度矩阵&#34;&gt;&lt;a href=&#34;#3-4-2-最上游导数生成，softmax-with-loss，损失函数相对于softmax的输出y的伪梯度矩阵&#34; class=&#34;headerlink&#34; title=&#34;3.4.2 最上游导数生成，softmax_with_loss，损失函数相对于softmax的输出y的伪梯度矩阵&#34;&gt;&lt;/a&gt;3.4.2 最上游导数生成，softmax_with_loss，损失函数相对于softmax的输出y的伪梯度矩阵&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SoftmaxWithLoss&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    softmax层和loss函数层一起
    其实就是y-l的关系，即最上游的导数求解
    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# softmax的输出&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 监督数据&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
        得到softmax输出和误差函数输出，还有监督数据
        :param x: 
        :param t: 监督值,np数组
        :return: 交叉熵误差
        &#34;&#34;&#34;&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; softmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cross_entropy_error&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
        求dl/dy
        :param dout:
        :return: (y1-t1,y2-t2,y3-t3...)差分数组
        loss中相对于y的梯度，差分数组代表梯度数组，越接近0越精确。各元素往梯度负方向更新即可
        t和y都是多组一维向量组成的二维向量
        &#34;&#34;&#34;&lt;/span&gt;
        batch_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 监督数据是one-hot-vector的情况，one-hot-vector就是[0,0,0,0,1,0,0,0,0]表示4&lt;/span&gt;
            dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; batch_size
        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;copy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
            dx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#np.arange是0,1,2,3,4,....&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#t是[]表示的是每个样本（每组特征向量）的监督值&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#这行的意思是将dx对应行（一行代表一个样本的预测值概率向量）的对应位置（位置是t的监督值，比如监督值为4，对应dx中第5个元素的概率位置）的元素-1&lt;/span&gt;
            dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dx &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; batch_size
        
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;343-反向传播求梯度代码全貌&#34;&gt;&lt;a href=&#34;#3-4-3-反向传播求梯度代码全貌&#34; class=&#34;headerlink&#34; title=&#34;3.4.3 反向传播求梯度代码全貌&#34;&gt;&lt;/a&gt;3.4.3 反向传播求梯度代码全貌&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#为什么只要导入x呢，因为自变量W和b都在params中保存着了&lt;/span&gt;
    W1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    b1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    grads &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&amp;amp;#125;&lt;/span&gt;

    batch_num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# forward&lt;/span&gt;
    a1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; b1
    z1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sigmoid&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    a2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;z1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; b2
    y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; softmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# backward&lt;/span&gt;
    dy &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; batch_num &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#差分数组，dy是最上层微分（梯度），是公式中的dl/dy&lt;/span&gt;
    grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;z1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dy&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#公式中的dl/dw&lt;/span&gt;
    grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dy&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#Affine层反向传播的时候沿途就保存权重的梯度了&lt;/span&gt;

    da1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dy&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#X*W+B=Y，a是此式中的X&lt;/span&gt;

    dz1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sigmoid_grad&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; da1&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#sigmoid层反向传播（sigmoid层是直接求导的）&lt;/span&gt;
    grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dz1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dz1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; grads
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-神经网络的代码设计&#34;&gt;&lt;a href=&#34;#4-神经网络的代码设计&#34; class=&#34;headerlink&#34; title=&#34;4. 神经网络的代码设计&#34;&gt;&lt;/a&gt;4. 神经网络的代码设计&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;y-预测值；t-标签值&lt;/p&gt;
&lt;p&gt;x-样本；w-权重；b-偏置&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;41-functionpy&#34;&gt;&lt;a href=&#34;#4-1-function-py&#34; class=&#34;headerlink&#34; title=&#34;4.1 function.py&#34;&gt;&lt;/a&gt;4.1 function.py&lt;/h3&gt;&lt;p&gt;包括各激活函数的、损失函数的实现以及反向传播的局部梯度&lt;/p&gt;
&lt;h4 id=&#34;411-正向传播&#34;&gt;&lt;a href=&#34;#4-1-1-正向传播&#34; class=&#34;headerlink&#34; title=&#34;4.1.1 正向传播&#34;&gt;&lt;/a&gt;4.1.1 正向传播&lt;/h4&gt;&lt;p&gt;sigmoid函数：                                 &lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sigmoid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ReLU函数：    &lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;relu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;maximum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
softmax函数：  
 
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;softmax&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ndim &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T
        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T 

    x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 溢出对策&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exp&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;412-反向传播&#34;&gt;&lt;a href=&#34;#4-1-2-反向传播&#34; class=&#34;headerlink&#34; title=&#34;4.1.2 反向传播&#34;&gt;&lt;/a&gt;4.1.2 反向传播&lt;/h4&gt;&lt;p&gt;  反向传播本质上是局部求导&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sigmoid_grad&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; sigmoid&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; sigmoid&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;relu_grad&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    grad &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    grad&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;x&lt;span class=&#34;token operator&#34;&gt;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; grad
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;413-损失函数&#34;&gt;&lt;a href=&#34;#4-1-3-损失函数&#34; class=&#34;headerlink&#34; title=&#34;4.1.3 损失函数&#34;&gt;&lt;/a&gt;4.1.3 损失函数&lt;/h4&gt;&lt;p&gt;损失函数在最后softmax处理后算就可以了&lt;/p&gt;
&lt;p&gt;均方误差： &lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;mean_squared_error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#均方差误差&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 交叉熵误差： &lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;cross_entropy_error&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#交叉熵误差&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ndim &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 监督数据是one-hot-vector的情况下，转换为正确解标签的索引&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
             
    batch_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;log&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; batch_size

最终损失函数
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;softmax_loss&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#这里选用的是交叉熵误差&lt;/span&gt;
    y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; softmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; cross_entropy_error&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;42-layerpy各层的类&#34;&gt;&lt;a href=&#34;#4-2-layer-py各层的类&#34; class=&#34;headerlink&#34; title=&#34;4.2 layer.py各层的类&#34;&gt;&lt;/a&gt;4.2 layer.py各层的类&lt;/h3&gt;&lt;p&gt;相同结构的层建立一个类，包括各&lt;strong&gt;激活函数&lt;/strong&gt;、&lt;strong&gt;Affine&lt;/strong&gt;、&lt;strong&gt;卷积池化&lt;/strong&gt;、以及&lt;strong&gt;softmax&lt;/strong&gt;和&lt;strong&gt;loss&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;每层包括初始化函数、正向传播、反向传播&lt;/p&gt;
&lt;p&gt;​    输入输出均为矩阵形式。正向传播输入输出是参数矩阵，反向输入输出是梯度矩阵&lt;/p&gt;
&lt;h4 id=&#34;421-relu层&#34;&gt;&lt;a href=&#34;#4-2-1-ReLU层&#34; class=&#34;headerlink&#34; title=&#34;4.2.1 ReLU层&#34;&gt;&lt;/a&gt;4.2.1 ReLU层&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Relu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;copy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        out&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mask&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; out

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        dout&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;mask&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dout

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;422-sigmoid层&#34;&gt;&lt;a href=&#34;#4-2-2-sigmoid层&#34; class=&#34;headerlink&#34; title=&#34;4.2.2 sigmoid层&#34;&gt;&lt;/a&gt;4.2.2 sigmoid层&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Sigmoid&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; sigmoid&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; out
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; out

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dout &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;423-affine层全连接层也就是awxb那层&#34;&gt;&lt;a href=&#34;#4-2-3-Affine层（全连接层，也就是a-wx-b那层）&#34; class=&#34;headerlink&#34; title=&#34;4.2.3 Affine层（全连接层，也就是a=wx+b那层）&#34;&gt;&lt;/a&gt;4.2.3 Affine层（全连接层，也就是a=wx+b那层）&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Affine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;W
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b
        
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;original_x_shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 权重和偏置参数的导数&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 对应张量&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;original_x_shape &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape
        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x

        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; out

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dx&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;original_x_shape&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 还原输入数据的形状（对应张量）&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;424-卷积层&#34;&gt;&lt;a href=&#34;#4-2-4-卷积层&#34; class=&#34;headerlink&#34; title=&#34;4.2.4 卷积层&#34;&gt;&lt;/a&gt;4.2.4 卷积层&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Convolution&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; b&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stride&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pad&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; W
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; b
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; stride
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pad
        
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 中间数据（backward时使用）&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None   
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;col &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;col_W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 权重和偏置参数的梯度&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        FN&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; C&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# print(&#34;输入矩阵初始形状&#34;)&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# print(x.shape)&lt;/span&gt;
        N&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; C&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; H&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape
        out_h &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;H &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; FH&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        out_w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;W &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; FW&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        col &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; im2col&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FW&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        col_W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;FN&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# print(&#34;形状&#34;)&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# print(col.shape,col_W.shape)&lt;/span&gt;

        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;col&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; col_W&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b
        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;N&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; out_h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; out_w&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transpose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;col &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; col
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;col_W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; col_W

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; out

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        FN&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; C&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape
        dout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transpose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FN&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;col&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transpose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;FN&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; C&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FW&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        dcol &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;col_W&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; col2im&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dcol&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FH&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; FW&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;425-池化层&#34;&gt;&lt;a href=&#34;#4-2-5-池化层&#34; class=&#34;headerlink&#34; title=&#34;4.2.5 池化层&#34;&gt;&lt;/a&gt;4.2.5 池化层&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Pooling&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pool_h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pool_w&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stride&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pad&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_h &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pool_h
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pool_w
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; stride
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pad
        
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arg_max &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        N&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; C&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; H&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape
        out_h &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;H &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_h&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        out_w &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;W &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        col &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; im2col&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_w&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        col &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; col&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_h&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_w&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        arg_max &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;col&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;col&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        out &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;N&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; out_h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; out_w&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; C&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transpose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arg_max &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; arg_max

        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; out

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        dout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;transpose&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        
        pool_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_h &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_w
        dmax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pool_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        dmax&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arg_max&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arg_max&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dout&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;flatten&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        dmax &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dmax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pool_size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 
        
        dcol &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dmax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dmax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; dmax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; dmax&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; col2im&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dcol&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_h&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pool_w&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;stride&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pad&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;426-softmax至损失函数层&#34;&gt;&lt;a href=&#34;#4-2-6-softmax至损失函数层&#34; class=&#34;headerlink&#34; title=&#34;4.2.6 softmax至损失函数层&#34;&gt;&lt;/a&gt;4.2.6 softmax至损失函数层&lt;/h4&gt;&lt;p&gt;将softmax与loss合并为一层&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;SoftmaxWithLoss&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# softmax的输出&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; None &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 监督数据&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;forward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; softmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; cross_entropy_error&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss

    &lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;backward&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dout&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        batch_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 监督数据是one-hot-vector的情况&lt;/span&gt;
            dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; batch_size
        &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;copy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
            dx&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
            dx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dx &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; batch_size
        
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dx
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;43-neuralnet神经网络类&#34;&gt;&lt;a href=&#34;#4-3-Neuralnet神经网络类&#34; class=&#34;headerlink&#34; title=&#34;4.3 Neuralnet神经网络类&#34;&gt;&lt;/a&gt;4.3 Neuralnet神经网络类&lt;/h3&gt;&lt;p&gt;包括初始化函数（初始化各超参数）、预测函数（神经网络层次递进）、损失函数、准确率函数、梯度函数（学习过程中保存每层各权重的梯度）&lt;/p&gt;
&lt;p&gt;  以卷积神经网络为例&lt;/p&gt;
&lt;h4 id=&#34;431-类变量&#34;&gt;&lt;a href=&#34;#4-3-1-类变量&#34; class=&#34;headerlink&#34; title=&#34;4.3.1 类变量&#34;&gt;&lt;/a&gt;4.3.1 类变量&lt;/h4&gt;&lt;p&gt;权重参数（字典形式：key-名称；value-矩阵）&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 初始化权重&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&amp;amp;#125;&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; weight_init_std &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; \
                    np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filter_num&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; input_dim&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; filter_size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; filter_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;filter_num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; weight_init_std &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; \
                    np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pool_output_size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hidden_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hidden_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; weight_init_std &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; \
                    np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;randn&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;hidden_size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; output_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;output_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;各个层对象（无序表。）&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 生成层&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; OrderedDict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Conv1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Convolution&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                                   conv_param&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;stride&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; conv_param&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;pad&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Relu1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Relu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Pool1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Pooling&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;pool_h&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; pool_w&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; stride&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Affine1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Affine&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Relu2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Relu&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Affine2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Affine&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;last_layer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; SoftmaxWithLoss&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;432-初始化函数主要用于定义类变量&#34;&gt;&lt;a href=&#34;#4-3-2-初始化函数（主要用于定义类变量）&#34; class=&#34;headerlink&#34; title=&#34;4.3.2 初始化函数（主要用于定义类变量）&#34;&gt;&lt;/a&gt;4.3.2 初始化函数（主要用于定义类变量）&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; input_dim&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
             conv_param&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;filter_num&#39;:30, &#39;filter_size&#39;:5, &#39;pad&#39;:0, &#39;stride&#39;:1&amp;amp;#125;,&lt;/span&gt;
             hidden_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; output_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weight_init_std&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;包括：&lt;/p&gt;
&lt;p&gt;  输入矩阵的形状大小（特征值的数量和排列）&lt;/p&gt;
&lt;p&gt;  滤波器的参数（形状、步幅、填充等，滤波器是卷积层的权重）&lt;/p&gt;
&lt;p&gt;  各层的神经元数量&lt;/p&gt;
&lt;p&gt;  标准差（初始化权重=标准差*范围随机数）&lt;/p&gt;
&lt;h4 id=&#34;433-预测函数&#34;&gt;&lt;a href=&#34;#4-3-3-预测函数&#34; class=&#34;headerlink&#34; title=&#34;4.3.3 预测函数&#34;&gt;&lt;/a&gt;4.3.3 预测函数&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;predict&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; 
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#层次递进，计算到输出层softmax处理前（这里softmax和loss合并了）&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; layer &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; layer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;forward&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; x
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;434-损失函数&#34;&gt;&lt;a href=&#34;#4-3-4-损失函数&#34; class=&#34;headerlink&#34; title=&#34;4.3.4 损失函数&#34;&gt;&lt;/a&gt;4.3.4 损失函数&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;loss&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;求损失函数
    参数x是输入数据、t是教师标签
       就是比predict多往前走一步（进行softmax处理并求交叉熵误差）
    &#34;&#34;&#34;&lt;/span&gt;
    y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;predict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;last_layer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;forward&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;435-计算精度&#34;&gt;&lt;a href=&#34;#4-3-5-计算精度&#34; class=&#34;headerlink&#34; title=&#34;4.3.5 计算精度&#34;&gt;&lt;/a&gt;4.3.5 计算精度&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;accuracy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; batch_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ndim &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
    acc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; batch_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        tx &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
        tt &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
        y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;predict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;tx&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;argmax&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        acc &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sum&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; tt&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 
    
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; acc &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;436-求梯度&#34;&gt;&lt;a href=&#34;#4-3-6-求梯度&#34; class=&#34;headerlink&#34; title=&#34;4.3.6 求梯度&#34;&gt;&lt;/a&gt;4.3.6 求梯度&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;gradient&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;求梯度（误差反向传播法）
    Parameters
    ----------
    x : 输入数据
    t : 标签值
    Returns
    -------
    具有各层的梯度的字典变量
        grads[&#39;W1&#39;]、grads[&#39;W2&#39;]、...是各层的权重
        grads[&#39;b1&#39;]、grads[&#39;b2&#39;]、...是各层的偏置
    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# forward&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# backward&lt;/span&gt;
    dout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
    dout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;last_layer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;backward&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    layers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    layers&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reverse&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; layer &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; layers&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        dout &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; layer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;backward&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dout&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 设定&lt;/span&gt;
    grads &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&amp;amp;#125;&lt;/span&gt;
    grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Conv1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Conv1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db
    grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Affine1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Affine1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db
    grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; grads&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b3&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Affine2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dW&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Affine2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;db

    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; grads
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;437-保存参数学习完后保存下最终权重等参数&#34;&gt;&lt;a href=&#34;#4-3-7-保存参数（学习完后保存下最终权重等参数）&#34; class=&#34;headerlink&#34; title=&#34;4.3.7 保存参数（学习完后保存下最终权重等参数）&#34;&gt;&lt;/a&gt;4.3.7 保存参数（学习完后保存下最终权重等参数）&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;save_params&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;params.pkl&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    params &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&amp;amp;#125;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; val &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; val
    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;wb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        pickle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;438-加载参数预测时加载之前学习到的参数&#34;&gt;&lt;a href=&#34;#4-3-8-加载参数（预测时加载之前学习到的参数）&#34; class=&#34;headerlink&#34; title=&#34;4.3.8 加载参数（预测时加载之前学习到的参数）&#34;&gt;&lt;/a&gt;4.3.8 加载参数（预测时加载之前学习到的参数）&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;load_params&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_name&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;params.pkl&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        params &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pickle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;load&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; val &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; params&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; val

    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; enumerate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Conv1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Affine1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Affine2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;W &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;W&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;layers&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;b&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;44-trainer训练类学习类&#34;&gt;&lt;a href=&#34;#4-4-Trainer训练类（学习类）&#34; class=&#34;headerlink&#34; title=&#34;4.4 Trainer训练类（学习类）&#34;&gt;&lt;/a&gt;4.4 Trainer训练类（学习类）&lt;/h3&gt;&lt;p&gt;  包括初始化函数（确认训练测试集以及其他训练所用参数等）、训练函数等&lt;/p&gt;
&lt;h4 id=&#34;441-类变量及初始化函数&#34;&gt;&lt;a href=&#34;#4-4-1-类变量及初始化函数&#34; class=&#34;headerlink&#34; title=&#34;4.4.1 类变量及初始化函数&#34;&gt;&lt;/a&gt;4.4.1 类变量及初始化函数&lt;/h4&gt;&lt;p&gt;初始化：&lt;br&gt;   训练所用的 训练测试集、分片、epoch、参数更新算法、神经网络、训练次数&lt;/p&gt;
&lt;p&gt;初始化函数：主要用于定义、初始化变量&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;__init__&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; network&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
             epochs&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mini_batch_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
             optimizer&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;SGD&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; optimizer_param&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;lr&#39;:0.01&amp;amp;#125;, &lt;/span&gt;
             evaluate_sample_num_per_epoch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; verbose&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;network &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; network&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#神经网络（type=神经网络类）&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;verbose &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; verbose&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#是否实时输出迭代信息&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x_train&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#训练样本数据集（type=np.array）&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_train &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t_train&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#训练监督数据集&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x_test&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#测试样本数据集&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_test &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; t_test&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#测试监督数据集&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;epochs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; epochs&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#epoch的数量。epoch，把所有样本都过一遍的分片循环次数&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;batch_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; mini_batch_size&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#分片大小&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;evaluate_sample_num_per_epoch&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#每个epoch有几个样本数，默认None，也就是所有样本/epoch&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# optimzer：优化器（优化算法，更新权重等参数的算法）&lt;/span&gt;
optimizer_class_dict &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;sgd&#39;:SGD, &#39;momentum&#39;:Momentum, &#39;nesterov&#39;:Nesterov, &#39;adagrad&#39;:AdaGrad, &#39;rmsprpo&#39;:RMSprop, &#39;adam&#39;:Adam&amp;amp;#125;&lt;/span&gt;
    
self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;optimizer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;   
optimizer_class_dict&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;optimizer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lower&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;optimizer_param&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#SGD(&amp;amp;#123;&#39;lr&#39;:0.01&amp;amp;#125;),**表示参数以字典形式导入&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; x_train&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;shape&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#训练数据集大小&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iter_per_epoch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; max&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_size &lt;span class=&#34;token operator&#34;&gt;/&lt;/span&gt; mini_batch_size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#1个epoch的大小，把所有样本都过一遍的分片循环次数&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max_iter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;epochs &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iter_per_epoch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#迭代次数（训练次数，以学习一个分片为一次）&lt;/span&gt;
 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;训练中：&lt;br&gt;   实时保存 当前训练次数、当前精度、当前损失函数&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;current_iter &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#当前迭代次数&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;current_epoch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#当前epoch数&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#记录下迭代信息，方便画图（以epoch为单位）&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_loss_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#损失函数&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_acc_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#训练准确率&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;test_acc_list &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#测试准确率&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;442-训练函数&#34;&gt;&lt;a href=&#34;#4-4-2-训练函数&#34; class=&#34;headerlink&#34; title=&#34;4.4.2 训练函数&#34;&gt;&lt;/a&gt;4.4.2 训练函数&lt;/h4&gt;&lt;p&gt;（每个分片）训练学习的函数，其中包括&lt;br&gt;   分片、计算梯度、按梯度更新权重、计算保存损失函数、计算保存训练测试精度等&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;train_step&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    （每个分片）训练学习的函数，其中包括
        分片、计算梯度、按梯度更新权重、计算保存损失函数、计算保存训练测试精度等
    Returns
    -------
    &#34;&#34;&#34;&lt;/span&gt;
    batch_mask &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;choice&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;batch_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#从[0,train_size)中随机选取batch_size个数字&lt;/span&gt;
    x_batch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;batch_mask&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#分片大小&amp;lt;=batch_size，因为batch_mask中有重复元素&lt;/span&gt;
    t_batch &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;batch_mask&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#神经网络类的gradient函数封装了实时保存权重梯度的功能&lt;/span&gt;
    grads &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;network&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;gradient&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x_batch&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_batch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;optimizer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;network&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;params&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; grads&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#按照梯度更新权重&lt;/span&gt;

    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#计算保存损失函数&lt;/span&gt;
    loss &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;network&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loss&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x_batch&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_batch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_loss_list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;loss&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;verbose&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;train loss:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;loss&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;current_iter &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;iter_per_epoch &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;current_epoch &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#一次epoch结束保存训练测试精度&lt;/span&gt;
        x_train_sample&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_train_sample &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_train
        x_test_sample&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_test_sample &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_test

        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 指定epoch大小的情况下，一般不指定，默认全部样本为一个epoch&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;not&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;evaluate_sample_num_per_epoch &lt;span class=&#34;token keyword&#34;&gt;is&lt;/span&gt; None&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            t &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;evaluate_sample_num_per_epoch
            x_train_sample&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_train_sample &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_train&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
            x_test_sample&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_test_sample &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_test&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_test&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
            
        train_acc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;network&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;accuracy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x_train_sample&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_train_sample&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        test_acc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;network&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;accuracy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x_test_sample&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_test_sample&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_acc_list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;train_acc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;test_acc_list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;test_acc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;verbose&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;=== epoch:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;current_epoch&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;, train acc:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;train_acc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;, test acc:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;test_acc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; ===&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;current_iter &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;443-最终训练函数提供给外界的api&#34;&gt;&lt;a href=&#34;#4-4-3-最终训练函数（提供给外界的API）&#34; class=&#34;headerlink&#34; title=&#34;4.4.3 最终训练函数（提供给外界的API）&#34;&gt;&lt;/a&gt;4.4.3 最终训练函数（提供给外界的API）&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;train&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    总训练，
    Returns
    -------
    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;max_iter&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_step&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#最终精度，用学习完的权重参数最后预测一次测试数据集&lt;/span&gt;
    test_acc &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;network&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;accuracy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;x_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;t_test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; self&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;verbose&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;=============== Final Test Accuracy ===============&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;test acc:&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;test_acc&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;45-数据集加载mnistpy&#34;&gt;&lt;a href=&#34;#4-5-数据集加载mnist-py&#34; class=&#34;headerlink&#34; title=&#34;4.5 数据集加载mnist.py&#34;&gt;&lt;/a&gt;4.5 数据集加载mnist.py&lt;/h3&gt;&lt;h4 id=&#34;451-初始化所需参数&#34;&gt;&lt;a href=&#34;#4-5-1-初始化所需参数&#34; class=&#34;headerlink&#34; title=&#34;4.5.1 初始化所需参数&#34;&gt;&lt;/a&gt;4.5.1 初始化所需参数&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;爬数据的网站url&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地保存路径（网上下载的压缩文件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;本地保存路径（用于实验的处理后数据）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;训练/测试次数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;图片像素/一维展开后大小&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;url_base &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;http://yann.lecun.com/exdb/mnist/&#39;&lt;/span&gt;
key_file &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;train_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train-images-idx3-ubyte.gz&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;train_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train-labels-idx1-ubyte.gz&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;test_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;t10k-images-idx3-ubyte.gz&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    &lt;span class=&#34;token string&#34;&gt;&#39;test_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;t10k-labels-idx1-ubyte.gz&#39;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#125;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#父目录路径&lt;/span&gt;
dataset_dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dirname&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;abspath&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__file__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
save_file &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset_dir &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/mnist.pkl&#34;&lt;/span&gt;

train_num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;60000&lt;/span&gt;
test_num &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10000&lt;/span&gt;
img_dim &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
img_size &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;784&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;452-下载所需数据集&#34;&gt;&lt;a href=&#34;#4-5-2-下载所需数据集&#34; class=&#34;headerlink&#34; title=&#34;4.5.2 下载所需数据集&#34;&gt;&lt;/a&gt;4.5.2 下载所需数据集&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;作用：从网站上按照url+file_name爬数据，每个文件爬一次即可（第一次执行会有点慢，之后都正常）&lt;/li&gt;
&lt;li&gt;下载下来的数据一般需要后序处理（解压缩等）&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;_download&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;

    file_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset_dir &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; file_name
    
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exists&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Downloading &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; file_name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; ... &#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
 
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 把url_base+file_name的数据下载到本地file_path&lt;/span&gt;
    urllib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;request&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;urlretrieve&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;url_base &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; file_name&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Done&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;download_mnist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    将mnist数据集中需要用到的数据（上面key_file字典中定义的）下载下来
    Returns
    -------

    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; key_file&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
       _download&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;v&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;453-解压打开gzip文件&#34;&gt;&lt;a href=&#34;#4-5-3-解压打开gzip文件&#34; class=&#34;headerlink&#34; title=&#34;4.5.3 解压打开gzip文件&#34;&gt;&lt;/a&gt;4.5.3 解压打开gzip文件&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;_load_label&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;读取gzip文件并提示，读取成功打印Done
    Returns 文件内容(多维向量)
    &#34;&#34;&#34;&lt;/span&gt;
    file_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset_dir &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; file_name
    
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Converting &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; file_name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; to NumPy Array ...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; gzip&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#打开gzip文件，rb r-只读，b-读取的是二进制文件&lt;/span&gt;
            labels &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;frombuffer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;uint8&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; offset&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# numpy.frombuffer(buffer, dtype=float, count=-1, offset=0)&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 参数&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#     缓冲区：它表示暴露缓冲区接口的对象。&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#     dtype：代表返回的数据类型数组的数据类型。&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#     count：代表返回的ndarray的长度。默认值为-1。&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#     偏移量：代表读取的起始位置。默认值为0。&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Done&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; labels

&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;_load_img&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_name&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    打开图像数据的gzip文件并转换成1*784的一维向量
    Parameters
    ----------
    file_name

    Returns 一维展开的输入图像数据（一维向量）
    -------

    &#34;&#34;&#34;&lt;/span&gt;
    file_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset_dir &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;/&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; file_name
    
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Converting &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; file_name &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; to NumPy Array ...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    
    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; gzip&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file_path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;frombuffer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;uint8&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; offset&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;16&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; data&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; img_size&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Done&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; data
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;454-将数据集信息保存在dict中&#34;&gt;&lt;a href=&#34;#4-5-4-将数据集信息保存在dict中&#34; class=&#34;headerlink&#34; title=&#34;4.5.4 将数据集信息保存在dict中&#34;&gt;&lt;/a&gt;4.5.4 将数据集信息保存在dict中&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;主要方便于init_mnist()中将数据集保存在本地文件中&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;_convert_numpy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    Returns 以字典dict形式返回训练集/测试集
    key-描述数据集监督数据/测试数据 的字符串
    value-监督数据（label）/测试数据（image）的numpy表示
    -------

    &#34;&#34;&#34;&lt;/span&gt;
    dataset &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&amp;amp;#125;&lt;/span&gt;
    dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;  _load_img&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key_file&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; _load_label&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key_file&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    
    dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; _load_img&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key_file&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; _load_label&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key_file&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; dataset
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;455-将解压后的数据集保存到本地&#34;&gt;&lt;a href=&#34;#4-5-5-将解压后的数据集保存到本地&#34; class=&#34;headerlink&#34; title=&#34;4.5.5 将解压后的数据集保存到本地&#34;&gt;&lt;/a&gt;4.5.5 将解压后的数据集保存到本地&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;init_mnist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    将下载下来的数据保存到本地文件中save_file中
    Returns
    -------

    &#34;&#34;&#34;&lt;/span&gt;
    download_mnist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    dataset &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; _convert_numpy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Creating pickle file ...&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;save_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;wb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#wb-写入二进制文件&lt;/span&gt;
        pickle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#将dataset的数据保存到f中，本例是save_file文件，即mnist.pkl。-1表示使用最高protocol对dataset压缩&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Done!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;456-监督数据格式转换&#34;&gt;&lt;a href=&#34;#4-5-6-监督数据格式转换&#34; class=&#34;headerlink&#34; title=&#34;4.5.6 监督数据格式转换&#34;&gt;&lt;/a&gt;4.5.6 监督数据格式转换&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;如果参数one_hot_label=False就不用执行此函数&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;_change_one_hot_label&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    将监督数据转换成[0,0,1,0,0,0,0,0,0,0]的形式
    Parameters
    ----------
    X 一组监督数据。如[5,9,8,3,4,6]。一维向量

    Returns 一维向量形式的监督数据（一组）
    -------

    &#34;&#34;&#34;&lt;/span&gt;
    T &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;zeros&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#10是因为本例数字识别一共10个数&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; idx&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; row &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; enumerate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#枚举，同时遍历索引和元素&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#idx-索引，row-（idx索引指向的）元素&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#row是一个监督数据（标签），T是一组&lt;/span&gt;
        row&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;idx&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
        
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; T
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;457-对外接口api&#34;&gt;&lt;a href=&#34;#4-5-7-对外接口api&#34; class=&#34;headerlink&#34; title=&#34;4.5.7 对外接口api&#34;&gt;&lt;/a&gt;4.5.7 对外接口api&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;load_mnist&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;normalize&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; flatten&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;True&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; one_hot_label&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;读入MNIST数据集
    
    Parameters
    ----------
    normalize : 将图像的像素值正规化为0.0~1.0
    one_hot_label : 
        one_hot_label为True的情况下，标签作为one-hot数组返回
        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组
    flatten : 是否将图像展开为一维数组
    
    Returns
    -------
    (训练图像, 训练标签), (测试图像, 测试标签)
    &#34;&#34;&#34;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;not&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;exists&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;save_file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        init_mnist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        
    &lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;save_file&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;rb&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        dataset &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pickle&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;load&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#加载本地下载好的数据集&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; normalize&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;test_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;astype&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;float32&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#转换成固定的数据类型float32&lt;/span&gt;
            dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;/=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;255.0&lt;/span&gt;
            
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; one_hot_label&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; _change_one_hot_label&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; _change_one_hot_label&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;not&lt;/span&gt; flatten&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
         &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;test_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
            dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;key&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reshape&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_img&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; dataset&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test_label&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;46-执行主函数包括图像显示&#34;&gt;&lt;a href=&#34;#4-6-执行主函数（包括图像显示）&#34; class=&#34;headerlink&#34; title=&#34;4.6 执行主函数（包括图像显示）&#34;&gt;&lt;/a&gt;4.6 执行主函数（包括图像显示）&lt;/h3&gt;&lt;h4 id=&#34;461-读入数据&#34;&gt;&lt;a href=&#34;#4-6-1-读入数据&#34; class=&#34;headerlink&#34; title=&#34;4.6.1 读入数据&#34;&gt;&lt;/a&gt;4.6.1 读入数据&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 读入数据&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_train&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_test&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; load_mnist&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flatten&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;False&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 处理花费时间较长的情况下减少数据 取前5000个样本&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#x_train, t_train = x_train[:5000], t_train[:5000]&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#x_test, t_test = x_test[:1000], t_test[:1000]&lt;/span&gt;

max_epochs &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;20&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#20轮次&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;462-创建神经网络对象&#34;&gt;&lt;a href=&#34;#4-6-2-创建神经网络对象&#34; class=&#34;headerlink&#34; title=&#34;4.6.2 创建神经网络对象&#34;&gt;&lt;/a&gt;4.6.2 创建神经网络对象&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#建立神经网络&lt;/span&gt;
network &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; SimpleConvNet&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;input_dim&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;28&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; 
                        conv_param &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;filter_num&#39;: 30, &#39;filter_size&#39;: 5, &#39;pad&#39;: 0, &#39;stride&#39;: 1&amp;amp;#125;,&lt;/span&gt;
                        hidden_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; output_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weight_init_std&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.01&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;463-创建训练对象&#34;&gt;&lt;a href=&#34;#4-6-3-创建训练对象&#34; class=&#34;headerlink&#34; title=&#34;4.6.3 创建训练对象&#34;&gt;&lt;/a&gt;4.6.3 创建训练对象&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#训练对象，拟定训练参数&lt;/span&gt;
trainer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Trainer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;network&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_train&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; x_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; t_test&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  epochs&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;max_epochs&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; mini_batch_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                  optimizer&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Adam&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; optimizer_param&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;lr&#39;: 0.001&amp;amp;#125;,&lt;/span&gt;
                  evaluate_sample_num_per_epoch&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;464-训练并保存参数&#34;&gt;&lt;a href=&#34;#4-6-4-训练并保存参数&#34; class=&#34;headerlink&#34; title=&#34;4.6.4 训练并保存参数&#34;&gt;&lt;/a&gt;4.6.4 训练并保存参数&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;trainer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 保存参数&lt;/span&gt;
network&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;save_params&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;params.pkl&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Saved Network Parameters!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;465-绘图&#34;&gt;&lt;a href=&#34;#4-6-5-绘图&#34; class=&#34;headerlink&#34; title=&#34;4.6.5 绘图&#34;&gt;&lt;/a&gt;4.6.5 绘图&lt;/h4&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 绘制图形&lt;/span&gt;
markers &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;train&#39;: &#39;o&#39;, &#39;test&#39;: &#39;s&#39;&amp;amp;#125;&lt;/span&gt;
x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arange&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;max_epochs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; trainer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;train_acc_list&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; marker&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;o&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;train&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; markevery&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; trainer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;test_acc_list&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; marker&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;s&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; label&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;test&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; markevery&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;xlabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;epochs&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ylabel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;accuracy&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ylim&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1.0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;legend&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;loc&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;lower right&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;show&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-总结&#34;&gt;&lt;a href=&#34;#5-总结&#34; class=&#34;headerlink&#34; title=&#34;5. 总结&#34;&gt;&lt;/a&gt;5. 总结&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;初始化：&lt;/strong&gt;选取初始权重&lt;code&gt;ω&lt;/code&gt;和偏置&lt;code&gt;b&lt;/code&gt;。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM5Nzg5NzcvYXJ0aWNsZS9kZXRhaWxzLzg0ODYxNDUz&#34;&gt;参数初始化方法&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;包括&lt;code&gt;reset_parameters&lt;/code&gt;、&lt;code&gt;.uniform_&lt;/code&gt;等都是相关&lt;strong&gt;初始化&lt;/strong&gt;方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;torch.empty()&lt;/code&gt;、&lt;code&gt;torch.rand()&lt;/code&gt;、&lt;code&gt;torch.Tensor()&lt;/code&gt;：随机生成&lt;strong&gt;张量&lt;/strong&gt;的方法&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;建立模型：&lt;/strong&gt;即神经网络模型。模型包扩但不限于&lt;strong&gt;参数（权重、偏置、梯度…）&lt;/strong&gt;、&lt;strong&gt;每层的对象（也算模型）&lt;/strong&gt;，神经网络是由多个函数模型组合而成的模型。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;liner()&lt;/code&gt;：线性模型，回归层用到比较多（如果有的话）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LSTMCell()&lt;/code&gt;：RNN的memory层&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;预测：&lt;/strong&gt;根据模型参数求预测值&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;forward()&lt;/code&gt;：根据&lt;strong&gt;公式&lt;/strong&gt;，将&lt;strong&gt;各层&lt;/strong&gt;输入转为输出，在下一层输入。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;predict()&lt;/code&gt;：主要工作是根据&lt;strong&gt;学习模型&lt;/strong&gt;，将&lt;strong&gt;输入&lt;/strong&gt;转换成&lt;strong&gt;输出&lt;/strong&gt;。是&lt;code&gt;forward&lt;/code&gt;的集成&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;损失函数&lt;/strong&gt;：计算预测值和标签值的误差，用于&lt;strong&gt;更新&lt;/strong&gt;模型参数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;loss()&lt;/code&gt;：损失函数一般都命名为loss，主要分&lt;strong&gt;均方差&lt;/strong&gt;和&lt;strong&gt;交叉熵&lt;/strong&gt;2种方法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mean_squared_error()&lt;/code&gt;：均方误差&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cross_entropy_error()&lt;/code&gt;：交叉熵误差&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary_cross_entropy_error()&lt;/code&gt;：二元交叉熵&lt;/li&gt;
&lt;li&gt;&lt;code&gt;binary_cross_entropy_error_with_logits()&lt;/code&gt;：集成sigmod的二元交叉熵&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;求梯度：&lt;/strong&gt;主要是求关于&lt;strong&gt;权重&lt;/strong&gt;的梯度。一般用求导公式或&lt;strong&gt;误差反向传播算法&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;backward()&lt;/code&gt;：可以说是&lt;code&gt;forward()&lt;/code&gt;的反函数，根据各层上游的&lt;strong&gt;梯度&lt;/strong&gt;及该层公式，计算出此层的&lt;strong&gt;梯度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gradient()&lt;/code&gt;：求出&lt;strong&gt;每一层&lt;/strong&gt;的梯度，集成了&lt;code&gt;backward()&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更新权重：&lt;/strong&gt;向损失函数&lt;strong&gt;梯度反方向&lt;/strong&gt;更新参数。(参数包括各层&lt;strong&gt;权重&lt;/strong&gt;、&lt;strong&gt;偏置&lt;/strong&gt;、&lt;strong&gt;梯度&lt;/strong&gt;等)&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;params -= learning_rate * grad&lt;/code&gt;：根据&lt;strong&gt;学习率&lt;/strong&gt;和&lt;strong&gt;梯度&lt;/strong&gt;反向更新即可，这是常规写法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;torch&lt;/code&gt;更新：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;新建一个优化器，参数内容：学习率、模型的所有参数（权重、梯度等）&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;optim &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;optim&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;SGD&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parameters&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; momentum&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.9&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#此例是SGD优化器，lr：学习率&lt;/span&gt;
optim &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; torch&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;optim&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Adam&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;model&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;parameters&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; lr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1e&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#Adam优化器&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;通过优化器更新参数&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;optim&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;step&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#gradient descent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;预测：&lt;/strong&gt;是否满足要求？是→结束；否→继续3,4,5&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;六-支持向量机&#34;&gt;&lt;a href=&#34;#六、-支持向量机&#34; class=&#34;headerlink&#34; title=&#34;六、 支持向量机&#34;&gt;&lt;/a&gt;六、 支持向量机&lt;/h1&gt;&lt;p&gt;什么是支持向量机(SVM)：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxMDk0NDg5JUUzJTgwJTgyJUU1JThGJUFGJUU0JUJCJUE1JUU3JTlDJThCJUU3JTlDJThCJUU4JUJGJTk5JUU0JUI4JUFBJUVGJUJDJThDJUU4JUFFJUIyJUU1JUJFJTk3JUU5JTlEJTlFJUU1JUI4JUI4JUU5JTgwJTlBJUU0JUJGJTk3JUU2JTk4JTkzJUU2JTg3JTgy&#34;&gt;https://www.zhihu.com/question/21094489。可以看看这个，讲得非常通俗易懂&lt;/span&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;大意是找个&lt;strong&gt;函数&lt;/strong&gt;尽可能把2类东西分开。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一维：&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/7befaafc45763b9c4469abf245dc98cb_720w.jpg&#34; alt=&#34;img&#34;&gt;二维：&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/55d7ad2a6e23579b17aec0c3c9135eb3_720w.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;正则化&#34;&gt;&lt;a href=&#34;#正则化&#34; class=&#34;headerlink&#34; title=&#34;正则化&#34;&gt;&lt;/a&gt;正则化&lt;/h2&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;正则化是为了防止过拟合&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;理论上来讲正则起到的作用就是：“损失精度去调整样本的不足产生的拟合”。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;正则化的英文 Regularizaiton-Regular-Regularize，&lt;strong&gt;直译应该是：规则化&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;十-knn算法&#34;&gt;&lt;a href=&#34;#十、-KNN算法&#34; class=&#34;headerlink&#34; title=&#34;十、 KNN算法&#34;&gt;&lt;/a&gt;十、 KNN算法&lt;/h1&gt;&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzkwOTY1NjA=&#34;&gt;https://zhuanlan.zhihu.com/p/339096560&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-knn算法&#34;&gt;&lt;a href=&#34;#1-KNN算法&#34; class=&#34;headerlink&#34; title=&#34;1. KNN算法&#34;&gt;&lt;/a&gt;1. KNN算法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓K最近邻，就是K个最近的邻居的意思，说的是每个样本都可以用它最接近的K个邻近值来代表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优：简单&lt;/li&gt;
&lt;li&gt;缺：计算量大，对每一个待分类的文本都要计算它到全体已知样本的距离。&lt;ul&gt;
&lt;li&gt;剪辑：事先去除对分类作用不大的样本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-步骤&#34;&gt;&lt;a href=&#34;#1-1-步骤&#34; class=&#34;headerlink&#34; title=&#34;1.1 步骤&#34;&gt;&lt;/a&gt;1.1 步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;距离&lt;/strong&gt;度量：常用&lt;strong&gt;欧几里得距离&lt;/strong&gt;。&lt;br&gt;$$&lt;br&gt;\sqrt[p]{\sum_{i}\left | x_{1}-x_{2} \right |^{p}}&lt;br&gt;$$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当p=1时，就是曼哈顿距离（对应&lt;code&gt;L1&lt;/code&gt;范数）&lt;/li&gt;
&lt;li&gt;当p=2时，就是欧氏距离（对应L2范数）&lt;/li&gt;
&lt;li&gt;当p→∞时，就是切比雪夫距离&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;K值&lt;/strong&gt;选择：距离最近的K个样本。通常采用&lt;strong&gt;交叉验证法&lt;/strong&gt;来选取最优的K值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K值较小：训练误差↓，测试误差↑。&lt;strong&gt;容易过拟合&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;K值较大：训练误差↑，测试误差↓。&lt;strong&gt;容易训练不到位&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;12-代码实现&#34;&gt;&lt;a href=&#34;#1-2-代码实现&#34; class=&#34;headerlink&#34; title=&#34;1.2 代码实现&#34;&gt;&lt;/a&gt;1.2 代码实现&lt;/h3&gt;&lt;p&gt;knn的库为&lt;code&gt;KNeighborsRegressor&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; matplotlib&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pyplot &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; plt
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sklearn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;neighbors &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; KNeighborsRegressor
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;生成训练数据&lt;/strong&gt;：以sin函数测试&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;seed&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 随机生成40个(0, 1)之前的数，乘以5，再进行升序&lt;/span&gt;
X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; axis&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 使用sin函数得到y值，并拉伸到一维&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ravel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# y值增加噪声&lt;/span&gt;
y&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rand&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#在图像上显示样本点，s是点的大小，label表示样本标签，一般显示在图像右上角&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;scatter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;marker&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;o&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;color&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;label&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;显示如下：&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/1654135.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;KNN学习-预测&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#建立模型，k近邻数=3，L2欧几里得距离&lt;/span&gt;
clf &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; KNeighborsRegressor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_neighbors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 拟合&lt;/span&gt;
clf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 预测&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 创建[0, 5]之间的500个数的等差数列, 作为测试数据&lt;/span&gt;
T &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;linspace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;newaxis&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#y_是预测值，y_real是数据的实际值&lt;/span&gt;
y_ &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; clf&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;predict&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
y_real&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sin&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;ravel&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;scatter&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;y_real&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;marker&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;o&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;color&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;label&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;bad&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#在图像上显示样本点，s是点的大小，label表示样本标签，一般显示在图像右上角&lt;/span&gt;
plt&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;plot&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;T&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; y_&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#根据X,Y画出描点图，其实主要作用是连线。X_pred和Y_pred一般为数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如下图：&lt;/p&gt;
&lt;p&gt; &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/156465.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于sklearn.neighbors.KNeighborsRegressor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;KNN的模型应该是一张&lt;strong&gt;距离表&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;KNeighborsRegressor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_neighbors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; weights&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;uniform&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; algorithm&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;auto&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; leaf_size&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; metric&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;minkowski&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; metric_params&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; n_jobs&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;None&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;**&lt;/span&gt;kwargs&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;
    最近邻回归，用于预测连续数值
    :param n_neighbors: int, default=5。k值，最近的k个邻居
    :param weights: 
    :param algorithm: 寻找最近邻的算法
        ball_tree：will use BallTree。
        kd_tree： will use KDTree
        brute： 暴力穷举
        auto： 自动选择
    :param leaf_size: int, default=30。传递给BallTree或KDTree的叶大小。这会影响构造和查询的速度，以及存储树所需的内存。
    :param p: int, default=2。当p=1时，使用曼哈顿距离（l1）；对p=2时，欧几里德距离（l2）。对于任意p，使用minkowski距离（lp）。
    :param metric: str or callable, default=’minkowski’。要用于树的距离度量。默认的度量是minkowski，p=2等于标准的欧几里德度量。有关可用度量的列表
    :param metric_params: 
    :param n_jobs: int, default=None。为邻居搜索运行的并行作业数。
    :param kwargs: 
    :return: KNN模型
    &#34;&#34;&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;一般指定一个k就可以了&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;neigh &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; KNeighborsRegressor&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_neighbors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;此外，关于近邻的遍历算法：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;KDTree：&lt;/strong&gt;对于&lt;strong&gt;低维度&lt;/strong&gt; (&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/7fb5b8aaa79d55e35332a1f02a5aee04.jpg&#34; alt=&#34;D &amp;lt; 20&#34;&gt;) 近邻搜索非常快, 当 &lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/e03066df748abd9273db055cb79f0f01.jpg&#34; alt=&#34;D&#34;&gt; 增长到很大时, 效率变低。这就是所谓的 “维度灾难” 的一种体现。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BallTree：&lt;/strong&gt;比 KD 树消耗更多的时间, 但是这种数据结构对于高结构化的数据是非常有效的, 即使在&lt;strong&gt;高维度&lt;/strong&gt;上也是一样.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;函数&lt;code&gt;KNeighborsRegressor()&lt;/code&gt;返回一个&lt;code&gt;KNeighborsRegressor&lt;/code&gt;对象。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用属性（成员变量）：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;effective_metric_&lt;/code&gt;：&lt;strong&gt;str or callable&lt;/strong&gt;。距离度量。如&lt;code&gt;metric=&amp;#39;minkowski&amp;#39;&lt;/code&gt;并且&lt;code&gt;p=2&lt;/code&gt;时，返回&lt;code&gt;euclidean-欧几里得&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;effective_metric_params_&lt;/code&gt;：&lt;strong&gt;dict&lt;/strong&gt;。度量函数的其他参数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_samples_fit_&lt;/code&gt;：&lt;strong&gt;int&lt;/strong&gt;。用于训练的样本数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;常用函数：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;fit(X, y)&lt;/code&gt;：拟合（训练）模型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;predict(X)&lt;/code&gt;：预测&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;get_params(deep=True)&lt;/code&gt;：以字典形式返回模型参数，包括但不限于&lt;code&gt;fit_intercept&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;set_params(**params)&lt;/code&gt;：设置参数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;kneighbors(X=None, n_neighbors=None, return_distance=True)&lt;/code&gt;：返回指定样本的最近的k个邻居&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;：&lt;strong&gt;array&lt;/strong&gt;。样本数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_neighbors&lt;/code&gt;：&lt;strong&gt;int&lt;/strong&gt;。邻居数，默认是一开始传入的k值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;return_distance&lt;/code&gt;：&lt;strong&gt;bool&lt;/strong&gt;。是否返回距离。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return&lt;/strong&gt;：&lt;ul&gt;
&lt;li&gt;&lt;code&gt;neigh_dist&lt;/code&gt;：&lt;strong&gt;ndarray&lt;/strong&gt;。各邻居的距离（需要return_distance为true）。二维数组（一维-样本；二维-每个样本的邻居们）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;neigh_ind &lt;/code&gt;：&lt;strong&gt;ndarray&lt;/strong&gt;。邻居的索引。二维数组（一维-样本；二维-每个样本的邻居们）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; samples &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; neigh &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; NearestNeighbors&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_neighbors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#NearestNeighbors是无监督的最近邻&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; neigh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;samples&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; neigh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;kneighbors&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#表示最近的1个邻居距离为0.5，index=2&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#或者这样接收也可&lt;/span&gt;
distances&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; indices &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; neigh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;kneighbors&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; distances
array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#行-样本，列-样本的每个邻居的距离&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; indices
array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#最近的1个邻居是index=2的点&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;kneighbors_graph(X=None, n_neighbors=None,mode=&amp;#39;connectivity&amp;#39;)&lt;/code&gt;：返回邻居&lt;strong&gt;连接图&lt;/strong&gt;，1-相邻；0-不相邻&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X&lt;/code&gt;：&lt;strong&gt;array&lt;/strong&gt;。样本数组&lt;/li&gt;
&lt;li&gt;&lt;code&gt;n_neighbors&lt;/code&gt;：&lt;strong&gt;int&lt;/strong&gt;。邻居数，默认是一开始传入的k值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;mode&lt;/code&gt;：返回矩阵的类型&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;return&lt;/strong&gt;：返回一个距离矩阵，可通过&lt;code&gt;toArray()&lt;/code&gt;转为&lt;strong&gt;array&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; neigh &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; NearestNeighbors&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_neighbors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; A &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; neigh&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;kneighbors_graph&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; A&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;toarray&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#行-被测样本，这行是[0]。这行表示：对[0]来说，[0]和[1]是最近的2个邻居&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#列-每个邻居（包括自身）&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-总结&#34;&gt;&lt;a href=&#34;#1-3-总结&#34; class=&#34;headerlink&#34; title=&#34;1.3 总结&#34;&gt;&lt;/a&gt;1.3 总结&lt;/h3&gt;&lt;p&gt;先计算出所有样本距离目标的&lt;strong&gt;距离&lt;/strong&gt;，取最进的&lt;strong&gt;K个&lt;/strong&gt;样本的平均数/中位数/众数/…&lt;/p&gt;
&lt;h2 id=&#34;2-knn填充数据&#34;&gt;&lt;a href=&#34;#2-KNN填充数据&#34; class=&#34;headerlink&#34; title=&#34;2. KNN填充数据&#34;&gt;&lt;/a&gt;2. KNN填充数据&lt;/h2&gt;&lt;p&gt;实际上，python中的KNNImputer库很好的利用knn实现了数据填充，&lt;strong&gt;直接上原理：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;对于数据缺失的特征点，计算与其他数据特征间的距离，选取k个最小距离的数据特征点，把这k个数据特征中对应于目标特征点数据缺失的地方进行求&lt;strong&gt;均值&lt;/strong&gt;，作为填充数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;举个例子：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-text&#34;&gt;&lt;code class=&#34;language-text&#34;&gt;X = [[1, 2, np.nan], [3, 4, 3], [np.nan, 6, 5], [8, 8, 7]] = [n1 n2 n3 n4]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;含空值的欧式距离，如n1与n3：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/equation.svg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文献：John K. Dixon, “Pattern Recognition with Partly Missing Data”, IEEE Transactions on Systems, Man, and Cybernetics, Volume: 9, Issue: 10, pp. 617 - 621, Oct. 1979.&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly9pZWVleHBsb3JlLmllZWUub3JnL2Fic3RyYWN0L2RvY3VtZW50LzQzMTAwOTAv&#34;&gt;http://ieeexplore.ieee.org/abs&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对应n1与n3的距离为：&lt;/p&gt;
&lt;p&gt;![img](%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/equation (1).svg)&lt;/p&gt;
&lt;p&gt;对应n1与n2的距离为：&lt;br&gt;$$&lt;br&gt;\sqrt{\frac{3}{2}\times ((1-3)^2+(2-4)^2)}=\sqrt{12}=3.464&lt;br&gt;$$&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;python的nan_euclidean_distances函数可计算含空值的距离矩阵&lt;/strong&gt;：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sklearn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;metrics &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; nan_euclidean_distances
X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nan&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nan&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
nan_euclidean_distances&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算出的距离矩阵为：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;        &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;3.46410162&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;6.92820323&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;11.29158979&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.46410162&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;        &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;3.46410162&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;7.54983444&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6.92820323&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;3.46410162&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;        &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;3.46410162&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;11.29158979&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;7.54983444&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;3.46410162&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;  &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;        &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;python可直接用KNNImputer进行空值填充：&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sklearn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;impute &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; KNNImputer
X &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nan&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;nan&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
imputer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; KNNImputer&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n_neighbors&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
imputer&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fit_transform&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;X&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;KNNImputer中可选择k值来进行数据填充，这里选择2，填充结果：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
       &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="算法" scheme="https://nitgod1996.com/tags/%E7%AE%97%E6%B3%95/" />
        <category term="Python" scheme="https://nitgod1996.com/tags/Python/" />
        <category term="机器学习" scheme="https://nitgod1996.com/tags/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/" />
        <updated>2021-06-10T11:20:23.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/</id>
        <title>降低数据稀疏度的算法研究</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/"/>
        <content type="html">&lt;h1 id=&#34;个人见解&#34;&gt;&lt;a href=&#34;#个人见解&#34; class=&#34;headerlink&#34; title=&#34;个人见解&#34;&gt;&lt;/a&gt;个人见解&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;目前主要的填充算法是通过机器学习，像预测结果一样预测缺失值&lt;/p&gt;
&lt;p&gt;缺点：是预测出的缺失值一定程序上算是&lt;strong&gt;噪声&lt;/strong&gt;，通过该缺失值又去预测结果可能会对结果产生干扰&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;填充主要是根据其他参数关联出缺失值。（通过其他样本学习出模型，输入缺失样本的参数预测缺失值）。&lt;/p&gt;
&lt;p&gt;也就是意味着：缺失值需要和其他属性有一定的关联，即样本属性最好有一定的&lt;strong&gt;冗余度&lt;/strong&gt;（多采集一些特征，也就是常说的高维。通过降维去降低稀疏度）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;但高维和稀疏往往是互相嵌结的，高维易容易产生数据样本稀疏，距离计算困难；而稀疏数据又需要通过高维来填充。&lt;strong&gt;高维数据降维→低维子空间，子空间样本密度大幅提高，距离计算也更容易&lt;/strong&gt;。这是因为观测/收集的数据往往是冗余的，学习任务仅与某个低维分布密切相关。即高维空间的一个低维“嵌入”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;一-初窥&#34;&gt;&lt;a href=&#34;#一、-初窥&#34; class=&#34;headerlink&#34; title=&#34;一、 初窥&#34;&gt;&lt;/a&gt;一、 初窥&lt;/h1&gt;&lt;h2 id=&#34;1-一些概念&#34;&gt;&lt;a href=&#34;#1-一些概念&#34; class=&#34;headerlink&#34; title=&#34;1. 一些概念&#34;&gt;&lt;/a&gt;1. 一些概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最小二乘&lt;/strong&gt;：最小二乘法是一种数学优化技术，它通过&lt;strong&gt;最小化误差的平方和&lt;/strong&gt;找到一组数据的&lt;strong&gt;最佳函数&lt;/strong&gt;匹配。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;几何意义：求一条线使得所有点到该线的&lt;strong&gt;距离平方和&lt;/strong&gt;最小&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;数据降维&lt;/strong&gt;：用于预处理，提高算法效率&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在原始的高维空间中，包含有冗余信息以及噪音信息&lt;/li&gt;
&lt;li&gt;而通过降维,减少冗余信息所造成的误差,提高识别（或其他应用）的精度和效率&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;稀疏数据&lt;/strong&gt;：稀疏数据不同于一般数据，它的维度常常极其巨大，并且由于大量的缺失值的存在，使得数据信息极端不完整，常见的降维方法例如主成分、因子分析等无法在此上应用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;稀疏表示：&lt;/strong&gt;X为M*N的数据集，每行表示一个样本，每列表示一个属性。&lt;/p&gt;
&lt;p&gt;寻找一个&lt;strong&gt;系数矩阵A&lt;/strong&gt;（K*N）以及一个&lt;strong&gt;字典矩阵B&lt;/strong&gt;（M*K），使得B*A尽可能的还原X，且A尽可能的稀疏。A便是X的&lt;strong&gt;稀疏表示&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;将一个大矩阵变成两个小矩阵，而达到压缩&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;字典学习：&lt;/strong&gt;通过一个字典将原数据转化为稀疏表示，字典学习和稀疏表示互为&lt;strong&gt;逆过程&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;低秩&lt;/strong&gt;：秩可以形象地理解为信息冗余程度，&lt;strong&gt;秩越低&lt;/strong&gt;意味着冗余信息越少&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;奇异值&lt;/strong&gt;：往往对应着矩阵中隐含的&lt;strong&gt;重要信息&lt;/strong&gt;，且重要性和奇异值大小正相关。每个矩阵&lt;img data-src=&#34;https://www.zhihu.com/equation?tex=A&#34; alt=&#34;[公式]&#34;&gt;都可以表示为一系列秩为1的”小矩阵”之和，而奇异值则衡量了这些“小矩阵”对于&lt;img data-src=&#34;https://www.zhihu.com/equation?tex=A&#34; alt=&#34;[公式]&#34;&gt;的权重。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;正交映射&lt;/strong&gt;：作用就是保留我们已知的元素，将我们不知道的元素变为0。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;核范数&lt;/strong&gt;：&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210610151254748.png&#34; alt=&#34;image-20210610151254748&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;核范数是奇异值的和&lt;/strong&gt;；rank（秩）是非0奇异值的个数。∴核范数能凸近似矩阵的秩&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;稀疏性&lt;/strong&gt;：若信号在某个域中&lt;strong&gt;只有少量非零值&lt;/strong&gt;，那么它在该域稀疏，该域也被称为信号的&lt;strong&gt;稀疏域&lt;/strong&gt;。（0很多）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;稀疏矩阵&lt;/strong&gt;：在&lt;strong&gt;矩阵&lt;/strong&gt;中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-可能可以的一些方法&#34;&gt;&lt;a href=&#34;#2-可能可以的一些方法&#34; class=&#34;headerlink&#34; title=&#34;2. 可能可以的一些方法&#34;&gt;&lt;/a&gt;2. 可能可以的一些方法&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;最简单的方法：&lt;/strong&gt;取众数、中位数、平均值、均方差等。&lt;strong&gt;效果一般，因为等于人为增加了噪声。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;或者缺失严重的直接删除&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;特征删除：删除该特征（删除一列）&lt;/li&gt;
&lt;li&gt;数据删除：删除缺失严重的数据（删除n行）.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;机器学习预测：&lt;/strong&gt;用其他变量做预测模型来算出缺失变量，如&lt;strong&gt;KNN&lt;/strong&gt;，&lt;strong&gt;K-means&lt;/strong&gt;，&lt;strong&gt;决策树&lt;/strong&gt;，&lt;strong&gt;回归算法&lt;/strong&gt;等。&lt;/p&gt;
&lt;p&gt;效果比方法1略好。有一个根本缺陷，如果其他变量和缺失变量无关，则预测的结果无意义。如果预测结果相当准确，则又说明这个变量是没必要加入建模的。一般情况下，介于两者之间。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;期望值最大化（EM算法）：&lt;/strong&gt;对未知参数进行&lt;strong&gt;极大似然估计&lt;/strong&gt;，计算完全数据对应的对数似然函数的&lt;strong&gt;条件期望&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;但是这种方法可能会陷入局部极值，收敛速度也不是很快，并且计算很复杂。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;把变量映射到高维空间。&lt;/strong&gt;如&lt;strong&gt;矩阵补全&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如性别，有男、女、缺失三种情况，则映射成3个变量：是否男、是否女、是否缺失。连续型变量也可以这样处理。&lt;/li&gt;
&lt;li&gt;比如Google、百度的CTR预估模型，预处理时会把所有变量都这样处理，达到几亿维。&lt;/li&gt;
&lt;li&gt;这样做的&lt;strong&gt;好处&lt;/strong&gt;是完整保留了原始数据的全部信息、不用考虑缺失值、不用考虑线性不可分之类的问题。&lt;/li&gt;
&lt;li&gt;缺点是计算量大大提升。&lt;/li&gt;
&lt;li&gt;只有在样本量非常大的时候效果才好，否则会因为过于稀疏，效果很差。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;GAN数据增强：图像补全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;需要恢复的数据具有某种&lt;strong&gt;稀疏结构&lt;/strong&gt;， 如目标函数的&lt;strong&gt;可分性&lt;/strong&gt;、向量的&lt;strong&gt;稀疏性&lt;/strong&gt;、矩阵的&lt;strong&gt;低秩性&lt;/strong&gt;等。 &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;矩阵补全：低秩矩阵补全。推荐系统&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;压缩感知：稀疏信号补全。图像修复&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;全变差正则化 (Total-Variation based Regularization) 的图像恢复&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;深度补全：图像补全&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用sklearn库：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS9tb2R1bGVzL2NsYXNzZXMuaHRtbCNtb2R1bGUtc2tsZWFybi5pbXB1dGU=&#34;&gt;https://scikit-learn.org/stable/modules/classes.html#module-sklearn.impute&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-随手记&#34;&gt;&lt;a href=&#34;#3-随手记&#34; class=&#34;headerlink&#34; title=&#34;3. 随手记&#34;&gt;&lt;/a&gt;3. 随手记&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一般的步骤是：降噪→降维→补全&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-gan数据增强&#34;&gt;&lt;a href=&#34;#2-GAN数据增强&#34; class=&#34;headerlink&#34; title=&#34;2. GAN数据增强&#34;&gt;&lt;/a&gt;2. GAN数据增强&lt;/h2&gt;&lt;p&gt;用GAN生成的图像来做数据增强，如图。主要解决的问题是&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于小数据集，数据量不足， 如果能生成一些就好了。&lt;/li&gt;
&lt;li&gt;如果GAN生成了图片？怎么给这些数据label呢？因为他们相比原始数据也不属于预定义的类别。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vcmVmZXJlbmNlLzIyMTgxOTA1LzE4ODE3amlFOWJBTE1EcDJVZmhBVmwwLXhza21lRTFPZXFYMENYN2tZUl9rcDUyOEctYV9RanhONERTOHpUREZMMmFWYVl6YUdSWW8xNnpDRXc=&#34;&gt;Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro &lt;/span&gt;  中，做了一些尝试。&lt;/p&gt;
&lt;p&gt;实验想法也特别简单，先用原始数据（即使只有2000张图）训练一个GAN，然后生成图片，加入到训练集中。 总结一下就是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;GAN 生成数据是可以用在实际的图像问题上的（不仅仅是像mnist 这种toy dataset上work）作者在两个行人重识别数据集 和 一个细粒度识别 鸟识别数据集上都有提升。&lt;/li&gt;
&lt;li&gt;GAN 数据有三种给pseudo label的方式， 假设我们做五分类&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;把生成的数据都当成新的一类, 六分类，那么生成图像的 label 就可以是 （0, 0, 0, 0, 0, 1） 这样给。&lt;/li&gt;
&lt;li&gt;按照置信度最高的 动态去分配，那个概率高就给谁 比如第三类概率高（0, 0, 1, 0, 0）&lt;/li&gt;
&lt;li&gt;既然所有类都不是，那么可以参考inceptionv3，搞label smooth，每一类置信度相同（0.2, 0.2, 0.2, 0.2, 0.2） 注：作者16年12月写的代码，当时GAN效果没有那么好，用这个效果好也是可能的， 因为生成样本都不是很“真”，所以起到了正则作用。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;22-当缺少的数据是标记时&#34;&gt;&lt;a href=&#34;#2-2-当缺少的数据是标记时&#34; class=&#34;headerlink&#34; title=&#34;2.2 当缺少的数据是标记时&#34;&gt;&lt;/a&gt;2.2 当缺少的数据是标记时&lt;/h2&gt;&lt;p&gt;​    使用半监督学习，一般的思路是：在全部数据上去学习数据表示，在有标签的样本上去学习&lt;strong&gt;模型&lt;/strong&gt;，用所有数据去加正则。&lt;/p&gt;
&lt;h2 id=&#34;3-矩阵补全matrix-completion&#34;&gt;&lt;a href=&#34;#3-矩阵补全Matrix-Completion&#34; class=&#34;headerlink&#34; title=&#34;3. 矩阵补全Matrix Completion&#34;&gt;&lt;/a&gt;3. 矩阵补全Matrix Completion&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;通过&lt;strong&gt;矩阵分解&lt;/strong&gt;（matrix factorization）将一个含缺失值的矩阵 X 分解为两个（或多个）矩阵，然后这些分解后的矩阵相乘就可以得到原矩阵的近似 X’，我们用这个近似矩阵 X’ 的值来填补原矩阵 X 的缺失部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般用于推荐系统算法&lt;/p&gt;
&lt;h2 id=&#34;4-深度补全&#34;&gt;&lt;a href=&#34;#4-深度补全&#34; class=&#34;headerlink&#34; title=&#34;4. 深度补全&#34;&gt;&lt;/a&gt;4. 深度补全&lt;/h2&gt;&lt;p&gt;一般用于计算机视觉，图形补全（深度图补全）&lt;/p&gt;
&lt;h2 id=&#34;5-压缩感知compressed-sensing&#34;&gt;&lt;a href=&#34;#5-压缩感知Compressed-Sensing&#34; class=&#34;headerlink&#34; title=&#34;5. 压缩感知Compressed Sensing&#34;&gt;&lt;/a&gt;5. 压缩感知Compressed Sensing&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;主要是&lt;strong&gt;信号采样&lt;/strong&gt;方法。压缩感知主要涉及到&lt;strong&gt;如何采样&lt;/strong&gt;和&lt;strong&gt;如何恢复&lt;/strong&gt;的问题。&lt;/li&gt;
&lt;li&gt;主要作用：修复图片/恢复信号&lt;/li&gt;
&lt;li&gt;矩阵补全是基于压缩感知的&lt;/li&gt;
&lt;li&gt;基本前提：信号的&lt;strong&gt;稀疏性&lt;/strong&gt;和&lt;strong&gt;不相关性&lt;/strong&gt;。（自己理解：稀疏性意味着信号的主要信息在于少数几个（不为零）数据上，而不相关性意味着获得的这几条数据线性无关，可以推出数据包含的信息）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这套compressed sensing框架和配套理论证明了，在采样率低于critical sampling rate的时候，本来ill-posed的信号恢复和重建问题，可以在通过额外的sparisty prior的帮助下，达到巧妙的&lt;strong&gt;信号完美恢复&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;不仅如此，Tao他们还推导了&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Jlc3RyaWN0ZWRfaXNvbWV0cnlfcHJvcGVydHk=&#34;&gt;Restricted Isotropic Property (RIP)&lt;/span&gt; 等一系列理论，证明了为了达到完美恢复，采样矩阵和信号稀疏度需要满足的条件和相互之间的关系。这为之后Compressed Sensing的发展和应用奠定了理论基础。&lt;/p&gt;
&lt;h1 id=&#34;二-前置知识&#34;&gt;&lt;a href=&#34;#二、-前置知识&#34; class=&#34;headerlink&#34; title=&#34;二、 前置知识&#34;&gt;&lt;/a&gt;二、 前置知识&lt;/h1&gt;&lt;h2 id=&#34;1-数学符号的认识&#34;&gt;&lt;a href=&#34;#1-数学符号的认识&#34; class=&#34;headerlink&#34; title=&#34;1. 数学符号的认识&#34;&gt;&lt;/a&gt;1. 数学符号的认识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;s.t.&lt;/strong&gt;  “使得…满足…”，是subject to 的缩写，表示约束条件。如&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202820584.png&#34; alt=&#34;image-20210622202820584&#34;&gt;，表示满足&lt;code&gt;Ax=y&lt;/code&gt;的最小的&lt;code&gt;x&lt;/code&gt;的L1范数。其中，x是向量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实s.t.也相当于一个括号。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622201802564.png&#34; alt=&#34;image-20210622201802564&#34;&gt;：Lp范数，当p缺省时，默认为2。其中，x-向量，X-矩阵&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202213487.png&#34; alt=&#34;image-20210622202213487&#34;&gt;：全体n维实的列向量构成的集合。同理，&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202229879.png&#34; alt=&#34;image-20210622202229879&#34;&gt;则是全体n1*n2矩阵的集合&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202410553.png&#34; alt=&#34;image-20210622202410553&#34;&gt;：正交投影算子&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-lp范数&#34;&gt;&lt;a href=&#34;#1-lp范数&#34; class=&#34;headerlink&#34; title=&#34;1. lp范数&#34;&gt;&lt;/a&gt;1. lp范数&lt;/h2&gt;&lt;p&gt;以||||符号表示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201414597.png&#34; alt=&#34;image-20210609201414597&#34;&gt;&lt;br&gt;$$&lt;br&gt;l_{p}=\left | x \right |&lt;em&gt;{p}=\sqrt[p]{\sum&lt;/em&gt;{i}\left | x_{i} \right |^{p}}&lt;br&gt;$$&lt;br&gt;&lt;strong&gt;当&lt;code&gt;x=x1-x2&lt;/code&gt;时，这表示的就是欧几里得度量（距离）&lt;/strong&gt;&lt;br&gt;$$&lt;br&gt;\sqrt[p]{\sum_{i}\left | x_{1}-x_{2} \right |^{p}}&lt;br&gt;$$&lt;br&gt;&lt;strong&gt;可以表示2个样本间的距离&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201606973.png&#34; alt=&#34;image-20210609201606973&#34;&gt;：表示x中非0元素的个数，&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201628831.png&#34; alt=&#34;image-20210609201628831&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201651197.png&#34; alt=&#34;image-20210609201651197&#34;&gt;：表示向量的大小，&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201708621.png&#34; alt=&#34;image-20210609201708621&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201724917.png&#34; alt=&#34;image-20210609201724917&#34;&gt;：&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201732341.png&#34; alt=&#34;image-20210609201732341&#34;&gt;，&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-p-np-npc-np-hard问题&#34;&gt;&lt;a href=&#34;#2-P、NP、NPC、NP-hard问题&#34; class=&#34;headerlink&#34; title=&#34;2. P、NP、NPC、NP-hard问题&#34;&gt;&lt;/a&gt;2. P、NP、NPC、NP-hard问题&lt;/h2&gt;&lt;p&gt;前置知识点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;多项式时间：&lt;code&gt;O(n^k)&lt;/code&gt;。其中，k是常数&lt;/li&gt;
&lt;li&gt;多项式时间算法：时间复杂度为多项式时间&lt;code&gt;O(n^k)&lt;/code&gt;的算法，如&lt;strong&gt;冒泡排序&lt;/strong&gt;（复杂度为&lt;code&gt;O(n^2)&lt;/code&gt;）&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;以下开始介绍：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;P类问题：&lt;/strong&gt;存在多项式时间算法的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解释：可以找到时间复杂度为&lt;code&gt;O(n^k)&lt;/code&gt;的算法解决的问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NP类问题：&lt;/strong&gt;能在多项式时间内验证得出一个正确解的问题。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;解释：已知时间复杂度&lt;code&gt;o(1)&amp;lt;o(n)&amp;lt;o(lgn)&amp;lt;o(n^2)&amp;lt;o(n^k)&amp;lt;o(e^n)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;可以找到一种算法时间复杂度&lt;strong&gt;小于&lt;/strong&gt;&lt;code&gt;O(n^k)&lt;/code&gt;的算法解决的问题&lt;/p&gt;
&lt;p&gt;或者，可以找到&lt;strong&gt;优于&lt;/strong&gt;时间复杂度为&lt;code&gt;O(n^k)&lt;/code&gt;的方法，但不一定能求出时间复杂度&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;P类问题是NP类问题的&lt;strong&gt;子集&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NPC类问题（Nondeterminism Polynomial complete）：&lt;/strong&gt;也可以写做&lt;strong&gt;NP=P？问题&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;属于NP类问题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;所有&lt;/strong&gt;的NP问题都可以约化成它&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;约化：&lt;/strong&gt;问题B的算法来解决A ，我们就说问题A可以约化成问题B。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如一元一次方程可以约化为一元二次方程，以一元二次方程的算法求解。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;也就是说，解决了NPC问题就能解决所有NP类问题。NPC问题的复杂度&amp;gt;NP类问题&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;NPH类问题：&lt;/strong&gt;满足NPC的2，但不一定满足1。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;即，&lt;strong&gt;所有&lt;/strong&gt;的NP问题都可以约化成NP-Hard问题&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/20150727214918014&#34; alt=&#34;这里写图片描述&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-knn算法&#34;&gt;&lt;a href=&#34;#2-KNN算法&#34; class=&#34;headerlink&#34; title=&#34;2. KNN算法&#34;&gt;&lt;/a&gt;2. KNN算法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;所谓K最近邻，就是K个最近的邻居的意思，说的是每个样本都可以用它最接近的K个邻近值来代表。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;优：简单&lt;/li&gt;
&lt;li&gt;缺：计算量大，对每一个待分类的文本都要计算它到全体已知样本的距离。&lt;ul&gt;
&lt;li&gt;剪辑：事先去除对分类作用不大的样本&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;21-步骤&#34;&gt;&lt;a href=&#34;#2-1-步骤&#34; class=&#34;headerlink&#34; title=&#34;2.1 步骤&#34;&gt;&lt;/a&gt;2.1 步骤&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;距离&lt;/strong&gt;度量：常用&lt;strong&gt;欧几里得距离&lt;/strong&gt;。&lt;br&gt;$$&lt;br&gt;\sqrt[p]{\sum_{i}\left | x_{1}-x_{2} \right |^{p}}&lt;br&gt;$$&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当p=1时，就是曼哈顿距离（对应&lt;code&gt;l1&lt;/code&gt;范数）&lt;/li&gt;
&lt;li&gt;当p=2时，就是欧氏距离（对应L2范数）&lt;/li&gt;
&lt;li&gt;当p→∞时，就是切比雪夫距离&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;K值&lt;/strong&gt;选择：距离最近的K个样本。通常采用&lt;strong&gt;交叉验证法&lt;/strong&gt;来选取最优的K值。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;K值较小：训练误差↓，测试误差↑。容易&lt;strong&gt;过拟合&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;K值较大：训练误差↑，测试误差↓。容易&lt;strong&gt;训练不到位&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-代码实现&#34;&gt;&lt;a href=&#34;#2-2-代码实现&#34; class=&#34;headerlink&#34; title=&#34;2.2 代码实现&#34;&gt;&lt;/a&gt;2.2 代码实现&lt;/h3&gt;&lt;h1 id=&#34;三-填充评估&#34;&gt;&lt;a href=&#34;#三、-填充评估&#34; class=&#34;headerlink&#34; title=&#34;三、 填充评估&#34;&gt;&lt;/a&gt;三、 填充评估&lt;/h1&gt;&lt;h1 id=&#34;四-矩阵补全&#34;&gt;&lt;a href=&#34;#四、-矩阵补全&#34; class=&#34;headerlink&#34; title=&#34;四、 矩阵补全&#34;&gt;&lt;/a&gt;四、 矩阵补全&lt;/h1&gt;&lt;h2 id=&#34;1-综述&#34;&gt;&lt;a href=&#34;#1-综述&#34; class=&#34;headerlink&#34; title=&#34;1. 综述&#34;&gt;&lt;/a&gt;1. 综述&lt;/h2&gt;&lt;h3 id=&#34;11-溯源&#34;&gt;&lt;a href=&#34;#1-1-溯源&#34; class=&#34;headerlink&#34; title=&#34;1.1 溯源&#34;&gt;&lt;/a&gt;1.1 溯源&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;由&lt;strong&gt;压缩感知&lt;/strong&gt;衍生而来：将矩阵的&lt;strong&gt;低秩性&lt;/strong&gt;视为矩阵&lt;strong&gt;稀疏性&lt;/strong&gt;，那么&lt;strong&gt;向量空间&lt;/strong&gt;的压缩感知便自然拓展为&lt;strong&gt;矩阵空间&lt;/strong&gt;的矩阵补全&lt;/li&gt;
&lt;li&gt;压缩感知：基于信号的可压缩性或稀疏性,通过低分辨率、欠 Nyquist 采样数据的非相关观测来实现高维信号的感知.&lt;ul&gt;
&lt;li&gt;压缩感知理论突破了&lt;strong&gt;香农定理&lt;/strong&gt;对信号采样频率的限制，能够以较少的采样资源、较高的采样速度和较低的软硬件复杂度获得原始型号的测量值&lt;/li&gt;
&lt;li&gt;压缩感知主要研究对于以向量 &lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622190407802.png&#34; alt=&#34;image-20210622190407802&#34;&gt;表示的稀疏信号,如何在 m&amp;lt;&amp;lt;n的情形下仅通过测量较少的采样 ym并能从中恢复出原始信号 x.&lt;/li&gt;
&lt;li&gt;压缩感知理论得以成功应用的一个重要前提是信号&lt;strong&gt;向量&lt;/strong&gt;的稀疏性。但在很多实际问题中,我们面临的数据，并不是向量空间中的一维数据,而是矩阵空间中的&lt;strong&gt;二维数据&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-介绍&#34;&gt;&lt;a href=&#34;#1-2-介绍&#34; class=&#34;headerlink&#34; title=&#34;1.2 介绍&#34;&gt;&lt;/a&gt;1.2 介绍&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;矩阵补全：主要研究如何在数据不完整的情况下，将矩阵空间的缺失数据进行填补&lt;/li&gt;
&lt;li&gt;原理：通过矩阵分解将一个含缺失值的矩阵 X 分解为两个（或多个）矩阵，然后这些分解后的矩阵相乘就可以得到原矩阵的近似 X’，我们用这个近似矩阵 X’ 的值来填补原矩阵 X 的缺失部分。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-矩阵分解&#34;&gt;&lt;a href=&#34;#2-矩阵分解&#34; class=&#34;headerlink&#34; title=&#34;2. 矩阵分解&#34;&gt;&lt;/a&gt;2. 矩阵分解&lt;/h2&gt;&lt;p&gt;References：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5xdXV4bGFicy5jb20vYmxvZy8yMDEwLzA5L21hdHJpeC1mYWN0b3JpemF0aW9uLWEtc2ltcGxlLXR1dG9yaWFsLWFuZC1pbXBsZW1lbnRhdGlvbi1pbi1weXRob24v&#34;&gt;Matrix Factorization: A Simple Tutorial and Implementation in Python&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;使用矩阵分解来解决这个问题背后的直觉是应该有一些&lt;strong&gt;潜在的特征&lt;/strong&gt;来决定用户如何评价一个项目。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例如，如果两个用户都喜欢这部电影的演员，或者如果电影是动作片，这是两个用户都喜欢的类型，那么两个用户会对某部电影给予高评分。&lt;/p&gt;
&lt;p&gt;因此，如果我们能够发现这些&lt;strong&gt;潜在特征&lt;/strong&gt;，我们应该能够预测关于某个用户和某个项目的评分，因为与用户相关的特征应该与与项目相关的特征相匹配。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;项目描述：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;一组用户和一组项目（电影）。用户为行，项目为列    &lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210710154544821.png&#34; alt=&#34;image-20210710154544821&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个&lt;strong&gt;项目&lt;/strong&gt;有对应特征：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;类型：动作片、喜剧片…&lt;/li&gt;
&lt;li&gt;主演/导演&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;将矩阵&lt;strong&gt;R(U*D)&lt;strong&gt;分解为矩阵&lt;/strong&gt;P(U*K)&lt;strong&gt;和矩阵&lt;/strong&gt;Q(D*K)&lt;/strong&gt;&lt;br&gt;$$&lt;br&gt;R\approx P\times Q^T=\widehat{R}\tag{4.1}&lt;br&gt;$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;p&gt;​        P—每行代表&lt;strong&gt;用户&lt;/strong&gt;与特征之间关联的强度&lt;/p&gt;
&lt;p&gt;​        Q—每行代表&lt;strong&gt;项目&lt;/strong&gt;和特征之间关联的强度&lt;/p&gt;
&lt;p&gt;​        ^—估计值&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;对应的，&lt;br&gt;$$&lt;br&gt;\widehat{r}&lt;em&gt;{ij}=p^T_iq_i=\sum^k&lt;/em&gt;{k=1}p_{ik}q_{kj}\tag{4.2}&lt;br&gt;$$&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;其中：&lt;code&gt;r_ij&lt;/code&gt;是矩阵&lt;code&gt;R&lt;/code&gt;在&lt;code&gt;i&lt;/code&gt;行&lt;code&gt;J&lt;/code&gt;列的元素&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;使用梯度下降法对矩阵进行分解：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对&lt;code&gt;p&lt;/code&gt;、&lt;code&gt;q&lt;/code&gt;不断迭代，找到局部差异最小值，使用&lt;strong&gt;均方误差&lt;/strong&gt;&lt;br&gt;$$&lt;br&gt;e^2_{ij}=(r_{ij}-\widehat{r}&lt;em&gt;{ij})^2=(r&lt;/em&gt;{ij}-\sum^k_{k=1}p_{ik}q_{kj})^2\tag{4.3}&lt;br&gt;$$&lt;br&gt;均方差&lt;code&gt;e^2&lt;/code&gt;越小越好&lt;/p&gt;
&lt;p&gt;最小值求法，一般是将式4.3求偏导，使偏导=0，则可能为极小值点。在梯度下降法中，是算出&lt;code&gt;e^2&lt;/code&gt;的梯度grad（梯度体现了各自变量在该点的偏导）。沿着梯度&lt;strong&gt;反方向&lt;/strong&gt;更新，每次更新一个&lt;strong&gt;step&lt;/strong&gt;，逐步降到0&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;梯度&amp;gt;0时，反方向是&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
</content>
        <updated>2021-06-07T09:51:11.938Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/06/04/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%8F%E4%B9%A6/</id>
        <title>算法公式书</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/06/04/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%8F%E4%B9%A6/"/>
        <content type="html">&lt;h1 id=&#34;一-性质总结&#34;&gt;&lt;a href=&#34;#一、-性质总结&#34; class=&#34;headerlink&#34; title=&#34;一、 性质总结&#34;&gt;&lt;/a&gt;一、 性质总结&lt;/h1&gt;&lt;h2 id=&#34;1-数列&#34;&gt;&lt;a href=&#34;#1-数列&#34; class=&#34;headerlink&#34; title=&#34;1. 数列&#34;&gt;&lt;/a&gt;1. 数列&lt;/h2&gt;&lt;h3 id=&#34;11-前缀和&#34;&gt;&lt;a href=&#34;#1-1-前缀和&#34; class=&#34;headerlink&#34; title=&#34;1.1 前缀和&#34;&gt;&lt;/a&gt;1.1 前缀和&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;如果2个前缀和相等，说明2个前缀和之间的sum为0&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二-数据结构特性&#34;&gt;&lt;a href=&#34;#二、-数据结构特性&#34; class=&#34;headerlink&#34; title=&#34;二、 数据结构特性&#34;&gt;&lt;/a&gt;二、 数据结构特性&lt;/h1&gt;&lt;h1 id=&#34;三-经典案例-算法适用场景&#34;&gt;&lt;a href=&#34;#三、-经典案例、算法适用场景&#34; class=&#34;headerlink&#34; title=&#34;三、 经典案例、算法适用场景&#34;&gt;&lt;/a&gt;三、 经典案例、算法适用场景&lt;/h1&gt;&lt;h2 id=&#34;1-链表&#34;&gt;&lt;a href=&#34;#1-链表&#34; class=&#34;headerlink&#34; title=&#34;1. 链表&#34;&gt;&lt;/a&gt;1. 链表&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;相交链表：丫字形&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;pA走过的路径为A链+B链&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;pB走过的路径为B链+A链&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果相交，定会在相交点相遇&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;四-错题本非自己做出来需复习&#34;&gt;&lt;a href=&#34;#四、-错题本（非自己做出来，需复习）&#34; class=&#34;headerlink&#34; title=&#34;四、 错题本（非自己做出来，需复习）&#34;&gt;&lt;/a&gt;四、 错题本（非自己做出来，需复习）&lt;/h1&gt;&lt;h2 id=&#34;1-动态规划&#34;&gt;&lt;a href=&#34;#1-动态规划&#34; class=&#34;headerlink&#34; title=&#34;1. 动态规划&#34;&gt;&lt;/a&gt;1. 动态规划&lt;/h2&gt;&lt;h3 id=&#34;11-背包问题&#34;&gt;&lt;a href=&#34;#1-1-背包问题&#34; class=&#34;headerlink&#34; title=&#34;1.1 背包问题&#34;&gt;&lt;/a&gt;1.1 背包问题&lt;/h3&gt;&lt;p&gt;基本上所有背包问题都是由01背包衍生而来。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;0-1背包：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;​    有N件物品和一个容量为V的背包。第i件物品的体积是c[i]，价值是w[i]。求解将哪些物品装入背包可使&lt;strong&gt;价值&lt;/strong&gt;总和最大。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;定义状态：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;F[i,v]&lt;/code&gt;：前&lt;code&gt;i&lt;/code&gt;件物品在&lt;code&gt;v&lt;/code&gt;容量能够获取的&lt;strong&gt;最大价值&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt;：前&lt;code&gt;i&lt;/code&gt;件物品；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v&lt;/code&gt;：当前容量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;状态转移方程：&lt;code&gt;F[i,v]= max&amp;#123;F[i − 1, v], F[i − 1, v − C[i]] + W[i]&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;解析：当循环到&lt;code&gt;F[i,v]&lt;/code&gt;时，&lt;strong&gt;是否添加第&lt;code&gt;i-1&lt;/code&gt;件物品？&lt;/strong&gt;就要看添加/不添加哪个最终价值更大&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不添加：&lt;code&gt;F[i,v]&lt;/code&gt;就取&lt;code&gt;F[i-1,v]&lt;/code&gt;（前&lt;code&gt;i-1&lt;/code&gt;件物品在&lt;code&gt;v&lt;/code&gt;容量能够获取的&lt;strong&gt;最大价值&lt;/strong&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;添加：则容量极限是&lt;code&gt;v-C[i]&lt;/code&gt;，&lt;/p&gt;
&lt;p&gt;​    问题转换成：前&lt;code&gt;i-1&lt;/code&gt;件物品在&lt;code&gt;v-C[i]&lt;/code&gt;容量能获取的最大价值+第&lt;code&gt;i&lt;/code&gt;件物品的价值&lt;code&gt;W[i]&lt;/code&gt;，即&lt;code&gt;F[i − 1, v − C[i]] + W[i]&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="经验总结" scheme="https://nitgod1996.com/categories/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/" />
        <category term="算法" scheme="https://nitgod1996.com/tags/%E7%AE%97%E6%B3%95/" />
        <category term="数据结构" scheme="https://nitgod1996.com/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" />
        <updated>2021-06-04T10:13:52.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/</id>
        <title>Python语法复习</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;豆瓣源下载模块：pip install 包名 -i &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3B5cGkuZG91YmFuLmNvbS9zaW1wbGUv&#34;&gt;http://pypi.douban.com/simple/&lt;/span&gt; –trusted-host pypi.douban.com&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数中加&lt;code&gt;[]&lt;/code&gt;的参数为可选，&lt;code&gt;=&lt;/code&gt;表示默认值。如下&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;count&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;beg&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#参数beg可选，如果不写默认为0&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;一-基础知识&#34;&gt;&lt;a href=&#34;#一、-基础知识&#34; class=&#34;headerlink&#34; title=&#34;一、 基础知识&#34;&gt;&lt;/a&gt;一、 基础知识&lt;/h1&gt;&lt;p&gt;以下仅介绍Python中与其他语言不同之处（需特别注意的地方）&lt;/p&gt;
&lt;h2 id=&#34;1-特别注意&#34;&gt;&lt;a href=&#34;#1-特别注意&#34; class=&#34;headerlink&#34; title=&#34;1. 特别注意&#34;&gt;&lt;/a&gt;1. 特别注意&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python可以在同一行写多条语句，用&lt;code&gt;;&lt;/code&gt;分隔&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据类型：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;不可变数据：&lt;code&gt;Number&lt;/code&gt;、&lt;code&gt;String&lt;/code&gt;、&lt;code&gt;Tuple（元组）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可变数据：&lt;code&gt;List（列表）&lt;/code&gt;、&lt;code&gt;Dictionary（字典）&lt;/code&gt;、&lt;code&gt;Set（集合）&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;其中，&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;不可变数据可以作为dict的键，而可变数据不行&lt;/li&gt;
&lt;li&gt;字典&lt;code&gt;dict&lt;/code&gt;对标&lt;code&gt;map&lt;/code&gt;，&lt;code&gt;list&lt;/code&gt;是数组&lt;/li&gt;
&lt;li&gt;元组&lt;code&gt;tuple&lt;/code&gt;是&lt;strong&gt;不可修改&lt;/strong&gt;的数组&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除法：&lt;code&gt;/&lt;/code&gt;返回浮点数，&lt;code&gt;//&lt;/code&gt;返回数向下取整。（&lt;code&gt;3//2.0=1.0&lt;/code&gt;）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串&lt;strong&gt;不能被修改。&lt;code&gt;word[0]=&amp;#39;m&amp;#39;&lt;/code&gt;会报错&lt;/strong&gt;，需要用&lt;code&gt;replace&lt;/code&gt;函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-数据类型转换&#34;&gt;&lt;a href=&#34;#2-数据类型转换&#34; class=&#34;headerlink&#34; title=&#34;2. 数据类型转换&#34;&gt;&lt;/a&gt;2. 数据类型转换&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;int(x [,base])&lt;/td&gt;
&lt;td&gt;&lt;em&gt;将&lt;strong&gt;x&lt;/strong&gt;转换为一个整数，&lt;strong&gt;base&lt;/strong&gt;：进制&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float(x)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;将&lt;strong&gt;x&lt;/strong&gt;转换到一个浮点数&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;str(x)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;将对象&lt;/em&gt; &lt;em&gt;x&lt;/em&gt; &lt;em&gt;转换为&lt;strong&gt;字符串&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;tuple(s)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;将序列&lt;/em&gt; &lt;em&gt;s&lt;/em&gt; &lt;em&gt;转换为一个&lt;strong&gt;元组&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;list(s)&lt;/td&gt;
&lt;td&gt;&lt;em&gt;将序列&lt;/em&gt; &lt;em&gt;s&lt;/em&gt; &lt;em&gt;转换为一个&lt;strong&gt;列表&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;set(s)&lt;/td&gt;
&lt;td&gt;转换为set&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;dict(d)&lt;/td&gt;
&lt;td&gt;创建一个字典。&lt;strong&gt;d必须是一个(key, value)元组序列。&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;chr(x)   **&lt;/td&gt;
&lt;td&gt;将一个&lt;strong&gt;整数&lt;/strong&gt;转换为一个&lt;strong&gt;字符&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ord(x)&lt;/td&gt;
&lt;td&gt;将一个&lt;strong&gt;字符&lt;/strong&gt;转换为它的&lt;strong&gt;整数&lt;/strong&gt;值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;hex(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个&lt;strong&gt;十六进制&lt;/strong&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;oct(x)&lt;/td&gt;
&lt;td&gt;将一个整数转换为一个&lt;strong&gt;八进制&lt;/strong&gt;字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;3-运算符&#34;&gt;&lt;a href=&#34;#3-运算符&#34; class=&#34;headerlink&#34; title=&#34;3. 运算符&#34;&gt;&lt;/a&gt;3. 运算符&lt;/h2&gt;&lt;h3 id=&#34;31-算术运算法&#34;&gt;&lt;a href=&#34;#3-1-算术运算法&#34; class=&#34;headerlink&#34; title=&#34;3.1 算术运算法&#34;&gt;&lt;/a&gt;3.1 算术运算法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;th&gt;例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;/&lt;/td&gt;
&lt;td&gt;除： x 除以 y&lt;/td&gt;
&lt;td&gt;b / a 输出结果 2.1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;**&lt;/td&gt;
&lt;td&gt;幂：返回x的y次幂&lt;/td&gt;
&lt;td&gt;a**b 为10的21次方&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;//&lt;/td&gt;
&lt;td&gt;取整除：向下取接近商的整数&lt;/td&gt;
&lt;td&gt;9//2=4、-9//2=-5&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;32-位运算符&#34;&gt;&lt;a href=&#34;#3-2-位运算符&#34; class=&#34;headerlink&#34; title=&#34;3.2 位运算符&#34;&gt;&lt;/a&gt;3.2 位运算符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&amp;amp;&lt;/td&gt;
&lt;td&gt;按位与&lt;/td&gt;
&lt;td&gt;101&amp;amp;100=100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;|&lt;/td&gt;
&lt;td&gt;按位或&lt;/td&gt;
&lt;td&gt;101|100=101&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^&lt;/td&gt;
&lt;td&gt;按位异或&lt;/td&gt;
&lt;td&gt;101^100=001&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;~&lt;/td&gt;
&lt;td&gt;按位取反&lt;/td&gt;
&lt;td&gt;~101=010&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;&amp;lt;&lt;/td&gt;
&lt;td&gt;左移动运算符：各二进位全部左移，高位丢弃，低位补0。&lt;/td&gt;
&lt;td&gt;101&amp;lt;&amp;lt;2=10100&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;gt;&amp;gt;&lt;/td&gt;
&lt;td&gt;右移动运算符：各二进位全部右移&lt;/td&gt;
&lt;td&gt;101&amp;gt;&amp;gt;2=1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;33-逻辑运算符&#34;&gt;&lt;a href=&#34;#3-3-逻辑运算符&#34; class=&#34;headerlink&#34; title=&#34;3.3 逻辑运算符&#34;&gt;&lt;/a&gt;3.3 逻辑运算符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;逻辑表达式&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述(number均算True)&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;实例a=10,b=20&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;and&lt;/td&gt;
&lt;td&gt;x and y&lt;/td&gt;
&lt;td&gt;布尔”与” - &lt;strong&gt;如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;(a and b) **返回 20。  **&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;or&lt;/td&gt;
&lt;td&gt;x or y&lt;/td&gt;
&lt;td&gt;布尔”或” -  **如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。  **&lt;/td&gt;
&lt;td&gt;(a or b) **返回 10。  **&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not&lt;/td&gt;
&lt;td&gt;not x&lt;/td&gt;
&lt;td&gt;布尔”非” -  **如果 x 为 True，返回 False 。如果 x 为  False，它返回 True。  **&lt;/td&gt;
&lt;td&gt;not(a and b) **返回  False  **&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;34-成员运算符innot-in&#34;&gt;&lt;a href=&#34;#3-4-成员运算符（in-not-in）&#34; class=&#34;headerlink&#34; title=&#34;3.4 成员运算符（in/not in）&#34;&gt;&lt;/a&gt;3.4 成员运算符（in/not in）&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述（list、tulpe、string均属序列seq，但dict和set也可使用）&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;in&lt;/td&gt;
&lt;td&gt;如果在指定的序列中找到值返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;not in&lt;/td&gt;
&lt;td&gt;如果在指定的序列中没有找到值返回 True&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;35-身份运算符isis-not&#34;&gt;&lt;a href=&#34;#3-5-身份运算符（is-is-not）&#34; class=&#34;headerlink&#34; title=&#34;3.5 身份运算符（is/is not）&#34;&gt;&lt;/a&gt;3.5 身份运算符（is/is not）&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;运算符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;实例&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;is&lt;/td&gt;
&lt;td&gt;is 是判断两个标识符是不是引用自一个对象&lt;/td&gt;
&lt;td&gt;x is y, 类似 id(x)  == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;is not&lt;/td&gt;
&lt;td&gt;is not 是判断两个标识符是不是引用自不同对象&lt;/td&gt;
&lt;td&gt;x is not y ， 类似  id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/image-20210604162303013.png&#34; alt=&#34;image-20210604162303013&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-常用函数全局函数&#34;&gt;&lt;a href=&#34;#4-常用函数-全局函数&#34; class=&#34;headerlink&#34; title=&#34;4. 常用函数/全局函数&#34;&gt;&lt;/a&gt;4. 常用函数/全局函数&lt;/h2&gt;&lt;p&gt;其中记录一些比较常用的函数&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;code&gt;len()&lt;/code&gt;：获取列表/字典/字符串…的&lt;strong&gt;长度&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;str()&lt;/code&gt;：转为&lt;strong&gt;字符串&lt;/strong&gt;，Python中的toString&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sum()&lt;/code&gt;：对序列求和&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max()/min()&lt;/code&gt;：取序列最小值&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二-数组list&#34;&gt;&lt;a href=&#34;#二、-数组list&#34; class=&#34;headerlink&#34; title=&#34;二、 数组list&#34;&gt;&lt;/a&gt;二、 数组list&lt;/h1&gt;&lt;p&gt;也称列表。&lt;/p&gt;
&lt;p&gt;在Python中，&lt;strong&gt;列表可以存储不同的数据类型&lt;/strong&gt;，如&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Google&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Runoob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1997&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-创建&#34;&gt;&lt;a href=&#34;#1-创建&#34; class=&#34;headerlink&#34; title=&#34;1. 创建&#34;&gt;&lt;/a&gt;1. 创建&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义一个空列表&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建一维数组&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建二维数组&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list_2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;n&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#m行n列&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-list函数&#34;&gt;&lt;a href=&#34;#2-list函数&#34; class=&#34;headerlink&#34; title=&#34;2. list函数&#34;&gt;&lt;/a&gt;2. list函数&lt;/h2&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;21-增插入-添加&#34;&gt;&lt;a href=&#34;#2-1-增（插入、添加）&#34; class=&#34;headerlink&#34; title=&#34;2.1 增（插入、添加）&#34;&gt;&lt;/a&gt;2.1 增（插入、添加）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;list.append(obj)&lt;/code&gt;：在列表末尾添加新的对象&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.extend(seq)&lt;/code&gt;：在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）&lt;/li&gt;
&lt;li&gt;&lt;code&gt;list.insert(index, obj)&lt;/code&gt;：将对象插入列表指定索引处&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-删清空-删除&#34;&gt;&lt;a href=&#34;#2-2-删（清空、删除）&#34; class=&#34;headerlink&#34; title=&#34;2.2 删（清空、删除）&#34;&gt;&lt;/a&gt;2.2 删（清空、删除）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;clear()&lt;/code&gt;：清空&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;remove(obj)&lt;/code&gt;：按&lt;strong&gt;值&lt;/strong&gt;删除。移除列表中某个值的&lt;strong&gt;第一个&lt;/strong&gt;匹配项&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;remove&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#删除3&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;pop(index)&lt;/code&gt;：按&lt;strong&gt;索引&lt;/strong&gt;删除。移除列表中的一个元素（默认最后一个元素），并且返回该元素的值&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;pop&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#删除索引为1的元素&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;23-改翻转-排序&#34;&gt;&lt;a href=&#34;#2-3-改（翻转、排序）&#34; class=&#34;headerlink&#34; title=&#34;2.3 改（翻转、排序）&#34;&gt;&lt;/a&gt;2.3 改（翻转、排序）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;reverse()&lt;/code&gt;：翻转列表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;sort(key, reverse)&lt;/code&gt;：列表排序。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;key：排序规则。1-根据值排序；2-根据自定义函数排序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;自定义函数&lt;/strong&gt;：例，根据第2个元素&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 获取列表的第二个元素&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;takeSecond&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;elem&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; elem&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 列表&lt;/span&gt;
random &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 按第二个元素排序&lt;/span&gt;
random&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;takeSecond&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#输出：[(4, 1), (2, 2), (1, 3), (3, 4)]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例：根据&lt;strong&gt;字符串长度&lt;/strong&gt;排序&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sort_fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; len&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    l&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;123&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;92&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1234&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
    l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;functools&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;cmp_to_key&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;sort_fun&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;l&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#[&#39;92&#39;, &#39;123&#39;, &#39;1234&#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;lambda&lt;/code&gt;表达式&lt;/strong&gt;：例，按第2个元素排序&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;KNN&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#[(4, 1), (2, 2), (1, 3), (3, 4)]&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#x是随便取的代号&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;例：按字符串长度排序&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;l&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;sort&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;key&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;lambda&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;左边的x是list，右边是按照什么排序的规则&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;reverse：true-升序，false-降序&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;：按索引访问并替换元素&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;24-查取值-统计-拷贝-求和-最值-判断&#34;&gt;&lt;a href=&#34;#2-4-查（取值、统计、拷贝、求和、最值、判断）&#34; class=&#34;headerlink&#34; title=&#34;2.4 查（取值、统计、拷贝、求和、最值、判断）&#34;&gt;&lt;/a&gt;2.4 查（取值、统计、拷贝、求和、最值、判断）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;按&lt;strong&gt;索引&lt;/strong&gt;访问值&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;取单值&lt;/p&gt;
&lt;p&gt;```python&lt;br&gt;list[0]#返回1&lt;br&gt;list[-1]#返回倒数第1个数，即6&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;取片段&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#获取索引0-2（左闭右开）的元素&lt;/span&gt;
list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#获取索引1开始的所有元素&lt;/span&gt;
list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#获取倒数第2个元素之前所有元素&lt;/span&gt;
list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#获取list所有元素。[:]相当于拷贝了一个副本&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按&lt;strong&gt;值&lt;/strong&gt;返回索引&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;start&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;end&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#返回第一个匹配项的索引位置.&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#start,end:可选，开始索引及结束索引&lt;/span&gt;
list&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;index&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#返回3&amp;lt;=index&amp;lt;5中第一个匹配项的索引位置&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;count(obj)&lt;/code&gt;：统计&lt;strong&gt;某元素&lt;/strong&gt;在列表出现的&lt;strong&gt;次数&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;copy()&lt;/code&gt;：返回该列表的副本（适合函数中使用，不会改变原列表。因为列表是可变数据，所以作为函数参数时如果直接用可能会被修改）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;以下是全局函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sum(list)&lt;/code&gt;：求和&lt;/li&gt;
&lt;li&gt;&lt;code&gt;max()/min()&lt;/code&gt;：取最值&lt;/li&gt;
&lt;li&gt;&lt;code&gt;3 in [1, 2, 3]&lt;/code&gt;：True  判断元素是否存在于列表中&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-遍历列表&#34;&gt;&lt;a href=&#34;#3-遍历列表&#34; class=&#34;headerlink&#34; title=&#34;3. 遍历列表&#34;&gt;&lt;/a&gt;3. 遍历列表&lt;/h2&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;按&lt;strong&gt;值&lt;/strong&gt;遍历&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#输出值。[5,4,3,2,1,0]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按&lt;strong&gt;索引&lt;/strong&gt;遍历&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;value &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; enumerate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;index:value&amp;amp;#125;)#index是索引，value是列表元素&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;按&lt;strong&gt;索引/值&lt;/strong&gt;同时遍历&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; range&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#按索引遍历，i是索引.i从1开始遍历&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-操作符拼接列表&#34;&gt;&lt;a href=&#34;#4-操作符拼接列表&#34; class=&#34;headerlink&#34; title=&#34;4. 操作符拼接列表&#34;&gt;&lt;/a&gt;4. 操作符拼接列表&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Python 表达式&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;结果&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[1, 2, 3] + [4, 5, 6]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;[1, 2, 3, 4, 5, 6]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;组合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[‘Hi!’] * 4&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;重复&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;3 in [1, 2, 3]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;True&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;元素是否存在于列表中&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;三-元组tuple&#34;&gt;&lt;a href=&#34;#三、-元组tuple&#34; class=&#34;headerlink&#34; title=&#34;三、 元组tuple&#34;&gt;&lt;/a&gt;三、 元组tuple&lt;/h1&gt;&lt;p&gt;Python 的元组与列表类似，不同之处在于元组的元素&lt;strong&gt;不能修改&lt;/strong&gt;。&lt;/p&gt;
&lt;h2 id=&#34;1-创建&#34;&gt;&lt;a href=&#34;#1-创建-1&#34; class=&#34;headerlink&#34; title=&#34;1. 创建&#34;&gt;&lt;/a&gt;1. 创建&lt;/h2&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;tup1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Google&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Runoob&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1997&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
tup3 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;c&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;d&#34;&lt;/span&gt;   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#  不需要括号也可以&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建空元组&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;tup&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-tuple函数&#34;&gt;&lt;a href=&#34;#2-tuple函数&#34; class=&#34;headerlink&#34; title=&#34;2. tuple函数&#34;&gt;&lt;/a&gt;2. tuple函数&lt;/h2&gt;&lt;p&gt;tuple除了&lt;strong&gt;不能修改&lt;/strong&gt;，其他都和list一样。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;def&lt;/code&gt;可以删除整个tuple&lt;/p&gt;
&lt;h1 id=&#34;四-字符串str&#34;&gt;&lt;a href=&#34;#四、-字符串str&#34; class=&#34;headerlink&#34; title=&#34;四、 字符串str&#34;&gt;&lt;/a&gt;四、 字符串str&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Python中，&lt;strong&gt;单双引号&lt;/strong&gt;均可表示字符串，&lt;code&gt;str()&lt;/code&gt;函数默认转为单引号&lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;str&lt;/code&gt;的&lt;code&gt;[]&lt;/code&gt;用法和&lt;code&gt;list&lt;/code&gt;一样&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在Python中，没有字符，仅有字符串。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-创建&#34;&gt;&lt;a href=&#34;#1-创建-2&#34; class=&#34;headerlink&#34; title=&#34;1. 创建&#34;&gt;&lt;/a&gt;1. 创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;直接自定义创建&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Hello World!&#39;&lt;/span&gt; 
s2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Runoob&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#单双引号都可&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#使用三引号(&#39;&#39;&#39;或&lt;/span&gt;&lt;span class=&#34;token triple-quoted-string string&#34;&gt;&#34;&#34;&#34;)可以指定一个多行字符串。
paragraph = &#34;&#34;&#34;&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#这是一个段落，&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建一个空字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;+&lt;/code&gt;：&lt;strong&gt;多个字符串&lt;/strong&gt;拼接成新字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;s1&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;s2
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.join(seq)&lt;/code&gt;：将&lt;strong&gt;序列&lt;/strong&gt;拼接成字符串&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-&#34;&lt;/span&gt;
seq &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;r&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;u&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;o&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;o&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 字符串序列&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; seq &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#r-u-n-o-o-b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-字符串运算符&#34;&gt;&lt;a href=&#34;#2-字符串运算符&#34; class=&#34;headerlink&#34; title=&#34;2. 字符串运算符&#34;&gt;&lt;/a&gt;2. 字符串运算符&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;操作符&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;实例&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;+&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;字符串连接&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a + b 输出结果： HelloPython&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;*&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;重复输出字符串&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a*2 输出结果：HelloHello&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;通过索引获取字符串中字符&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a[1] 输出结果 &lt;strong&gt;e&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;[ : ]&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;截取字符串中的一部分，&lt;strong&gt;左闭右开&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;a[1:4] 输出结果 &lt;strong&gt;ell&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果字符串中包含给定的字符返回 True&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;‘H’ in a&lt;/strong&gt; 输出结果 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;not in&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果字符串中不包含给定的字符返回 True&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;strong&gt;‘M’ not in a&lt;/strong&gt; 输出结果 True&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;r/R&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;原始字符串：反转义，让字符是本身的意思&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;print( r&amp;#39;\n&amp;#39; ) print( R&amp;#39;\n&amp;#39; )&lt;/code&gt;。输出&lt;code&gt;&amp;#39;\n&amp;#39;&lt;/code&gt;而非换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;%&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;格式字符串&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;请看下一节内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;3-转义字符&#34;&gt;&lt;a href=&#34;#3-转义字符&#34; class=&#34;headerlink&#34; title=&#34;3. 转义字符&#34;&gt;&lt;/a&gt;3. 转义字符&lt;/h2&gt;&lt;p&gt;反斜杠可以用来转义，使用r可以让反斜杠不发生转义。&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 输出空行&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;r&lt;span class=&#34;token string&#34;&gt;&#39;\n&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 输出 \n&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;转义字符&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\\&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;反斜杠符号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\‘&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\“&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;双引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\a&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;响铃&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;退格&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\000&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\n&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\v&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;纵向制表符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\t&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;横向制表符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\f&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;换页&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;4-字符串注入&#34;&gt;&lt;a href=&#34;#4-字符串注入&#34; class=&#34;headerlink&#34; title=&#34;4. 字符串注入 %&#34;&gt;&lt;/a&gt;4. 字符串注入 %&lt;/h2&gt;&lt;p&gt;因为Python中string类型不能直接用+和int连接，所以可以用%&lt;strong&gt;在字符串中注入数字&lt;/strong&gt;，如下：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;我叫 %s 今年 %d 岁!&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;%&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;小明&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;符  号&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;%c&lt;/td&gt;
&lt;td&gt;格式化字符及其ASCII码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%s&lt;/td&gt;
&lt;td&gt;格式化字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%d&lt;/td&gt;
&lt;td&gt;格式化整数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%u&lt;/td&gt;
&lt;td&gt;格式化无符号整型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%o&lt;/td&gt;
&lt;td&gt;格式化无符号八进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%x&lt;/td&gt;
&lt;td&gt;格式化无符号十六进制数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%X&lt;/td&gt;
&lt;td&gt;格式化无符号十六进制数（大写）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%f&lt;/td&gt;
&lt;td&gt;格式化浮点数字，可指定小数点后的精度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%e&lt;/td&gt;
&lt;td&gt;用科学计数法格式化浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%E&lt;/td&gt;
&lt;td&gt;作用同%e，用科学计数法格式化浮点数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%g&lt;/td&gt;
&lt;td&gt;%f和%e的简写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%G&lt;/td&gt;
&lt;td&gt;%f  和 %E 的简写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;%p&lt;/td&gt;
&lt;td&gt;用十六进制数格式化变量的地址&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;5-str函数&#34;&gt;&lt;a href=&#34;#5-Str函数&#34; class=&#34;headerlink&#34; title=&#34;5. Str函数&#34;&gt;&lt;/a&gt;5. Str函数&lt;/h2&gt;&lt;h3 id=&#34;51-增拼接-删两侧&#34;&gt;&lt;a href=&#34;#5-1-增（拼接）、删（两侧）&#34; class=&#34;headerlink&#34; title=&#34;5.1 增（拼接）、删（两侧）&#34;&gt;&lt;/a&gt;5.1 增（拼接）、删（两侧）&lt;/h3&gt;&lt;p&gt;​        因为字符串是&lt;strong&gt;不可变数据&lt;/strong&gt;，所以不能直接为&lt;code&gt;str&lt;/code&gt;添加、插入元素，可以通过拼接字符串得到新的字符串&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;+&lt;/code&gt;：可以用&lt;code&gt;+&lt;/code&gt;拼接多个字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.lstrip(s)/.rstrip(s)/.strip(s)&lt;/code&gt;：删除字符串&lt;strong&gt;最左/最右/两边&lt;/strong&gt;的指定字符（串），不写默认删空格&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;nihaoanihaoahaha&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;rstrip&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;ha&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#nihaoanihao&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;52-改大小写-字符替换-转换&#34;&gt;&lt;a href=&#34;#5-2-改（大小写、字符替换、转换）&#34; class=&#34;headerlink&#34; title=&#34;5.2 改（大小写、字符替换、转换）&#34;&gt;&lt;/a&gt;5.2 改（大小写、字符替换、转换）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;大小写&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.capitalize()&lt;/code&gt;：将字符串的&lt;strong&gt;第一个&lt;/strong&gt;字符转换为&lt;strong&gt;大写&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.lower()/.upper()&lt;/code&gt;：将字符串中&lt;strong&gt;所有&lt;/strong&gt;大写/小写字符转为小写/大写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.swapcase()&lt;/code&gt;：将字符串大小写&lt;strong&gt;互换&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;字符替换&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.replace(old,new,[max])&lt;/code&gt;：将字符串中old字符替换为new字符。max-可选。最多替换次数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.expandtabs(tabsize)&lt;/code&gt;：用&lt;code&gt;tabsize&lt;/code&gt;个&lt;strong&gt;空格&lt;/strong&gt;替换字符串中的&lt;strong&gt;tab 符&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.title()&lt;/code&gt;：&lt;strong&gt;返回&lt;/strong&gt;标题化字符串（开头大写）。&lt;font color=&#34;red&#34;&gt;注：这仅仅返回，而非修改原字符串&lt;/font&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-查查询访问-判断-统计&#34;&gt;&lt;a href=&#34;#5-3-查（查询访问、判断、统计）&#34; class=&#34;headerlink&#34; title=&#34;5.3 查（查询访问、判断、统计）&#34;&gt;&lt;/a&gt;5.3 查（查询访问、判断、统计）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查询访问&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;按&lt;strong&gt;索引&lt;/strong&gt;取值&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[i]&lt;/code&gt;：直接用&lt;code&gt;[]&lt;/code&gt;取值，可能会越界异常&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;按&lt;strong&gt;值&lt;/strong&gt;查索引&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.rfind/.find(str,[begin=0],[end=len])&lt;/code&gt;：查询字符串中&lt;strong&gt;从右/从左&lt;/strong&gt;开始第一次出现str的位置，如果没有返回-1。begin/end-开始/结束查询的位置&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.rindex/.index(str,[begin=0],[end=len])&lt;/code&gt;：和&lt;code&gt;find&lt;/code&gt;一样，但如果不存在会&lt;strong&gt;报异常&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.min/max()&lt;/code&gt;：返回最小/最大的&lt;strong&gt;字母&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;判断&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;指定字符&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;startswith(substr,[begin=0],[end=len])&lt;/code&gt;：是否以指定&lt;code&gt;substr&lt;/code&gt;开头。beg 和 end 表示在&lt;strong&gt;指定范围&lt;/strong&gt;内检查。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;endswith(suffix,[beg=0],[end=len]) &lt;/code&gt; 检查字符串是否以&lt;code&gt;suffix&lt;/code&gt;结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字母/数字/空格&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isalnum()&lt;/code&gt;：&lt;strong&gt;非空&lt;/strong&gt;且都是&lt;strong&gt;字母或数字&lt;/strong&gt;则返回True&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isalpha()&lt;/code&gt;：&lt;strong&gt;非空&lt;/strong&gt;且都是&lt;strong&gt;字母或中文字&lt;/strong&gt;则返回 True&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;islower()&lt;/code&gt;：&lt;strong&gt;非空&lt;/strong&gt;且都是&lt;strong&gt;小写&lt;/strong&gt;则返回 True&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isupper()&lt;/code&gt;：&lt;strong&gt;非空&lt;/strong&gt;且都是&lt;strong&gt;大写&lt;/strong&gt;则返回 True&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isspace()&lt;/code&gt;：&lt;strong&gt;非空&lt;/strong&gt;且都是&lt;strong&gt;空格&lt;/strong&gt;则返回 True&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;isdigit()/isdecimal()/isnumeric()&lt;/code&gt;：&lt;strong&gt;非空&lt;/strong&gt;且都是&lt;strong&gt;数字&lt;/strong&gt;则返回 True&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;True&lt;/th&gt;
&lt;th&gt;False&lt;/th&gt;
&lt;th&gt;Error&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isdigit()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unicode，byte(单字节)，全角(双字节)&lt;/td&gt;
&lt;td&gt;汉字，罗马数字,小数&lt;/td&gt;
&lt;td&gt;无&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isdecimal()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unicode，全角(双字节)&lt;/td&gt;
&lt;td&gt;罗马数字，汉字,小数&lt;/td&gt;
&lt;td&gt;byte(单字节)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isnumeric()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;Unicode，全角(双字节)，罗马数字，汉字&lt;/td&gt;
&lt;td&gt;小数&lt;/td&gt;
&lt;td&gt;byte(单字节)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;istitle()&lt;/code&gt;：&lt;strong&gt;非空&lt;/strong&gt;且是标题化字符串则返回  True&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;统计&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;count(str,[beg=0],[end=len])&lt;/code&gt;：返回指定范围&lt;code&gt;str&lt;/code&gt;出现的&lt;strong&gt;次数&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;54-拆分-拼接-填充&#34;&gt;&lt;a href=&#34;#5-4-拆分、拼接、填充&#34; class=&#34;headerlink&#34; title=&#34;5.4 拆分、拼接、填充&#34;&gt;&lt;/a&gt;5.4 拆分、拼接、填充&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.split(str,[num=count])&lt;/code&gt;：以&lt;code&gt;str&lt;/code&gt;为切割点，拆分字符串。num是最大拆分次数。返回&lt;code&gt;list&lt;/code&gt;，如下：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;nihao,haha,heihei&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;split&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;,&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#[&#39;nihao&#39;, &#39;haha&#39;, &#39;heihei&#39;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.join(seq)&lt;/code&gt;：将&lt;strong&gt;序列&lt;/strong&gt;拼接成字符串，以自身为拼接点&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;-&#34;&lt;/span&gt;
seq &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;r&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;u&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;n&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;o&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;o&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;b&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 字符串序列&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;join&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; seq &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#r-u-n-o-o-b&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.center(width,[fillchar])&lt;/code&gt;：返回宽度 width 的&lt;strong&gt;居中&lt;/strong&gt;的字符串，fillchar 为填充的字符，默认为空格。&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;[runoob]&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;center&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;40&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;*&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#****************[runoob]****************&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;ljust(width,[fillchar])&lt;/code&gt;：返回&lt;strong&gt;左对齐&lt;/strong&gt;的填充字符串&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;zfill (width)&lt;/code&gt;：返回&lt;strong&gt;右对齐&lt;/strong&gt;的填充字符串，填充物&lt;strong&gt;只能&lt;/strong&gt;为0&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;55-字符串映射密码翻译表&#34;&gt;&lt;a href=&#34;#5-5-字符串映射（密码翻译表）&#34; class=&#34;headerlink&#34; title=&#34;5.5 字符串映射（密码翻译表）&#34;&gt;&lt;/a&gt;5.5 字符串映射（密码翻译表）&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.maketrans(intab, outtab)&lt;/code&gt;：创建字符映射的转换表&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.translate(table)&lt;/code&gt;：根据密码表翻译密码&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;intab &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;12345&#34;&lt;/span&gt;
outtab &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;aeiou&#34;&lt;/span&gt;
trantab &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;maketrans&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;intab&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; outtab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 制作翻译表&lt;/span&gt;

str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;th3s 3s str3ng 2x1mpl2....w4w!!!&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;translate&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;trantab&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#this is string example....wow!!!&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;56-编码&#34;&gt;&lt;a href=&#34;#5-6-编码&#34; class=&#34;headerlink&#34; title=&#34;5.6 编码&#34;&gt;&lt;/a&gt;5.6 编码&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;encode(encoding=&amp;#39;UTF-8&amp;#39;,errors=&amp;#39;strict&amp;#39;)&lt;/code&gt;：以指定的编码格式编码字符串&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bytes.decode(encoding=&amp;quot;utf-8&amp;quot;, errors=&amp;quot;strict&amp;quot;)&lt;/code&gt;：按指定格式解码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;errors&lt;/code&gt;：设置错误处理方案&lt;/p&gt;
&lt;h1 id=&#34;五-字典dict&#34;&gt;&lt;a href=&#34;#五、-字典dict&#34; class=&#34;headerlink&#34; title=&#34;五、 字典dict&#34;&gt;&lt;/a&gt;五、 字典dict&lt;/h1&gt;&lt;p&gt;即map表&lt;/p&gt;
&lt;p&gt;不能以可变类型，如&lt;code&gt;list&lt;/code&gt;或&lt;code&gt;dict&lt;/code&gt;作为键，但是把&lt;code&gt;list&lt;/code&gt;转换为&lt;code&gt;tuple&lt;/code&gt;元组就可&lt;/p&gt;
&lt;p&gt;Python中，字典可以存储&lt;strong&gt;不同类型&lt;/strong&gt;的&lt;code&gt;k/v&lt;/code&gt;，如&lt;code&gt;d=&amp;#123;&amp;#39;12&amp;#39;:34,56:&amp;#39;78&amp;#39;&amp;#125;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-创建&#34;&gt;&lt;a href=&#34;#1-创建-3&#34; class=&#34;headerlink&#34; title=&#34;1. 创建&#34;&gt;&lt;/a&gt;1. 创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建一个自定义字典&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;key1 : value1, key2 : value2, key3 : value3 &amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建一个空字典&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.copy()&lt;/code&gt;：创建一个字典副本&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;copy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.fromkeys(seq,value)&lt;/code&gt;以序列元素为&lt;strong&gt;键&lt;/strong&gt;，创建字典&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;list1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
d1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;dict&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fromkeys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;1: None, 2: None, 3: None, 4: None, 5: None, 6: None&amp;amp;#125;&lt;/span&gt;
d2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;dict&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;fromkeys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-dict函数&#34;&gt;&lt;a href=&#34;#2-dict函数&#34; class=&#34;headerlink&#34; title=&#34;2. dict函数&#34;&gt;&lt;/a&gt;2. dict函数&lt;/h2&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;12&#39;:34,56:&#39;78&#39;&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;21-增-删-改-查&#34;&gt;&lt;a href=&#34;#2-1-增、删、改、查&#34; class=&#34;headerlink&#34; title=&#34;2.1 增、删、改、查&#34;&gt;&lt;/a&gt;2.1 增、删、改、查&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;增：&lt;/strong&gt;添加键值对&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;：直接添新的键值对，如&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;67&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;89&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#输出&amp;amp;#123;&#39;12&#39;: 34, 56: &#39;78&#39;, 67: 89&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;删：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.pop(key)&lt;/code&gt;：根据&lt;strong&gt;key&lt;/strong&gt;删除键值对，并返回对应的&lt;strong&gt;value&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.popitem()&lt;/code&gt;：删除&lt;strong&gt;最后一个&lt;/strong&gt;键值对，并以&lt;strong&gt;tuple&lt;/strong&gt;返回该键值对&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.clear()&lt;/code&gt;：清空字典&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;改：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;：直接根据键修改值，如&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;12&#39;: 34, 56: 1&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.update(dict2)&lt;/code&gt;：把dict2中的键值对&lt;strong&gt;覆盖替换&lt;/strong&gt;到d中。如&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;12&#39;:34,56:&#39;78&#39;&amp;amp;#125;&lt;/span&gt;
d1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;12&#39;:56,100:0.01&amp;amp;#125;&lt;/span&gt;
d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#d&amp;amp;#123;&#39;12&#39;: 56, 56: &#39;78&#39;, 100: 0.01&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查询键/值&lt;/strong&gt;：取值、存在判断&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;[]&lt;/code&gt;：直接通过&lt;code&gt;[key]&lt;/code&gt;查看对应的&lt;strong&gt;值&lt;/strong&gt;。如果不存在，抛出&lt;strong&gt;异常&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.get(key)&lt;/code&gt;：通过&lt;strong&gt;key&lt;/strong&gt;获取对应的&lt;strong&gt;值&lt;/strong&gt;。如果不存在，返回&lt;code&gt;None&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.setdefault(key)&lt;/code&gt;：通过&lt;strong&gt;key&lt;/strong&gt;获取对应的值。如果不存在，返回&lt;code&gt;None&lt;/code&gt;，并且添加&lt;code&gt;key:None&lt;/code&gt;键值对。如下&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;12&#39;:34,56:&#39;78&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;get&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#None&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;12&#39;: 34, 56: &#39;78&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;setdefault&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;15&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#None&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;12&#39;: 34, 56: &#39;78&#39;, 15: None&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;in&lt;/code&gt;：in关键字查询字典是否存在该键key，返回true/false&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;22-字典转数组&#34;&gt;&lt;a href=&#34;#2-2-字典转数组&#34; class=&#34;headerlink&#34; title=&#34;2.2 字典转数组&#34;&gt;&lt;/a&gt;2.2 字典转数组&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;返回序列&lt;/strong&gt;，可用于&lt;strong&gt;遍历迭代&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.items()&lt;/code&gt;：以&lt;code&gt;dict_items&lt;/code&gt;返回所有&lt;strong&gt;键值对&lt;/strong&gt;。  &lt;code&gt;dict_items&lt;/code&gt;和&lt;code&gt;list&lt;/code&gt;差不多&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;12&#39;:34,56:&#39;78&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#dict_items([(&#39;12&#39;, 34), (56, &#39;78&#39;)])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.keys()&lt;/code&gt;：以&lt;code&gt;dict_keys&lt;/code&gt;返回所有&lt;strong&gt;key&lt;/strong&gt;。&lt;code&gt;dict_keys&lt;/code&gt;和&lt;code&gt;list&lt;/code&gt;差不多&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;d&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;12&#39;:34,56:&#39;78&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#dict_keys([&#39;12&#39;, 56])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.values()&lt;/code&gt;：以&lt;code&gt;dict_values&lt;/code&gt;返回所有&lt;strong&gt;value&lt;/strong&gt;。&lt;code&gt;dict_values&lt;/code&gt;和&lt;code&gt;list&lt;/code&gt;差不多&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-遍历字典&#34;&gt;&lt;a href=&#34;#3-遍历字典&#34; class=&#34;headerlink&#34; title=&#34;3. 遍历字典&#34;&gt;&lt;/a&gt;3. 遍历字典&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;遍历键值对&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;items&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历键&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; key &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;keys&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;遍历值&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; v &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; d&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;values&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;六-集合set&#34;&gt;&lt;a href=&#34;#六、-集合set&#34; class=&#34;headerlink&#34; title=&#34;六、 集合set&#34;&gt;&lt;/a&gt;六、 集合set&lt;/h1&gt;&lt;p&gt;集合（set）是一个&lt;strong&gt;无序&lt;/strong&gt;的&lt;strong&gt;不重复&lt;/strong&gt;元素序列。&lt;/p&gt;
&lt;p&gt;可以使用大括号 &lt;strong&gt;{ }&lt;/strong&gt; 或者 &lt;strong&gt;set()&lt;/strong&gt; 函数创建集合，&lt;font color=&#34;red&#34;&gt;注意：创建一个空集合必须用 &lt;strong&gt;set()&lt;/strong&gt; 而不是 **{ }**，因为 &lt;strong&gt;{ }&lt;/strong&gt; 是用来创建一个空字典。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;和&lt;code&gt;dict&lt;/code&gt;的区别是，&lt;strong&gt;set只有键没有值&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;1-创建&#34;&gt;&lt;a href=&#34;#1-创建-4&#34; class=&#34;headerlink&#34; title=&#34;1. 创建&#34;&gt;&lt;/a&gt;1. 创建&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;创建自定义set&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;1,&#39;a&#39;,456&amp;amp;#125;&lt;/span&gt;
s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;set&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#一般建议不这么用&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建一个空set&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;set&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;创建一个set副本&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;s1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;set&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#或&lt;/span&gt;
s2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;copy&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-set操作符求交-差-和-异或&#34;&gt;&lt;a href=&#34;#2-set操作符（求交、差、和、异或）&#34; class=&#34;headerlink&#34; title=&#34;2. set操作符（求交、差、和、异或）&#34;&gt;&lt;/a&gt;2. set操作符（求交、差、和、异或）&lt;/h2&gt;&lt;p&gt;主要是与、或、非这些逻辑运算符&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;-&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;求差&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;td&gt;`&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;与：求交&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;异或：不同时属于a和b的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;b&#39;, &#39;r&#39;, &#39;d&#39;, &#39;a&#39;, &#39;c&#39;&amp;amp;#125;&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#39;c&#39;, &#39;l&#39;, &#39;a&#39;, &#39;z&#39;, &#39;m&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;d&#39;, &#39;b&#39;, &#39;r&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;z&#39;, &#39;b&#39;, &#39;d&#39;, &#39;c&#39;, &#39;l&#39;, &#39;r&#39;, &#39;m&#39;, &#39;a&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;a&#39;, &#39;c&#39;&amp;amp;#125;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;^&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;z&#39;, &#39;l&#39;, &#39;b&#39;, &#39;r&#39;, &#39;d&#39;, &#39;m&#39;&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/image-20210605165829716.png&#34; alt=&#34;image-20210605165829716&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;3-set函数&#34;&gt;&lt;a href=&#34;#3-set函数&#34; class=&#34;headerlink&#34; title=&#34;3. set函数&#34;&gt;&lt;/a&gt;3. set函数&lt;/h2&gt;&lt;h3 id=&#34;31-增-删-改-查&#34;&gt;&lt;a href=&#34;#3-1-增、删、改、查&#34; class=&#34;headerlink&#34; title=&#34;3.1 增、删、改、查&#34;&gt;&lt;/a&gt;3.1 增、删、改、查&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;增&lt;/strong&gt;：添加、合并&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.add()&lt;/code&gt;：为集合添加一个元素&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.update(set)&lt;/code&gt;：为集合添加元素。相当于并集&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#34;apple&#34;, &#34;banana&#34;, &#34;cherry&#34;&amp;amp;#125;&lt;/span&gt;
y &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#123;&#34;google&#34;, &#34;runoob&#34;, &#34;apple&#34;&amp;amp;#125;&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;update&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;y&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; 
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#&amp;amp;#123;&#39;banana&#39;, &#39;apple&#39;, &#39;google&#39;, &#39;runoob&#39;, &#39;cherry&#39;&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;.union(set1,set2,...)&lt;/code&gt;：也是并集，返回&lt;code&gt;set&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;删&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;.clear()&lt;/code&gt;：清空&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pop()&lt;/code&gt;：&lt;strong&gt;随机&lt;/strong&gt;删除元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.remove(item)&lt;/code&gt;：&lt;strong&gt;指定&lt;/strong&gt;删除元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.difference_update(set)&lt;/code&gt;：移除集合中的元素。相当于求差&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;改&lt;/strong&gt;：因为set仅仅是元素的集合，所以没有”改”&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;查&lt;/strong&gt;：主要是&lt;strong&gt;判断&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;in&lt;/code&gt;：通过&lt;code&gt;in&lt;/code&gt;关键字判断set中是否存在元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.isdisjoint(set)&lt;/code&gt;：判断2个集合是否包含相同的元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.issubset(set)&lt;/code&gt;：判断&lt;strong&gt;集合&lt;/strong&gt;是否为该&lt;strong&gt;参数集合&lt;/strong&gt;的&lt;strong&gt;子集&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.issuperset(set)&lt;/code&gt;： 判断&lt;strong&gt;集合&lt;/strong&gt;是否为&lt;strong&gt;参数集合&lt;/strong&gt;的&lt;strong&gt;父集&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;32-求交-差-和-异或&#34;&gt;&lt;a href=&#34;#3-2-求交、差、和、异或&#34; class=&#34;headerlink&#34; title=&#34;3.2 求交、差、和、异或&#34;&gt;&lt;/a&gt;3.2 求交、差、和、异或&lt;/h3&gt;&lt;p&gt;建议用&lt;strong&gt;逻辑运算符&lt;/strong&gt;比较方便&lt;/p&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="Python" scheme="https://nitgod1996.com/categories/note/Python/" />
        <category term="Python" scheme="https://nitgod1996.com/tags/Python/" />
        <updated>2021-06-04T07:56:23.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/06/02/note/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AC%94/%E5%9F%BA%E4%BA%8EPython%E5%92%8Cecharts%E7%9A%84%E5%8A%A8%E6%80%81%E5%9B%BE/</id>
        <title>每日一笔-基于Python和echarts的动态图</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/06/02/note/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AC%94/%E5%9F%BA%E4%BA%8EPython%E5%92%8Cecharts%E7%9A%84%E5%8A%A8%E6%80%81%E5%9B%BE/"/>
        <content type="html">&lt;h1 id=&#34;1-python&#34;&gt;&lt;a href=&#34;#1-Python&#34; class=&#34;headerlink&#34; title=&#34;1. Python&#34;&gt;&lt;/a&gt;1. Python&lt;/h1&gt;&lt;h2 id=&#34;11-字符串默认是单引号3939解决方法&#34;&gt;&lt;a href=&#34;#1-1-字符串默认是单引号-39-39-解决方法&#34; class=&#34;headerlink&#34; title=&#34;1.1 字符串默认是单引号&amp;#39;&amp;#39;解决方法&#34;&gt;&lt;/a&gt;1.1 字符串默认是单引号&lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;解决方法&lt;/h2&gt;&lt;p&gt;由于flask只能上传字符串，Python的字符串默认是&lt;strong&gt;单引号&lt;/strong&gt;&lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;包裹，而&lt;code&gt;json&lt;/code&gt;的键必须是&lt;strong&gt;双引号&lt;/strong&gt;&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;，导致上传的json字符串不能被&lt;code&gt;ajax&lt;/code&gt;所识别&lt;/p&gt;
&lt;p&gt;&lt;font color=&#34;red&#34;&gt;&lt;strong&gt;解决：通过.replace()函数将单引号&lt;code&gt;&amp;#39;&amp;#39;&lt;/code&gt;替换为双引号&lt;code&gt;&amp;quot;&amp;quot;&lt;/code&gt;&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;如下&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;_json&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;replace&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&#39;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;&#34;&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;12-json读取pandas还是with-open&#34;&gt;&lt;a href=&#34;#1-2-json读取：pandas还是with-open&#34; class=&#34;headerlink&#34; title=&#34;1.2 json读取：pandas还是with open&#34;&gt;&lt;/a&gt;1.2 json读取：pandas还是with open&lt;/h2&gt;&lt;p&gt;如果不需要非常复杂的数据处理，还是建议以&lt;code&gt;with open&lt;/code&gt;读取&lt;code&gt;json&lt;/code&gt;文件，并保存在&lt;code&gt;dict&lt;/code&gt;中。&lt;strong&gt;因为由&lt;code&gt;dataframe&lt;/code&gt;转为json会有各种格式转变，如果不熟练会比较麻烦&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如：&lt;code&gt;to_json&lt;/code&gt;会将&lt;code&gt;date&lt;/code&gt;对象转为&lt;code&gt;milliseconds&lt;/code&gt;（自1970年到现在经过的毫秒数）&lt;/p&gt;
&lt;h1 id=&#34;2-javascript&#34;&gt;&lt;a href=&#34;#2-JavaScript&#34; class=&#34;headerlink&#34; title=&#34;2. JavaScript&#34;&gt;&lt;/a&gt;2. JavaScript&lt;/h1&gt;&lt;h2 id=&#34;21-date对象&#34;&gt;&lt;a href=&#34;#2-1-Date对象&#34; class=&#34;headerlink&#34; title=&#34;2.1 Date对象&#34;&gt;&lt;/a&gt;2.1 Date对象&lt;/h2&gt;&lt;p&gt;此次折线图是以&lt;code&gt;date&lt;/code&gt;为坐标横轴，所以用到了许多date对象，主要用了一下方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建对象&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;milliseconds&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//以number类型的毫秒数创建&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dateString&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//能表明date的字符串，如&#34;2016-01-01 00:00:00&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; d &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Date&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;year&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; month&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; day&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; hours&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; minutes&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; seconds&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; milliseconds&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;主要方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRkYXRlLmh0bWw=&#34;&gt;getDate()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;从 Date 对象返回&lt;strong&gt;一个月&lt;/strong&gt;中的某一天 (1 ~ 31)。&lt;strong&gt;几号&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRkYXkuaHRtbA==&#34;&gt;getDay()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;从 Date 对象返回&lt;strong&gt;一周&lt;/strong&gt;中的某一天 (0 ~ 6)。&lt;strong&gt;星期几&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRmdWxseWVhci5odG1s&#34;&gt;getFullYear()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;从 Date 对象以四位数字返回年份。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRob3Vycy5odG1s&#34;&gt;getHours()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回 Date 对象的小时 (0 ~ 23)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRtaWxsaXNlY29uZHMuaHRtbA==&#34;&gt;getMilliseconds()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回 Date 对象的毫秒(0 ~ 999)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRtaW51dGVzLmh0bWw=&#34;&gt;getMinutes()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回 Date 对象的分钟 (0 ~ 59)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRtb250aC5odG1s&#34;&gt;getMonth()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;从 Date 对象返回月份 (&lt;strong&gt;0 ~ 11&lt;/strong&gt;)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRzZWNvbmRzLmh0bWw=&#34;&gt;getSeconds()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回 Date 对象的秒数 (0 ~ 59)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXR0aW1lLmh0bWw=&#34;&gt;getTime()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回 1970 年 1 月 1 日至今的&lt;strong&gt;毫秒数&lt;/strong&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; text_day&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;day&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getFullYear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;-&#39;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;day&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMonth&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;-&#39;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;day&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getDate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//2021-6-2&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;22-间隔函数循环延时函数&#34;&gt;&lt;a href=&#34;#2-2-间隔函数-循环延时函数&#34; class=&#34;headerlink&#34; title=&#34;2.2 间隔函数/循环延时函数&#34;&gt;&lt;/a&gt;2.2 间隔函数/循环延时函数&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;动态图表的核心逻辑是：每隔一定时间更新一次dataSet，重绘一次图表&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;推荐使用setInterval&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;setInterval()&lt;/code&gt;：按照指定的周期（以毫秒计）来调用函数或计算表达式。DOM Window对象&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;setInterval(code,millisec[,”lang”])&lt;/p&gt;
&lt;p&gt;返回值：一个可以传递给.clearInterval() 取消setInterval的值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; num&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setInterval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/*代码块*/&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//每1000ms执行一次&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;flag&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;clearInterval&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//取消循环执行&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;setTimeout()&lt;/code&gt;：指定的毫秒数后调用函数或计算表达式。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：setTimeout(code,millisec)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;意思是，循环间隔执行建议用&lt;code&gt;setInterval&lt;/code&gt;或者递归。&lt;/p&gt;
&lt;p&gt;不过for循环其实也能用，如下&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但，这样会间隔1s后&lt;strong&gt;瞬间&lt;/strong&gt;输出&lt;strong&gt;5个6&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果想每隔一秒输出i，可以如下：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; i &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//匿名函数包裹&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;i &lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//每隔一秒输出&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;原因：算了，今天太晚了，就不研究了&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;3-echarts&#34;&gt;&lt;a href=&#34;#3-echarts&#34; class=&#34;headerlink&#34; title=&#34;3. echarts&#34;&gt;&lt;/a&gt;3. echarts&lt;/h1&gt;&lt;ol start=&#34;5&#34;&gt;
&lt;li&gt;echarts动态折线图和柱形图的参数设置及实现逻辑&lt;/li&gt;
&lt;li&gt;echarts其他一些美化设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;31-动态图&#34;&gt;&lt;a href=&#34;#3-1-动态图&#34; class=&#34;headerlink&#34; title=&#34;3.1 动态图&#34;&gt;&lt;/a&gt;3.1 动态图&lt;/h2&gt;&lt;p&gt;动态图的逻辑是每隔一定时间更新一次dataSet，重绘一次图表。&lt;/p&gt;
&lt;p&gt;如果需要设置动画的参数，则在animation中设置&lt;/p&gt;
&lt;h3 id=&#34;32-其他美化设置&#34;&gt;&lt;a href=&#34;#3-2-其他美化设置&#34; class=&#34;headerlink&#34; title=&#34;3.2 其他美化设置&#34;&gt;&lt;/a&gt;3.2 其他美化设置&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;graphic：图片元素设置，如下&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/06/02/note/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AC%94/%E5%9F%BA%E4%BA%8EPython%E5%92%8Cecharts%E7%9A%84%E5%8A%A8%E6%80%81%E5%9B%BE/image-20210603155146424.png&#34; alt=&#34;image-20210603155146424&#34;&gt;&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;柱形图&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;柱子宽度设置：&lt;code&gt;series.barWidth: &amp;quot;50%&amp;quot;,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;柱子圆角设置：&lt;code&gt;series.itemStyle&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;坐标刻度字体设置：&lt;code&gt;yAxis/Xaxis.axisLabel.textStyle&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;多个图表数据在一个坐标系显示，点击图例显示/隐藏&lt;/p&gt;
&lt;p&gt;&lt;em&gt;只需在series中输入多个{}即可&lt;/em&gt;，如&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;series&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    name&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;总计&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    type&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;line&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; data_total
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    name&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;左&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    type&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;line&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; data_l
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    name&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;右&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    type&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;line&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
    data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; data_r
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="随笔" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/" />
        <category term="每日一笔" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AC%94/" />
        <category term="echarts" scheme="https://nitgod1996.com/tags/echarts/" />
        <category term="Python" scheme="https://nitgod1996.com/tags/Python/" />
        <category term="JavaScript" scheme="https://nitgod1996.com/tags/JavaScript/" />
        <updated>2021-06-02T12:47:47.589Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/</id>
        <title>随笔-利用Python处理json</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/"/>
        <content type="html">&lt;h1 id=&#34;0-json类&#34;&gt;&lt;a href=&#34;#0-json类&#34; class=&#34;headerlink&#34; title=&#34;0. json类&#34;&gt;&lt;/a&gt;0. json类&lt;/h1&gt;&lt;p&gt;​        在Python 的 json库中，共有四个方法。分别是：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;json&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;load&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# json文件输入流转为dict&lt;/span&gt;
json&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loads&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 将字符串类型的json转为dict&lt;/span&gt;
json&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 将dict类型的json写到文件输出流&lt;/span&gt;
json&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dumps&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 将dict类型的json转为&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;1-通过pandas读写json&#34;&gt;&lt;a href=&#34;#1-通过pandas读写json&#34; class=&#34;headerlink&#34; title=&#34;1. 通过pandas读写json&#34;&gt;&lt;/a&gt;1. 通过pandas读写json&lt;/h1&gt;&lt;p&gt;&lt;code&gt;pandas&lt;/code&gt;是Python数据处理的库，一般把数据转成&lt;code&gt;DATAFrame&lt;/code&gt;或&lt;code&gt;Series&lt;/code&gt;进行处理，但这样可能会破坏原有的&lt;code&gt;json&lt;/code&gt;格式&lt;/p&gt;
&lt;p&gt;前提：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;引入外部库&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; json
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;&lt;p&gt;读取数据，保存为&lt;code&gt;Dataframe&lt;/code&gt;。以&lt;code&gt;.csv&lt;/code&gt;文件为例&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;df &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;DataA09/demo.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出如下：第1行和第1列均为索引，不视作数据内容&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/image-20210530200815008.png&#34; alt=&#34;image-20210530200815008&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;利用&lt;code&gt;DataFrame.to_json&lt;/code&gt;转成&lt;code&gt;json&lt;/code&gt;字符串&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_json&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;orient&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;index&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#返回str类型&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#或者&lt;/span&gt;
json&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;loads&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;df&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_json&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;path&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;orient&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;table&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;data&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#返回map&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#就能转成比较常见的json格式文件&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;orient = &amp;#39;index&amp;#39;&lt;/code&gt;有时候中文乱码，可以和下方例子一样，用&lt;code&gt;json.loads()&lt;/code&gt;包裹，再&lt;code&gt;str()&lt;/code&gt;转回字符串，就可以显示中文了。&lt;strong&gt;但是仅仅是str是中文，json文件还是乱码的&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;2种格式分别如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/image-20210530205052077.png&#34; alt=&#34;image-20210530205052077&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/image-20210530205138024.png&#34; alt=&#34;image-20210530205138024&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;2-以dict格式读取json&#34;&gt;&lt;a href=&#34;#2-以dict格式读取json&#34; class=&#34;headerlink&#34; title=&#34;2. 以dict格式读取json&#34;&gt;&lt;/a&gt;2. 以dict格式读取json&lt;/h1&gt;&lt;p&gt;字典（map表）格式是最适合保存json文件的&lt;/p&gt;
&lt;p&gt;以Python自带的文件输入输出流读取：&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 读取数据&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../dataYe/od_map.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;r&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    djson &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; json&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;load&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 写入 JSON 数据&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;with&lt;/span&gt; open&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;data.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;w&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    json&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;dump&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; f&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这其中&lt;code&gt;djson&lt;/code&gt;、&lt;code&gt;data&lt;/code&gt;都是&lt;code&gt;dict&lt;/code&gt;类型&lt;/p&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="随笔" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/" />
        <category term="Python" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/Python/" />
        <category term="Python" scheme="https://nitgod1996.com/tags/Python/" />
        <category term="json" scheme="https://nitgod1996.com/tags/json/" />
        <updated>2021-05-28T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/28/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/</id>
        <title>随笔-利用Python批量处理文件</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/28/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/"/>
        <content type="html">&lt;p&gt;废话不多说，先看示例&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;../dataYe/&#39;&lt;/span&gt;
out_dir &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;../structure/&#39;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; file &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;listdir&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dir&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#遍历文件夹内的文件，file是str类型的文件名&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;splitext&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;.json&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
        newname &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; os&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;splitext&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;_struct.json&#39;&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 是为了后边命名&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#print(newname)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;else&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 如果后缀不是json，那么跳过这个文件&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;continue&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;os.listdir()&lt;/code&gt;：用于返回指定的&lt;strong&gt;文件夹&lt;/strong&gt;内的文件名的&lt;code&gt;str_list&lt;/code&gt;；&lt;/li&gt;
&lt;li&gt;&lt;code&gt;os.path.splitext()&lt;/code&gt;：分离指定文件的&lt;strong&gt;文件名&lt;/strong&gt;与&lt;strong&gt;扩展名&lt;/strong&gt;；默认返回(fname,fextension)元组，可做分片操作；&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此后可以通过&lt;code&gt;pandas&lt;/code&gt;读写处理文件&lt;/p&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="随笔" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/" />
        <category term="Python" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/Python/" />
        <category term="Python" scheme="https://nitgod1996.com/tags/Python/" />
        <updated>2021-05-27T16:00:00.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/jQuery/</id>
        <title>jQuery笔记</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/jQuery/"/>
        <content type="html">&lt;h1 id=&#34;一-基本用法&#34;&gt;&lt;a href=&#34;#一、-基本用法&#34; class=&#34;headerlink&#34; title=&#34;一、 基本用法&#34;&gt;&lt;/a&gt;一、 基本用法&lt;/h1&gt;&lt;h2 id=&#34;1-简介&#34;&gt;&lt;a href=&#34;#1-简介&#34; class=&#34;headerlink&#34; title=&#34;1. 简介&#34;&gt;&lt;/a&gt;1. 简介&lt;/h2&gt;&lt;p&gt;jQuery 是一个轻量级的”写的少，做的多”的 JavaScript 库。极大地简化了JavaScript编程。&lt;/p&gt;
&lt;p&gt;此外，jQuery所有的功能函数均是针对&lt;strong&gt;元素&lt;/strong&gt;的，也就是&lt;strong&gt;标签&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;jQuery 库包含以下功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;HTML 元素选取&lt;/li&gt;
&lt;li&gt;HTML 元素操作&lt;/li&gt;
&lt;li&gt;CSS 操作&lt;/li&gt;
&lt;li&gt;HTML 事件函数&lt;/li&gt;
&lt;li&gt;JavaScript 特效和动画&lt;/li&gt;
&lt;li&gt;HTML DOM 遍历和修改&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AJAX&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;Utilities&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt; 除此之外，jQuery 还提供了大量的插件。&lt;/p&gt;
&lt;h2 id=&#34;2-安装导入&#34;&gt;&lt;a href=&#34;#2-安装-导入&#34; class=&#34;headerlink&#34; title=&#34;2. 安装/导入&#34;&gt;&lt;/a&gt;2. 安装/导入&lt;/h2&gt;&lt;p&gt;有两个版本的 jQuery 可供下载：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Production version - 用于实际的网站中，已被精简和压缩。&lt;/li&gt;
&lt;li&gt;Development version - 用于测试和开发（未压缩，是可读的代码）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上两个版本都可以从 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2pxdWVyeS5jb20vZG93bmxvYWQv&#34;&gt;jquery.com&lt;/span&gt; 中下载。&lt;/p&gt;
&lt;h3 id=&#34;21-本地导入&#34;&gt;&lt;a href=&#34;#2-1-本地导入&#34; class=&#34;headerlink&#34; title=&#34;2.1 本地导入&#34;&gt;&lt;/a&gt;2.1 本地导入&lt;/h3&gt;&lt;p&gt;&lt;code&gt;jquery-1.10.2.min.js&lt;/code&gt;文件下载好后，放到指定目录&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;jquery-1.10.2.min.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-在线导入&#34;&gt;&lt;a href=&#34;#2-2-在线导入&#34; class=&#34;headerlink&#34; title=&#34;2.2 在线导入&#34;&gt;&lt;/a&gt;2.2 在线导入&lt;/h3&gt;&lt;p&gt;直接通过CDN(内容分发网络)引用。&lt;strong&gt;需要连网&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-语法&#34;&gt;&lt;a href=&#34;#3-语法&#34; class=&#34;headerlink&#34; title=&#34;3. 语法&#34;&gt;&lt;/a&gt;3. 语法&lt;/h2&gt;&lt;p&gt;通过 jQuery，您可以选取（查询，query） HTML 元素，并对它们执行”操作”（actions）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;基础语法： &lt;strong&gt;$(selector).action()&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;美元符号定义 jQuery&lt;/li&gt;
&lt;li&gt;选择符（selector）定位 HTML 元素，&lt;strong&gt;规则和CSS选择器相同&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;jQuery 的 action() 执行对元素的操作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实例:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;$(this).hide() - 隐藏当前元素&lt;/li&gt;
&lt;li&gt;$(“p”).hide() - 隐藏所有 &lt;p&gt; 元素&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;$(“p.test”).hide() - 隐藏所有 class=”test” 的 &lt;p&gt; 元素&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;$(“#test”).hide() - 隐藏 id=”test” 的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;31-文档就绪document-ready&#34;&gt;&lt;a href=&#34;#3-1-文档就绪document-ready&#34; class=&#34;headerlink&#34; title=&#34;3.1 文档就绪document ready&#34;&gt;&lt;/a&gt;3.1 文档就绪document ready&lt;/h3&gt;&lt;p&gt;为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。如果在文档没有完全加载之前就运行函数，操作可能失败。&lt;/p&gt;
&lt;p&gt;所以&lt;strong&gt;所有 jQuery 函数需要用document ready 函数包裹&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ready&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
 
   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 开始写 jQuery 代码...&lt;/span&gt;
 
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者使用简介点的写法，如下&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
 
   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 开始写 jQuery 代码...&lt;/span&gt;
 
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-选择器&#34;&gt;&lt;a href=&#34;#4-选择器&#34; class=&#34;headerlink&#34; title=&#34;4. 选择器&#34;&gt;&lt;/a&gt;4. 选择器&lt;/h2&gt;&lt;p&gt;规则和CSS选择器相同。除此之外，它还有一些自定义的选择器。&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户点击按钮后，所有 &lt;/p&gt;&lt;p&gt; 元素都隐藏：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ready&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;button&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hide&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
  &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;语法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“*”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(this)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取当前 HTML 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“p.intro”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取 class 为 intro 的 &amp;lt;p&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“p:first”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取第一个&amp;lt;p&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“ul li:first”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取第一个 &amp;lt;ul&amp;gt; 元素的第一个 &amp;lt;li&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“ul li:first-child”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取每个 &amp;lt;ul&amp;gt; 元素的第一个 &amp;lt;li&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“[href]”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取带有 href 属性的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“a[target=’_blank’]”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取所有 target 属性值等于 “_blank” 的 &amp;lt;a&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“a[target!=’_blank’]”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取所有 target 属性值不等于 “_blank” 的 &amp;lt;a&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“:button”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取所有 type=”button” 的 &amp;lt;input&amp;gt; 元素 和 &amp;lt;button&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“tr:even”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取偶数位置的 &amp;lt;tr&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;$(“tr:odd”)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;选取奇数位置的 &amp;lt;tr&amp;gt; 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;5-事件&#34;&gt;&lt;a href=&#34;#5-事件&#34; class=&#34;headerlink&#34; title=&#34;5. 事件&#34;&gt;&lt;/a&gt;5. 事件&lt;/h2&gt;&lt;p&gt;在jQuery上设置事件。&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 动作触发后执行的代码!!&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;比JavaScript更加方便，&lt;strong&gt;不需要&lt;/strong&gt;在html标签设置&lt;strong&gt;事件属性&lt;/strong&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;鼠标事件&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;键盘事件&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;表单事件&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;文档/窗口事件&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtY2xpY2suaHRtbA==&#34;&gt;click&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQta2V5cHJlc3MuaHRtbA==&#34;&gt;keypress&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtc3VibWl0Lmh0bWw=&#34;&gt;submit&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtbG9hZC5odG1s&#34;&gt;load&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtZGJsY2xpY2suaHRtbA==&#34;&gt;dblclick&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQta2V5ZG93bi5odG1s&#34;&gt;keydown&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtY2hhbmdlLmh0bWw=&#34;&gt;change&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtcmVzaXplLmh0bWw=&#34;&gt;resize&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtbW91c2VlbnRlci5odG1s&#34;&gt;mouseenter&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQta2V5dXAuaHRtbA==&#34;&gt;keyup&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtZm9jdXMuaHRtbA==&#34;&gt;focus&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtc2Nyb2xsLmh0bWw=&#34;&gt;scroll&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtbW91c2VsZWF2ZS5odG1s&#34;&gt;mouseleave&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtYmx1ci5odG1s&#34;&gt;blur&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtdW5sb2FkLmh0bWw=&#34;&gt;unload&lt;/span&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtaG92ZXIuaHRtbA==&#34;&gt;hover&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;二-jquery函数&#34;&gt;&lt;a href=&#34;#二、-jQuery函数&#34; class=&#34;headerlink&#34; title=&#34;二、 jQuery函数&#34;&gt;&lt;/a&gt;二、 jQuery函数&lt;/h1&gt;&lt;p&gt;jQuery函数大多有以下&lt;strong&gt;参数&lt;/strong&gt;，且含义接近：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;speed：一般为函数执行速度。可选项为&lt;ul&gt;
&lt;li&gt;毫秒值&lt;/li&gt;
&lt;li&gt;“slow”&lt;/li&gt;
&lt;li&gt;“fast”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easing：函数执行效果。&lt;ul&gt;
&lt;li&gt;“swing” - 在开头/结尾移动慢，在中间移动快&lt;/li&gt;
&lt;li&gt;“linear” - 匀速移动&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展插件中提供更多可用的 easing 函数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;callback：回调函数。函数执行完之后，要执行的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-效果函数&#34;&gt;&lt;a href=&#34;#1-效果函数&#34; class=&#34;headerlink&#34; title=&#34;1. 效果函数&#34;&gt;&lt;/a&gt;1. 效果函数&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWFuaW1hdGUuaHRtbA==&#34;&gt;animate()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对被选元素应用”自定义”的动画&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWNsZWFycXVldWUuaHRtbA==&#34;&gt;clearQueue()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对被选元素移除所有排队函数（仍未运行的）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlbGF5Lmh0bWw=&#34;&gt;delay()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对被选元素的所有排队函数（仍未运行）设置延迟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlcXVldWUuaHRtbA==&#34;&gt;dequeue()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除下一个排队函数，然后执行函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVpbi5odG1s&#34;&gt;fadeIn()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;逐渐改变被选元素的不透明度，从隐藏到可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVvdXQuaHRtbA==&#34;&gt;fadeOut()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;逐渐改变被选元素的不透明度，从可见到隐藏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0by5odG1s&#34;&gt;fadeTo()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把被选元素逐渐改变至给定的不透明度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0b2dnbGUuaHRtbA==&#34;&gt;fadeToggle()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 fadeIn() 和 fadeOut() 方法之间进行切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZpbmlzaC5odG1s&#34;&gt;finish()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对被选元素停止、移除并完成所有排队动画&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWhpZGUuaHRtbA==&#34;&gt;hide()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隐藏被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXF1ZXVlLmh0bWw=&#34;&gt;queue()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示被选元素的排队函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNob3cuaHRtbA==&#34;&gt;show()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRlZG93bi5odG1s&#34;&gt;slideDown()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;通过调整高度来滑动显示被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldG9nZ2xlLmh0bWw=&#34;&gt;slideToggle()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;slideUp() 和 slideDown() 方法之间的切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldXAuaHRtbA==&#34;&gt;slideUp()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;通过调整高度来滑动隐藏被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXN0b3AuaHRtbA==&#34;&gt;stop()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;停止被选元素上当前正在运行的动画&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXRvZ2dsZS5odG1s&#34;&gt;toggle()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;hide() 和 show() 方法之间的切换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;以下详细介绍这些方法：&lt;/p&gt;
&lt;h3 id=&#34;11-隐藏-显示&#34;&gt;&lt;a href=&#34;#1-1-隐藏、显示&#34; class=&#34;headerlink&#34; title=&#34;1.1 隐藏、显示&#34;&gt;&lt;/a&gt;1.1 隐藏、显示&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWhpZGUuaHRtbA==&#34;&gt;hide()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;隐藏被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNob3cuaHRtbA==&#34;&gt;show()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXRvZ2dsZS5odG1s&#34;&gt;toggle()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;hide() 和 show() 方法之间的切换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;hide：&lt;/strong&gt;隐藏元素（相当于消失，不会有看不见的尸体占位）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).hide(&lt;em&gt;speed,easing,callback&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;speed：可选。规定隐藏效果的速度。&lt;ul&gt;
&lt;li&gt;毫秒&lt;/li&gt;
&lt;li&gt;“slow”&lt;/li&gt;
&lt;li&gt;“fast”3&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;easing：可选。动画运行效果&lt;ul&gt;
&lt;li&gt;“swing” - 在开头/结尾移动慢，在中间移动快&lt;/li&gt;
&lt;li&gt;“linear” - 匀速移动&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;扩展插件中提供更多可用的 easing 函数&lt;/strong&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;callback：可选。hide() 方法执行完之后，要执行的函数。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;show：&lt;/strong&gt;显示元素&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).show(&lt;em&gt;speed,easing,callback&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;toggle：&lt;/strong&gt;在被选元素上进行&lt;code&gt;hide&lt;/code&gt;和&lt;code&gt;show&lt;/code&gt;之间的切换。即，元素为hide时，toggle就是show。反之，元素show时，toggle就是hide&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).toggle(&lt;em&gt;speed,easing,callback&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.btn1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toggle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;slow&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;swing&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toggle&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//等价于&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.btn1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hide&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;slow&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;swing&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-淡入-淡出&#34;&gt;&lt;a href=&#34;#1-2-淡入、淡出&#34; class=&#34;headerlink&#34; title=&#34;1.2 淡入、淡出&#34;&gt;&lt;/a&gt;1.2 淡入、淡出&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVpbi5odG1s&#34;&gt;fadeIn()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;逐渐改变被选元素的不透明度，从隐藏到可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVvdXQuaHRtbA==&#34;&gt;fadeOut()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;逐渐改变被选元素的不透明度，从可见到隐藏&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0by5odG1s&#34;&gt;fadeTo()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把被选元素逐渐改变至给定的不透明度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0b2dnbGUuaHRtbA==&#34;&gt;fadeToggle()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在 fadeIn() 和 fadeOut() 方法之间进行切换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fadeToggle：&lt;/strong&gt;&lt;code&gt;In&lt;/code&gt;和&lt;code&gt;Out&lt;/code&gt;就不解释了，语法都差不多，一般用&lt;code&gt;fadeToggle&lt;/code&gt;进行切换&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).fadeToggle(&lt;em&gt;speed,easing,callback&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;fadeTo：&lt;/strong&gt;逐渐改变透明度，最终并不会隐藏元素&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).fadeTo(&lt;em&gt;speed,opacity,easing,callback&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;speed：必须&lt;/li&gt;
&lt;li&gt;opacity：必须。最终&lt;strong&gt;透明度&lt;/strong&gt;，介于0.00-1.00之间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;button&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;fadeTo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;13-滑动&#34;&gt;&lt;a href=&#34;#1-3-滑动&#34; class=&#34;headerlink&#34; title=&#34;1.3 滑动&#34;&gt;&lt;/a&gt;1.3 滑动&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRlZG93bi5odG1s&#34;&gt;slideDown()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;通过调整高度来滑动显示被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldG9nZ2xlLmh0bWw=&#34;&gt;slideToggle()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;slideUp() 和 slideDown() 方法之间的切换&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldXAuaHRtbA==&#34;&gt;slideUp()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;通过调整高度来滑动隐藏被选元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;slideDown：&lt;/strong&gt;下滑&lt;strong&gt;显示&lt;/strong&gt;被隐藏的元素&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).slideDown(&lt;em&gt;speed,easing,callback&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;slideUp&lt;/strong&gt;：上滑&lt;strong&gt;隐藏&lt;/strong&gt;元素&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).slideUp(&lt;em&gt;speed,easing,callback&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;slideToggle：&lt;/strong&gt;slideUp() 和 slideDown() 方法之间的切换&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ready&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.btn1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;slideUp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//上滑隐藏&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;.btn2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;slideDown&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//下滑显示&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14-动画&#34;&gt;&lt;a href=&#34;#1-4-动画&#34; class=&#34;headerlink&#34; title=&#34;1.4 动画&#34;&gt;&lt;/a&gt;1.4 动画&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWFuaW1hdGUuaHRtbA==&#34;&gt;animate()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;对被选元素应用”自定义”的动画&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXN0b3AuaHRtbA==&#34;&gt;stop()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;停止被选元素上当前正在运行的动画&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZpbmlzaC5odG1s&#34;&gt;finish()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;对被选元素停止、移除并完成所有排队动画&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;animate：&lt;/strong&gt;通过设置CSS自定义动画&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：(&lt;em&gt;selector&lt;/em&gt;).animate(&lt;em&gt;{styles},{options}&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;styles：必需。规定产生动画效果的一个或多个 CSS 属性/值（同上）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;options：可选&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;speed - 设置动画的速度&lt;/li&gt;
&lt;li&gt;easing - 规定要使用的 easing 函数&lt;/li&gt;
&lt;li&gt;callback - 规定动画完成之后要执行的函数&lt;/li&gt;
&lt;li&gt;step - 规定动画的每一步完成之后要执行的函数&lt;/li&gt;
&lt;li&gt;queue - 布尔值。指示是否在效果队列中放置动画。如果为 false，则动画将立即开始。&lt;/li&gt;
&lt;li&gt;specialEasing - 来自 &lt;em&gt;styles&lt;/em&gt; 参数的一个或多个 CSS 属性的映射，以及它们的对应 easing 函数&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;button&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#box&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;300px&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;stop：&lt;/strong&gt;停止元素正在运行的动画。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).stop(&lt;em&gt;stopAll,goToEnd&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;stopAll：可选。布尔值，是否停止队列中所有动画。默认false&lt;/li&gt;
&lt;li&gt;goToEnd：可选。布尔值，是否立即完成当前的动画。默认是 false。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;finish：&lt;/strong&gt;停止当前运行的动画，移除所有排队的动画，并为被选元素完成所有动画。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).finish(&lt;em&gt;queueName&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;15-函数队列&#34;&gt;&lt;a href=&#34;#1-5-函数队列&#34; class=&#34;headerlink&#34; title=&#34;1.5 函数队列&#34;&gt;&lt;/a&gt;1.5 函数队列&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;每个元素都有一个&lt;strong&gt;队列&lt;/strong&gt;，用于存储该元素绑定的函数。&lt;/p&gt;
&lt;p&gt;可通过设置队列中函数的执行时间、延时、或者删除待执行函数等&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXF1ZXVlLmh0bWw=&#34;&gt;queue()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示被选元素的排队函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWNsZWFycXVldWUuaHRtbA==&#34;&gt;clearQueue()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对被选元素移除所有排队函数（仍未运行的）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlbGF5Lmh0bWw=&#34;&gt;delay()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对被选元素的所有排队函数（仍未运行）设置延迟&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlcXVldWUuaHRtbA==&#34;&gt;dequeue()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除下一个排队函数，然后执行函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZpbmlzaC5odG1s&#34;&gt;finish()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对被选元素停止、移除并完成所有排队动画&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;queue：&lt;/strong&gt;显示元素的函数队列&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).queue(&lt;em&gt;queueName&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;span&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;queue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;clearQueue：&lt;/strong&gt;移除队列中尚未运行的函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).clearQueue(&lt;em&gt;queueName&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#start&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;300&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;height&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;animate&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;width&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;100&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1500&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#stop&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;clearQueue&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//清空&#34;div&#34;还未执行的函数&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;delay：&lt;/strong&gt;对该元素队列中的函数设置延时&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).delay(&lt;em&gt;speed,queueName&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;speed：可选，延迟速度&lt;ul&gt;
&lt;li&gt;毫秒值&lt;/li&gt;
&lt;li&gt;“slow”&lt;/li&gt;
&lt;li&gt;“fast”&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;queueName：可选（一般不选）。规定队列名称&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;dequeue：&lt;/strong&gt;移除队列中&lt;strong&gt;下一个&lt;/strong&gt;函数&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).dequeue(&lt;em&gt;queueName&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;finish：&lt;/strong&gt;停止当前运行的动画，移除所有排队的动画，并为被选元素完成所有动画。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).finish(&lt;em&gt;queueName&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-htmlcss方法对应dom&#34;&gt;&lt;a href=&#34;#2-HTML-CSS方法（对应DOM）&#34; class=&#34;headerlink&#34; title=&#34;2. HTML/CSS方法（对应DOM）&#34;&gt;&lt;/a&gt;2. HTML/CSS方法（对应DOM）&lt;/h2&gt;&lt;p&gt;jQuery 中非常重要的部分，就是操作 DOM 的能力。&lt;/p&gt;
&lt;p&gt;jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。&lt;/p&gt;
&lt;h3 id=&#34;21-获取设置元素css样式&#34;&gt;&lt;a href=&#34;#2-1-获取-设置元素CSS样式&#34; class=&#34;headerlink&#34; title=&#34;2.1 获取/设置元素CSS样式&#34;&gt;&lt;/a&gt;2.1 获取/设置元素CSS样式&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLWNzcy5odG1s&#34;&gt;css()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;为被选元素设置或返回一个或多个样式属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLWhlaWdodC5odG1s&#34;&gt;height()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或返回被选元素的高度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLXdpZHRoLmh0bWw=&#34;&gt;width()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或返回被选元素的宽度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbm5lcmhlaWdodC5odG1s&#34;&gt;innerHeight()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回元素的高度（包含 padding，不包含 border）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbm5lcndpZHRoLmh0bWw=&#34;&gt;innerWidth()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回元素的宽度（包含 padding，不包含 border）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1vdXRlcmhlaWdodC5odG1s&#34;&gt;outerHeight()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回元素的高度（包含 padding 和 border）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1vdXRlcndpZHRoLmh0bWw=&#34;&gt;outerWidth()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回元素的宽度（包含 padding 和 border）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLW9mZnNldC5odG1s&#34;&gt;offset()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或返回被选元素的偏移坐标（相对于文档）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1lc2NhcGVTZWxlY3Rvci5odG1s&#34;&gt;$.escapeSelector()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;转义CSS选择器中有特殊意义的字符或字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1jc3Nob29rcy5odG1s&#34;&gt;$.cssHooks&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;提供了一种方法通过定义函数来获取和设置特定的CSS值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;css：&lt;/strong&gt;返回/设置元素css样式&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回 CSS 属性值：$(&lt;em&gt;selector&lt;/em&gt;).css(&lt;em&gt;property&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;设置 CSS 属性和值：$(&lt;em&gt;selector&lt;/em&gt;).css(&lt;em&gt;property,value&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;使用函数设置 CSS 属性和值：$(&lt;em&gt;selector&lt;/em&gt;).css(&lt;em&gt;property,&lt;em&gt;function&lt;/em&gt;(index,currentvalue)&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;设置多个属性和值：$(&lt;em&gt;selector&lt;/em&gt;).css({&lt;em&gt;属性：value&lt;/em&gt;, &lt;em&gt;属性：value&lt;/em&gt;, …})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;property和value均为string类型&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;function&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;index：集合中元素的index位置&lt;/li&gt;
&lt;li&gt;currentvalue：当前css对应属性的&lt;strong&gt;值&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;```javascript&lt;br&gt;//将 span 中的文字字体放大为当前字体的两倍。&lt;br&gt;$(“span”).css(“font-size”,function(i,curr){&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;return 2*parseInt(curr);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;});&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;height/width：&lt;/strong&gt;设置/返回元素高宽，该方法不包含 padding、border 或 margin。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E5%89%8D%E7%AB%AF/jQuery/img_height.gif&#34; alt=&#34;jQuery Dimensions&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回高度：$(&lt;em&gt;selector&lt;/em&gt;).height()&lt;/p&gt;
&lt;p&gt;设置高度：$(&lt;em&gt;selector&lt;/em&gt;).height(&lt;em&gt;value&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;使用函数设置高度：$(&lt;em&gt;selector&lt;/em&gt;).height(function*(index,currentheight)*)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;innerHeight/innerWidth：&lt;/strong&gt;返回元素宽高（包含 padding，不包括border）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).innerHeight()&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;outerHeight/outerWidth&lt;/strong&gt;：返回元素宽高（包含padding和border）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).outerHeight(&lt;em&gt;includeMargin&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;includeMargin：可选，布尔值。是否包含margin&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;offset：&lt;/strong&gt;设置或返回被选元素相对于&lt;strong&gt;文档&lt;/strong&gt;的偏移坐标。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回偏移坐标：$(&lt;em&gt;selector&lt;/em&gt;).offset()。&lt;strong&gt;返回带有 top 和 left 的对象，可通过.top/.left关键字调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;设置偏移坐标：$(&lt;em&gt;selector&lt;/em&gt;).offset({top:&lt;em&gt;value&lt;/em&gt;,left:&lt;em&gt;value&lt;/em&gt;})&lt;/p&gt;
&lt;p&gt;使用函数设置偏移坐标：$(&lt;em&gt;selector&lt;/em&gt;).offset(function*(index,currentoffset)*)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;{top:&lt;em&gt;value&lt;/em&gt;,left:&lt;em&gt;value&lt;/em&gt;}：偏移量。可能的值：&lt;ul&gt;
&lt;li&gt;名/值对，比如 {top:100,left:100}&lt;/li&gt;
&lt;li&gt;一个带有 top 和 left 的对象&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;function(index,currentoffset)：可选。规定返回包含 top 和 left 坐标的对象的函数。&lt;ul&gt;
&lt;li&gt;&lt;em&gt;index&lt;/em&gt; - 返回集合中元素的 index 位置。&lt;/li&gt;
&lt;li&gt;&lt;em&gt;currentoffset&lt;/em&gt; - 返回被选元素的当前坐标。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;button&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;click&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Top: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;top &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34; Left: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;left&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-获取设置属性attr&#34;&gt;&lt;a href=&#34;#2-2-获取-设置属性attr&#34; class=&#34;headerlink&#34; title=&#34;2.2 获取/设置属性attr&#34;&gt;&lt;/a&gt;2.2 获取/设置属性attr&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hdHRyLmh0bWw=&#34;&gt;attr()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或返回被选元素的属性/值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1wcm9wLmh0bWw=&#34;&gt;prop()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或返回被选元素的属性/值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmVhdHRyLmh0bWw=&#34;&gt;removeAttr()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从被选元素移除一个或多个属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmVwcm9wLmh0bWw=&#34;&gt;removeProp()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除通过 prop() 方法设置的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC12YWwuaHRtbA==&#34;&gt;val()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或返回被选元素的属性值（针对表单元素）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;prop和attr差不多，仅有细微的差别，暂时不想去研究&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;attr：&lt;/strong&gt;设置/返回元素的属性和值。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回属性的值：$(&lt;em&gt;selector&lt;/em&gt;).attr(&lt;em&gt;attribute&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;设置属性和值：$(&lt;em&gt;selector&lt;/em&gt;).attr(&lt;em&gt;attribute,value&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;使用函数设置属性和值：$(&lt;em&gt;selector&lt;/em&gt;).attr(*attribute,*function(&lt;em&gt;index,currentvalue&lt;/em&gt;))&lt;/p&gt;
&lt;p&gt;设置多个属性和值：$(&lt;em&gt;selector&lt;/em&gt;).attr({&lt;em&gt;attribute&lt;/em&gt;:&lt;em&gt;value&lt;/em&gt;, &lt;em&gt;attribute&lt;/em&gt;:&lt;em&gt;value&lt;/em&gt;,…})&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;attribute：属性名，string类型&lt;/li&gt;
&lt;li&gt;value：属性值，string类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;removeAttr：&lt;/strong&gt;移除元素的属性&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).removeAttr(&lt;em&gt;attribute&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;val：&lt;/strong&gt;设置/返回&lt;strong&gt;表单元素&lt;/strong&gt;属性值&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回 value 属性：$(&lt;em&gt;selector&lt;/em&gt;).val()&lt;/p&gt;
&lt;p&gt;设置 value 属性：$(&lt;em&gt;selector&lt;/em&gt;).val(&lt;em&gt;value&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;通过函数设置 value 属性：$(&lt;em&gt;selector&lt;/em&gt;).val(function*(index,currentvalue)*)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#34;red&#34;&gt;表单元素通过&lt;code&gt;input:表单名&lt;/code&gt;捕获，&lt;code&gt;表单名&lt;/code&gt;是&lt;code&gt;type&lt;/code&gt;的值&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;input:text&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Glenn Quagmire&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;名称: &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;user&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;添加删除class属性&#34;&gt;&lt;a href=&#34;#添加-删除class属性&#34; class=&#34;headerlink&#34; title=&#34;添加/删除class属性&#34;&gt;&lt;/a&gt;添加/删除class属性&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hZGRjbGFzcy5odG1s&#34;&gt;addClass()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;向被选元素添加一个或多个类名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1oYXNjbGFzcy5odG1s&#34;&gt;hasClass()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;检查被选元素是否包含指定的 class 名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmVjbGFzcy5odG1s&#34;&gt;removeClass()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从被选元素移除一个或多个类&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC10b2dnbGVjbGFzcy5odG1s&#34;&gt;toggleClass()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素中添加/移除一个或多个类之间切换&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;addClass：&lt;/strong&gt;添加class属性。&lt;em&gt;该方法不会移除已存在的 class 属性，仅仅添加一个或多个类名到 class 属性。&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).addClass(&lt;em&gt;classname&lt;/em&gt;,function(&lt;em&gt;index,oldclass&lt;/em&gt;))&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;classname：必须。添加的类名，用&lt;code&gt;,&lt;/code&gt;分隔&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;p:first&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;intro&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;hasClass：&lt;/strong&gt;是否包含指定的类名称。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).hasClass(&lt;em&gt;classname&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;removeClass：&lt;/strong&gt;移除指定类&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).removeClass(&lt;em&gt;classname&lt;/em&gt;,function*(index,currentclass)*)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;toggleClass：&lt;/strong&gt;添加/移除一个或多个类之间&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).toggleClass(&lt;em&gt;classname,&lt;em&gt;function&lt;/em&gt;(index,currentclass),switch&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;switch：可选。布尔值，规定是否仅仅添加（true）或移除（false）类。（没懂）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;23-操作元素节点树&#34;&gt;&lt;a href=&#34;#2-3-操作元素节点树&#34; class=&#34;headerlink&#34; title=&#34;2.3 操作元素节点树&#34;&gt;&lt;/a&gt;2.3 操作元素节点树&lt;/h3&gt;&lt;p&gt;这些方法以元素为最小单位，不对元素内容做修改。但也可实现添加/删除元素内容&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;添加元素节点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hZnRlci5odG1s&#34;&gt;after()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素后插入内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1iZWZvcmUuaHRtbA==&#34;&gt;before()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素前插入内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hcHBlbmQuaHRtbA==&#34;&gt;append()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素的结尾插入内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1wcmVwZW5kLmh0bWw=&#34;&gt;prepend()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素的开头插入内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbnNlcnRhZnRlci5odG1s&#34;&gt;insertAfter()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素后插入 HTML 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbnNlcnRiZWZvcmUuaHRtbA==&#34;&gt;insertBefore()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素前插入 HTML 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hcHBlbmR0by5odG1s&#34;&gt;appendTo()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素的结尾插入 HTML 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1wcmVwZW5kdG8uaHRtbA==&#34;&gt;prependTo()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在被选元素的开头插入 HTML 元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;移除元素节点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmUuaHRtbA==&#34;&gt;remove()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除被选元素（包含数据和事件）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1kZXRhY2guaHRtbA==&#34;&gt;detach()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除被选元素（保留数据和事件）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC11bndyYXAuaHRtbA==&#34;&gt;unwrap()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除被选元素的父元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1lbXB0eS5odG1s&#34;&gt;empty()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除被选元素所有子节点和内容&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;返回元素节点&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLW9mZnNldHBhcmVudC5odG1s&#34;&gt;offsetParent()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回第一个定位的祖先元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;24-获取设置元素内容&#34;&gt;&lt;a href=&#34;#2-4-获取-设置元素内容&#34; class=&#34;headerlink&#34; title=&#34;2.4 获取/设置元素内容&#34;&gt;&lt;/a&gt;2.4 获取/设置元素内容&lt;/h3&gt;&lt;p&gt;其实以上设置属性方法也是设置元素内容，这里仅描述设置&lt;strong&gt;标签体内&lt;/strong&gt;的内容的方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1odG1sLmh0bWw=&#34;&gt;html()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;标签体内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC10ZXh0Lmh0bWw=&#34;&gt;text()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;文本内容（仅返回文本）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;区别如下&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;test&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;这是段落中的 &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;粗体&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 文本。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
&lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#test&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;text&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//这是段落中的 粗体 文本。&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;$&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#test&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//这是段落中的 &amp;lt;b&gt;粗体&amp;lt;/b&gt; 文本。&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;html：&lt;/strong&gt;返回/设置标签体内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回内容：$(&lt;em&gt;selector&lt;/em&gt;).html()&lt;/p&gt;
&lt;p&gt;设置内容：$(&lt;em&gt;selector&lt;/em&gt;).html(&lt;em&gt;content&lt;/em&gt;)&lt;/p&gt;
&lt;p&gt;使用函数设置内容：$(&lt;em&gt;selector&lt;/em&gt;).html(function*(index,currentcontent)*)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;content：替代文本，string类型&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;text：&lt;/strong&gt;：返回设置标签体内&lt;strong&gt;文本&lt;/strong&gt;内容&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法同上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;3-其他函数&#34;&gt;&lt;a href=&#34;#3-其他函数&#34; class=&#34;headerlink&#34; title=&#34;3. 其他函数&#34;&gt;&lt;/a&gt;3. 其他函数&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;**&lt;code&gt;$.when():&lt;/code&gt;    **提供一种方法来执行一个或多个对象的回调函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;回调函数&lt;/strong&gt;就是一个被作为参数传递的函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：*$*.when( deferreds )&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;deferreds：Deferred类型 一个或多个延迟对象，或者普通的JavaScript对象&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;$&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;when&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; testing&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;done&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;testing&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//x是&amp;amp;#123;testing:123&amp;amp;#125;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;$.when是基于ajax的异步函数，表示当deferred延迟对象加载完后，执行done（加载完成之前不执行，执行其他语句）&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三-ajax&#34;&gt;&lt;a href=&#34;#三、-AJAX&#34; class=&#34;headerlink&#34; title=&#34;三、 AJAX&#34;&gt;&lt;/a&gt;三、 AJAX&lt;/h1&gt;&lt;p&gt;AJAX 是与&lt;strong&gt;服务器交换数据&lt;/strong&gt;的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;通过ajax可以实现前端页面调用后端数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-什么是ajax&#34;&gt;&lt;a href=&#34;#1-什么是AJAX&#34; class=&#34;headerlink&#34; title=&#34;1. 什么是AJAX&#34;&gt;&lt;/a&gt;1. 什么是AJAX&lt;/h2&gt;&lt;p&gt;AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。&lt;/p&gt;
&lt;p&gt;简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;同步：一定要等任务执行完了，得到结果，才执行下一个任务。&lt;/p&gt;
&lt;p&gt;异步：不等任务执行完，直接执行下一个任务。（即两个不互相影响的任务并行）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​        通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。&lt;/p&gt;
&lt;h2 id=&#34;2-语法&#34;&gt;&lt;a href=&#34;#2-语法&#34; class=&#34;headerlink&#34; title=&#34;2. 语法&#34;&gt;&lt;/a&gt;2. 语法&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;$.ajax(&lt;em&gt;{name:value, name:value, … }&lt;/em&gt;)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;ajax() 方法用于执行 AJAX（异步 HTTP）请求。&lt;/p&gt;
&lt;p&gt;所有的 jQuery AJAX 方法都使用 ajax() 方法。该方法通常用于其他方法不能完成的请求。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;常用参数如下：&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;名称&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值/描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;async&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;布尔值，表示请求是否异步处理。默认是 true。&lt;br&gt;（同步请求将会锁住浏览器，用户其他操作必须等待请求完成才可以执行）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;data&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定要发送到服务器的数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;dataType&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;预期的服务器响应的&lt;strong&gt;数据类型&lt;/strong&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;error(&lt;em&gt;xhr,status,error&lt;/em&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果请求失败要运行的函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;success(&lt;em&gt;result,status,xhr&lt;/em&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当请求成功时运行的函数。&lt;font color=&#34;red&#34;&gt;拿到后端数据后主要&lt;strong&gt;操作&lt;/strong&gt;就写在这里&lt;/font&gt;&amp;gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;timeout&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置本地的请求超时时间（以毫秒计）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;type&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定请求的类型（**GET **或 &lt;strong&gt;POST&lt;/strong&gt;）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;url&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定发送请求的 URL。默认是当前页面。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;其中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;success：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;result：请求到的数据&lt;/li&gt;
&lt;li&gt;&lt;em&gt;xhr&lt;/em&gt;： 包含 XMLHttpRequest 对象&lt;/li&gt;
&lt;li&gt;status：响应状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;error：&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;error：错误信息&lt;/li&gt;
&lt;li&gt;&lt;em&gt;xhr&lt;/em&gt;： 包含 XMLHttpRequest 对象&lt;/li&gt;
&lt;li&gt;status：响应状态码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;$&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ajax&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        type &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;get&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;     &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//异步请求（同步请求将会锁住浏览器，用户其他操作必须等待请求完成才可以执行）&lt;/span&gt;
        url &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;data/data1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//服务器端放出api的地址，一般是把数据以json格式放出&lt;/span&gt;
        data &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        dataType &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//返回数据形式为json&lt;/span&gt;
        success &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//请求成功时执行该函数内容，result即为服务器返回的json对象&lt;/span&gt;
            &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        error &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//请求失败时执行该函数&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;图表请求数据失败!status&#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;status&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            myChart&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hideLoading&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-简介方法&#34;&gt;&lt;a href=&#34;#3-简介方法&#34; class=&#34;headerlink&#34; title=&#34;3. 简介方法&#34;&gt;&lt;/a&gt;3. 简介方法&lt;/h2&gt;&lt;p&gt;ajax提供了一些简单的方法，直接获取指定类型的数据，不需要写参数居多的&lt;code&gt;$.ajax&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如&lt;code&gt;$.getJSON()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;$&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getJSON&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;http://localhost:5000/data/data1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//result是获取到的json数据&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvYWpheC1nZXQuaHRtbA==&#34;&gt;$.get()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;使用 AJAX 的 HTTP GET 请求从服务器加载数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvYWpheC1nZXRqc29uLmh0bWw=&#34;&gt;$.getJSON()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;使用 HTTP GET 请求从服务器加载 JSON 编码的数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvYWpheC1nZXRzY3JpcHQuaHRtbA==&#34;&gt;$.getScript()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;使用 AJAX 的 HTTP GET 请求从服务器加载并执行 JavaScript&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;以&lt;code&gt;$.getJSON()&lt;/code&gt;为例，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;$.getJSON()：&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;语法：$(&lt;em&gt;selector&lt;/em&gt;).getJSON(&lt;em&gt;url,data,success(result,status,xhr))&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;url：必需。规定将请求发送到哪个 URL。&lt;/li&gt;
&lt;li&gt;data： 可选。规定&lt;strong&gt;发送到服务器&lt;/strong&gt;的数据。&lt;/li&gt;
&lt;li&gt;*success(result,status,xhr)*：success函数&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="前端" scheme="https://nitgod1996.com/categories/note/%E5%89%8D%E7%AB%AF/" />
        <category term="前端" scheme="https://nitgod1996.com/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="JavaScript" scheme="https://nitgod1996.com/tags/JavaScript/" />
        <category term="jQuery" scheme="https://nitgod1996.com/tags/jQuery/" />
        <updated>2021-05-27T10:19:56.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/</id>
        <title>JavaScript基础语法</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/"/>
        <content type="html">&lt;h1 id=&#34;一-javascript简介&#34;&gt;&lt;a href=&#34;#一、-JavaScript简介&#34; class=&#34;headerlink&#34; title=&#34;一、 JavaScript简介&#34;&gt;&lt;/a&gt;一、 JavaScript简介&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;HTML&lt;/strong&gt; 定义了网页的内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;CSS&lt;/strong&gt; 描述了网页的布局&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;JavaScript&lt;/strong&gt; 控制了网页的行为，&lt;strong&gt;主要用于与用户的交互及提高用户体验&lt;/strong&gt;。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;1-javascript简单功能&#34;&gt;&lt;a href=&#34;#1-JavaScript简单功能&#34; class=&#34;headerlink&#34; title=&#34;1. JavaScript简单功能&#34;&gt;&lt;/a&gt;1. JavaScript简单功能&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;直接网页输出流&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//直接打印在网页上&lt;/span&gt;
document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;h1&gt;这是一个标题&amp;lt;/h1&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;p&gt;这是一个段落。&amp;lt;/p&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//以弹框弹出&lt;/span&gt;
window&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;弹框&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//或者直接alert也可&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;对事件的响应&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;button&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;alert(&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;欢迎!&lt;span class=&#34;token punctuation&#34;&gt;&#39;&lt;/span&gt;)&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;点我!&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;&amp;lt;!--在onclick中写js代码--&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;修改html内容/CSS样式&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;demo&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//通过ID查找元素（类似CSS选择器的作用，元素即是标签）&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Hello JavaScript&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//改变内容（注入html）&lt;/span&gt;
x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;color&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;#ff0000&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;           &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//改变样式&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;输出到控制台（适用于用编辑器调试）&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt; console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//相当于java的system.out.println&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-引入javascript&#34;&gt;&lt;a href=&#34;#2-引入JavaScript&#34; class=&#34;headerlink&#34; title=&#34;2. 引入JavaScript&#34;&gt;&lt;/a&gt;2. 引入JavaScript&lt;/h2&gt;&lt;h3 id=&#34;21-内嵌入html&#34;&gt;&lt;a href=&#34;#2-1-内嵌入html&#34; class=&#34;headerlink&#34; title=&#34;2.1 内嵌入html&#34;&gt;&lt;/a&gt;2.1 内嵌入html&lt;/h3&gt;&lt;p&gt;直接在html中添加&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;标签，在&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;中写&lt;code&gt;js&lt;/code&gt;代码。&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;引入位置会影响执行顺序，一般视情况放在head或body中&lt;/p&gt;
&lt;h3 id=&#34;22-外部导入js文件&#34;&gt;&lt;a href=&#34;#2-2-外部导入js文件&#34; class=&#34;headerlink&#34; title=&#34;2.2 外部导入js文件&#34;&gt;&lt;/a&gt;2.2 外部导入js文件&lt;/h3&gt;&lt;p&gt;单独建一个&lt;code&gt;.js&lt;/code&gt;文件，在html中以&lt;code&gt;&amp;lt;script src=&amp;quot;**.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt;引入。&lt;/p&gt;
&lt;h3 id=&#34;23-示例&#34;&gt;&lt;a href=&#34;#2-3-示例&#34; class=&#34;headerlink&#34; title=&#34;2.3 示例&#34;&gt;&lt;/a&gt;2.3 示例&lt;/h3&gt;&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;lang&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;en&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;UTF-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Title&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
    &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    world!
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;js/hello.js&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/image-20210521164827154.png&#34; alt=&#34;image-20210521164827154&#34;&gt;&lt;img data-src=&#34;/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/image-20210521164832754.png&#34; alt=&#34;image-20210521164832754&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;二-基础语法&#34;&gt;&lt;a href=&#34;#二、-基础语法&#34; class=&#34;headerlink&#34; title=&#34;二、 基础语法&#34;&gt;&lt;/a&gt;二、 基础语法&lt;/h1&gt;&lt;h2 id=&#34;1-数据类型&#34;&gt;&lt;a href=&#34;#1-数据类型&#34; class=&#34;headerlink&#34; title=&#34;1. 数据类型&#34;&gt;&lt;/a&gt;1. 数据类型&lt;/h2&gt;&lt;p&gt;可以通过&lt;code&gt;type()&lt;/code&gt;函数返回数据类型。&lt;/p&gt;
&lt;p&gt;或者&lt;code&gt;typeof&lt;/code&gt;+空格+对象。如&lt;code&gt;typeof &amp;quot;John&amp;quot;        // 返回 string&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;isNaN&lt;/code&gt;专门用于判断是否为数字&lt;/p&gt;
&lt;h3 id=&#34;11-基础数据类型&#34;&gt;&lt;a href=&#34;#1-1-基础数据类型&#34; class=&#34;headerlink&#34; title=&#34;1.1 基础数据类型&#34;&gt;&lt;/a&gt;1.1 基础数据类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;类型&lt;/th&gt;
&lt;th&gt;解释&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;number&lt;/td&gt;
&lt;td&gt;整数/小数/NaN（not a number）  &lt;br&gt;  &lt;code&gt;true为1，false为0。数字string等值转换&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;string&lt;/td&gt;
&lt;td&gt;字符串。””和’’都表示字符串，和Python一样&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;true/false  &lt;br&gt;  &lt;code&gt;0/NaN/null为false&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;null&lt;/td&gt;
&lt;td&gt;空值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;undefined&lt;/td&gt;
&lt;td&gt;未定义数据类型的变量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;但JavaScript不能以&lt;code&gt;number&lt;/code&gt;或&lt;code&gt;string&lt;/code&gt;定义变量，而是用弱类型&lt;code&gt;var&lt;/code&gt;定义所有的基础数据类型变量，如&lt;code&gt;var a=1;&lt;/code&gt;或&lt;code&gt;var list=[1,2,3];&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-弱类型var&#34;&gt;&lt;a href=&#34;#1-2-弱类型var&#34; class=&#34;headerlink&#34; title=&#34;1.2 弱类型var&#34;&gt;&lt;/a&gt;1.2 弱类型&lt;code&gt;var&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;​    强类型：开辟变量存储空间时定义数据类型。只能存储固定类型数据，如Java&lt;/p&gt;
&lt;p&gt;​    弱类型：不定义数据类型。可存放任意类型数据，如Python&lt;/p&gt;
&lt;p&gt;​    也可以像Python一样不用var定义，直接a=1;    &lt;/p&gt;
&lt;h3 id=&#34;13-类型转换&#34;&gt;&lt;a href=&#34;#1-3-类型转换&#34; class=&#34;headerlink&#34; title=&#34;1.3 类型转换&#34;&gt;&lt;/a&gt;1.3 类型转换&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;其他类型转&lt;strong&gt;字符串&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//使用全局方法String&lt;/span&gt;
num&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//或者对象的toString方法&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;字符串转&lt;strong&gt;数字&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token function&#34;&gt;Number&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;3.14&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 使用全局方法Number&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;123zbc&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//或者使用parseInt、parseFloat等 &#34;123zbc&#34;→123&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;14-关键字let&#34;&gt;&lt;a href=&#34;#1-4-关键字let&#34; class=&#34;headerlink&#34; title=&#34;1.4 关键字let&#34;&gt;&lt;/a&gt;1.4 关键字&lt;code&gt;let&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;let&lt;/code&gt;是ES6新引入的关键字。let 声明的变量只在 let 命令所在的代码块内有效。在 ES6 之前，JavaScript 只有两种作用域： &lt;strong&gt;全局变量&lt;/strong&gt; 与 &lt;strong&gt;函数内的局部变量&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;var&lt;/code&gt;和&lt;code&gt;let&lt;/code&gt;的区别是，**&lt;code&gt;let&lt;/code&gt;是局部变量，而&lt;code&gt;var&lt;/code&gt;则有点模糊（循环体内全局变量，方法体内局部变量）。所以在块内一般使用&lt;code&gt;let&lt;/code&gt;创建对象**。&lt;/p&gt;
&lt;h3 id=&#34;15-关键字const&#34;&gt;&lt;a href=&#34;#1-5-关键字const&#34; class=&#34;headerlink&#34; title=&#34;1.5 关键字const&#34;&gt;&lt;/a&gt;1.5 关键字&lt;code&gt;const&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;const&lt;/code&gt; 声明一个只读的常量，一旦声明，常量的值就不能改变。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt; 可用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改：&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; PI &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.141592653589793&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
PI &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.14&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;      &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 报错&lt;/span&gt;
PI &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; PI &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 报错&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;const&lt;/code&gt;对引用对象如数组等并不能锁死。可利用对应函数修改，但不能用&lt;code&gt;=&lt;/code&gt;重新赋值&lt;/li&gt;
&lt;li&gt;不能使用 &lt;strong&gt;const&lt;/strong&gt; 关键字来重置 &lt;strong&gt;var&lt;/strong&gt; 和 &lt;strong&gt;let&lt;/strong&gt;关键字声明的变量:&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;         &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 合法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;const&lt;/span&gt; x &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;       &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 不合法&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-运算比较符&#34;&gt;&lt;a href=&#34;#2-运算-比较符&#34; class=&#34;headerlink&#34; title=&#34;2. 运算/比较符&#34;&gt;&lt;/a&gt;2. 运算/比较符&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;运算符&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;+/-&lt;/td&gt;
&lt;td&gt;可将其他数据类型转为number。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;**比较时，类型不同会先类型转换  **&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;比较符&lt;/th&gt;
&lt;th&gt;规则&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;等于（一般不用这个）。类型不一样，值一样，也会判断为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;===&lt;/td&gt;
&lt;td&gt;绝对等于。类型一样，值一样，判断为true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&amp;lt;、&amp;gt;&lt;/td&gt;
&lt;td&gt;基本一样。string按字典序逐个比较。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;三元运算符&lt;/td&gt;
&lt;td&gt;a&amp;gt;b?1:0&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;3-自定义函数function&#34;&gt;&lt;a href=&#34;#3-自定义函数function&#34; class=&#34;headerlink&#34; title=&#34;3. 自定义函数function&#34;&gt;&lt;/a&gt;3. 自定义函数&lt;code&gt;function&lt;/code&gt;&lt;/h2&gt;&lt;h3 id=&#34;31-创建&#34;&gt;&lt;a href=&#34;#3-1-创建&#34; class=&#34;headerlink&#34; title=&#34;3.1 创建&#34;&gt;&lt;/a&gt;3.1 创建&lt;/h3&gt;&lt;p&gt;常见手法如下：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; functionName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;param1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; param2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;var1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;var2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;32-参数类型声明&#34;&gt;&lt;a href=&#34;#3-2-参数类型声明&#34; class=&#34;headerlink&#34; title=&#34;3.2 参数类型声明&#34;&gt;&lt;/a&gt;3.2 参数类型声明&lt;/h3&gt;&lt;p&gt;若不知道参数类型，则有时候编写函数有点麻烦，可通过以下方法设置参数类型。&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/**
 * @param &amp;amp;#123;string&amp;amp;#125; param1
 * @param &amp;amp;#123;string[]&amp;amp;#125; param2
 * @return &amp;amp;#123;string&amp;amp;#125;
 */&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; functionName &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;param1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; param2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这样调用参数时IDE便能识别类型，显示对应的函数提示了。&lt;/p&gt;
&lt;h3 id=&#34;33-传值调用与传引用调用&#34;&gt;&lt;a href=&#34;#3-3-传值调用与传引用调用&#34; class=&#34;headerlink&#34; title=&#34;3.3 传值调用与传引用调用&#34;&gt;&lt;/a&gt;3.3 传值调用与传引用调用&lt;/h3&gt;&lt;p&gt;先来复习一下传值和传引用的概念。&lt;strong&gt;传值&lt;/strong&gt;就是仅仅传递变量的值，在函数体内是无法对参数进行修改的。而&lt;strong&gt;传引用&lt;/strong&gt;则是传递地址，可以通过地址对参数进行修改。&lt;/p&gt;
&lt;p&gt;在C++中，&lt;strong&gt;基础类型&lt;/strong&gt;默认是传值调用，传引调用需要以&amp;amp;标识。&lt;/p&gt;
&lt;p&gt;在Java和JavaScript中，&lt;strong&gt;基础类型&lt;/strong&gt;没有传引调用。java因为完全面向对象，函数可以直接通过&lt;code&gt;this&lt;/code&gt;调用成员变量，在函数体内修改。而JavaScript则不行。&lt;/p&gt;
&lt;p&gt;此外，&lt;strong&gt;引用类型&lt;/strong&gt;如数组、map等，则均是传引调用，是可以通过目标函数对其进行修改的。（即使是C++也不需要加&amp;amp;）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;对于引用类型，如果只需传值，可以通过在函数体内新建一个局部副本代替&lt;/strong&gt;，如下&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/**
 * @param &amp;amp;#123;Map&amp;amp;#125; temp
 * @param &amp;amp;#123;string&amp;amp;#125; word
 * @return &amp;amp;#123;boolean&amp;amp;#125;
 */&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; match &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; word&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; map&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;temp&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-regexp正则表达式&#34;&gt;&lt;a href=&#34;#4-RegExp正则表达式&#34; class=&#34;headerlink&#34; title=&#34;4. RegExp正则表达式&#34;&gt;&lt;/a&gt;4. RegExp正则表达式&lt;/h2&gt;&lt;p&gt;JavaScript中正则表达式非常重要，许多函数需要使用正则表达式进行&lt;strong&gt;匹配&lt;/strong&gt;。此外，JavaScript&lt;strong&gt;判断字符&lt;/strong&gt;是数字还是字母也只能通过正则表达式。（JavaScript没有像Java一样的&lt;code&gt;isAlpha&lt;/code&gt;等方法）&lt;/p&gt;
&lt;h3 id=&#34;41-什么是正则表达式&#34;&gt;&lt;a href=&#34;#4-1-什么是正则表达式&#34; class=&#34;headerlink&#34; title=&#34;4.1 什么是正则表达式&#34;&gt;&lt;/a&gt;4.1 什么是正则表达式&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt; 正则表达式是由一个&lt;strong&gt;字符序列形成&lt;/strong&gt;的&lt;strong&gt;搜索模式&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;正则表达式可用于所有文本搜索和文本替换的操作。&lt;/p&gt;
&lt;h3 id=&#34;42-语法&#34;&gt;&lt;a href=&#34;#4-2-语法&#34; class=&#34;headerlink&#34; title=&#34;4.2 语法&#34;&gt;&lt;/a&gt;4.2 语法&lt;/h3&gt;&lt;p&gt;&lt;code&gt; /正则表达式主体/修饰符(可选)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如&lt;code&gt;var patt = /runoob/i&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;/runoob/i&lt;/strong&gt; 是一个正则表达式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;runoob&lt;/strong&gt; 是一个&lt;strong&gt;正则表达式主体&lt;/strong&gt; (用于检索)。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;i&lt;/strong&gt; 是一个&lt;strong&gt;修饰符&lt;/strong&gt; (搜索不区分大小写)。&lt;/p&gt;
&lt;h3 id=&#34;43-匹配规则&#34;&gt;&lt;a href=&#34;#4-3-匹配规则&#34; class=&#34;headerlink&#34; title=&#34;4.3 匹配规则&#34;&gt;&lt;/a&gt;4.3 匹配规则&lt;/h3&gt;&lt;h4 id=&#34;431-字符区间匹配&#34;&gt;&lt;a href=&#34;#4-3-1-字符区间匹配&#34; class=&#34;headerlink&#34; title=&#34;4.3.1 字符区间匹配&#34;&gt;&lt;/a&gt;4.3.1 字符区间匹配&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;表达式&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;[abc]&lt;/td&gt;
&lt;td&gt;查找方括号之间的任何字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^abc]&lt;/td&gt;
&lt;td&gt;查找任何不在方括号之间的字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[0-9]&lt;/td&gt;
&lt;td&gt;查找任何从 0 至 9 的数字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[a-z]&lt;/td&gt;
&lt;td&gt;查找任何从小写 a 到小写 z 的字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[A-Z]&lt;/td&gt;
&lt;td&gt;查找任何从大写 A 到大写 Z 的字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[A-z]&lt;/td&gt;
&lt;td&gt;查找任何从大写 A 到小写 z 的字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[adgk]&lt;/td&gt;
&lt;td&gt;查找给定集合内的任何字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;[^adgk]&lt;/td&gt;
&lt;td&gt;查找给定集合外的任何字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;(red|blue|green)&lt;/td&gt;
&lt;td&gt;查找任何指定的选项。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;432-特殊字符匹配&#34;&gt;&lt;a href=&#34;#4-3-2-特殊字符匹配&#34; class=&#34;headerlink&#34; title=&#34;4.3.2 特殊字符匹配&#34;&gt;&lt;/a&gt;4.3.2 特殊字符匹配&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;元字符&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;.&lt;/td&gt;
&lt;td&gt;查找单个字符，除了换行和行结束符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\w&lt;/td&gt;
&lt;td&gt;查找数字、字母及下划线。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\W&lt;/td&gt;
&lt;td&gt;查找非单词字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\d&lt;/td&gt;
&lt;td&gt;查找数字。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\D&lt;/td&gt;
&lt;td&gt;查找非数字字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\s&lt;/td&gt;
&lt;td&gt;查找空白字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\S&lt;/td&gt;
&lt;td&gt;查找非空白字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;匹配单词边界。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\B&lt;/td&gt;
&lt;td&gt;匹配非单词边界。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\0&lt;/td&gt;
&lt;td&gt;查找 NULL 字符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;查找换行符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\f&lt;/td&gt;
&lt;td&gt;查找换页符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;查找回车符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;查找制表符。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\v&lt;/td&gt;
&lt;td&gt;查找垂直制表符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;433-字符数量匹配&#34;&gt;&lt;a href=&#34;#4-3-3-字符数量匹配&#34; class=&#34;headerlink&#34; title=&#34;4.3.3 字符数量匹配&#34;&gt;&lt;/a&gt;4.3.3 字符数量匹配&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;量词&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;n+&lt;/td&gt;
&lt;td&gt;匹配任何包含至少一个 n  的字符串。  &lt;font color=&#34;green&#34;&gt;例如，/a+/ 匹配 “candy” 中的  “a”，”caaaaaaandy”  中所有的 “a”。  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n*&lt;/td&gt;
&lt;td&gt;匹配任何包含零个或多个  n 的字符串。  &lt;font color=&#34;green&#34;&gt;例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A  bird warbled” 中的  “b”，但是不匹配 “A goat  grunted”。  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n?&lt;/td&gt;
&lt;td&gt;匹配任何包含零个或一个  n 的字符串。  &lt;font color=&#34;green&#34;&gt;例如，/e?le?/ 匹配 “angel” 中的  “el”，”angle” 中的 “le”。 &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n{X}&lt;/td&gt;
&lt;td&gt;匹配包含 X 个 n 的序列的字符串。 &lt;font color=&#34;green&#34;&gt; 例如，/a{2}/ 不匹配 “candy,” 中的  “a”，但是匹配  “caandy,” 中的两个  “a”，且匹配  “caaandy.” 中的前两个  “a”。  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n{X,}&lt;/td&gt;
&lt;td&gt;X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。  &lt;font color=&#34;green&#34;&gt;例如，/a{2,}/ 不匹配 “candy” 中的  “a”，但是匹配  “caandy” 和  “caaaaaaandy.” 中所有的  “a”。  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n{X,Y}&lt;/td&gt;
&lt;td&gt;X 和 Y 为正整数。前面的模式 n  连续出现至少 X 次，至多 Y 次时匹配。  &lt;font color=&#34;green&#34;&gt;例如，/a{1,3}/ 不匹配 “cndy”，匹配  “candy,” 中的  “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;n$&lt;/td&gt;
&lt;td&gt;匹配任何结尾为 n 的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;^n&lt;/td&gt;
&lt;td&gt;匹配任何开头为 n 的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?=n&lt;/td&gt;
&lt;td&gt;匹配任何其后紧接指定字符串 n 的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;?!n&lt;/td&gt;
&lt;td&gt;匹配任何其后没有紧接指定字符串 n 的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;44-修饰符&#34;&gt;&lt;a href=&#34;#4-4-修饰符&#34; class=&#34;headerlink&#34; title=&#34;4.4 修饰符&#34;&gt;&lt;/a&gt;4.4 修饰符&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;修饰符&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;i&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行对大小写不敏感的匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;g&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;m&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;执行多行匹配。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;45-正则表达式对象&#34;&gt;&lt;a href=&#34;#4-5-正则表达式对象&#34; class=&#34;headerlink&#34; title=&#34;4.5 正则表达式对象&#34;&gt;&lt;/a&gt;4.5 正则表达式对象&lt;/h3&gt;&lt;p&gt;正则表达式也有对象，可以调用对象的&lt;code&gt;.test()&lt;/code&gt;函数判断字符类型（是数字还是字母还是特殊字符等）。&lt;/p&gt;
&lt;h4 id=&#34;451-创建&#34;&gt;&lt;a href=&#34;#4-5-1-创建&#34; class=&#34;headerlink&#34; title=&#34;4.5.1 创建&#34;&gt;&lt;/a&gt;4.5.1 创建&lt;/h4&gt;&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; reg1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RegExp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;[a-z]&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//或&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; reg2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/[A-Z]/&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;                                            
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;452-regexp方法&#34;&gt;&lt;a href=&#34;#4-5-2-RegExp方法&#34; class=&#34;headerlink&#34; title=&#34;4.5.2 RegExp方法&#34;&gt;&lt;/a&gt;4.5.2 RegExp方法&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;exec&lt;/td&gt;
&lt;td&gt;检索字符串中指定的值。返回找到的值，并确定其位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;test&lt;/td&gt;
&lt;td&gt;检索字符串中指定的值。返回 true 或 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;toString&lt;/td&gt;
&lt;td&gt;返回正则表达式的字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;46-正则表达式常用场景&#34;&gt;&lt;a href=&#34;#4-6-正则表达式常用场景&#34; class=&#34;headerlink&#34; title=&#34;4.6 正则表达式常用场景&#34;&gt;&lt;/a&gt;4.6 正则表达式常用场景&lt;/h3&gt;&lt;h4 id=&#34;461-判断字符类型&#34;&gt;&lt;a href=&#34;#4-6-1-判断字符类型&#34; class=&#34;headerlink&#34; title=&#34;4.6.1 判断字符类型&#34;&gt;&lt;/a&gt;4.6.1 判断字符类型&lt;/h4&gt;&lt;p&gt;设c为待判断字符。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;判断是否为字母&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token regex&#34;&gt;/[a-zA-Z]/&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;判断是否为数字&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token regex&#34;&gt;/[0-9]/&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;test&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;c&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;462-搭配string方法&#34;&gt;&lt;a href=&#34;#4-6-2-搭配string方法&#34; class=&#34;headerlink&#34; title=&#34;4.6.2 搭配string方法&#34;&gt;&lt;/a&gt;4.6.2 搭配string方法&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;search() 方法查找&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Visit Runoob!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//搜索 &#34;Runoob&#34; 字符串，且不区分大小写：&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; n &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;search&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/Runoob/i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回 &lt;code&gt;6&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;replace() 方法替换&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;Visit microsoft!&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//不区分大小写将字符串中的 Microsoft 替换为 Runoob :&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; txt &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;replace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/microsoft/i&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Runoob&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;返回&lt;code&gt;Visit Runoob!&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;match() 方法匹配&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; str&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;The rain in SPAIN stays mainly in the plain&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; n&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token regex&#34;&gt;/ain/g&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//返回[ain,ain,ain]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三-引用类型集合-容器等&#34;&gt;&lt;a href=&#34;#三、-引用类型（集合、容器等）&#34; class=&#34;headerlink&#34; title=&#34;三、 引用类型（集合、容器等）&#34;&gt;&lt;/a&gt;三、 引用类型（集合、容器等）&lt;/h1&gt;&lt;h2 id=&#34;1-数组&#34;&gt;&lt;a href=&#34;#1-数组&#34; class=&#34;headerlink&#34; title=&#34;1. 数组&#34;&gt;&lt;/a&gt;1. 数组&lt;/h2&gt;&lt;h3 id=&#34;11-创建数组&#34;&gt;&lt;a href=&#34;#1-1-创建数组&#34; class=&#34;headerlink&#34; title=&#34;1.1 创建数组&#34;&gt;&lt;/a&gt;1.1 创建数组&lt;/h3&gt;&lt;p&gt;&lt;code&gt;JavaScript&lt;/code&gt;数组是&lt;code&gt;Array&lt;/code&gt;对象，可以通过以下手法创建&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; cars&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Saab&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Volvo&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;BMW&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//指定初始值的数组&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; cars&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Array&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//初始长度为3的数组&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; cars&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Saab&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Volvo&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;BMW&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;js&lt;/code&gt;的数组可以动态扩展，甚至可以添加不同的类型。类似&lt;code&gt;java&lt;/code&gt;非泛型创建的&lt;code&gt;ArrayList&lt;/code&gt;集合&lt;/p&gt;
&lt;h3 id=&#34;12-array函数&#34;&gt;&lt;a href=&#34;#1-2-Array函数&#34; class=&#34;headerlink&#34; title=&#34;1.2 Array函数&#34;&gt;&lt;/a&gt;1.2 Array函数&lt;/h3&gt;&lt;p&gt;其中常用函数如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;join()&lt;/td&gt;
&lt;td&gt;把数组的所有元素放入一个字符串。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop()&lt;/td&gt;
&lt;td&gt;删除数组的最后一个元素并返回删除的元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;push()&lt;/td&gt;
&lt;td&gt;向数组的末尾添加一个或更多元素，并返回新的长度。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;其他函数：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;concat()&lt;/td&gt;
&lt;td&gt;连接两个或更多的数组，并返回结果。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;copyWithin()&lt;/td&gt;
&lt;td&gt;从数组的指定位置拷贝元素到数组的另一个指定位置中。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;entries()&lt;/td&gt;
&lt;td&gt;返回数组的可迭代对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;every()&lt;/td&gt;
&lt;td&gt;检测数值元素的每个元素是否都符合条件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;fill()&lt;/td&gt;
&lt;td&gt;使用一个固定值来填充数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;filter()&lt;/td&gt;
&lt;td&gt;检测数值元素，并返回符合条件所有元素的数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find()&lt;/td&gt;
&lt;td&gt;返回符合传入测试（函数）条件的数组元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;findIndex()&lt;/td&gt;
&lt;td&gt;返回符合传入测试（函数）条件的数组元素索引。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;forEach()&lt;/td&gt;
&lt;td&gt;数组每个元素都执行一次回调函数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;from()&lt;/td&gt;
&lt;td&gt;通过给定的对象中创建一个数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;includes()&lt;/td&gt;
&lt;td&gt;判断一个数组是否包含一个指定的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;indexOf()&lt;/td&gt;
&lt;td&gt;搜索数组中的元素，并返回它所在的位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;isArray()&lt;/td&gt;
&lt;td&gt;判断对象是否为数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;keys()&lt;/td&gt;
&lt;td&gt;返回数组的可迭代对象，包含原始数组的键(key)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;lastIndexOf()&lt;/td&gt;
&lt;td&gt;搜索数组中的元素，并返回它最后出现的位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;map()&lt;/td&gt;
&lt;td&gt;通过指定函数处理数组的每个元素，并返回处理后的数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reduce()&lt;/td&gt;
&lt;td&gt;将数组元素计算为一个值（从左到右）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reduceRight()&lt;/td&gt;
&lt;td&gt;将数组元素计算为一个值（从右到左）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;reverse()&lt;/td&gt;
&lt;td&gt;反转数组的元素顺序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;shift()&lt;/td&gt;
&lt;td&gt;删除并返回数组的第一个元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;slice()&lt;/td&gt;
&lt;td&gt;选取数组的一部分，并返回一个新数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;some()&lt;/td&gt;
&lt;td&gt;检测数组元素中是否有元素符合指定条件。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;sort()&lt;/td&gt;
&lt;td&gt;对数组的元素进行排序。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;splice()&lt;/td&gt;
&lt;td&gt;从数组中添加或删除元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;toString()&lt;/td&gt;
&lt;td&gt;把数组转换为字符串，并返回结果。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;unshift()&lt;/td&gt;
&lt;td&gt;向数组的开头添加一个或更多元素，并返回新的长度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;valueOf()&lt;/td&gt;
&lt;td&gt;返回数组对象的原始值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;13-遍历数组&#34;&gt;&lt;a href=&#34;#1-3-遍历数组&#34; class=&#34;headerlink&#34; title=&#34;1.3 遍历数组&#34;&gt;&lt;/a&gt;1.3 遍历数组&lt;/h3&gt;&lt;p&gt;现有一个数组&lt;code&gt;nums&lt;/code&gt;，JavaScript有以下遍历方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;普通for循环&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//i为索引&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//或者也可写成这样&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;len&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;len&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;i&lt;span class=&#34;token operator&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//i为索引&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for in(效率不高)&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; i &lt;span class=&#34;token keyword&#34;&gt;in&lt;/span&gt; nums&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//i为索引&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;forEach(性能低于普通for)&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forEach&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;item&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//item是nums的元素，而非索引&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;for of(需要ES6支持，性能优于forin，劣于普通for)&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; value &lt;span class=&#34;token keyword&#34;&gt;of&lt;/span&gt; nums&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;value&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//value是元素，而非索引&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;map遍历(性能不及forEach)&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;nums&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;num&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//num是元素，而非索引&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;注let是局部变量var是全局变量-一般来说循环中使用let标记循环变量i&#34;&gt;&lt;a href=&#34;#注：let是局部变量，var是全局变量。一般来说循环中使用let标记循环变量i。&#34; class=&#34;headerlink&#34; title=&#34;注：let是局部变量，var是全局变量。一般来说循环中使用let标记循环变量i。&#34;&gt;&lt;/a&gt;注：let是局部变量，var是全局变量。一般来说循环中使用let标记循环变量i。&lt;/h4&gt;&lt;h2 id=&#34;2-map对象&#34;&gt;&lt;a href=&#34;#2-Map对象&#34; class=&#34;headerlink&#34; title=&#34;2. Map对象&#34;&gt;&lt;/a&gt;2. Map对象&lt;/h2&gt;&lt;p&gt;JavaScript中map并不常用，所以文档里不怎么好找。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;js中map访问和取值必须通过get/set函数，而非直接[]访存&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;大致用法如下&lt;/p&gt;
&lt;h3 id=&#34;21-创建设置查找删除&#34;&gt;&lt;a href=&#34;#2-1-创建–设置–查找–删除&#34; class=&#34;headerlink&#34; title=&#34;2.1 创建–设置–查找–删除&#34;&gt;&lt;/a&gt;2.1 创建–设置–查找–删除&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;声明 &lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; map &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Map&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;设值&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;取值&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;判断key是否存在&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;has&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;删除key&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;map&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;key&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-常用函数&#34;&gt;&lt;a href=&#34;#2-2-常用函数&#34; class=&#34;headerlink&#34; title=&#34;2.2 常用函数&#34;&gt;&lt;/a&gt;2.2 常用函数&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clear()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除所有的键值对;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;delete(key)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除指定键;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;forEach(callback,context)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;循环执行函数并把键值对作为参数，context为执行函数的上下文this;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get(key)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回Map对象key相对的value值;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;has(key)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回布尔值，判断Map对象是否存在指定的key;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;set(key,value)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;给Map对象设置key/value键值对，&lt;strong&gt;返回&lt;/strong&gt;这个Map对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;keys()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个迭代器，迭代器按照插入的顺序返回每一个key元素;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;entries()&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回一个迭代器，迭代器按照对象的插入顺序返回[key,value];&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;iterator&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;和entireds()方法一样，返回一个迭代器，迭代器按照对象的插入顺序返回[key,value]&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;3-set对象&#34;&gt;&lt;a href=&#34;#3-Set对象&#34; class=&#34;headerlink&#34; title=&#34;3. Set对象&#34;&gt;&lt;/a&gt;3. Set对象&lt;/h2&gt;&lt;p&gt;相较于map，set只有键没有值。&lt;/p&gt;
&lt;h3 id=&#34;31-基本用法&#34;&gt;&lt;a href=&#34;#3-1-基本用法&#34; class=&#34;headerlink&#34; title=&#34;3.1 基本用法&#34;&gt;&lt;/a&gt;3.1 基本用法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;创建&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;返回长度&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;size
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;判断是否存在&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;has&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;删除&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;delete&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;清空&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;clear&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-字符串&#34;&gt;&lt;a href=&#34;#4-字符串&#34; class=&#34;headerlink&#34; title=&#34;4. 字符串&#34;&gt;&lt;/a&gt;4. 字符串&lt;/h2&gt;&lt;p&gt;JavaScript中string用法和Python有点类似，””和’’均可以代表字符串，且没有字符和字符串之分（字符就是长度为1的字符串）&lt;/p&gt;
&lt;h3 id=&#34;41-基本用法&#34;&gt;&lt;a href=&#34;#4-1-基本用法&#34; class=&#34;headerlink&#34; title=&#34;4.1 基本用法&#34;&gt;&lt;/a&gt;4.1 基本用法&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;创建&lt;/p&gt;
&lt;p&gt;```javascript&lt;br&gt;var s=”zifuchuan”;//直接创建即可&lt;br&gt;var s1=’zifuchuan2’;&lt;br&gt;var y = new String(“John”);//也可以以对象创建，但不建议这样，效率比较低&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访存&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//直接通过[]即可&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;zifuchuan2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
console&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;log&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//打印i&lt;/span&gt;
s&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;a&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;返回长度&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; s&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;zifuchuan2&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
s&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;length&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;42-特殊字符转义&#34;&gt;&lt;a href=&#34;#4-2-特殊字符转义&#34; class=&#34;headerlink&#34; title=&#34;4.2 特殊字符转义&#34;&gt;&lt;/a&gt;4.2 特殊字符转义&lt;/h3&gt;&lt;p&gt;字符串中有些字符不能直接打，如&lt;code&gt;\&lt;/code&gt;、&lt;code&gt;&amp;quot;&lt;/code&gt;等，需要用转义，以下为转义字符表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;代码&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;输出&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\‘&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;单引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\“&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;双引号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\\&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;反斜杠&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\n&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;换行&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\r&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;回车&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\t&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;tab(制表符)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\b&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;退格符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;\f&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;换页符&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;43-常用函数&#34;&gt;&lt;a href=&#34;#4-3-常用函数&#34; class=&#34;headerlink&#34; title=&#34;4.3 常用函数&#34;&gt;&lt;/a&gt;4.3 常用函数&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;字段&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;constructor&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回创建字符串属性的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;length&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回字符串的长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;prototype&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;允许您向对象添加属性和方法&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;函数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;访问/查找/匹配&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;charAt()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回指定索引位置的字符。&lt;strong&gt;按索引&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;indexOf()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回字符串中检索指定字符第一次出现的位置。&lt;strong&gt;按内容&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;lastIndexOf()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回字符串中检索指定字符最后一次出现的位置。&lt;strong&gt;按内容&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;search()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;检索与正则表达式相匹配的值，返回&lt;strong&gt;第一个匹配值的索引&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;match()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;找到一个或多个正则表达式的匹配&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;截取/拼接/拆分/替换&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;substr()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从起始索引号提取字符串中指定数目的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;substring()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;提取字符串中两个指定的索引号之间的字符&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;concat()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;连接两个或多个字符串，返回连接后的字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;split()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把字符串分割为子字符串数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;replace()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;替换与正则表达式匹配的子串&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转换大小写/去除空格&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;toLowerCase()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把字符串转换为小写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;toUpperCase()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;把字符串转换为大写&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;trim()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除字符串首尾空白&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;charCodeAt()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回指定索引位置字符的 Unicode 值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;fromCharCode()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;将 Unicode 转换为字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;localeCompare()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用本地特定的顺序来比较两个字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;slice()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;提取字符串的片断，并在新的字符串中返回被提取的部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;toLocaleLowerCase()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;toLocaleUpperCase()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;toString()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回字符串对象值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;valueOf()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回某个字符串对象的原始值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;四-dom&#34;&gt;&lt;a href=&#34;#四、-DOM&#34; class=&#34;headerlink&#34; title=&#34;四、 DOM&#34;&gt;&lt;/a&gt;四、 DOM&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;DOM (文档对象模型)。通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。最主要的就是2点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置html文档内容&lt;/li&gt;
&lt;li&gt;设置事件&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 HTML DOM (Document Object Model) 中 , 每一个元素都是 &lt;strong&gt;节点&lt;/strong&gt;，或者说是&lt;strong&gt;对象&lt;/strong&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文档是一个&lt;strong&gt;文档&lt;/strong&gt;节点。&lt;font color=&#34;red&#34;&gt;即document&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;所有的HTML&lt;strong&gt;元素&lt;/strong&gt;都是元素节点。&lt;font color=&#34;red&#34;&gt;即element，通过document获取&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;所有 HTML &lt;strong&gt;属性&lt;/strong&gt;都是属性节点。&lt;font color=&#34;red&#34;&gt;即attr，在element中设置&lt;/font&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;文本&lt;/strong&gt;插入到 HTML 元素是文本节点。are text nodes。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;注释&lt;/strong&gt;是注释节点。&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;大部分用到的节点都是&lt;strong&gt;元素对象&lt;/strong&gt;和&lt;strong&gt;属性对象&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;节点关系如下图&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/pic_htmltree.gif&#34; alt=&#34;DOM HTML tree&#34;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;每个节点都是html中一个组成&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/image-20210525175719082.png&#34; alt=&#34;image-20210525175719082&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过DOM，JavaScript 获得了足够的能力来创建动态的 HTML。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JavaScript 能够改变页面中的所有 HTML 元素&lt;/li&gt;
&lt;li&gt;JavaScript 能够改变页面中的所有 HTML 属性&lt;/li&gt;
&lt;li&gt;JavaScript 能够改变页面中的所有 CSS 样式&lt;/li&gt;
&lt;li&gt;JavaScript 能够对页面中的所有事件做出反应&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-document对象节点&#34;&gt;&lt;a href=&#34;#1-document对象（节点）&#34; class=&#34;headerlink&#34; title=&#34;1. document对象（节点）&#34;&gt;&lt;/a&gt;1. document对象（节点）&lt;/h2&gt;&lt;p&gt;当浏览器载入 HTML 文档, 它就会成为 &lt;strong&gt;Document 对象&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;Document 对象是 &lt;strong&gt;Window&lt;/strong&gt; 对象的一部分，可通过 window.document 属性对其进行访问。&lt;/p&gt;
&lt;h3 id=&#34;11-通过document获取element对象&#34;&gt;&lt;a href=&#34;#1-1-通过document获取element对象&#34; class=&#34;headerlink&#34; title=&#34;1.1 通过document获取element对象&#34;&gt;&lt;/a&gt;1.1 通过document获取element对象&lt;/h3&gt;&lt;p&gt;element对象，即html中的元素，也就是标签。一条标签对应一个element对象。&lt;/p&gt;
&lt;p&gt;可以像&lt;code&gt;css&lt;/code&gt;一样通过class/id/标签/name等选择器获取对象。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;document.getElementsByClassName()  &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据定义的class返回。&lt;font color=&#34;red&#34;&gt;以数组返回  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;document.getElementsByName() &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据定义name返回。&lt;font color=&#34;red&#34;&gt;以数组返回  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; document.getElementsByTagName() &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;根据标签名返回。&lt;font color=&#34;red&#34;&gt;以数组返回  &lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;document.getElementById() &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回对拥有指定 id 的&lt;strong&gt;第一个&lt;/strong&gt;对象的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;cls&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;哈哈&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;aa&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;textarea&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;name1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;文本框&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;textarea&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByClassName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;cls&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;div&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;name1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-创建dom节点对象&#34;&gt;&lt;a href=&#34;#1-2-创建DOM节点对象&#34; class=&#34;headerlink&#34; title=&#34;1.2 创建DOM节点对象&#34;&gt;&lt;/a&gt;1.2 创建DOM节点对象&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;document.createAttribute(&amp;quot;attribute&amp;quot;)  &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建一个属性节点   &lt;font color=&#34;red&#34;&gt;可用于设置标签的属性&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;document.createComment(&amp;quot;text&amp;quot;) &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建注释节点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;document.createElement(&amp;quot;nodename&amp;quot;) &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建元素节点。  &lt;font color=&#34;red&#34;&gt;&lt;code&gt;nodename&lt;/code&gt;是标签名，或者input的type&lt;/font&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;document.createTextNode() &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;创建文本节点。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;例：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; btn&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;BUTTON&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; t&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createTextNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;CLICK ME&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
btn&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;t&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style language-css&#34;&gt;
&lt;span class=&#34;token number&#34;&gt;.&lt;/span&gt;democlass&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Hello World&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;demo&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;单击按钮来创建一个“类”属性值“democlass”插入到上面的H1元素。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;myFunction()&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;点我&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; h1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementsByTagName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;H1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; att&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createAttribute&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;class&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    att&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;democlass&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    h1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAttributeNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;att&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;13-直接获取设置html文档信息&#34;&gt;&lt;a href=&#34;#1-3-直接获取-设置html文档信息&#34; class=&#34;headerlink&#34; title=&#34;1.3 直接获取/设置html文档信息&#34;&gt;&lt;/a&gt;1.3 直接获取/设置html文档信息&lt;/h3&gt;&lt;p&gt;可直接通过下列方法进行&lt;strong&gt;修改&lt;/strong&gt;文档信息，常用方法如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1ib2R5Lmh0bWw=&#34;&gt;document.body&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回文档的body元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy10aXRsZS5odG1s&#34;&gt;document.title&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回当前文档的标题。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy11cmwuaHRtbA==&#34;&gt;document.URL&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回文档完整的URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1saW5rcy5odG1s&#34;&gt;document.links&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回对文档中所有 Area 和 Link 对象引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1pbWFnZXMuaHRtbA==&#34;&gt;document.images&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回对文档中所有 Image 对象引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1mb3Jtcy5odG1s&#34;&gt;document.forms&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回对文档中所有 Form 对象引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvY3VtZW50LWlucHV0ZW5jb2RpbmcuaHRtbA==&#34;&gt;document.inputEncoding&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回用于文档的编码方式（在解析时）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1sYXN0bW9kaWZpZWQuaHRtbA==&#34;&gt;document.lastModified&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回文档被最后修改的日期和时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1hbmNob3JzLmh0bWw=&#34;&gt;document.anchors&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回对文档中所有 Anchor 对象的引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1jb29raWUuaHRtbA==&#34;&gt;document.cookie&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;设置或返回与当前文档有关的所有 cookie。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvY3VtZW50LWRvY3VtZW50dXJpLmh0bWw=&#34;&gt;document.documentURI&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;设置或返回文档的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1kb21haW4uaHRtbA==&#34;&gt;document.domain&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;返回当前文档的域名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtZG9jLXdyaXRlLmh0bWw=&#34;&gt;document.write()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;向文档写 HTML 表达式 或 JavaScript 代码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtZG9jLXdyaXRlbG4uaHRtbA==&#34;&gt;document.writeln()&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;等同于 write() 方法，不同的是在每个表达式之后写一个换行符。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;2-element对象节点&#34;&gt;&lt;a href=&#34;#2-element对象（节点）&#34; class=&#34;headerlink&#34; title=&#34;2. element对象（节点）&#34;&gt;&lt;/a&gt;2. element对象（节点）&lt;/h2&gt;&lt;p&gt;对应html的一条标签。&lt;/p&gt;
&lt;p&gt;element对象可通过document对象获取&lt;/p&gt;
&lt;p&gt;element对象可以完成以下功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;设置/添加/移除属性&lt;/li&gt;
&lt;li&gt;添加/移除子元素（节点）&lt;/li&gt;
&lt;li&gt;修改html内容（一般是对对应标签的修改，而非像document那么粗暴直接修改body）&lt;/li&gt;
&lt;li&gt;修改css样式&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;21-获取设置删除属性attr&#34;&gt;&lt;a href=&#34;#2-1-获取-设置-删除属性attr&#34; class=&#34;headerlink&#34; title=&#34;2.1 获取/设置/删除属性attr&#34;&gt;&lt;/a&gt;2.1 获取/设置/删除属性attr&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-attributes.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.attributes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回一个元素的&lt;strong&gt;属性数组&lt;/strong&gt;。可按索引访问attr&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-getattribute.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.getAttribute(“&lt;em&gt;attributename&lt;/em&gt;“)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;根据&lt;strong&gt;属性名&lt;/strong&gt;返回元素的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-getattributenode.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.getAttributeNode(“&lt;em&gt;attributename&lt;/em&gt;“)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;根据&lt;strong&gt;属性名&lt;/strong&gt;返回指定属性&lt;strong&gt;节点对象&lt;/strong&gt;（其实就是&lt;strong&gt;属性对象attr&lt;/strong&gt;）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-hasattribute.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.hasAttribute(“&lt;em&gt;attributename&lt;/em&gt;“)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;如果元素中存在指定的属性返回 true，否则返回false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-node-hasattributes.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.hasAttributes()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;如果元素有任何属性返回true，否则返回false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-removeattribute.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.removeAttribute()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;从元素中删除指定的属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-removeattributenode.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.removeAttributeNode()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;删除指定属性节点并返回移除后的节点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-setattribute.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.setAttribute()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置或者改变指定属性并指定值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-setattributenode.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.setAttributeNode()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置或者改变指定属性节点。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;22-设置标签体内容&#34;&gt;&lt;a href=&#34;#2-2-设置标签体内容&#34; class=&#34;headerlink&#34; title=&#34;2.2 设置标签体内容&#34;&gt;&lt;/a&gt;2.2 设置标签体内容&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;element.innerHTML=text&lt;/td&gt;
&lt;td&gt;设置或者返回元素的&lt;strong&gt;文本&lt;/strong&gt;内容。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.id&lt;/td&gt;
&lt;td&gt;设置或者返回元素的 id。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.nodeName&lt;/td&gt;
&lt;td&gt;返回元素的标记名（大写） &lt;strong&gt;文本以#text返回&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.nodeType&lt;/td&gt;
&lt;td&gt;返回元素的节点类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.nodeValue&lt;/td&gt;
&lt;td&gt;返回元素的节点值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;element.href&lt;/td&gt;
&lt;td&gt;返回元素的链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;element&lt;/em&gt;.style&lt;/td&gt;
&lt;td&gt;设置或返回元素的样式属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-element-tagname.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.tagName&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;作为一个字符串返回某个元素的标记名（大写）&lt;strong&gt;文本以undefined返回&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-textcontent.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.textContent&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置或返回一个节点和它的文本内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-html-title.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.title&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置或返回元素的title属性&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;element&lt;/em&gt;.toString()&lt;/td&gt;
&lt;td&gt;一个元素转换成字符串&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-html-classname.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.className&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;设置或返回元素的class属性&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;23-像树一样操作节点&#34;&gt;&lt;a href=&#34;#2-3-像树一样操作节点&#34; class=&#34;headerlink&#34; title=&#34;2.3 像树一样操作节点&#34;&gt;&lt;/a&gt;2.3 像树一样操作节点&lt;/h3&gt;&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;intro&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;你好世界!&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;该实例展示了 &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;getElementById&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;b&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 方法!&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
x&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;intro&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;p&gt;文本来自 id 为 intro 段落: &#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;innerHTML &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&amp;lt;/p&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;此处，&lt;/p&gt;&lt;p&gt;和&lt;script&gt;互为兄弟节点，且均为&lt;body&gt;的子节点。&lt;/p&gt;
&lt;p&gt;而&lt;code&gt;id=&amp;quot;intro&amp;quot;&lt;/code&gt;是attr节点，为第一个&lt;p&gt;的子节点，&lt;code&gt;你好世界!&lt;/code&gt;是textnode节点，也为&lt;p&gt;的子节点&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;节点的父子关系如下图（DOM树）&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;JavaScript/pic_htmltree.gif&#34; alt=&#34;DOM HTML tree&#34;&gt;&lt;/p&gt;
&lt;p&gt;text一般是element的子节点，不同的element也会为父子节点。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;myList&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Coffee&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Tea&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;demo&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;单击按钮将项目添加到列表中&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;button&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;myFunction()&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;点我&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;button&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myFunction&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; node&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createElement&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;LI&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; textnode&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;createTextNode&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;Water&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    node&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;textnode&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myList&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;appendChild&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;node&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;注意:&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;strong&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;首先创建一个节点，&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 然后创建一个文本节点，&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;然后将文本节点添加到LI节点上。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;最后将节点添加到列表中。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;2-3-1-获取父子-兄弟节点&#34;&gt;&lt;a href=&#34;#2-3-1-获取父子-兄弟节点&#34; class=&#34;headerlink&#34; title=&#34;2.3.1 获取父子/兄弟节点&#34;&gt;&lt;/a&gt;2.3.1 获取父子/兄弟节点&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;判断&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-node-haschildnodes.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.hasChildNodes()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回一个元素是否具有任何子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;获取&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-childnodes.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.childNodes&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回元素的一个子节点的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-element-children.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.children&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回元素的子元素的集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-firstchild.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.firstChild&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回元素的第一个子节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-lastchild.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.lastChild&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回的最后一个子节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-parentnode.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.parentNode&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回元素的&lt;strong&gt;父节点&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-nextsibling.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.nextSibling&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回紧跟的一个兄弟&lt;strong&gt;节点&lt;/strong&gt;（textnode也是节点，但不是元素节点）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-element-nextelementsibling.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.nextElementSibling&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回紧跟的一个兄弟&lt;strong&gt;元素节点&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-node-previoussibling.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.previousSibling&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回之前的兄弟&lt;strong&gt;节点&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-element-previouselementsibling.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.previousElementSibling&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回之前的兄弟&lt;strong&gt;元素节点&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-queryselector.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.querySelector()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回匹配指定 CSS 选择器元素的第一个子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;document.querySelectorAll()&lt;/td&gt;
&lt;td&gt;返回匹配指定 CSS 选择器元素的所有子元素节点列表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-getattributenode.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.getAttributeNode()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回指定属性节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-getelementsbytagname.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.getElementsByTagName()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回指定标签名的所有子元素集合。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-element-getelementsbyclassname.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;. getElementsByClassName()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;返回文档中所有指定类名的元素集合，作为 NodeList 对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;2-3-2-添加-删除子节点&#34;&gt;&lt;a href=&#34;#2-3-2-添加-删除子节点&#34; class=&#34;headerlink&#34; title=&#34;2.3.2 添加/删除子节点&#34;&gt;&lt;/a&gt;2.3.2 添加/删除子节点&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-node-appendchild.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.appendChild()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;为元素添加一个新的子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-node-removechild.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.removeChild()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;删除一个子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-node-replacechild.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;.replaceChild()&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;替换一个子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;3-attr对象（节点）&#34;&gt;&lt;a href=&#34;#3-attr对象（节点）&#34; class=&#34;headerlink&#34; title=&#34;3. attr对象（节点）&#34;&gt;&lt;/a&gt;3. attr对象（节点）&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性 / 方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-attr-isid.html&#34;&gt;&lt;em&gt;attr&lt;/em&gt;.isId&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果属性是 ID 类型，则 isId 属性返回 true，否则返回 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-attr-name.html&#34;&gt;&lt;em&gt;attr&lt;/em&gt;.name&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回属性名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-attr-value.html&#34;&gt;&lt;em&gt;attr&lt;/em&gt;.value&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或者返回属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-attr-specified.html&#34;&gt;&lt;em&gt;attr&lt;/em&gt;.specified&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果属性被指定返回 true ，否则返回 false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-namednodemap-getnameditem.html&#34;&gt;&lt;em&gt;nodemap&lt;/em&gt;.getNamedItem()&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;从节点列表中返回的指定属性节点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-namednodemap-item.html&#34;&gt;&lt;em&gt;nodemap&lt;/em&gt;.item()&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回节点列表中处于指定索引号的节点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/prop-namednodemap-length.html&#34;&gt;&lt;em&gt;nodemap&lt;/em&gt;.length&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回节点列表的节点数目。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-namednodemap-removenameditem.html&#34;&gt;&lt;em&gt;nodemap&lt;/em&gt;.removeNamedItem()&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;删除指定属性节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://www.runoob.com/jsref/met-namednodemap-setnameditem.html&#34;&gt;&lt;em&gt;nodemap&lt;/em&gt;.setNamedItem()&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置指定属性节点(通过名称)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;4-事件&#34;&gt;&lt;a href=&#34;#4-事件&#34; class=&#34;headerlink&#34; title=&#34;4. 事件&#34;&gt;&lt;/a&gt;4. 事件&lt;/h2&gt;&lt;p&gt;用法是在标签内添加事件的同名属性，属性值为响应函数，如下&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token script language-javascript&#34;&gt;
&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;bigImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;height&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;64px&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;width&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;64px&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;normalImg&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;x&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;height&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;32px&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    x&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;style&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;width&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;32px&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;script&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;

&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onmouseover&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;bigImg(this)&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onmouseout&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;normalImg(this)&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;0&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;smiley.gif&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;Smiley&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;32&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;32&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;函数 bigImg() 在鼠标指针移动到笑脸图片是触发。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;函数 normalImg() 在鼠标指针移出笑脸图片是触发.&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;em&gt;事件比较简单，用到时直接查手册即可&lt;/em&gt;&lt;/p&gt;
&lt;h2 id=&#34;5-控制台对象（console）&#34;&gt;&lt;a href=&#34;#5-控制台对象（console）&#34; class=&#34;headerlink&#34; title=&#34;5. 控制台对象（console）&#34;&gt;&lt;/a&gt;5. 控制台对象（console）&lt;/h2&gt;&lt;p&gt;控制台主要用于IDE调试JavaScript代码。最常用的即是&lt;code&gt;console.log()&lt;/code&gt;控制台打印输出。详细如下，&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1hc3NlcnQuaHRtbA==&#34;&gt;assert()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果断言为 false，则在信息到控制台输出错误信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1jbGVhci5odG1s&#34;&gt;clear()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;清除控制台上的信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1jb3VudC5odG1s&#34;&gt;count()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;记录 count() 调用次数，一般用于计数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1lcnJvci5odG1s&#34;&gt;error()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;输出错误信息到控制台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1ncm91cC5odG1s&#34;&gt;group()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在控制台创建一个信息分组。 一个完整的信息分组以 console.group() 开始，console.groupEnd() 结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1ncm91cGNvbGxhcHNlZC5odG1s&#34;&gt;groupCollapsed()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在控制台创建一个信息分组。 类似 console.group() ，但它默认是折叠的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1ncm91cGVuZC5odG1s&#34;&gt;groupEnd()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置当前信息分组结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1pbmZvLmh0bWw=&#34;&gt;info()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;控制台输出一条信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1sb2cuaHRtbA==&#34;&gt;log()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;控制台输出一条信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10YWJsZS5odG1s&#34;&gt;table()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;以表格形式显示数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10aW1lLmh0bWw=&#34;&gt;time()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;计时器，开始计时间，与 timeEnd() 联合使用，用于算出一个操作所花费的准确时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10aW1lZW5kLmh0bWw=&#34;&gt;timeEnd()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;计时结束&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10cmFjZS5odG1s&#34;&gt;trace()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;显示当前执行的代码在堆栈中的调用路径。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS13YXJuLmh0bWw=&#34;&gt;warn()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;输出警告信息，信息最前面加一个黄色三角，表示警告&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h1 id=&#34;五、-BOM&#34;&gt;&lt;a href=&#34;#五、-BOM&#34; class=&#34;headerlink&#34; title=&#34;五、 BOM&#34;&gt;&lt;/a&gt;五、 BOM&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;浏览器对象模型（&lt;strong&gt;B&lt;/strong&gt;rowser &lt;strong&gt;O&lt;/strong&gt;bject &lt;strong&gt;M&lt;/strong&gt;odel (BOM)），主要用于设置浏览器的一些功能，可以算是DOM的上级。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;常用于&lt;code&gt;DOM&lt;/code&gt;的事件响应函数，和一些动态花里胡哨页面设置&lt;/p&gt;
&lt;h2 id=&#34;1-window对象&#34;&gt;&lt;a href=&#34;#1-window对象&#34; class=&#34;headerlink&#34; title=&#34;1. window对象&#34;&gt;&lt;/a&gt;1. window对象&lt;/h2&gt;&lt;p&gt;Window 对象表示浏览器中打开的窗口。（PS：document可以由window获取）&lt;/p&gt;
&lt;p&gt;window是JavaScript的系统对象，直属于window的方法可以直接写，如alter&lt;/p&gt;
&lt;h3 id=&#34;1-1-window属性&#34;&gt;&lt;a href=&#34;#1-1-window属性&#34; class=&#34;headerlink&#34; title=&#34;1.1 window属性&#34;&gt;&lt;/a&gt;1.1 window属性&lt;/h3&gt;&lt;p&gt;常用属性如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1jbG9zZWQuaHRtbA==&#34;&gt;closed&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回窗口是否已被关闭。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9kb20tb2JqLWRvY3VtZW50Lmh0bWw=&#34;&gt;document&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对 Document 对象的只读引用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1uYW1lLmh0bWw=&#34;&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;设置或返回窗口的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotaGlzdG9yeS5odG1s&#34;&gt;history&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对 History 对象的只读引用。请参数 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotaGlzdG9yeS5odG1s&#34;&gt;History 对象&lt;/span&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zZWxmLmh0bWw=&#34;&gt;self&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回对当前窗口的引用。等价于 Window 属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi10b3AuaHRtbA==&#34;&gt;top&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回最顶层的父窗口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1wYXJlbnQuaHRtbA==&#34;&gt;parent&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回父窗口。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1pbm5lcmhlaWdodC5odG1s&#34;&gt;innerHeight&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回窗口的文档显示区的高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1pbm5lcmhlaWdodC5odG1s&#34;&gt;innerWidth&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回窗口的文档显示区的宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1vdXRlcmhlaWdodC5odG1s&#34;&gt;outerHeight&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回窗口的外部高度，包含工具条与滚动条。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1vdXRlcmhlaWdodC5odG1s&#34;&gt;outerWidth&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回窗口的外部宽度，包含工具条与滚动条。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1sb2NhbHN0b3JhZ2UuaHRtbA==&#34;&gt;localStorage&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在浏览器中存储 key/value 对。没有过期时间。&lt;strong&gt;本地存储&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zZXNzaW9uc3RvcmFnZS5odG1s&#34;&gt;sessionStorage&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。&lt;strong&gt;会话存储&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotc2NyZWVuLmh0bWw=&#34;&gt;screen&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;对 Screen 对象的只读引用。请参数 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotc2NyZWVuLmh0bWw=&#34;&gt;Screen 对象&lt;/span&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW5sZWZ0Lmh0bWw=&#34;&gt;screenLeft&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回相对于屏幕窗口的x坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW5sZWZ0Lmh0bWw=&#34;&gt;screenTop&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回相对于屏幕窗口的y坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW54Lmh0bWw=&#34;&gt;screenX&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回相对于屏幕窗口的x坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW54Lmh0bWw=&#34;&gt;screenY&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回相对于屏幕窗口的y坐标&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;1-2-window方法&#34;&gt;&lt;a href=&#34;#1-2-window方法&#34; class=&#34;headerlink&#34; title=&#34;1.2 window方法&#34;&gt;&lt;/a&gt;1.2 window方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;弹出类方法，输入均为提示用户的消息&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;strong&gt;方法&lt;/strong&gt;&lt;/th&gt;
&lt;th&gt;&lt;strong&gt;描述&lt;/strong&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;alert()&lt;/td&gt;
&lt;td&gt;显示带有一段消息和一个确认按钮的警告框。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;confirm()&lt;/td&gt;
&lt;td&gt;显示带有一段消息以及确认按钮和取消按钮的对话框。  返回：确认返回true，取消返回false&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;prompt()&lt;/td&gt;
&lt;td&gt;显示可提示用户输入的对话框。  返回：用户的输入值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打开/关闭窗口&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;open()&lt;/td&gt;
&lt;td&gt;打开一个新的浏览器窗口或查找一个已命名的窗口。  输入：新的窗口的url  返回：新的窗口的window对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;close()&lt;/td&gt;
&lt;td&gt;关闭浏览器窗口。  输入：无输入，但需要对应的window对象调用&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定时器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;setTimeout()&lt;/td&gt;
&lt;td&gt;在指定的毫秒数后调用函数或计算表达式。  &lt;br&gt;输入：1. “代码” or 方法对象（适用于无参函数）。2. 毫秒值  返回：用于取消定时器的标识&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clearTimeout()&lt;/td&gt;
&lt;td&gt;取消由 setTimeout() 方法设置的 timeout。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;setInterval()&lt;/td&gt;
&lt;td&gt;按照指定的周期（以毫秒计）来调用函数或计算表达式。  输入/返回：与setTimeout一样&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;clearInterval()&lt;/td&gt;
&lt;td&gt;取消由 setInterval() 设置的 timeout。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;setTimeout示例如下：&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;fun&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;fun(3,4)&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//或&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; fun1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;setTimeout&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;fun1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-Navigator-对象&#34;&gt;&lt;a href=&#34;#2-Navigator-对象&#34; class=&#34;headerlink&#34; title=&#34;2. Navigator 对象&#34;&gt;&lt;/a&gt;2. Navigator 对象&lt;/h2&gt;&lt;p&gt;Navigator 对象包含有关浏览器的信息。一般用的不多&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1hcHBjb2RlbmFtZS5odG1s&#34;&gt;appCodeName&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回浏览器的代码名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1hcHBuYW1lLmh0bWw=&#34;&gt;appName&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回浏览器的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1hcHB2ZXJzaW9uLmh0bWw=&#34;&gt;appVersion&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回浏览器的平台和版本信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1jb29raWVlbmFibGVkLmh0bWw=&#34;&gt;cookieEnabled&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回指明浏览器中是否启用 cookie 的布尔值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1wbGF0Zm9ybS5odG1s&#34;&gt;platform&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回运行浏览器的操作系统平台&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi11c2VyYWdlbnQuaHRtbA==&#34;&gt;userAgent&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回由客户机发送服务器的user-agent 头部的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbmF2LWphdmFlbmFibGVkLmh0bWw=&#34;&gt;javaEnabled()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定是否在浏览器中启用Java&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbmF2LXRhaW50ZW5hYmxlZC5odG1s&#34;&gt;taintEnabled()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定浏览器是否启用数据污点(data tainting)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;3-Screen-对象&#34;&gt;&lt;a href=&#34;#3-Screen-对象&#34; class=&#34;headerlink&#34; title=&#34;3. Screen 对象&#34;&gt;&lt;/a&gt;3. Screen 对象&lt;/h2&gt;&lt;p&gt;Screen 对象包含有关客户端显示屏幕的信息。用得也不多&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1hdmFpbGhlaWdodC5odG1s&#34;&gt;availHeight&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回屏幕的高度（不包括Windows任务栏）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1hdmFpbHdpZHRoLmh0bWw=&#34;&gt;availWidth&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回屏幕的宽度（不包括Windows任务栏）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1jb2xvcmRlcHRoLmh0bWw=&#34;&gt;colorDepth&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回目标设备或缓冲器上的调色板的比特深度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1oZWlnaHQuaHRtbA==&#34;&gt;height&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回屏幕的总高度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1waXhlbGRlcHRoLmh0bWw=&#34;&gt;pixelDepth&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回屏幕的颜色分辨率（每象素的位数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi13aWR0aC5odG1s&#34;&gt;width&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回屏幕的总宽度&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;4-History-对象&#34;&gt;&lt;a href=&#34;#4-History-对象&#34; class=&#34;headerlink&#34; title=&#34;4. History 对象&#34;&gt;&lt;/a&gt;4. History 对象&lt;/h2&gt;&lt;p&gt;History 对象包含用户（在浏览器窗口中）访问过的 URL。&lt;/p&gt;
&lt;p&gt;History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWhpcy1sZW5ndGguaHRtbA==&#34;&gt;length&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回历史列表中的网址数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtaGlzLWJhY2suaHRtbA==&#34;&gt;back()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;加载 history 列表中的前一个 URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtaGlzLWZvcndhcmQuaHRtbA==&#34;&gt;forward()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;加载 history 列表中的下一个 URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtaGlzLWdvLmh0bWw=&#34;&gt;go()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;加载 history 列表中的某个具体页面&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;5-Location-对象&#34;&gt;&lt;a href=&#34;#5-Location-对象&#34; class=&#34;headerlink&#34; title=&#34;5. Location 对象&#34;&gt;&lt;/a&gt;5. Location 对象&lt;/h2&gt;&lt;p&gt;Location 对象包含有关当前 URL 的信息。&lt;/p&gt;
&lt;p&gt;Location 对象是 window 对象的一部分，可通过 window.Location 属性对其进行访问。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1oYXNoLmh0bWw=&#34;&gt;hash&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回一个URL的锚部分&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1ob3N0Lmh0bWw=&#34;&gt;host&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回一个URL的主机名和端口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1ob3N0bmFtZS5odG1s&#34;&gt;hostname&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回URL的主机名&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1ocmVmLmh0bWw=&#34;&gt;href&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回完整的URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1wYXRobmFtZS5odG1s&#34;&gt;pathname&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回的URL路径名。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1wb3J0Lmh0bWw=&#34;&gt;port&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回一个URL服务器使用的端口号&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1wcm90b2NvbC5odG1s&#34;&gt;protocol&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回一个URL协议&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1zZWFyY2guaHRtbA==&#34;&gt;search&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回一个URL的查询部分&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbG9jLWFzc2lnbi5odG1s&#34;&gt;assign()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;载入一个新的文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbG9jLXJlbG9hZC5odG1s&#34;&gt;reload()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;重新载入当前文档&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbG9jLXJlcGxhY2UuaHRtbA==&#34;&gt;replace()&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;用新的文档替换当前文档&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;6-Storage对象&#34;&gt;&lt;a href=&#34;#6-Storage对象&#34; class=&#34;headerlink&#34; title=&#34;6. Storage对象&#34;&gt;&lt;/a&gt;6. Storage对象&lt;/h2&gt;&lt;p&gt;Web 存储 API 提供了 sessionStorage （会话存储） 和 localStorage（本地存储）两个存储对象来对网页的数据进行添加、删除、修改、查询操作。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。&lt;/li&gt;
&lt;li&gt;sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;前面window的属性中有提到2个存储键值对的storage对象，如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1sb2NhbHN0b3JhZ2UuaHRtbA==&#34;&gt;window.localStorage&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在浏览器中存储 key/value 对。没有过期时间。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zZXNzaW9uc3RvcmFnZS5odG1s&#34;&gt;window.sessionStorage&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;storage对象有以下属性和方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;length&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回存储对象中包含多少条数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;方法&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;key(&lt;em&gt;n&lt;/em&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回存储对象中第 &lt;em&gt;n&lt;/em&gt; 个键的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;getItem(&lt;em&gt;keyname&lt;/em&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;返回指定键的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;setItem(&lt;em&gt;keyname&lt;/em&gt;, &lt;em&gt;value&lt;/em&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;添加键和值，如果对应的值存在，则更新该键对应的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;removeItem(&lt;em&gt;keyname&lt;/em&gt;)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;移除键&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;clear()&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;清除存储对象中所有的键&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/script&gt;&lt;/p&gt;&lt;/blockquote&gt;</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="前端" scheme="https://nitgod1996.com/categories/note/%E5%89%8D%E7%AB%AF/" />
        <category term="前端" scheme="https://nitgod1996.com/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="JavaScript" scheme="https://nitgod1996.com/tags/JavaScript/" />
        <updated>2021-05-27T08:18:19.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/</id>
        <title>前端调用Python数据</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/"/>
        <content type="html">&lt;h1 id=&#34;1-安装依赖包&#34;&gt;&lt;a href=&#34;#1-安装依赖包&#34; class=&#34;headerlink&#34; title=&#34;1. 安装依赖包&#34;&gt;&lt;/a&gt;1. 安装依赖包&lt;/h1&gt;&lt;p&gt;通过豆瓣源安装对应包&lt;/p&gt;
&lt;pre class=&#34; language-bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;2-启动python的flask&#34;&gt;&lt;a href=&#34;#2-启动Python的Flask&#34; class=&#34;headerlink&#34; title=&#34;2. 启动Python的Flask&#34;&gt;&lt;/a&gt;2. 启动Python的Flask&lt;/h1&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; flask &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Flask
app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Flask&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__name__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
@app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/hello&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#这个是对函数的注解&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hello_world&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;run&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行一下，控制台出现&lt;img data-src=&#34;/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531165347088.png&#34; alt=&#34;image-20210531165347088&#34;&gt;&lt;/p&gt;
&lt;p&gt;说明已经布置完成，**字符串&lt;code&gt;hello world&lt;/code&gt;**被发送到了&lt;code&gt;localhost:5000/hello&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此时直接访问/爬取都能直接获取”hello world”&lt;img data-src=&#34;/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531165707667.png&#34; alt=&#34;image-20210531165707667&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-ajax获取flask发送的信息&#34;&gt;&lt;a href=&#34;#3-ajax获取Flask发送的信息&#34; class=&#34;headerlink&#34; title=&#34;3. ajax获取Flask发送的信息&#34;&gt;&lt;/a&gt;3. ajax获取Flask发送的信息&lt;/h1&gt;&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;$&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ajax&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        type &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;get&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;     &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//异步请求（同步请求将会锁住浏览器，用户其他操作必须等待请求完成才可以执行）&lt;/span&gt;
        url &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//服务器端放出api的地址，一般是把数据以json格式放出&lt;/span&gt;
        data &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        dataType &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//返回数据形式为json&lt;/span&gt;
        success &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//请求成功时执行该函数内容，result即为服务器返回的json对象&lt;/span&gt;
            &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        error &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//请求失败时执行该函数&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;重点在&lt;code&gt;url&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果js文件一起部署到了&lt;code&gt;localhost:5000&lt;/code&gt;，那么直接填”/hello”即可&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果是外部js文件，那么需要填完整路径&lt;code&gt;http://localhost:5000/hello&lt;/code&gt;.&lt;strong&gt;同时，解决跨域问题&lt;/strong&gt;，否则会报错&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Access to XMLHttpRequest at ‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo1MDAwL2FwaS9tc2clRTIlODAlOTk=&#34;&gt;http://localhost:5000/api/msg’&lt;/span&gt; from origin ‘&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2xvY2FsaG9zdDo2MzM0MuKAmQ==&#34;&gt;http://localhost:63342’&lt;/span&gt; has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;问题一解决跨域问题&#34;&gt;&lt;a href=&#34;#问题一：解决跨域问题&#34; class=&#34;headerlink&#34; title=&#34;问题一：解决跨域问题&#34;&gt;&lt;/a&gt;问题一：解决跨域问题&lt;/h2&gt;&lt;p&gt;py引入&lt;code&gt;flask-cors&lt;/code&gt;包，并用CORS包裹app即可，&lt;strong&gt;需要写上完整路径，http://不要忘记&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; flask &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Flask
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; flask_cors &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; CORS
app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Flask&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__name__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
CORS&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;app&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
@app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/hello&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hello_world&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;run&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此后，ajax即可接受到hello world&lt;/p&gt;
&lt;h2 id=&#34;问题二访问成功ajax仍然error请求失败&#34;&gt;&lt;a href=&#34;#问题二：访问成功，ajax仍然error请求失败&#34; class=&#34;headerlink&#34; title=&#34;问题二：访问成功，ajax仍然error请求失败&#34;&gt;&lt;/a&gt;问题二：访问成功，ajax仍然error请求失败&lt;/h2&gt;&lt;p&gt;这有可能是&lt;code&gt;dataType&lt;/code&gt;参数的原因。&lt;/p&gt;
&lt;p&gt;因为有时候（刚刚）上传的数据是&lt;code&gt;str&lt;/code&gt;类型，如果&lt;code&gt;dataType&lt;/code&gt;设置成&lt;code&gt;json&lt;/code&gt;，那么就接受不到数据，就会转到&lt;code&gt;error&lt;/code&gt;&lt;/p&gt;
&lt;h1 id=&#34;4-python上传各种格式数据&#34;&gt;&lt;a href=&#34;#4-Python上传各种格式数据&#34; class=&#34;headerlink&#34; title=&#34;4. Python上传各种格式数据&#34;&gt;&lt;/a&gt;4. Python上传各种格式数据&lt;/h1&gt;&lt;p&gt;一般来说，前端主要接受&lt;code&gt;json&lt;/code&gt;和&lt;code&gt;str&lt;/code&gt;类型的数据，最多的是&lt;code&gt;json&lt;/code&gt;，所以一般在Python中先将数据处理一下再上传&lt;/p&gt;
&lt;p&gt;Python的非常优秀的数据处理语言，这取决于它有各种数据分析的库，如&lt;code&gt;numpy&lt;/code&gt;、&lt;code&gt;pandas&lt;/code&gt;等&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Python中可以做以下事情：&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;flask只能上传&lt;code&gt;str&lt;/code&gt;类型的数据，但上传&lt;code&gt;json&lt;/code&gt;格式的字符串可以被&lt;code&gt;ajax&lt;/code&gt;识别成&lt;code&gt;json&lt;/code&gt;类型&lt;/li&gt;
&lt;li&gt;可通过&lt;code&gt;pandas&lt;/code&gt;将其他类型的数据转为&lt;code&gt;str&lt;/code&gt;或&lt;code&gt;json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;在Python中把数据处理好后传给前端&lt;/em&gt;。这样前端接受数据后就不需要再处理数据，或者简单处理数据就可以直接用了&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-例用echarts显示csv的数据&#34;&gt;&lt;a href=&#34;#5-例：用echarts显示csv的数据&#34; class=&#34;headerlink&#34; title=&#34;5. 例：用echarts显示csv的数据&#34;&gt;&lt;/a&gt;5. 例：用echarts显示csv的数据&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Python&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; flask_cors &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; CORS
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; pandas &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; pd
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; flask &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Flask
app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Flask&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__name__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
CORS&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;app&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
@app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/data/data1&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#以上是跨域部署服务器及url&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;xianlu&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#读取csv文件，第一列作为索引，dataSet是DataFrame的类型&lt;/span&gt;
    dataSet &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;read_csv&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;DataA09/station.csv&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; index_col&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#统计各线路的人次，保存在Series中&lt;/span&gt;
    array&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pd&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Series&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;dataSet&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;线路&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;value_counts&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;#将&amp;amp;#123;线路:人次&amp;amp;#125;转为json&lt;/span&gt;
    json_split&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;to_json&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;orient&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;split&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; json_split

&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;run&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解析：csv文件如下图所示&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531183207279.png&#34; alt=&#34;image-20210531183207279&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dataSet&lt;/code&gt;：以编号为行索引，以”站点名称”、”线路”、”行政区域”为列索引。&lt;em&gt;索引不算作数据内容&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531183300352.png&#34; alt=&#34;image-20210531183300352&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;array&lt;/code&gt;：线路的人次。转为&lt;code&gt;DataFrame&lt;/code&gt;的目的是可以转成&lt;code&gt;json&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531183522711.png&#34; alt=&#34;image-20210531183522711&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;json_split&lt;/code&gt;：&lt;code&gt;Series&lt;/code&gt;是&lt;code&gt;pandas&lt;/code&gt;中保存&lt;strong&gt;一维数组&lt;/strong&gt;的类型。而&lt;code&gt;DataFrame&lt;/code&gt;对应的是&lt;strong&gt;多维数组&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;转为&lt;code&gt;json&lt;/code&gt;有很多种形式，这里选择&lt;code&gt;split&lt;/code&gt;比较合适。保存在&lt;code&gt;json&lt;/code&gt;中的中文以&lt;code&gt;Unicode&lt;/code&gt;编码，会看上去乱码。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531185240411.png&#34; alt=&#34;image-20210531185240411&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;html：&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;b_right_box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;chart_5&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;echart&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style-attr language-css&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt; &lt;span class=&#34;token attr-name&#34;&gt;style&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&#34;&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;100%&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;3.6&lt;/span&gt;rem&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;JavaScript：&lt;strong&gt;这里要注意，echarts接受的数据一定要是list的，不然会报各种错&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-javascript&#34;&gt;&lt;code class=&#34;language-javascript&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;echart_5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 基于准备好的dom，初始化echarts实例&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; myChart &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; echarts&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;document&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getElementById&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;chart_5&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    $&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;ajax&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        type &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;get&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;async&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;            
        url &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;http://127.0.0.1:5000/data/data1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;   
        data &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        dataType &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;json&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//返回数据形式为json&lt;/span&gt;
        success &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;result&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//请求成功时执行该函数内容，result即为服务器返回的json对象&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;var&lt;/span&gt; data &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; result&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//data是str类型的json数据&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; index&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;index&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;token keyword&#34;&gt;let&lt;/span&gt; values&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;data&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;data&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;

                myChart&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hideLoading&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//隐藏加载动画&lt;/span&gt;
                myChart&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setOption&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//加载数据图表&lt;/span&gt;
                    xAxis&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                        type&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;category&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                        data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; index&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                    yAxis&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                        type&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;value&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                    series&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                        data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; values&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                        type&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;bar&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                        barWidth&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;35%&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
                    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
                &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;
        error &lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token function&#34;&gt;alert&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;错误&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="随笔" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/" />
        <category term="echarts" scheme="https://nitgod1996.com/tags/echarts/" />
        <category term="Python" scheme="https://nitgod1996.com/tags/Python/" />
        <category term="前端" scheme="https://nitgod1996.com/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="JavaScript" scheme="https://nitgod1996.com/tags/JavaScript/" />
        <category term="jQuery" scheme="https://nitgod1996.com/tags/jQuery/" />
        <category term="AJAX" scheme="https://nitgod1996.com/tags/AJAX/" />
        <category term="Flask" scheme="https://nitgod1996.com/tags/Flask/" />
        <updated>2021-05-27T08:14:53.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/</id>
        <title>html常用功能手册</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/"/>
        <content type="html">&lt;h1 id=&#34;一-简介&#34;&gt;&lt;a href=&#34;#一、-简介&#34; class=&#34;headerlink&#34; title=&#34;一、 简介&#34;&gt;&lt;/a&gt;一、 简介&lt;/h1&gt;&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token doctype&#34;&gt;&amp;lt;!DOCTYPE html&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;meta&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;charset&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;utf-8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;菜鸟教程(runoob.com)&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;title&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
 
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;我的第一个标题&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
 
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;我的第一个段落。&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
 
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;body&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;html&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;!DOCTYPE html&gt;&lt;/strong&gt; 声明为 HTML5 文档&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;html&gt;&lt;/html&gt;&lt;/strong&gt; 元素是 HTML 页面的根元素&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;head&gt;&lt;/head&gt;&lt;/strong&gt; 元素包含了文档的元（meta）数据，如 &lt;strong&gt;&lt;meta charset=&#34;utf-8&#34;&gt;&lt;/strong&gt; 定义网页编码格式为 &lt;strong&gt;utf-8&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;title&gt;&lt;/title&gt;&lt;/strong&gt; 元素描述了文档的标题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;body&gt;&lt;/body&gt;&lt;/strong&gt; 元素包含了可见的页面内容&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;h1 id&gt;&lt;/h1&gt;&lt;/strong&gt; 元素定义一个大标题&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;p&gt;&lt;/p&gt;&lt;/strong&gt; 元素定义一个段落&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二-标签&#34;&gt;&lt;a href=&#34;#二、-标签&#34; class=&#34;headerlink&#34; title=&#34;二、 标签&#34;&gt;&lt;/a&gt;二、 标签&lt;/h1&gt;&lt;h2 id=&#34;1-标签类型&#34;&gt;&lt;a href=&#34;#1-标签类型&#34; class=&#34;headerlink&#34; title=&#34;1. 标签类型&#34;&gt;&lt;/a&gt;1. 标签类型&lt;/h2&gt;&lt;p&gt;标签，也称元素，分为内联元素和块级元素。&lt;/p&gt;
&lt;p&gt;块级元素会换行，而内联元素不会，可以通过CSS的&lt;code&gt;display&lt;/code&gt;属性修改设置。&lt;/p&gt;
&lt;h3 id=&#34;11-内联元素&#34;&gt;&lt;a href=&#34;#1-1-内联元素&#34; class=&#34;headerlink&#34; title=&#34;1.1 内联元素&#34;&gt;&lt;/a&gt;1.1 内联元素&lt;/h3&gt;&lt;p&gt;​        内联元素又名行内元素，和其对应的是块元素(block element)，都是html规范中的概念。内联元素的显示，为了帮助理解，可以形象的称为“文本模式”，即&lt;strong&gt;一个挨着一个，都在同一行按从左至右的顺序显示，不单独占一行&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何不是块级元素的可见元素都是内联元素。其表现的特性是“行布局”形式，这里的“行布局”的意思就是说其表现形式始终以行进行显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内联元素有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和其他元素都在一行上，遇到父级元素边界会自动换行&lt;/li&gt;
&lt;li&gt;高、行高以及内外边距都&lt;strong&gt;不可以改变&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;宽度与内容一样宽，且&lt;strong&gt;不可改变&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;行内元素只能容纳文本或者其他行内元素&lt;/li&gt;
&lt;li&gt;对于行内元素，需要注意的是：设置宽度width无效，设置高度无效，可以通过设置line-height来设置，设置margin只有左右有效，上下无效，设置padding只有左右有效，上下无效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常见的内联元素有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;a&lt;/code&gt; – 锚点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;abbr&lt;/code&gt; – 缩写&lt;/li&gt;
&lt;li&gt;&lt;code&gt;b&lt;/code&gt; – 粗体(不推荐)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;big&lt;/code&gt; – 大字体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;br&lt;/code&gt; – 换行&lt;/li&gt;
&lt;li&gt;&lt;code&gt;cite&lt;/code&gt; – 引用&lt;/li&gt;
&lt;li&gt;&lt;code&gt;font&lt;/code&gt; – 字体设定(不推荐)&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i &lt;/code&gt;– 斜体&lt;/li&gt;
&lt;li&gt;&lt;code&gt;img&lt;/code&gt; – 图片&lt;/li&gt;
&lt;li&gt;&lt;code&gt;input&lt;/code&gt; – 输入框&lt;/li&gt;
&lt;li&gt;&lt;code&gt;label&lt;/code&gt; – 表格标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;select&lt;/code&gt; – 项目选择&lt;/li&gt;
&lt;li&gt;&lt;code&gt;small&lt;/code&gt; – 小字体文本&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sub&lt;/code&gt; – 下标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sup&lt;/code&gt; – 上标&lt;/li&gt;
&lt;li&gt;&lt;code&gt;textarea&lt;/code&gt; – 多行文本输入框&lt;/li&gt;
&lt;li&gt;&lt;code&gt;u&lt;/code&gt; – 下划线&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-块元素&#34;&gt;&lt;a href=&#34;#1-2-块元素&#34; class=&#34;headerlink&#34; title=&#34;1.2 块元素&#34;&gt;&lt;/a&gt;1.2 块元素&lt;/h3&gt;&lt;p&gt;块元素和内联元素的基本差异是块元素一般都从新行开始，相邻的块级元素将会在不同行显示。&lt;/p&gt;
&lt;p&gt;块级元素的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;独霸一行，总是在新行上开始&lt;/li&gt;
&lt;li&gt;宽度缺省是它父级元素的100%，除非设定一个宽度&lt;/li&gt;
&lt;li&gt;高度、行高、外边距、内边距都可以设置&lt;/li&gt;
&lt;li&gt;可以容纳其他内联元素或者其他块元素&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是常见的块级元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;address&lt;/code&gt; – 地址&lt;/li&gt;
&lt;li&gt;&lt;code&gt;center&lt;/code&gt; – 举中对齐块&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dir&lt;/code&gt; – 目录列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;div&lt;/code&gt; – 常用块级容易，也是CSS layout的主要标签&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dl&lt;/code&gt; – 定义列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;form&lt;/code&gt; – 交互表单&lt;/li&gt;
&lt;li&gt;&lt;code&gt;h1~h6&lt;/code&gt; – 标题&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hr&lt;/code&gt; – 水平分隔线&lt;/li&gt;
&lt;li&gt;&lt;code&gt;menu&lt;/code&gt; – 菜单列表&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ol&lt;/code&gt; – 有序表单&lt;/li&gt;
&lt;li&gt;&lt;code&gt;p&lt;/code&gt; – 段落&lt;/li&gt;
&lt;li&gt;&lt;code&gt;table&lt;/code&gt; – 表格&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ul&lt;/code&gt; – 无序列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-基本标签&#34;&gt;&lt;a href=&#34;#2-基本标签&#34; class=&#34;headerlink&#34; title=&#34;2. 基本标签&#34;&gt;&lt;/a&gt;2. 基本标签&lt;/h2&gt;&lt;h3 id=&#34;21-头部&#34;&gt;&lt;a href=&#34;#2-1-头部&#34; class=&#34;headerlink&#34; title=&#34;2.1 头部&#34;&gt;&lt;/a&gt;2.1 头部&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;head&amp;gt; &lt;/code&gt;元素包含了所有的头部标签元素。在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。&lt;/p&gt;
&lt;p&gt;可以添加在头部区域的元素标签为: &lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;noscript&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;标签&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义了文档的信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;title&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义了文档的标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;base&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义了页面链接标签的默认链接地址&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义了一个文档和外部资源之间的关系&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;meta&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义了HTML文档中的元数据&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义了客户端的JavaScript脚本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;style&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义了HTML文档的CSS样式&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;22-ltbodygt&#34;&gt;&lt;a href=&#34;#2-2-lt-body-gt&#34; class=&#34;headerlink&#34; title=&#34;2.2 &amp;lt;body&amp;gt;&#34;&gt;&lt;/a&gt;2.2 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;主要内容基本都写在&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;体内。很多时候&lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;排版为&lt;code&gt;&amp;lt;header&amp;gt;&lt;/code&gt;页眉，&lt;code&gt;&amp;lt;main&amp;gt;&lt;/code&gt;主体和&lt;code&gt;&amp;lt;footer&amp;gt;&lt;/code&gt;页脚三段式。如下：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210520175848867.png&#34; alt=&#34;image-20210520175848867&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然也不一定全是这样。&lt;/p&gt;
&lt;h2 id=&#34;3-文本段落标签&#34;&gt;&lt;a href=&#34;#3-文本-段落标签&#34; class=&#34;headerlink&#34; title=&#34;3. 文本/段落标签&#34;&gt;&lt;/a&gt;3. 文本/段落标签&lt;/h2&gt;&lt;p&gt;与文本相关的标签，也是用得最多的标签。如标题、字体、段落、换行等。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;标签&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;h1 - h6&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;hr&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;水平线分隔。&lt;strong&gt;无结束标签&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;p&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;段落&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;&amp;lt;br&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;换行。&lt;strong&gt;无结束标签&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标签&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;b&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义粗体文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;em&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义着重文字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;i&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义斜体字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;small&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义小号字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;strong&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义加重语气&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;sub&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义下标字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;sup&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义上标字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义插入字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;del&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义删除字&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;&amp;lt;cite&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定义引用、引证&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;至于font以及对齐方式等，一般在css中设置&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;4-锚点链接&#34;&gt;&lt;a href=&#34;#4-锚点-链接&#34; class=&#34;headerlink&#34; title=&#34;4. 锚点/链接&#34;&gt;&lt;/a&gt;4. 锚点/链接&lt;/h2&gt;&lt;h3 id=&#34;41-ltagt&#34;&gt;&lt;a href=&#34;#4-1-lt-a-gt&#34; class=&#34;headerlink&#34; title=&#34;4.1 &amp;lt;a&amp;gt;&#34;&gt;&lt;/a&gt;4.1 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;Anchor Element：锚元素，&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 标签定义超链接，用于从一个页面链接到另一个页面。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 元素最重要的属性是&lt;code&gt;href&lt;/code&gt;属性，它指定链接的目标。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;https://nitgod1996.github.io/&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;进入宁理大神1996的快乐小屋!&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可用于：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;打开新页面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;移动到文档指定位置（当目录用）。这需要用到&lt;code&gt;PJAX&lt;/code&gt;或者使用插件，大致逻辑如下&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在标题处建立一个锚点，并设置&lt;code&gt;href&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;anchor&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;#2-创建虚拟机&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data-pjax-state&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;anchor&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;#&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;目录出设置&lt;code&gt;href&lt;/code&gt;属性与标题的&lt;code&gt;href&lt;/code&gt;一致&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;a&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;toc-link&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;#2-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;data-pjax-state&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;span&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;toc-text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 2. 创建虚拟机&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;span&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;a&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;主要属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;值&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWhyZWYuaHRtbA==&#34;&gt;href&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;&lt;em&gt;URL&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;规定链接的目标 URL。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;其他属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWNoYXJzZXQuaHRtbA==&#34;&gt;charset&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;char_encoding&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HTML5 不支持。规定目标 URL 的字符编码。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWNvb3Jkcy5odG1s&#34;&gt;coords&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;coordinates&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HTML5 不支持。规定链接的坐标。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWRvd25sb2FkLmh0bWw=&#34;&gt;download&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;filename&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定下载链接&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWhyZWZsYW5nLmh0bWw=&#34;&gt;hreflang&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;language_code&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定目标 URL 的基准语言。仅在 href 属性存在时使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLW1lZGlhLmh0bWw=&#34;&gt;media&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;media_query&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定目标 URL 的媒介类型。默认值：all。仅在 href 属性存在时使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLW5hbWUuaHRtbA==&#34;&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;section_name&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HTML5 不支持。规定锚的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXJlbC5odG1s&#34;&gt;rel&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;alternate author bookmark help license next nofollow noreferrer prefetch prev search tag&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定当前文档与目标 URL 之间的关系。仅在 href 属性存在时使用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXJldi5odG1s&#34;&gt;rev&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HTML5 不支持。规定目标 URL 与当前文档之间的关系。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXNoYXBlLmh0bWw=&#34;&gt;shape&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;default rect circle poly&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HTML5 不支持。规定链接的形状。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXRhcmdldC5odG1s&#34;&gt;target&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;_blank _parent _self _top &lt;em&gt;framename&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定在何处打开目标 URL。仅在 href 属性存在时使用。_blank：新窗口打开。_parent：在父窗口中打开链接。_self：默认，当前页面跳转。_top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXR5cGUuaHRtbA==&#34;&gt;type&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;MIME_type&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定目标 URL 的 MIME 类型。仅在 href 属性存在时使用。 注：MIME = Multipurpose Internet Mail Extensions。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;42-ltlinkgt&#34;&gt;&lt;a href=&#34;#4-2-lt-link-gt&#34; class=&#34;headerlink&#34; title=&#34;4.2 &amp;lt;link&amp;gt;&#34;&gt;&lt;/a&gt;4.2 &lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;link&amp;gt;&lt;/code&gt; 主要用于外部资源的联系。最常见的用途是&lt;strong&gt;链接样式表&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;stylesheet&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;css/style.css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text/css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;media&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;all&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;link&lt;/code&gt;只能写在头部。属性和&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;差不多&lt;/p&gt;
&lt;h2 id=&#34;5-ltimggt&#34;&gt;&lt;a href=&#34;#5-lt-img-gt&#34; class=&#34;headerlink&#34; title=&#34;5. &amp;lt;img&amp;gt;&#34;&gt;&lt;/a&gt;5. &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;&lt;/h2&gt;&lt;p&gt;引入图片的标签&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;img&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;loading&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;lazy&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;smiley-2.gif&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;alt&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;Smiley face&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;42&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;42&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要属性如下&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctbG9hZGluZy5odG1s&#34;&gt;loading&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;eager：立即加载 lazy：延迟加载&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定浏览器是应立即加载图像还是延迟加载图像。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctYWx0Lmh0bWw=&#34;&gt;alt&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;如果加载不出，规定图像的替代文本。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctc3JjLmh0bWw=&#34;&gt;src&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;URL&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定显示图像的 URL。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctaGVpZ2h0Lmh0bWw=&#34;&gt;height&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;pixels&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定图像的高度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctd2lkdGguaHRtbA==&#34;&gt;width&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;pixels&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定图像的宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;其实&lt;code&gt;heigth&lt;/code&gt;和&lt;code&gt;width&lt;/code&gt;均可在CSS中设置，真正重要的也就&lt;code&gt;src&lt;/code&gt;和&lt;code&gt;alt&lt;/code&gt;属性。&lt;/p&gt;
&lt;p&gt;java项目的默认路径一般是&lt;code&gt;src&lt;/code&gt;同名文件夹&lt;/p&gt;
&lt;h2 id=&#34;6-列表标签&#34;&gt;&lt;a href=&#34;#6-列表标签&#34; class=&#34;headerlink&#34; title=&#34;6. 列表标签&#34;&gt;&lt;/a&gt;6. 列表标签&lt;/h2&gt;&lt;p&gt;一般使用&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;标签做列表项，用&lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;或&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;包裹&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;61-ltolgt有序列表&#34;&gt;&lt;a href=&#34;#6-1-lt-ol-gt-有序列表&#34; class=&#34;headerlink&#34; title=&#34;6.1 &amp;lt;ol&amp;gt;有序列表&#34;&gt;&lt;/a&gt;6.1 &lt;code&gt;&amp;lt;ol&amp;gt;&lt;/code&gt;有序列表&lt;/h3&gt;&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ol&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;3&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;吃饭&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;打游戏&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;学习&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ol&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vbC1yZXZlcnNlZC5odG1s&#34;&gt;reversed&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;reversed&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定列表倒序(9,8,7…)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vbC1zdGFydC5odG1s&#34;&gt;start&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;number&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个整数值属性，指定了列表编号的起始值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vbC10eXBlLmh0bWw=&#34;&gt;type&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;code&gt;a&lt;/code&gt; 小写字母编号&lt;br&gt;&lt;code&gt;A&lt;/code&gt; 大写字母&lt;br&gt;&lt;code&gt;i&lt;/code&gt; 小写罗马数字&lt;br&gt;&lt;code&gt;I&lt;/code&gt; 大写罗马数字&lt;br&gt;&lt;code&gt;1&lt;/code&gt; 表示数字编号（默认）&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定列表的类型。&lt;strong&gt;但一般在CSS中设置&lt;/strong&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;62-ltulgt无序列表&#34;&gt;&lt;a href=&#34;#6-2-lt-ul-gt-无序列表&#34; class=&#34;headerlink&#34; title=&#34;6.2 &amp;lt;ul&amp;gt;无序列表&#34;&gt;&lt;/a&gt;6.2 &lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;无序列表&lt;/h3&gt;&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;吃饭&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;打游戏&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;学习&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;li&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;ul&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;7-ltdivgtltspangt无样式标签&#34;&gt;&lt;a href=&#34;#7-lt-div-gt-lt-span-gt-无样式标签&#34; class=&#34;headerlink&#34; title=&#34;7. &amp;lt;div&amp;gt;/&amp;lt;span&amp;gt;无样式标签&#34;&gt;&lt;/a&gt;7. &lt;code&gt;&amp;lt;div&amp;gt;/&amp;lt;span&amp;gt;&lt;/code&gt;无样式标签&lt;/h2&gt;&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;没有特殊定义。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;是最常用到的两个标签，因为&lt;code&gt;html&lt;/code&gt;大部分时候仅仅写个文本就够了，排版、样式都是由CSS完成的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;的唯一区别是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;是块级元素，单独成一行（也就是会自动换行）。适合做盒子或者对网页布局。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;是内联元素，不会自动换行。可以做文本容器.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般用法是以&lt;code&gt;&amp;lt;div&amp;gt;&lt;/code&gt;包裹&lt;code&gt;&amp;lt;span&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;h2 id=&#34;8-ltformgt表单接收用户输入&#34;&gt;&lt;a href=&#34;#8-lt-form-gt-表单（接收用户输入）&#34; class=&#34;headerlink&#34; title=&#34;8. &amp;lt;form&amp;gt;表单（接收用户输入）&#34;&gt;&lt;/a&gt;8. &lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;表单（接收用户输入）&lt;/h2&gt;&lt;p&gt;HTML 表单用于收集不同类型的用户输入。以&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;标签包裹，里面设置如：文本域、下拉列表、单选框、复选框等。&lt;/p&gt;
&lt;form&gt; 元素包含一个或多个如下的表单元素：

&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1pbnB1dC5odG1s&#34;&gt;input&lt;/span&gt;：规定了用户可以在其中输入数据的输入字段。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy10ZXh0YXJlYS5odG1s&#34;&gt;textarea&lt;/span&gt;：定义一个多行的文本输入控件。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1idXR0b24uaHRtbA==&#34;&gt;button&lt;/span&gt;：按钮&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1zZWxlY3QuaHRtbA==&#34;&gt;select&lt;/span&gt;：下拉框&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1vcHRpb24uaHRtbA==&#34;&gt;option&lt;/span&gt;：下拉列表的选项，类似&lt;code&gt;&amp;lt;ul&amp;gt;&lt;/code&gt;和&lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt;的关系&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1vcHRncm91cC5odG1s&#34;&gt;optgroup&lt;/span&gt;：把相关的选项组合在一起。如图&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210520204100133.png&#34; alt=&#34;image-20210520204100133&#34;&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1maWVsZHNldC5odG1s&#34;&gt;fieldset&lt;/span&gt;：&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1sYWJlbC5odG1s&#34;&gt;label&lt;/span&gt;：为&lt;code&gt;input&lt;/code&gt;元素标注，如图&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210520204504945.png&#34; alt=&#34;image-20210520204504945&#34;&gt;Male和Female就是`label&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;form&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;#&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;get&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    用户名：&amp;lt;input name = &#34;username&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;        
    密码：&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;&amp;lt;!--请求参数--&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;登录&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;form&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;主要属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLWFjY2VwdC5odG1s&#34;&gt;accept&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;MIME_type&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;HTML5 不支持。规定服务器接收到的文件的类型。（文件是通过文件上传提交的）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLWFjdGlvbi5odG1s&#34;&gt;action&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;URL&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定当提交表单时向何处发送表单数据。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLW1ldGhvZC5odG1s&#34;&gt;method&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;get/post&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定用于发送表单数据的 HTTP 方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLW5hbWUuaHRtbA==&#34;&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定表单的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLXRhcmdldC5odG1s&#34;&gt;target&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;_blank/ _self /_parent /_top&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定在何处打开 action URL。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;81-ltinputgt&#34;&gt;&lt;a href=&#34;#8-1-lt-input-gt&#34; class=&#34;headerlink&#34; title=&#34;8.1 &amp;lt;input&amp;gt;&#34;&gt;&lt;/a&gt;8.1 &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt; 标签规定了用户可以在其中输入数据的输入字段。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;input&amp;gt; &lt;/code&gt;元素在&lt;code&gt; &amp;lt;form&amp;gt;&lt;/code&gt; 元素中使用，用来声明允许用户输入数据的 input 控件。&lt;/p&gt;
&lt;p&gt;主要属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC1uYW1lLmh0bWw=&#34;&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;name 属性规定 &lt;input&gt; 元素的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC1yZWFkb25seS5odG1s&#34;&gt;readonly&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;readonly&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;readonly 属性规定输入字段是只读的。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC1zaXplLmh0bWw=&#34;&gt;size&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;number&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;size 属性规定以字符数计的 &lt;input&gt; 元素的可见宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC12YWx1ZS5odG1s&#34;&gt;value&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;指定 &lt;input&gt; 元素 value 的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC10eXBlLmh0bWw=&#34;&gt;type&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;button checkbox  image text 等&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;type 属性规定要显示的 &lt;input&gt; 元素的类型。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;输入字段可通过多种方式改变，取决于 &lt;code&gt;type&lt;/code&gt; 属性。&lt;code&gt;type&lt;/code&gt;主要属性如下&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;button&lt;/code&gt;：定义可点击的按钮（通常与 JavaScript 一起使用来启动脚本）。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;button&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;点我&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;onclick&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;msg()&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;value&lt;/code&gt; - 按钮上显示的文字。&lt;code&gt;onclick&lt;/code&gt; - 点击按钮事件执行的&lt;code&gt;JavaScript&lt;/code&gt;代码&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521141334312.png&#34; alt=&#34;image-20210521141334312&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;submit&lt;/code&gt;：定义提交按钮。**&lt;code&gt;input&lt;/code&gt;除了&lt;code&gt;button&lt;/code&gt;，任何需要提交的都需要用到&lt;code&gt;submit&lt;/code&gt;**&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;checkbox&lt;/code&gt;：定义复选框。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;name：name属性相同的单/复选框为一组&lt;/li&gt;
&lt;li&gt;value：指定被选中后提交的值&lt;/li&gt;
&lt;li&gt;checked：一开始默认选中的项&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt; &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;checkbox&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;vehicle[]&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;Bike&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 自行车&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;checkbox&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;vehicle[]&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;Car&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 小轿车&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;checkbox&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;vehicle[]&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;Boat&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 船&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;提交&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;name&lt;/code&gt;相同的复选框为一组。&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521141823540.png&#34; alt=&#34;image-20210521141823540&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;radio&lt;/code&gt;：定义单选按钮。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;radio&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;gender&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;女&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt; 女&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;提交&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521141852425.png&#34; alt=&#34;image-20210521141852425&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;file&lt;/code&gt;：定义文件选择字段和 “浏览…” 按钮，供文件上传。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;  选择一个文件: &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;file&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;img&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521143325111.png&#34; alt=&#34;image-20210521143325111&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;password&lt;/code&gt;：定义密码字段（字段中的字符会被遮蔽）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;placeholder：指定输入框的提示信息，输入时会自动消失&lt;/li&gt;
&lt;li&gt;value：提示信息，不会自动消失&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;text&lt;/code&gt;：默认。定义一个单行的文本字段（默认宽度为 20 个字符）。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;  Email: &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;text&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;email&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;输入邮箱&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  Password: &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;password&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;pwd&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;maxlength&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;8&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;placeholder&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;输入密码&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;submit&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521143529935.png&#34; alt=&#34;image-20210521143529935&#34;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;82-ltlabelgt标签文本绑定&#34;&gt;&lt;a href=&#34;#8-2-lt-label-gt-标签文本绑定&#34; class=&#34;headerlink&#34; title=&#34;8.2 &amp;lt;label&amp;gt;标签文本绑定&#34;&gt;&lt;/a&gt;8.2 &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt;标签文本绑定&lt;/h3&gt;&lt;p&gt;label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; 标签的 for 属性应当与相关元素的 id 属性相同。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;male&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Male&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;radio&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;sex&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;male&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;male&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;label&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;female&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Female&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;label&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;input&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;radio&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;sex&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;female&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;female&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;br&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521143934294.png&#34; alt=&#34;image-20210521143934294&#34;&gt;如图，点击Male文本即可选中&lt;/p&gt;
&lt;h3 id=&#34;83-ltselectgt下拉框&#34;&gt;&lt;a href=&#34;#8-3-lt-select-gt-下拉框&#34; class=&#34;headerlink&#34; title=&#34;8.3 &amp;lt;select&amp;gt;下拉框&#34;&gt;&lt;/a&gt;8.3 &lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt;下拉框&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素用来创建下拉列表。&lt;strong&gt;不需要被&lt;code&gt;&amp;lt;form&amp;gt;&lt;/code&gt;包裹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;code&gt;&amp;lt;select&amp;gt;&lt;/code&gt; 元素中的&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;标签定义了列表中的可用选项。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;option&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;volvo&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Volvo&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;option&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;saab&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Saab&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;option&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;opel&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Opel&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
  &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;option&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;audi&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;Audi&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;option&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;select&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521144307414.png&#34; alt=&#34;image-20210521144307414&#34;&gt;&lt;/p&gt;
&lt;p&gt;主要属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3QtZGlzYWJsZWQuaHRtbA==&#34;&gt;disabled&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;当该属性为 true 时，会禁用下拉列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3QtbmFtZS5odG1s&#34;&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义下拉列表的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3QtcmVxdWlyZWQuaHRtbA==&#34;&gt;required&lt;/span&gt;&lt;strong&gt;New&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;required&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定用户在提交表单前必须选择一个下拉列表中的选项。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3Qtc2l6ZS5odG1s&#34;&gt;size&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;number&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定下拉列表中可见选项的数目。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;ltoptiongt主要属性如下&#34;&gt;&lt;a href=&#34;#lt-option-gt-主要属性如下&#34; class=&#34;headerlink&#34; title=&#34;&amp;lt;option&amp;gt;主要属性如下&#34;&gt;&lt;/a&gt;&lt;code&gt;&amp;lt;option&amp;gt;&lt;/code&gt;主要属性如下&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vcHRpb24tZGlzYWJsZWQuaHRtbA==&#34;&gt;disabled&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定此选项应在首次加载时被禁用。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vcHRpb24tc2VsZWN0ZWQuaHRtbA==&#34;&gt;selected&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;selected&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定选项（在首次显示在列表中时）表现为选中状态。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vcHRpb24tdmFsdWUuaHRtbA==&#34;&gt;value&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;定义送往服务器的选项值。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;84-lttextareagt&#34;&gt;&lt;a href=&#34;#8-4-lt-textarea-gt&#34; class=&#34;headerlink&#34; title=&#34;8.4 &amp;lt;textarea&amp;gt;&#34;&gt;&lt;/a&gt;8.4 &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; 标签定义一个&lt;strong&gt;多行&lt;/strong&gt;的文本输入控件。&lt;/p&gt;
&lt;p&gt;和&lt;code&gt;&amp;lt;input type=&amp;quot;text&amp;quot;&amp;gt;&lt;/code&gt;不同，&lt;code&gt;textarea&lt;/code&gt;一般用来接收整段的文字&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;textarea&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rows&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;10&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;cols&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;30&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
我是一个文本框。
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;textarea&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521145011381.png&#34; alt=&#34;image-20210521145011381&#34;&gt;&lt;/p&gt;
&lt;p&gt;其主要属性如下：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;属性&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;值&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1hdXRvZm9jdXMuaHRtbA==&#34;&gt;autofocus&lt;/span&gt;&lt;strong&gt;New&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;autofocus&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定当页面加载时，文本区域自动获得焦点。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1yb3dzLmh0bWw=&#34;&gt;rows&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;number&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定文本区域内可见的行数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1jb2xzLmh0bWw=&#34;&gt;cols&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;number&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定文本区域内可见的宽度。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1kaXNhYmxlZC5odG1s&#34;&gt;disabled&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;disabled&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定禁用文本区域。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1tYXhsZW5ndGguaHRtbA==&#34;&gt;maxlength&lt;/span&gt;&lt;strong&gt;New&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;number&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定文本区域允许的最大字符数。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1uYW1lLmh0bWw=&#34;&gt;name&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定文本区域的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1wbGFjZWhvbGRlci5odG1s&#34;&gt;placeholder&lt;/span&gt;&lt;strong&gt;New&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;&lt;em&gt;text&lt;/em&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定一个简短的提示，描述文本区域期望的输入值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1yZWFkb25seS5odG1s&#34;&gt;readonly&lt;/span&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;readonly&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定文本区域为只读。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1yZXF1aXJlZC5odG1s&#34;&gt;required&lt;/span&gt;&lt;strong&gt;New&lt;/strong&gt;&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;required&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;规定文本区域是必需的/必填的。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;可在CSS中设置文本框不可拉伸&lt;/p&gt;
&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;textarea&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;resize&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; none&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/*设置文本框不可拉伸*/&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;9-lttablegt表格&#34;&gt;&lt;a href=&#34;#9-lt-table-gt-表格&#34; class=&#34;headerlink&#34; title=&#34;9. &amp;lt;table&amp;gt;表格&#34;&gt;&lt;/a&gt;9. &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt;表格&lt;/h2&gt;&lt;p&gt;表格也可以用来页面布局&lt;/p&gt;
&lt;p&gt;表格由&lt;code&gt; &amp;lt;table&amp;gt;&lt;/code&gt; 标签来定义。每个表格均有若干行（由&lt;code&gt;&amp;lt;tr&amp;gt;&lt;/code&gt;标签定义），每行被分割为若干单元格（由 &lt;code&gt;&amp;lt;td&amp;gt;&lt;/code&gt; 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;table&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;border&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;row 1, cell 1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;row 1, cell 2&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;row 2, cell 1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
        &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;row 2, cell 2&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;td&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;tr&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;table&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521145541432.png&#34; alt=&#34;image-20210521145541432&#34;&gt;&lt;/p&gt;
&lt;/form&gt;</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="前端" scheme="https://nitgod1996.com/categories/note/%E5%89%8D%E7%AB%AF/" />
        <category term="前端" scheme="https://nitgod1996.com/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="html" scheme="https://nitgod1996.com/tags/html/" />
        <updated>2021-05-26T07:16:17.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/23/note/%E5%89%8D%E7%AB%AF/CSS/</id>
        <title>CSS笔记及参考手册</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/23/note/%E5%89%8D%E7%AB%AF/CSS/"/>
        <content type="html">&lt;h1 id=&#34;一-基本信息&#34;&gt;&lt;a href=&#34;#一、-基本信息&#34; class=&#34;headerlink&#34; title=&#34;一、 基本信息&#34;&gt;&lt;/a&gt;一、 基本信息&lt;/h1&gt;&lt;h2 id=&#34;1-语法&#34;&gt;&lt;a href=&#34;#1-语法&#34; class=&#34;headerlink&#34; title=&#34;1. 语法&#34;&gt;&lt;/a&gt;1. 语法&lt;/h2&gt;&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;选择器&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    属性名&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;属性值&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    属性名&lt;span class=&#34;token property&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;属性值&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/*注释*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-定义&#34;&gt;&lt;a href=&#34;#2-定义&#34; class=&#34;headerlink&#34; title=&#34;2. 定义&#34;&gt;&lt;/a&gt;2. 定义&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;在&lt;code&gt;html&lt;/code&gt;中以&lt;code&gt;style&lt;/code&gt;标签定义&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style language-css&#34;&gt;
        div&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;blue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;/span&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;style&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;head&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;在标签体内通过属性&lt;code&gt;style&lt;/code&gt;对单个标签定义&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;sty&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token style-attr language-css&#34;&gt;&lt;span class=&#34;token attr-name&#34;&gt; &lt;span class=&#34;token attr-name&#34;&gt;style&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&#34;&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token property&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;30&lt;/span&gt;px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;background&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; red&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;CSS&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;在外部.CSS文件定义，在&lt;code&gt;html&lt;/code&gt;中通过&lt;code&gt;link&lt;/code&gt;标签引入&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;link&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;rel&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;stylesheet&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;href&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;css/data.css&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;/&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;二-选择器&#34;&gt;&lt;a href=&#34;#二、-选择器&#34; class=&#34;headerlink&#34; title=&#34;二、 选择器&#34;&gt;&lt;/a&gt;二、 选择器&lt;/h1&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;选择器&lt;/th&gt;
&lt;th&gt;示例&lt;/th&gt;
&lt;th&gt;示例说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-class.html&#34;&gt;.&lt;em&gt;class&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;.intro&lt;/td&gt;
&lt;td&gt;选择所有class=”intro”的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-id.html&#34;&gt;#&lt;em&gt;id&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;#firstname&lt;/td&gt;
&lt;td&gt;选择所有id=”firstname”的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWFsbC5odG1s&#34;&gt;*&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;*&lt;/td&gt;
&lt;td&gt;选择所有元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWVsZW1lbnQuaHRtbA==&#34;&gt;element&lt;/span&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;p&lt;/td&gt;
&lt;td&gt;选择所有&lt;p&gt;元素&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWVsZW1lbnQtY29tbWEuaHRtbA==&#34;&gt;element,element&lt;/span&gt;&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;div,p&lt;/td&gt;
&lt;td&gt;选择所有&lt;div&gt;元素和&lt;p&gt;元素&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-element-element.html&#34;&gt;&lt;em&gt;element&lt;/em&gt; &lt;em&gt;element&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;div p&lt;/td&gt;
&lt;td&gt;选择&lt;div&gt;元素内的所有&lt;p&gt;元素&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-element-gt.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;&amp;gt;&lt;em&gt;element&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;div&amp;gt;p&lt;/td&gt;
&lt;td&gt;选择所有父级是 &lt;div&gt; 元素的 &lt;p&gt; 元素&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-element-pluss.html&#34;&gt;&lt;em&gt;element&lt;/em&gt;+&lt;em&gt;element&lt;/em&gt;&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;div+p&lt;/td&gt;
&lt;td&gt;选择所有紧接着&lt;div&gt;元素之后的&lt;p&gt;元素&lt;/p&gt;&lt;/div&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWJlZm9yZS5odG1s&#34;&gt;:before&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;p:before&lt;/td&gt;
&lt;td&gt;在每个&lt;p&gt;元素之前插入内容&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWFmdGVyLmh0bWw=&#34;&gt;:after&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;p:after&lt;/td&gt;
&lt;td&gt;在每个&lt;p&gt;元素之后插入内容&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWZpcnN0Y2hpbGQuaHRtbA==&#34;&gt;:first-child&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;p:first-child&lt;/td&gt;
&lt;td&gt;指定只有当&lt;p&gt;元素是其父级的第一个子级的样式。&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWxhc3QtY2hpbGQuaHRtbA==&#34;&gt;:last-child&lt;/span&gt;&lt;/td&gt;
&lt;td&gt;p:last-child&lt;/td&gt;
&lt;td&gt;选择每个p元素是其父级的最后一个子级。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-nth-child.html&#34;&gt;:nth-child(&lt;em&gt;n&lt;/em&gt;)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;p:nth-child(2)&lt;/td&gt;
&lt;td&gt;选择每个p元素是其父级的第二个子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-nth-last-child.html&#34;&gt;:nth-last-child(&lt;em&gt;n&lt;/em&gt;)&lt;/a&gt;&lt;/td&gt;
&lt;td&gt;p:nth-last-child(2)&lt;/td&gt;
&lt;td&gt;选择每个p元素的是其父级的第二个子元素，从最后一个子项计数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;id选择器  ：通过id属性定位容器。语法是#idName&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;id1&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;id选择器1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;      
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;#id&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; deepskyblue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; 
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;类选择器：通过class属性定位容器。语法是.className&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;h1&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;center&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;标题居中&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;h1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;&lt;span class=&#34;token number&#34;&gt;.&lt;/span&gt;center
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;text-align&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;center&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/*定位说有class=&#34;center&#34;的标签*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;font color=&#34;red&#34;&gt;注：类选择器以&lt;/font&gt;&lt;font size=&#34;20&#34; color=&#34;red&#34;&gt;&lt;strong&gt;空格&lt;/strong&gt;&lt;/font&gt;&lt;font color=&#34;red&#34;&gt;为结束符，即第一个单词匹配成功即可。&lt;/font&gt;&lt;/p&gt;
&lt;p&gt;如&lt;code&gt;class=&amp;quot;intro demo&amp;quot;&lt;/code&gt;亦可被&lt;code&gt;.intro&lt;/code&gt;选择到。但&lt;code&gt;class=&amp;quot;intro-demo&amp;quot;&lt;/code&gt;就不行&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;element选择器：通过标签定位容器。语法是直接label{}&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;div&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/*所有div*/&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;red&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
p&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/*所有p标签*/&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;white&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;*选择器：对所有容器进行&lt;code&gt;CSS&lt;/code&gt;设置，通常用于初始化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;:before/:after&lt;/code&gt;选择器：在容器前/后插入内容，相当于在该位置创建一个新的容器并插入&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;并列选择器：同时选中多个选择器，用&lt;code&gt;,&lt;/code&gt;隔开&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;子选择器：选择指定&lt;strong&gt;父标签&lt;/strong&gt;的指定&lt;strong&gt;子标签&lt;/strong&gt;，用&lt;code&gt;空格&lt;/code&gt;隔开。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;父子选择器可以不同，如&lt;code&gt;div .center #id1&lt;/code&gt;，表示&lt;code&gt;div&lt;/code&gt;子元素中&lt;code&gt;class=center&lt;/code&gt;的子元素中&lt;code&gt;id=id1&lt;/code&gt;的元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;位数选择器：匹配所有的指定特征的第n个标签。选择器:位数选择器&lt;/p&gt;
&lt;pre class=&#34; language-html&#34;&gt;&lt;code class=&#34;language-html&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;p1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;p2&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;p3&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;div&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;section&lt;/span&gt; &lt;span class=&#34;token attr-name&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token attr-value&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;box&lt;span class=&#34;token punctuation&#34;&gt;&#34;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;p1&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;p2&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;p3&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;p&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token tag&#34;&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;lt;/&lt;/span&gt;section&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&gt;&lt;/span&gt;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;&amp;lt;!--如上，同一个父标签下相同类型标识（同一标签、id、class都可）的元素，称为一个组。此例中有2个p组--&gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWZpcnN0Y2hpbGQuaHRtbA==&#34;&gt;:first-child&lt;/span&gt;：各组下的第1个标签。如&lt;code&gt;.box:first-child&lt;/code&gt;表示每个&lt;code&gt;class=&amp;#39;box&amp;#39;&lt;/code&gt;组下的第一个标签&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWxhc3QtY2hpbGQuaHRtbA==&#34;&gt;:last-child&lt;/span&gt;：最后一个标签&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-nth-child.html&#34;&gt;:nth-child(&lt;em&gt;n&lt;/em&gt;)&lt;/a&gt;：各组第n个标签&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.runoob.com/cssref/sel-nth-last-child.html&#34;&gt;:nth-last-child(&lt;em&gt;n&lt;/em&gt;)&lt;/a&gt;：各组倒数第n个标签&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三-属性&#34;&gt;&lt;a href=&#34;#三、-属性&#34; class=&#34;headerlink&#34; title=&#34;三、 属性&#34;&gt;&lt;/a&gt;三、 属性&lt;/h1&gt;&lt;p&gt;在选择器内通过属性定义样式&lt;/p&gt;
&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;#id&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;color&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; deepskyblue&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/*color便是属性*/&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-常见属性&#34;&gt;&lt;a href=&#34;#1-常见属性&#34; class=&#34;headerlink&#34; title=&#34;1. 常见属性&#34;&gt;&lt;/a&gt;1. 常见属性&lt;/h2&gt;&lt;h3 id=&#34;11-background背景&#34;&gt;&lt;a href=&#34;#1-1-background背景：&#34; class=&#34;headerlink&#34; title=&#34;1.1 background背景：&#34;&gt;&lt;/a&gt;1.1 background背景：&lt;/h3&gt;&lt;p&gt;设置容器背景（简写模式），直接在后面填写各类型参数。也可分别设置每个背景值。一般都是简写&lt;/p&gt;
&lt;p&gt;&lt;code&gt;background:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1jb2xvci5odG1s&#34;&gt;background-color&lt;/span&gt;*：背景颜色。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;yellow&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;#00ff00&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rgb(255,0,255)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1wb3NpdGlvbi5odG1s&#34;&gt;background-position&lt;/span&gt;*：背景图像的位置。以左上点定位，横轴/纵轴分别定位。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;left top&lt;/code&gt;：第一个是水平位置，&lt;code&gt;left&lt;/code&gt; &lt;code&gt;right&lt;/code&gt; &lt;code&gt;center&lt;/code&gt;。第二个是垂直位置&lt;code&gt;top&lt;/code&gt; &lt;code&gt;bottom&lt;/code&gt; &lt;code&gt;center&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;x% y%&lt;/code&gt;：水平百分比，垂直百分比。&lt;em&gt;&lt;strong&gt;相对于父容器的尺寸百分比&lt;/strong&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;xpos ypos&lt;/code&gt;：&lt;code&gt;pos&lt;/code&gt;是单位，可以是&lt;code&gt;px&lt;/code&gt;像素，也可以是&lt;code&gt;rem&lt;/code&gt;等其他单位&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inherit&lt;/code&gt;：继承自父元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1iYWNrZ3JvdW5kLXNpemUuaHRtbA==&#34;&gt;background-size&lt;/span&gt;*：背景图片的大小。也是可以&lt;code&gt;像素值&lt;/code&gt;或&lt;code&gt;百分比&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1yZXBlYXQuaHRtbA==&#34;&gt;background-repeat&lt;/span&gt;*：当背景图较小时如何重复，一般设&lt;code&gt;no-repeat&lt;/code&gt;不重复&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1pbWFnZS5odG1s&#34;&gt;background-image&lt;/span&gt;&lt;/em&gt;    指定要使用的&lt;strong&gt;一个或多个&lt;/strong&gt;背景图像。&lt;code&gt;url(图片的路径)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1iYWNrZ3JvdW5kLW9yaWdpbi5odG1s&#34;&gt;background-origin&lt;/span&gt;*：&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1iYWNrZ3JvdW5kLWNsaXAuaHRtbA==&#34;&gt;background-clip&lt;/span&gt;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1hdHRhY2htZW50Lmh0bWw=&#34;&gt;background-attachment&lt;/span&gt;&lt;/em&gt; 设置背景图像是否固定或者随着页面的其余部分滚动。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-text文本&#34;&gt;&lt;a href=&#34;#1-2-text文本：&#34; class=&#34;headerlink&#34; title=&#34;1.2 text文本：&#34;&gt;&lt;/a&gt;1.2 text文本：&lt;/h3&gt;&lt;p&gt;文本属性，主要用于设置段落信息。如对齐方式、行高等&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC1kaXJlY3Rpb24uaHRtbA==&#34;&gt;direction&lt;/span&gt;：文本方向&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ltr&lt;/code&gt;    默认。文本方向从左到右。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rtl&lt;/code&gt;    文本方向从右到左。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC1jb2xvci5odG1s&#34;&gt;color&lt;/span&gt;：文本颜色&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZGltLWxpbmUtaGVpZ2h0Lmh0bWw=&#34;&gt;line-height&lt;/span&gt;：行高&lt;ul&gt;
&lt;li&gt;&lt;code&gt;number&lt;/code&gt;：设置数字，此数字会与当前的字体尺寸相乘来设置行间距。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt;：设置固定的行间距。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;：基于当前字体尺寸的百分比行间距。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC10ZXh0LWFsaWduLmh0bWw=&#34;&gt;text-align&lt;/span&gt;：对齐方式。&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;、&lt;code&gt;center&lt;/code&gt;、&lt;code&gt;justify&lt;/code&gt;（两端对齐）&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItcG9zLXZlcnRpY2FsLWFsaWduLmh0bWw=&#34;&gt;vertical-align&lt;/span&gt;：垂直对齐方式&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC13b3JkLXNwYWNpbmcuaHRtbA==&#34;&gt;word-spacing&lt;/span&gt;：字间距&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXRleHQuaHRtbA==&#34;&gt;其他&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-font字体&#34;&gt;&lt;a href=&#34;#1-3-font字体：&#34; class=&#34;headerlink&#34; title=&#34;1.3 font字体：&#34;&gt;&lt;/a&gt;1.3 font字体：&lt;/h3&gt;&lt;p&gt;设置字体。字体样式、大小、颜色等。简写如&lt;code&gt; font:15px arial,sans-serif;&lt;/code&gt;，亦可单独设置&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC1mb250LXNpemUuaHRtbA==&#34;&gt;font-size&lt;/span&gt;：字体大小&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC1mb250LXN0eWxlLmh0bWw=&#34;&gt;font-style&lt;/span&gt;：字体样式。&lt;ul&gt;
&lt;li&gt;&lt;code&gt;italic&lt;/code&gt;    斜体，表示使用文字的斜体。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oblique&lt;/code&gt;    倾斜，表示让没有斜体属性的文字倾斜。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC13ZWlnaHQuaHRtbA==&#34;&gt;font-weight&lt;/span&gt;：字体粗细&lt;ul&gt;
&lt;li&gt;&lt;code&gt;bold&lt;/code&gt;    定义粗体字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;bolder&lt;/code&gt;    定义更粗的字符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;lighter&lt;/code&gt;    定义更细的字符。&lt;/li&gt;
&lt;li&gt;直接数字定义&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC1mb250LWZhbWlseS5odG1s&#34;&gt;font-family&lt;/span&gt;：字体类型，如&lt;code&gt;Times New Roman&lt;/code&gt;，也可导入外部字体，需要先用&lt;code&gt;@font-face &lt;/code&gt;定义&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;自定义字体，一般在网上下载好字体文件，引入即可。如下：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;&lt;span class=&#34;token atrule&#34;&gt;&lt;span class=&#34;token rule&#34;&gt;@font-face&lt;/span&gt; &amp;amp;#123&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;font-family&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; electronicFont&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token property&#34;&gt;src&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token url&#34;&gt;url(/font/DS-DIGIT.TTF)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14-列表ul-lo-li属性&#34;&gt;&lt;a href=&#34;#1-4-列表ul、lo、li属性：&#34; class=&#34;headerlink&#34; title=&#34;1.4 列表ul、lo、li属性：&#34;&gt;&lt;/a&gt;1.4 列表&lt;code&gt;ul&lt;/code&gt;、&lt;code&gt;lo&lt;/code&gt;、&lt;code&gt;li&lt;/code&gt;属性：&lt;/h3&gt;&lt;p&gt;用于设置列表的属性，一般是列表项标志&lt;code&gt;● 1.&lt;/code&gt;这种&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS5odG1s&#34;&gt;list-style&lt;/span&gt;：简写&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS10eXBlLmh0bWw=&#34;&gt;list-style-type&lt;/span&gt;：列表项标志类型&lt;ul&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;：没有标志&lt;/li&gt;
&lt;li&gt;&lt;code&gt;disc&lt;/code&gt;    默认。标记是实心圆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;circle&lt;/code&gt;    标记是空心圆。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS10eXBlLmh0bWw=&#34;&gt;更多&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS1pbWFnZS5odG1s&#34;&gt;list-style-image&lt;/span&gt;：用图像作列表项标志&lt;code&gt;url(&amp;#39;sqpurple.gif&amp;#39;)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS1wb3NpdGlvbi5odG1s&#34;&gt;list-style-position&lt;/span&gt;：列表项标志的位置&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inside&lt;/code&gt;    列表项目标记放在文本内。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;outside&lt;/code&gt;    默认值。位于文本外（左侧）。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;15-border边框&#34;&gt;&lt;a href=&#34;#1-5-border边框：&#34; class=&#34;headerlink&#34; title=&#34;1.5 border边框：&#34;&gt;&lt;/a&gt;1.5 border边框：&lt;/h3&gt;&lt;p&gt;用于设置容器的边框线&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLmh0bWw=&#34;&gt;border&lt;/span&gt;：简写属性，用于把针对四个边的属性设置在一个声明。如&lt;code&gt;border:5px solid red;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLXN0eWxlLmh0bWw=&#34;&gt;border-style&lt;/span&gt;：设置线的样式，此属性可以有一到四个值。分别按↑、→、↓、←的顺序&lt;ul&gt;
&lt;li&gt;&lt;code&gt;dotted&lt;/code&gt;    定义点状&lt;/li&gt;
&lt;li&gt;&lt;code&gt;dashed&lt;/code&gt;    定义虚线&lt;/li&gt;
&lt;li&gt;&lt;code&gt;solid&lt;/code&gt;    定义实线。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;double&lt;/code&gt;    定义双线&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;border-style:dotted solid double dashed;&lt;/strong&gt;&lt;ul&gt;
&lt;li&gt;上边框是点状&lt;/li&gt;
&lt;li&gt;右边框是实线&lt;/li&gt;
&lt;li&gt;下边框是双线&lt;/li&gt;
&lt;li&gt;左边框是虚线&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLXdpZHRoLmh0bWw=&#34;&gt;border-width&lt;/span&gt;：边框线宽&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLWNvbG9yLmh0bWw=&#34;&gt;border-color&lt;/span&gt;：颜色&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLWJvdHRvbS5odG1s&#34;&gt;border-bottom&lt;/span&gt;：单独设置下边框的简写&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLWJvdHRvbS1jb2xvci5odG1s&#34;&gt;border-bottom-color&lt;/span&gt;：下边框颜色…&lt;/li&gt;
&lt;li&gt;各边框都可各自定义&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;16-margin外边距padding内边距&#34;&gt;&lt;a href=&#34;#1-6-margin外边距-padding内边距：&#34; class=&#34;headerlink&#34; title=&#34;1.6 margin外边距/padding内边距：&#34;&gt;&lt;/a&gt;1.6 margin外边距/padding内边距：&lt;/h3&gt;&lt;p&gt;​    margin也称页边距，与父元素的间距。padding是与子元素的间距&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://www.runoob.com/wp-content/uploads/2013/08/VlwVi.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbWFyZ2luLmh0bWw=&#34;&gt;margin&lt;/span&gt;：同时设置四个间距&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;    浏览器计算下外边距。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt;    比如像素、厘米等。默认值是 0px。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;    基于父元素的宽度的百分比&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inherit&lt;/code&gt;    继承父元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;margin-bottom    设置元素的下外边距。&lt;/li&gt;
&lt;li&gt;margin-left    设置元素的左外边距。&lt;/li&gt;
&lt;li&gt;margin-right    设置元素的右外边距。&lt;/li&gt;
&lt;li&gt;margin-top    设置元素的上外边距。&lt;/li&gt;
&lt;li&gt;padding：同上&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;17-display显示&#34;&gt;&lt;a href=&#34;#1-7-display显示：&#34; class=&#34;headerlink&#34; title=&#34;1.7 display显示：&#34;&gt;&lt;/a&gt;1.7 display显示：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;display&lt;/code&gt;通常用于隐藏/按行显示/按列显示&lt;ul&gt;
&lt;li&gt;&lt;code&gt;none&lt;/code&gt;：隐藏所有组件。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline&lt;/code&gt;：显示为内联元素，元素前后没有换行符。&lt;strong&gt;不识别宽高设置&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;block&lt;/code&gt;：显示为块级元素，此元素前后会带有换行符。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inline-block&lt;/code&gt;：显示为行内块元素&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;注意：当把父元素设置为&lt;code&gt;inline&lt;/code&gt;，不会对子元素产生影响。所以如果父元素是&lt;code&gt;inline&lt;/code&gt;而子元素是&lt;code&gt;block&lt;/code&gt;，那么仍会换行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visibility&lt;/code&gt;也有隐藏功能&lt;ul&gt;
&lt;li&gt;&lt;code&gt;hidden&lt;/code&gt;：隐藏组件，但该隐藏仅仅隐藏显示，空间布局是不变的（即隐藏后仍有一块空白）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;此处首先先明确一下内联元素（inline element）和块元素（block element）的概念。（一条标签如&lt;div&gt;即是一个元素）&lt;/div&gt;&lt;/p&gt;
&lt;h4 id=&#34;171-内联元素&#34;&gt;&lt;a href=&#34;#1-7-1-内联元素&#34; class=&#34;headerlink&#34; title=&#34;1.7.1 内联元素&#34;&gt;&lt;/a&gt;1.7.1 内联元素&lt;/h4&gt;&lt;p&gt;​        内联元素又名行内元素，和其对应的是块元素(block element)，都是html规范中的概念。内联元素的显示，为了帮助理解，可以形象的称为“文本模式”，即&lt;strong&gt;一个挨着一个，都在同一行按从左至右的顺序显示，不单独占一行&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;任何不是块级元素的可见元素都是内联元素。其表现的特性是“行布局”形式，这里的“行布局”的意思就是说其表现形式始终以行进行显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;内联元素有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;和其他元素都在一行上，遇到父级元素边界会自动换行&lt;/li&gt;
&lt;li&gt;高、行高以及内外边距都&lt;strong&gt;不可以改变&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;宽度与内容一样宽，且&lt;strong&gt;不可改变&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;行内元素只能容纳文本或者其他行内元素&lt;/li&gt;
&lt;li&gt;对于行内元素，需要注意的是：设置宽度width无效，设置高度无效，可以通过设置line-height来设置，设置margin只有左右有效，上下无效，设置padding只有左右有效，上下无效&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常见的内联元素有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a – 锚点&lt;/li&gt;
&lt;li&gt;abbr – 缩写&lt;/li&gt;
&lt;li&gt;acronym – 首字&lt;/li&gt;
&lt;li&gt;b – 粗体(不推荐)&lt;/li&gt;
&lt;li&gt;bdo – bidi override&lt;/li&gt;
&lt;li&gt;big – 大字体&lt;/li&gt;
&lt;li&gt;br – 换行&lt;/li&gt;
&lt;li&gt;cite – 引用&lt;/li&gt;
&lt;li&gt;code – 计算机代码(在引用源码的时候需要)&lt;/li&gt;
&lt;li&gt;dfn – 定义字段&lt;/li&gt;
&lt;li&gt;em – 强调&lt;/li&gt;
&lt;li&gt;font – 字体设定(不推荐)&lt;/li&gt;
&lt;li&gt;i – 斜体&lt;/li&gt;
&lt;li&gt;img – 图片&lt;/li&gt;
&lt;li&gt;input – 输入框&lt;/li&gt;
&lt;li&gt;kbd – 定义键盘文本&lt;/li&gt;
&lt;li&gt;label – 表格标签&lt;/li&gt;
&lt;li&gt;q – 短引用&lt;/li&gt;
&lt;li&gt;s – 中划线(不推荐)&lt;/li&gt;
&lt;li&gt;samp – 定义范例计算机代码&lt;/li&gt;
&lt;li&gt;select – 项目选择&lt;/li&gt;
&lt;li&gt;small – 小字体文本&lt;/li&gt;
&lt;li&gt;span – 常用内联容器，定义文本内区块&lt;/li&gt;
&lt;li&gt;strike – 中划线&lt;/li&gt;
&lt;li&gt;strong – 粗体强调&lt;/li&gt;
&lt;li&gt;sub – 下标&lt;/li&gt;
&lt;li&gt;sup – 上标&lt;/li&gt;
&lt;li&gt;textarea – 多行文本输入框&lt;/li&gt;
&lt;li&gt;tt – 电传文本&lt;/li&gt;
&lt;li&gt;u – 下划线&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;172-块元素&#34;&gt;&lt;a href=&#34;#1-7-2-块元素&#34; class=&#34;headerlink&#34; title=&#34;1.7.2 块元素&#34;&gt;&lt;/a&gt;1.7.2 块元素&lt;/h4&gt;&lt;p&gt;块元素和内联元素的基本差异是块元素一般都从新行开始，相邻的块级元素将会在不同行显示。&lt;/p&gt;
&lt;p&gt;块级元素的特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;独霸一行，总是在新行上开始&lt;/li&gt;
&lt;li&gt;宽度缺省是它父级元素的100%，除非设定一个宽度&lt;/li&gt;
&lt;li&gt;高度、行高、外边距、内边距都可以设置&lt;/li&gt;
&lt;li&gt;可以容纳其他内联元素或者其他块元素&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以下是常见的块级元素：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;address – 地址&lt;/li&gt;
&lt;li&gt;blockquote – 块引用&lt;/li&gt;
&lt;li&gt;center – 举中对齐块&lt;/li&gt;
&lt;li&gt;dir – 目录列表&lt;/li&gt;
&lt;li&gt;div – 常用块级容易，也是CSS layout的主要标签&lt;/li&gt;
&lt;li&gt;dl – 定义列表&lt;/li&gt;
&lt;li&gt;fieldset – form控制组&lt;/li&gt;
&lt;li&gt;form – 交互表单&lt;/li&gt;
&lt;li&gt;h1~h6 – 标题&lt;/li&gt;
&lt;li&gt;hr – 水平分隔线&lt;/li&gt;
&lt;li&gt;isindex – input prompt&lt;/li&gt;
&lt;li&gt;menu – 菜单列表&lt;/li&gt;
&lt;li&gt;noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容&lt;/li&gt;
&lt;li&gt;noscript – 可选脚本内容（对于不支持script的浏览器显示此内容）&lt;/li&gt;
&lt;li&gt;ol – 有序表单&lt;/li&gt;
&lt;li&gt;p – 段落&lt;/li&gt;
&lt;li&gt;pre – 格式化文本&lt;/li&gt;
&lt;li&gt;table – 表格&lt;/li&gt;
&lt;li&gt;ul – 无序列表&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;173-行内块元素&#34;&gt;&lt;a href=&#34;#1-7-3-行内块元素&#34; class=&#34;headerlink&#34; title=&#34;1.7.3 行内块元素&#34;&gt;&lt;/a&gt;1.7.3 行内块元素&lt;/h4&gt;&lt;p&gt;inline-block。整合了块元素和内联元素的优点，有以下特点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;元素排列在一行&lt;/li&gt;
&lt;li&gt;宽度默认由内容决定&lt;/li&gt;
&lt;li&gt;元素间默认有间距&lt;/li&gt;
&lt;li&gt;支持宽高、外边距、内边距的所有样式的设置&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;18-position定位&#34;&gt;&lt;a href=&#34;#1-8-position定位：&#34; class=&#34;headerlink&#34; title=&#34;1.8 position定位：&#34;&gt;&lt;/a&gt;1.8 position定位：&lt;/h3&gt;&lt;p&gt;​        指定了元素的定位类型。通常与&lt;code&gt;left&lt;/code&gt;等定位属性配合使用&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItY2xhc3MtcG9zaXRpb24uaHRtbA==&#34;&gt;position&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tc3RhdGlj&#34;&gt;static&lt;/span&gt;：无特殊定位，遵循正常文档流，&lt;strong&gt;忽略left、top、right、bottom和z-index属性&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tcmVsYXRpdmU=&#34;&gt;relative&lt;/span&gt;：相对于正常位置(static)移动，&lt;code&gt;left&lt;/code&gt;等属性设置的是&lt;strong&gt;移动值&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tZml4ZWQ=&#34;&gt;fixed&lt;/span&gt;：相对浏览器窗口固定，即使窗口滚动也不会动。&lt;strong&gt;适用于做浮窗&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tYWJzb2x1dGU=&#34;&gt;absolute&lt;/span&gt;：绝对定位，其实是相对于&lt;strong&gt;父元素&lt;/strong&gt;的坐标，&lt;code&gt;left&lt;/code&gt;等属性设置的是&lt;strong&gt;坐标值&lt;/strong&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置了absolute的元素如果存在有祖先元素设置了position属性为relative或者absolute，则这时元素的定位对象为此已设置position属性的祖先元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果并没有设置了position属性的祖先元素，则此时相对于body进行定位。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tc3RpY2t5&#34;&gt;sticky&lt;/span&gt;：粘性定位，设置一个阈值，相对于浏览器窗口不会超出此阈值。可见&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tc3RpY2t5&#34;&gt;示例&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;left&lt;/code&gt;、&lt;code&gt;right&lt;/code&gt;、&lt;code&gt;bottom&lt;/code&gt;、&lt;code&gt;top&lt;/code&gt;：设置距左、右、下、上的距离&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;length&lt;/code&gt;：&lt;code&gt;px&lt;/code&gt;或&lt;code&gt;rem&lt;/code&gt;或其他&lt;/li&gt;
&lt;li&gt;&lt;code&gt;%&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inherit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItcG9zLXotaW5kZXguaHRtbA==&#34;&gt;z-index&lt;/span&gt;：堆叠顺序。最大的在最上面&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;19-overflow溢出设置&#34;&gt;&lt;a href=&#34;#1-9-overflow溢出设置：&#34; class=&#34;headerlink&#34; title=&#34;1.9 overflow溢出设置：&#34;&gt;&lt;/a&gt;1.9 overflow溢出设置：&lt;/h3&gt;&lt;p&gt;​    定义了当元素溢出容器时如何显示，如&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/23/note/%E5%89%8D%E7%AB%AF/CSS/Users\Administrator.DESKTOP-R00PN9V\AppData\Roaming\Typora\typora-user-images\image-20210429162249569.png&#34; alt=&#34;image-20210429162249569&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;overflow&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;visible&lt;/code&gt;    默认值。内容不会被修剪，会呈现在&lt;strong&gt;元素框之外&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;hidden&lt;/code&gt;    内容会被修剪，并且其余内容是&lt;strong&gt;不可见&lt;/strong&gt;的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;scroll&lt;/code&gt;    内容会被修剪，但是浏览器会显示&lt;strong&gt;滚动条&lt;/strong&gt;以便查看其余的内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;auto&lt;/code&gt;    如果内容被修剪，则浏览器会显示&lt;strong&gt;滚动条&lt;/strong&gt;以便查看其余的内容。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;inherit&lt;/code&gt;    继承&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;2-不常见属性&#34;&gt;&lt;a href=&#34;#2-不常见属性&#34; class=&#34;headerlink&#34; title=&#34;2. 不常见属性&#34;&gt;&lt;/a&gt;2. 不常见属性&lt;/h2&gt;&lt;h5 id=&#34;动画&#34;&gt;&lt;a href=&#34;#动画：&#34; class=&#34;headerlink&#34; title=&#34;动画：&#34;&gt;&lt;/a&gt;动画：&lt;/h5&gt;&lt;p&gt;​    用于设置元素动画。需要先定义动画规则&lt;code&gt;@keyframes&lt;/code&gt;（关键帧）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24uaHRtbA==&#34;&gt;animation&lt;/span&gt;：简写，语法如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;animation: name duration timing-function delay iteration-count direction fill-mode play-state;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;示例：&lt;code&gt;animation:mymove 5s infinite;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tbmFtZS5odG1s&#34;&gt;animation-name&lt;/span&gt;*：指定要绑定到选择器的动画名称&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tZHVyYXRpb24uaHRtbA==&#34;&gt;animation-duration&lt;/span&gt;*：动画指定需要多少秒或毫秒完成。即一轮动画多少秒，0表示不执行动画&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uLmh0bWw=&#34;&gt;animation-timing-function&lt;/span&gt;*：设置动画将如何完成一个周期&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;linear&lt;/code&gt;    动画从头到尾的速度是相同的。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease&lt;/code&gt;    默认。动画以低速开始，然后加快，在结束前变慢。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-in&lt;/code&gt;    动画以低速开始。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-out&lt;/code&gt;    动画以低速结束。    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;ease-in-out&lt;/code&gt;    动画以低速开始和结束。    &lt;/li&gt;
&lt;li&gt;&lt;code&gt;cubic-bezier(n,n,n,n)&lt;/code&gt;    自定义。在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tZGVsYXkuaHRtbA==&#34;&gt;animation-delay&lt;/span&gt;*：设置动画在启动前的延迟间隔。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;*&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50Lmh0bWw=&#34;&gt;animation-iteration-count&lt;/span&gt;*：播放次数&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;n&lt;/code&gt;    一个数字，定义应该播放多少次动画&lt;/li&gt;
&lt;li&gt;&lt;code&gt;infinite&lt;/code&gt;    无限循环&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24uaHRtbA==&#34;&gt;更多&lt;/span&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;定义动画规则&lt;code&gt;@keyframes&lt;/code&gt;（关键帧）&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如下&lt;/p&gt;
&lt;pre class=&#34; language-css&#34;&gt;&lt;code class=&#34;language-css&#34;&gt;@keyframes mymove
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
from &amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
to &amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

@-webkit-keyframes mymove &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;/* Safari and Chrome */&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
from &amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
to &amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token property&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;200&lt;/span&gt;px&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&amp;amp;&lt;span class=&#34;token hexcode&#34;&gt;#125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="前端" scheme="https://nitgod1996.com/categories/note/%E5%89%8D%E7%AB%AF/" />
        <category term="前端" scheme="https://nitgod1996.com/tags/%E5%89%8D%E7%AB%AF/" />
        <category term="CSS" scheme="https://nitgod1996.com/tags/CSS/" />
        <updated>2021-05-23T07:26:38.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/20/note/%E9%9A%8F%E7%AC%94/%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0docker/</id>
        <title>docker随手记</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/20/note/%E9%9A%8F%E7%AC%94/%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0docker/"/>
        <content type="html">&lt;ul&gt;
&lt;li&gt;&lt;p&gt;docker的构想是要实现build，ship and run any app，anywhere，即通过对应用的&lt;strong&gt;封装、分发、部署、运行&lt;/strong&gt;生命周期进行&lt;strong&gt;管理&lt;/strong&gt;，达到应用组件级别的&lt;strong&gt;“一次封装，到处运行”&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用组件：web应用、一个编译环境、数据库平台服务、操作系统、集群&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容器：装载应用组件和运行环境&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;镜像：相当于文件系统。镜像和容器的关系就像面向对象中类和实例一样。容器是镜像运行时的实体。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;镜像指的其实一般就是下载下来的软件镜像。如Ubuntu镜像、Redis镜像等&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;仓库：docker集中存放镜像文件的场所&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;仓库注册服务器：存放仓库的地方&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker 使用客户端-服务器 (C/S) 架构模式，使用&lt;strong&gt;远程API&lt;/strong&gt;来管理和创建Docker容器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;概念&lt;/th&gt;
&lt;th align=&#34;left&#34;&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker 镜像(Images)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker 容器(Container)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;容器是独立运行的一个或一组应用，是镜像运行时的实体。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker 客户端(Client)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Docker 客户端通过命令行或者其他工具使用 Docker SDK (&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZGV2ZWxvcC9zZGsv&#34;&gt;https://docs.docker.com/develop/sdk/&lt;/span&gt;) 与 Docker 的守护进程通信。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker 主机(Host)&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker Registry&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=&#34;&gt;https://hub.docker.com&lt;/span&gt;) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 &lt;strong&gt;&amp;lt;仓库名&amp;gt;:&amp;lt;标签&amp;gt;&lt;/strong&gt; 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 &lt;strong&gt;latest&lt;/strong&gt; 作为默认标签。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Docker Machine&lt;/td&gt;
&lt;td align=&#34;left&#34;&gt;Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/20/note/%E9%9A%8F%E7%AC%94/%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0docker/%E6%97%A0%E6%A0%87%E9%A2%98.png&#34; alt=&#34;无标题&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;容器是完全使用沙箱机制，相互之间不会有任何接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;沙箱&lt;/strong&gt;就是一个限制应用程序对系统资源的访问的运行环境。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;沙盒&lt;/strong&gt;（英语：sandbox，又译为&lt;strong&gt;沙箱&lt;/strong&gt;），计算机专业术语，在计算机安全领域中是一种&lt;strong&gt;安全机制&lt;/strong&gt;，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker支持将应用打包进一个可以移植的容器中，重新定义了应用开发，测试，部署上线的过程，核心理念就是 Build once, Run anywhere。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;传统部署方式：安装指定版本的linux系统（ubuntu、centos、debian）-&amp;gt; 安装服务器程序（安装所需的各种依赖包）-&amp;gt; 修改配置 -&amp;gt; 运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker部署方式：安装任何linux系统 -&amp;gt; 复制已有镜像（或者自动构建编译）-&amp;gt; 运行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;docker目前只能运行于&lt;strong&gt;linux&lt;/strong&gt;的64位系统之上（能运行32位系统也是做过处理的，降低效率），官方提供了运行于windows上的工具，但是这个工具其实是集成一个微型的virtubox虚拟机，说白了还是得需要linux系统。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;直接用docker pull redis-server就可以拉下来一个redis服务器的镜像，放到自己的docker里就能用了，不用自己解决依赖、安装redis。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;好多开源工具都有docker镜像，这就使得用户只需要下载使用就行，完全省去了处理软件依赖、缺少库文件、安装部署等环节。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Docker适合微服务，一般一个docker容器只跑一个进程，连ssh服务都不要开启；像数据库这种大且重要的服务最好别用docker来跑，快慢放一边，万一有个bug就麻烦了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;镜像自身是只读的。容器从镜像启动的时候，会在镜像的最上层创建一个可写层&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数据卷：数据卷是一个可供容器使用的特殊目录，它将主机操作系统目录直接映射进容器&lt;/p&gt;
&lt;p&gt;作用：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 1. 容器数据持久化
 2. 外部机器和容器间接通信
 3. 容器之间数据交换
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;1-镜像&#34;&gt;&lt;a href=&#34;#1-镜像&#34; class=&#34;headerlink&#34; title=&#34;1. 镜像&#34;&gt;&lt;/a&gt;1. 镜像&lt;/h2&gt;&lt;h1 id=&#34;二-自己的理解&#34;&gt;&lt;a href=&#34;#二、自己的理解&#34; class=&#34;headerlink&#34; title=&#34;二、自己的理解&#34;&gt;&lt;/a&gt;二、自己的理解&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;docker就是把软件和运行环境一起打包&lt;/li&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="随笔" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/" />
        <updated>2021-05-20T07:32:23.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/18/note/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</id>
        <title>java基础语法及特性</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/18/note/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
        <content type="html">&lt;h1 id=&#34;一-java基础知识&#34;&gt;&lt;a href=&#34;#一、-Java基础知识&#34; class=&#34;headerlink&#34; title=&#34;一、 Java基础知识&#34;&gt;&lt;/a&gt;一、 Java基础知识&lt;/h1&gt;&lt;h2 id=&#34;1-java与c异同&#34;&gt;&lt;a href=&#34;#1-Java与C-异同&#34; class=&#34;headerlink&#34; title=&#34;1. Java与C++异同&#34;&gt;&lt;/a&gt;1. Java与C++异同&lt;/h2&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;&lt;/th&gt;
&lt;th&gt;Java&lt;/th&gt;
&lt;th&gt;C++&lt;/th&gt;
&lt;th&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;常  量&lt;/td&gt;
&lt;td&gt;final&lt;/td&gt;
&lt;td&gt;const&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;布尔值&lt;/td&gt;
&lt;td&gt;boolean：不与0/1或者指针联系&lt;/td&gt;
&lt;td&gt;bool：0/null表示false&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;判断相等&lt;/td&gt;
&lt;td&gt;.equals()&lt;/td&gt;
&lt;td&gt;==&lt;/td&gt;
&lt;td&gt;C++大多类重载了==  而Java中则是重载.equals()方法&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;数组&lt;/td&gt;
&lt;td&gt;长度可以是变量  int[]a=new int [n];&lt;/td&gt;
&lt;td&gt;长度只能是常数  int a[100];&lt;/td&gt;
&lt;td&gt;实际上Java类似C++中用指针创建    int* a; a=new int [n];&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;整型最值&lt;/td&gt;
&lt;td&gt;Integer.&lt;em&gt;MAX_VALUE&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;INT_MAX&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;泛型&lt;/td&gt;
&lt;td&gt;集合要用Integer装箱&lt;/td&gt;
&lt;td&gt;直接vector&lt;int&gt;&lt;/int&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;2-java编程前置知识&#34;&gt;&lt;a href=&#34;#2-Java编程前置知识&#34; class=&#34;headerlink&#34; title=&#34;2. Java编程前置知识&#34;&gt;&lt;/a&gt;2. Java编程前置知识&lt;/h2&gt;&lt;h3 id=&#34;21-jdkjava-development-kitjava开发工具包&#34;&gt;&lt;a href=&#34;#2-1-jdk–java-development-kit：Java开发工具包&#34; class=&#34;headerlink&#34; title=&#34;2.1 jdk–java development kit：Java开发工具包&#34;&gt;&lt;/a&gt;2.1 jdk–java development kit：Java开发工具包&lt;/h3&gt;&lt;p&gt;Java开发工具包，定义了Java各版本语法及功能，以及Java的编译运行环境（javac、jvm、jre等）。&lt;/p&gt;
&lt;p&gt;建立项目前需要导入/选择要使用的jdk&lt;/p&gt;
&lt;p&gt;运行Java时，jdk真正起作用的主要是以下4个文件夹：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;bin：最主要的是编译器(javac.exe)&lt;/li&gt;
&lt;li&gt;include：java和JVM交互用的头文件&lt;/li&gt;
&lt;li&gt;lib：类库&lt;/li&gt;
&lt;li&gt;jre：java运行环境&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;22-jvmjava-virtual-machinejava虚拟机&#34;&gt;&lt;a href=&#34;#2-2-jvm–java-virtual-machine：Java虚拟机&#34; class=&#34;headerlink&#34; title=&#34;2.2 jvm–java virtual machine：Java虚拟机&#34;&gt;&lt;/a&gt;2.2 jvm–java virtual machine：Java虚拟机&lt;/h3&gt;&lt;p&gt;用于运行Java程序，Java文件运行的步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;写好的.java文件经过javac编译器编译后生成.class类文件（也叫字节码文件）&lt;/li&gt;
&lt;li&gt;再通过jvm运行.class文件启动程序&lt;/li&gt;
&lt;li&gt;jvm通过分析.class的字节码对操作系统传达命令&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;23-jrejava-runtime-environmentjava运行环境&#34;&gt;&lt;a href=&#34;#2-3-jre–java-runtime-environment：Java运行环境&#34; class=&#34;headerlink&#34; title=&#34;2.3 jre–java runtime environment：Java运行环境&#34;&gt;&lt;/a&gt;2.3 jre–java runtime environment：Java运行环境&lt;/h3&gt;&lt;p&gt;​        光有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的&lt;strong&gt;类库lib（library）&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;​        在JDK的安装目录里你可以找到jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。&lt;/p&gt;
&lt;p&gt;​        所以，在你写完java程序编译成.class之后，你可以把这个.class文件和jre一起打包发给朋友，这样你的朋友就可以运行你写程序了。（jre里有运行.class的java.exe）&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;此处环境主要是运行所需的jar等各种条件&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;3-java运行时内存&#34;&gt;&lt;a href=&#34;#3-Java运行时内存&#34; class=&#34;headerlink&#34; title=&#34;3. Java运行时内存&#34;&gt;&lt;/a&gt;3. Java运行时内存&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;方法区：存放各种类的方法信息，主要是存.class文件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;堆（长时存放）：用于存放程序运行时产生的各种临时变量信息（主要是成员变量本身，和成员方法在方法区中的地址）。在new对象时建立，在set时写入，get时读出。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;栈（临时存放）：存放局部变量信息。&lt;/p&gt;
&lt;p&gt;堆–背包    方法区–口袋    栈–操作台&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-基础知识&#34;&gt;&lt;a href=&#34;#4-基础知识&#34; class=&#34;headerlink&#34; title=&#34;4. 基础知识&#34;&gt;&lt;/a&gt;4. 基础知识&lt;/h2&gt;&lt;h3 id=&#34;41-基础类型与引用类型&#34;&gt;&lt;a href=&#34;#4-1-基础类型与引用类型&#34; class=&#34;headerlink&#34; title=&#34;4.1 基础类型与引用类型&#34;&gt;&lt;/a&gt;4.1 基础类型与引用类型&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;基础类型&lt;/th&gt;
&lt;th&gt;引用类型&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;byte&lt;/td&gt;
&lt;td&gt;Byte&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;short&lt;/td&gt;
&lt;td&gt;Short&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;int&lt;/td&gt;
&lt;td&gt;Integer&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;double&lt;/td&gt;
&lt;td&gt;Double&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;long&lt;/td&gt;
&lt;td&gt;Long&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;float&lt;/td&gt;
&lt;td&gt;Float&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;boolean&lt;/td&gt;
&lt;td&gt;Boolean&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;char&lt;/td&gt;
&lt;td&gt;Character&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;不能为null&lt;/td&gt;
&lt;td&gt;可以是null&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;以及所有new出来的对象都是引用类型。（附：以上列举的其实是基础类型对应的&lt;strong&gt;包装类&lt;/strong&gt;）&lt;/p&gt;
&lt;p&gt;其他注意事项：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;小数默认double，如果要float需要注明3.14F或3.14f&lt;/li&gt;
&lt;li&gt;整数默认int，long需要注明10L或10l&lt;/li&gt;
&lt;li&gt;数学运算时任何类型均转为int和double&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;42-转义字符及其unicode&#34;&gt;&lt;a href=&#34;#4-2-转义字符及其Unicode&#34; class=&#34;headerlink&#34; title=&#34;4.2 转义字符及其Unicode&#34;&gt;&lt;/a&gt;4.2 转义字符及其Unicode&lt;/h3&gt;&lt;p&gt;Unicode即utf-8编码， 特殊字符需要用转义符’\‘+其他字符得出，常见操作如下表：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;转义序列&lt;/th&gt;
&lt;th&gt;名称&lt;/th&gt;
&lt;th&gt;Unicode值&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;\b&lt;/td&gt;
&lt;td&gt;退格&lt;/td&gt;
&lt;td&gt;\u0008&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\t&lt;/td&gt;
&lt;td&gt;制表&lt;/td&gt;
&lt;td&gt;\u0009&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\n&lt;/td&gt;
&lt;td&gt;换行&lt;/td&gt;
&lt;td&gt;\u000a&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\r&lt;/td&gt;
&lt;td&gt;回车&lt;/td&gt;
&lt;td&gt;\u000d&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\”&lt;/td&gt;
&lt;td&gt;双引号&lt;/td&gt;
&lt;td&gt;\u0022&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\’&lt;/td&gt;
&lt;td&gt;单引号&lt;/td&gt;
&lt;td&gt;\u0027&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;\&lt;/td&gt;
&lt;td&gt;反斜杠&lt;/td&gt;
&lt;td&gt;\u005c&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;43-数组创建&#34;&gt;&lt;a href=&#34;#4-3-数组创建&#34; class=&#34;headerlink&#34; title=&#34;4.3 数组创建&#34;&gt;&lt;/a&gt;4.3 数组创建&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;动态创建：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; array&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;10&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//创建初始值为0长度为10的数组&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态创建：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; array&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//或者直接&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; array&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;44-不确定参数数量的函数构建方法&#34;&gt;&lt;a href=&#34;#4-4-不确定参数数量的函数构建方法&#34; class=&#34;headerlink&#34; title=&#34;4.4 不确定参数数量的函数构建方法&#34;&gt;&lt;/a&gt;4.4 不确定参数数量的函数构建方法&lt;/h3&gt;&lt;p&gt;当不明确函数需要几个参数时，可以按如下方法创建&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//arr实际上是个数组&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; sum1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;for&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;arr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; sum1&lt;span class=&#34;token operator&#34;&gt;+=&lt;/span&gt;i&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; sum1&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//调用&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可变参数只能有一个数组，下面的方法是**&lt;font color=&#34;red&#34;&gt;错误&lt;/font&gt;**的&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;arr，String&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//Error&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-java类的三大基本方法&#34;&gt;&lt;a href=&#34;#5-java类的三大基本方法&#34; class=&#34;headerlink&#34; title=&#34;5. java类的三大基本方法&#34;&gt;&lt;/a&gt;5. java类的三大基本方法&lt;/h2&gt;&lt;p&gt;java所有类均继承自Object类，这个类有几个方法常常需要重载&lt;/p&gt;
&lt;h3 id=&#34;51-tostring方法&#34;&gt;&lt;a href=&#34;#5-1-toString（）方法&#34; class=&#34;headerlink&#34; title=&#34;5.1 toString（）方法&#34;&gt;&lt;/a&gt;5.1 &lt;code&gt;toString（）&lt;/code&gt;方法&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;String &lt;span class=&#34;token function&#34;&gt;toString&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//返回该对象的字符串表示。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​        这个方法用于将该类转换成字符形式，&lt;code&gt;System.out.println&lt;/code&gt;也是自动识别对象的&lt;code&gt;.toString&lt;/code&gt;方法将其输出&lt;/p&gt;
&lt;h3 id=&#34;52-equals方法&#34;&gt;&lt;a href=&#34;#5-2-equals-方法&#34; class=&#34;headerlink&#34; title=&#34;5.2 equals()方法&#34;&gt;&lt;/a&gt;5.2 &lt;code&gt;equals()&lt;/code&gt;方法&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt; &lt;span class=&#34;token keyword&#34;&gt;boolean&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;equals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Object obj&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//指示其他某个对象是否与此对象“相等”。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;​        java对象的判断一般不用&lt;code&gt;==&lt;/code&gt;，而是用&lt;code&gt;.equals()&lt;/code&gt;判断两个对象的&lt;strong&gt;值&lt;/strong&gt;是否相等。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;因为&lt;code&gt;==&lt;/code&gt;会比较对象的地址，只有同一个对象才可能返回&lt;code&gt;true&lt;/code&gt;，但这并没有什么意义&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;font color=&#34;red&#34; size=&#34;5&#34;&gt;此外，也可使用&lt;code&gt;Objects.equals(a,b)&lt;/code&gt;判断，这样即使是&lt;code&gt;null&lt;/code&gt;也不会空指针异常&lt;/font&gt;&lt;/p&gt;
&lt;h3 id=&#34;53-hashcode方法&#34;&gt;&lt;a href=&#34;#5-3-hashCode-方法&#34; class=&#34;headerlink&#34; title=&#34;5.3 hashCode()方法&#34;&gt;&lt;/a&gt;5.3 &lt;code&gt;hashCode()&lt;/code&gt;方法&lt;/h3&gt;&lt;p&gt;返回该对象的哈希码，&lt;strong&gt;相当于是标记该对象的唯一的ID值&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;6-类型互相转换&#34;&gt;&lt;a href=&#34;#6-类型互相转换&#34; class=&#34;headerlink&#34; title=&#34;6. 类型互相转换&#34;&gt;&lt;/a&gt;6. 类型互相转换&lt;/h2&gt;&lt;p&gt;类型互相转换一般有2种情况：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有&lt;strong&gt;基础类型&lt;/strong&gt;的转换&lt;/li&gt;
&lt;li&gt;各种&lt;strong&gt;对象&lt;/strong&gt;的转换&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对象之间的转换一般直接在对象前添加&lt;code&gt;(想要转换的类型)&lt;/code&gt;即可，如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;User usr&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;User&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;UserDemo&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;usr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这种方法需要两个类之间有&lt;strong&gt;继承&lt;/strong&gt;关系。&lt;/p&gt;
&lt;p&gt;而有基础类型的转换一般用通过包装类进行，最常见/常用的便是&lt;code&gt;int&lt;/code&gt;和&lt;code&gt;String&lt;/code&gt;的转换了&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//以下为Integer静态方法&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; Integer &lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; i&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//int转Integer&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; Integer &lt;span class=&#34;token function&#34;&gt;valueOf&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//String转Integer&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;    &lt;span class=&#34;token function&#34;&gt;parseInt&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//把String转换成int&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;详细的包装类方法在之后介绍&lt;/p&gt;
&lt;h2 id=&#34;7-命名规范及代码风格&#34;&gt;&lt;a href=&#34;#7-命名规范及代码风格&#34; class=&#34;headerlink&#34; title=&#34;7. 命名规范及代码风格&#34;&gt;&lt;/a&gt;7. 命名规范及代码风格&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;类名：以大写字母开头，每个单词第一个字母大写&lt;/li&gt;
&lt;li&gt;方法名/变量名：以小写字母开头，每个单词第一个字母大写&lt;/li&gt;
&lt;li&gt;常量：全用大写，每个单词之间以’_’分隔&lt;/li&gt;
&lt;li&gt;当参数名重复或找不到合适的时，可以以aName、aSalary之类&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;8-idea相关&#34;&gt;&lt;a href=&#34;#8-IDEA相关&#34; class=&#34;headerlink&#34; title=&#34;8. IDEA相关&#34;&gt;&lt;/a&gt;8. IDEA相关&lt;/h2&gt;&lt;h3 id=&#34;81-快捷键&#34;&gt;&lt;a href=&#34;#8-1-快捷键&#34; class=&#34;headerlink&#34; title=&#34;8.1 快捷键&#34;&gt;&lt;/a&gt;8.1 快捷键&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;System.out.println(); //sout&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;public static void main(String[] args) {//psvm&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alt+Enter：自动修复代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alt+Insert：自动生成成员函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+Y：删除光标所在行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+D：复制光标所在行内容，插入光标位置下面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+Alt+L：格式化代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+/：单行注释，再按取消注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+Shift+/：选中代码注释。多行注释，再按取消&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Alt+Shift+上下箭头：移动当前代码行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ctrl+Alt+Shift+S：打开工程配置Project Settings&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;82-debug调试&#34;&gt;&lt;a href=&#34;#8-2-debug调试&#34; class=&#34;headerlink&#34; title=&#34;8.2 debug调试&#34;&gt;&lt;/a&gt;8.2 debug调试&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;设置断点&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;右键debug调试&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;快捷键：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;f8：逐行执行&lt;/p&gt;
&lt;p&gt;f7：进入方法&lt;/p&gt;
&lt;p&gt;shift+f8：跳出方法&lt;/p&gt;
&lt;p&gt;f9：跳到下一个断点&lt;/p&gt;
&lt;p&gt;Ctrl+f2：退出debug模式&lt;/p&gt;
&lt;p&gt;左下角console：切换到控制台&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;83-idea配置&#34;&gt;&lt;a href=&#34;#8-3-IDEA配置&#34; class=&#34;headerlink&#34; title=&#34;8.3 IDEA配置&#34;&gt;&lt;/a&gt;8.3 IDEA配置&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;字体&lt;/p&gt;
&lt;p&gt;File-Setting-Editor-Font&lt;/p&gt;
&lt;p&gt;Font:consoles &lt;/p&gt;
&lt;p&gt;Size:16 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自动补全&lt;/p&gt;
&lt;p&gt;File-Setting-Keymap-Main menu-Code-Complication-Basic&lt;/p&gt;
&lt;p&gt;设置快捷键为Alt+/&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;配置jsp模板&lt;/p&gt;
&lt;p&gt;File-Setting-Editor-File and Code Templates&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二-面向对象&#34;&gt;&lt;a href=&#34;#二、-面向对象&#34; class=&#34;headerlink&#34; title=&#34;二、 面向对象&#34;&gt;&lt;/a&gt;二、 面向对象&lt;/h1&gt;&lt;h2 id=&#34;1-基础知识&#34;&gt;&lt;a href=&#34;#1-基础知识&#34; class=&#34;headerlink&#34; title=&#34;1. 基础知识&#34;&gt;&lt;/a&gt;1. 基础知识&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;new操作符的返回值是一个引用（对new出来的对象的引用，new其实就是构造函数调用方法）&lt;/li&gt;
&lt;li&gt;在类的内部用&lt;code&gt;this&lt;/code&gt;调用其方法（包括构造方法），用&lt;code&gt;super&lt;/code&gt;调用父类方法&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-初始化块静态代码块&#34;&gt;&lt;a href=&#34;#2-初始化块-静态代码块&#34; class=&#34;headerlink&#34; title=&#34;2. 初始化块/静态代码块&#34;&gt;&lt;/a&gt;2. 初始化块/静态代码块&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;初始化块&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;demo01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可以操作静态字段用于计数等&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//初始化块&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在类内创建一个&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;，块内的代码&lt;strong&gt;该类new一个对象执行一次&lt;/strong&gt;，常用来计数&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;静态代码块&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;demo01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//典型用途，用来一次性对静态变量进行赋值&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//静态初始化块&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在类内创建一个&lt;code&gt;static&amp;#123;&amp;#125;&lt;/code&gt;，块内代码&lt;strong&gt;进在第一次使用该类时执行一次&lt;/strong&gt;，常用于对静态变量赋值&lt;/p&gt;
&lt;h2 id=&#34;3-静态static&#34;&gt;&lt;a href=&#34;#3-静态static&#34; class=&#34;headerlink&#34; title=&#34;3. 静态static&#34;&gt;&lt;/a&gt;3. 静态static&lt;/h2&gt;&lt;p&gt;&lt;code&gt;static&lt;/code&gt;关键字表示&lt;strong&gt;即使不创建对象也可以调用&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;静态static是属于类的，所有对象共享的，不随对象动态变化的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;static&lt;/code&gt;位于内存的方法区&lt;/p&gt;
&lt;h3 id=&#34;31-静态字段&#34;&gt;&lt;a href=&#34;#3-1-静态字段&#34; class=&#34;headerlink&#34; title=&#34;3.1 静态字段&#34;&gt;&lt;/a&gt;3.1 静态字段&lt;/h3&gt;&lt;p&gt;类的专有成员变量，是该类所有对象共享的变量，可以被任意对象的成员函数修改。&lt;/p&gt;
&lt;h3 id=&#34;32-静态方法&#34;&gt;&lt;a href=&#34;#3-2-静态方法&#34; class=&#34;headerlink&#34; title=&#34;3.2 静态方法&#34;&gt;&lt;/a&gt;3.2 静态方法&lt;/h3&gt;&lt;p&gt;可以直接由类名调用的，不需要先创建对象。&lt;em&gt;静态方法指定访问静态字段&lt;/em&gt;&lt;/p&gt;
&lt;h3 id=&#34;33-静态代码块&#34;&gt;&lt;a href=&#34;#3-3-静态代码块&#34; class=&#34;headerlink&#34; title=&#34;3.3 静态代码块&#34;&gt;&lt;/a&gt;3.3 静态代码块&lt;/h3&gt;&lt;p&gt;如上所讲&lt;/p&gt;
&lt;h2 id=&#34;4-设计类的注意事项&#34;&gt;&lt;a href=&#34;#4-设计类的注意事项&#34; class=&#34;headerlink&#34; title=&#34;4. 设计类的注意事项&#34;&gt;&lt;/a&gt;4. 设计类的注意事项&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;一定要保证数据私有&lt;/li&gt;
&lt;li&gt;一定要对数据进行初始化（主要是静态数据吧）&lt;/li&gt;
&lt;li&gt;不要在类中使用过多的基本类型&lt;/li&gt;
&lt;li&gt;不是所有字段都需要单独的get/set方法&lt;/li&gt;
&lt;li&gt;分解具有过多职责的类（&lt;strong&gt;解耦&lt;/strong&gt;）&lt;/li&gt;
&lt;li&gt;类名和方法名要能够体现他们的职责&lt;/li&gt;
&lt;li&gt;优先使用不可变的类（即不能修改对象的类）&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;三-继承与多态&#34;&gt;&lt;a href=&#34;#三、-继承与多态&#34; class=&#34;headerlink&#34; title=&#34;三、 继承与多态&#34;&gt;&lt;/a&gt;三、 继承与多态&lt;/h1&gt;&lt;h2 id=&#34;1-基础知识&#34;&gt;&lt;a href=&#34;#1-基础知识-1&#34; class=&#34;headerlink&#34; title=&#34;1. 基础知识&#34;&gt;&lt;/a&gt;1. 基础知识&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;私有变量可以&lt;strong&gt;被继承&lt;/strong&gt;但不能被访问。&lt;em&gt;其实可通过父类方法访问。&lt;code&gt;super&lt;/code&gt;调用&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;构造函数不被继承，可在子类通过&lt;code&gt;super()&lt;/code&gt;引用父类构造器&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;静态字段和方法可以&lt;strong&gt;被继承&lt;/strong&gt;，但&lt;strong&gt;不能被重写&lt;/strong&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;final&lt;/code&gt;关键字标记的类&lt;strong&gt;不能被继承&lt;/strong&gt;，&lt;code&gt;final&lt;/code&gt;标记的方法/字段&lt;strong&gt;不能被重写&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;成员方法引用时，成员方法在哪个类定义，就引用哪个类的成员变量。如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Father&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt;  &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Father&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;demo01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        Father demo&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;demo&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;demo&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//输出结果：1&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//class com.example.demo.Child&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;但如果&lt;code&gt;Child&lt;/code&gt;中重写了&lt;code&gt;getA()&lt;/code&gt;，那么输出结果即为&lt;strong&gt;2&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-覆盖重写override&#34;&gt;&lt;a href=&#34;#2-覆盖重写override&#34; class=&#34;headerlink&#34; title=&#34;2. 覆盖重写override&#34;&gt;&lt;/a&gt;2. 覆盖重写override&lt;/h2&gt;&lt;h3 id=&#34;21-重写成员变量不建议&#34;&gt;&lt;a href=&#34;#2-1-重写成员变量（不建议）&#34; class=&#34;headerlink&#34; title=&#34;2.1 重写成员变量（不建议）&#34;&gt;&lt;/a&gt;2.1 重写成员变量（不建议）&lt;/h3&gt;&lt;p&gt;成员方法在哪个类定义，引用的就是哪个类的成员变量。&lt;/p&gt;
&lt;p&gt;所以重定义子类字段不会对继承的方法产生影响。&lt;/p&gt;
&lt;p&gt;一般来说，&lt;strong&gt;字段只用于定义它的那个类。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;子类的字段和父类的字段即使名字一样，也相当于两个字段了&lt;/p&gt;
&lt;p&gt;所以，&lt;strong&gt;除了静态字段，一般不在类中直接定义成员变量的值，也不在子类重写成员变量。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;22-重写成员方法&#34;&gt;&lt;a href=&#34;#2-2-重写成员方法&#34; class=&#34;headerlink&#34; title=&#34;2.2 重写成员方法&#34;&gt;&lt;/a&gt;2.2 重写成员方法&lt;/h3&gt;&lt;p&gt;重新定义一个与父类函数相同返回类型、方法名、参数类型、参数名、参数数量的函数，即为重写。&lt;/p&gt;
&lt;p&gt;可用&lt;code&gt;@Override&lt;/code&gt;检测是否成功覆盖该方法&lt;/p&gt;
&lt;p&gt;重写时如果仅仅是添加功能，可以利用&lt;code&gt;super&lt;/code&gt;调用父类方法，如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;thisMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;thisMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//新功能1;&lt;/span&gt;
   &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//新功能2;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-多态&#34;&gt;&lt;a href=&#34;#3-多态&#34; class=&#34;headerlink&#34; title=&#34;3. 多态&#34;&gt;&lt;/a&gt;3. 多态&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;一个对象变量可以指示多种实际类型的现象即成为多态&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际操作上是：以父类声明，以父类/子类a/子类b构造，如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Father demo&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Child&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;此时的&lt;code&gt;demo&lt;/code&gt;是Child类型的对象，可调用Child重写/增加的方法和Father类自带的方法。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;继承/多态是为了类型解耦，不要把过多功能写在一个类&lt;/li&gt;
&lt;li&gt;一般父类需要被重写的方法以抽象函数&lt;code&gt;abstract&lt;/code&gt;定义&lt;/li&gt;
&lt;li&gt;有时候父类直接写成接口&lt;code&gt;interface&lt;/code&gt;，子类作为实现类&lt;code&gt;implement&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;程序中，可以通过&lt;code&gt;instanceof&lt;/code&gt;来判别对象属于哪个类，如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;demo &lt;span class=&#34;token keyword&#34;&gt;instanceof&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Father&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-抽象abstract&#34;&gt;&lt;a href=&#34;#4-抽象abstract&#34; class=&#34;headerlink&#34; title=&#34;4. 抽象abstract&#34;&gt;&lt;/a&gt;4. 抽象abstract&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;抽象是接口的核心，也是多态的一种应用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在定义父类时暂时不想定义该方法（可能是还没想好怎么定义，或者各子类的实现方法不一样），但该类必须要有这个方法时，就设置为&lt;code&gt;abstract&lt;/code&gt;，在特定的子类实现。（同时父类也要定义成&lt;code&gt;abstract&lt;/code&gt;类或者接口）&lt;/p&gt;
&lt;p&gt;如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Father&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;abstractmethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果定义了抽象方法，那么子类&lt;strong&gt;必须实现所有抽象方法，否则子类也要定义成抽象类&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&#34;四-接口&#34;&gt;&lt;a href=&#34;#四、-接口&#34; class=&#34;headerlink&#34; title=&#34;四、 接口&#34;&gt;&lt;/a&gt;四、 接口&lt;/h1&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterDemo&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//接口的所有成员默认是public&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//接口可以定义静态字段，static可省略&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//接口可以定义静态方法&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;default&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getDoubleA&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//接口可以定义非抽象方法，需要用default标记&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; a&lt;span class=&#34;token operator&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;interfaceMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-接口的性质&#34;&gt;&lt;a href=&#34;#1-接口的性质&#34; class=&#34;headerlink&#34; title=&#34;1. 接口的性质&#34;&gt;&lt;/a&gt;1. 接口的性质&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;接口不是类，不能new一个接口，只能new一个接口的实现类。但可以以接口定义对象&lt;/li&gt;
&lt;li&gt;可以用&lt;code&gt;instanceof&lt;/code&gt;检查对象是否实现某个接口&lt;/li&gt;
&lt;li&gt;接口可以继承别的接口&lt;/li&gt;
&lt;li&gt;一个类可以实现多个接口&lt;/li&gt;
&lt;li&gt;接口中的方法默认是&lt;code&gt;public abstract&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;接口的实现类必须实现所有抽象方法&lt;/li&gt;
&lt;li&gt;接口没有静态代码块&lt;code&gt;static&amp;#123;&amp;#125;&lt;/code&gt;和构造方法&lt;/li&gt;
&lt;li&gt;接口可以定义非抽象方法，如静态方法和普通方法（需要以&lt;code&gt;default&lt;/code&gt;标记），非抽象方法一般被继承不被重写。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-接口的定义和实现&#34;&gt;&lt;a href=&#34;#2-接口的定义和实现&#34; class=&#34;headerlink&#34; title=&#34;2. 接口的定义和实现&#34;&gt;&lt;/a&gt;2. 接口的定义和实现&lt;/h2&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//接口定义&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterDemo&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;interfaceMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//实现类&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ImplDemo&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InterDemo&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ImplDemo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ImplDemo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;setId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;id &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;interfaceMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;this is a implement Class&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//调用&lt;/span&gt;
InterDemo demo1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ImplDemo&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;实现类除了必须实现接口抽象方法，其他和普通类并无二致&lt;/li&gt;
&lt;li&gt;可以以抽象类/新接口实现接口，这样不需要实现所有抽象类&lt;/li&gt;
&lt;li&gt;调用方法一般是&lt;code&gt;接口 对象名=new 实现类构造器();&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;4-lambda表达式&#34;&gt;&lt;a href=&#34;#4-lambda表达式&#34; class=&#34;headerlink&#34; title=&#34;4. lambda表达式&#34;&gt;&lt;/a&gt;4. lambda表达式&lt;/h2&gt;&lt;p&gt;lambda表达式极大的方便了接口的使用，它省略实现类的定义，直接在调用接口的过程中实现接口。&lt;/p&gt;
&lt;p&gt;lambda表达式不会生成单独的.class文件，因此效率比匿名内部类高&lt;/p&gt;
&lt;h3 id=&#34;41-使用场景&#34;&gt;&lt;a href=&#34;#4-1-使用场景&#34; class=&#34;headerlink&#34; title=&#34;4.1 使用场景&#34;&gt;&lt;/a&gt;4.1 使用场景&lt;/h3&gt;&lt;pre&gt;&lt;code&gt;      1. 有些方法需要调用接口**（传参是接口/方法）**，如`Array.sort()`函数，其第二个参数需要调用`Comparator`比较器，而非普通的变量/对象
      2. 接口**仅有一个**抽象方法，且该方法有**返回值**
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;42-使用规则&#34;&gt;&lt;a href=&#34;#4-2-使用规则&#34; class=&#34;headerlink&#34; title=&#34;4.2 使用规则&#34;&gt;&lt;/a&gt;4.2 使用规则&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;一些参数：多个参数用逗号分隔&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一个箭头：把参数传递给方法体&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;一段代码：重写接口的抽象方法&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;(参数列表)-&amp;gt; {一些代码}&lt;/p&gt;
&lt;p&gt;&lt;code&gt;method(参数1,(接口参数1,接口参数2)-&amp;gt;&amp;#123;方法实现代码;&amp;#125;);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Arrays&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;string s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String s1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;String s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; s1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;43-简化lambda表达式&#34;&gt;&lt;a href=&#34;#4-3-简化lambda表达式&#34; class=&#34;headerlink&#34; title=&#34;4.3 简化lambda表达式&#34;&gt;&lt;/a&gt;4.3 简化lambda表达式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果参数类型可以推断出，可以不写&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Arrays&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;strings&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; s1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//此例就可根据strings判断出s1和s2是String类型变量&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果只有一行代码，可省略&lt;code&gt;&amp;#123;&amp;#125;&lt;/code&gt;和&lt;code&gt;return&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Arrays&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;sort&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;strings&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; s1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;s2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;length&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果只有一个参数，且可推断出类型，&lt;code&gt;()&lt;/code&gt;可省略&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;JButton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addActionListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;44-方法引用比lambda更简&#34;&gt;&lt;a href=&#34;#4-4-方法引用（比lambda更简）&#34; class=&#34;headerlink&#34; title=&#34;4.4 方法引用（比lambda更简）&#34;&gt;&lt;/a&gt;4.4 方法引用（比lambda更简）&lt;/h3&gt;&lt;p&gt;使用前提：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; 1. 能用`lambda`表达式，且抽象方法只有一个参数。即在4.3.3的前提下
 2. 方法体内仅调用一个方法，且参数为抽象方法的参数。（相当于是用其他方法描述了抽象方法，或者说抽象方法引用该方法）
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用方法：已存在的对象名::方法名代替接口实现&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//lambda表达式：如4.3.3&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;JButton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addActionListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;a&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//方法引用：     &lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;JButton&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;addActionListener&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;println&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//即&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可用&lt;/span&gt;
&lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;println&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//替代&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt; 示例：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;event&lt;span class=&#34;token operator&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;event&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hello&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;:&lt;/span&gt;println&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;memthod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String s&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;Consumer p&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    p&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;accept&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//传入hello&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;​        hello&lt;/p&gt;
&lt;p&gt;​        hello&lt;/p&gt;
&lt;h3 id=&#34;45-构造器引用这个用到不多没什么印象了&#34;&gt;&lt;a href=&#34;#4-5-构造器引用（这个用到不多，没什么印象了）&#34; class=&#34;headerlink&#34; title=&#34;4.5 构造器引用（这个用到不多，没什么印象了）&#34;&gt;&lt;/a&gt;4.5 构造器引用（这个用到不多，没什么印象了）&lt;/h3&gt;&lt;p&gt;类名::new&lt;/p&gt;
&lt;p&gt;lambda表达式：x-&amp;gt;new int[x]&lt;/p&gt;
&lt;p&gt;构造器引用：int[]::new&lt;/p&gt;
&lt;p&gt;对于使用哪个构造器，取决于上下文。（其实对应传递式lambda表达式的参数数量）&lt;/p&gt;
&lt;p&gt;创建一个Person类&lt;/p&gt;
&lt;p&gt;(a,b)-&amp;gt;new Person(a,b)&lt;/p&gt;
&lt;p&gt;等价于&lt;/p&gt;
&lt;p&gt;Person::new&lt;/p&gt;
&lt;h2 id=&#34;5-内部类&#34;&gt;&lt;a href=&#34;#5-内部类&#34; class=&#34;headerlink&#34; title=&#34;5. 内部类&#34;&gt;&lt;/a&gt;5. 内部类&lt;/h2&gt;&lt;p&gt;即在类的内部再次定义一个类&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;可以为&lt;code&gt;private&lt;/code&gt;，则该类对同一个包内的其他类隐藏&lt;/li&gt;
&lt;li&gt;内部类可以&lt;strong&gt;直接&lt;/strong&gt;访问外部类的所有成员&lt;/li&gt;
&lt;li&gt;在外部类使用内部类方法需要先new一个内部类对象&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;51-内部类的引用&#34;&gt;&lt;a href=&#34;#5-1-内部类的引用&#34; class=&#34;headerlink&#34; title=&#34;5.1 内部类的引用&#34;&gt;&lt;/a&gt;5.1 内部类的引用&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在内部类引用外部类：&lt;code&gt;外部类.this&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Demo01&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;method1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在外部类&lt;strong&gt;内&lt;/strong&gt;引用内部类：直接new一个内部类对象即可&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inner1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在外部类&lt;strong&gt;外&lt;/strong&gt;引用内部类：&lt;code&gt;外部类.内部类&lt;/code&gt;（前提是内部类是public，否则无法引用）&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Demo01&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Inner1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在外部类&lt;strong&gt;外&lt;/strong&gt;构造内部类：&lt;code&gt;外部类对象.new 内部类()&lt;/code&gt;（前提是内部类是public）&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Demo01&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Inner1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;52-当内部类中出现重名变量时&#34;&gt;&lt;a href=&#34;#5-2-当内部类中出现重名变量时&#34; class=&#34;headerlink&#34; title=&#34;5.2 当内部类中出现重名变量时&#34;&gt;&lt;/a&gt;5.2 当内部类中出现重名变量时&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;局部变量&lt;strong&gt;直接用&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;内部类变量用&lt;strong&gt;this关键字&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;外部类变量用&lt;strong&gt;外部类.this.变量名&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;53-局部内部类&#34;&gt;&lt;a href=&#34;#5-3-局部内部类&#34; class=&#34;headerlink&#34; title=&#34;5.3 局部内部类&#34;&gt;&lt;/a&gt;5.3 局部内部类&lt;/h3&gt;&lt;p&gt;在方法体内定义的类，为局部内部类。该类仅在方法内部有效&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;外部类修饰符：public/（default）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;内部类修饰符：public/protected/（default）/private&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;局部内部类：什么都不能写&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;局部内部类仅能访问方法内部的局部变量。&lt;/p&gt;
&lt;h3 id=&#34;54-匿名内部类&#34;&gt;&lt;a href=&#34;#5-4-匿名内部类&#34; class=&#34;headerlink&#34; title=&#34;5.4 匿名内部类&#34;&gt;&lt;/a&gt;5.4 匿名内部类&lt;/h3&gt;&lt;p&gt;前提：当该类仅需使用一次&lt;/p&gt;
&lt;p&gt;含义：不定义实现类，直接在使用接口时重写抽象类。&lt;/p&gt;
&lt;p&gt;​        &lt;strong&gt;一般有多个抽象方法的接口使用匿名类，仅有一个方法的使用lambda表达式更简便&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;好处：省掉一个类的单独定义，使项目更加轻便&lt;/p&gt;
&lt;p&gt;匿名类的对象则可用多次使用，如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Runnable runnable&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//runnable可用多次使用&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;55-匿名对象&#34;&gt;&lt;a href=&#34;#5-5-匿名对象&#34; class=&#34;headerlink&#34; title=&#34;5.5 匿名对象&#34;&gt;&lt;/a&gt;5.5 匿名对象&lt;/h3&gt;&lt;p&gt;即new一个对象时不给他命名，该对象就仅能使用一次。&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Runnable&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//匿名线程对象(匿名实现类).start()&lt;/span&gt;
    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;run&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;start&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;五-异常-断言-日志&#34;&gt;&lt;a href=&#34;#五、-异常、断言、日志&#34; class=&#34;headerlink&#34; title=&#34;五、 异常、断言、日志&#34;&gt;&lt;/a&gt;五、 异常、断言、日志&lt;/h1&gt;&lt;h2 id=&#34;1-异常&#34;&gt;&lt;a href=&#34;#1-异常&#34; class=&#34;headerlink&#34; title=&#34;1. 异常&#34;&gt;&lt;/a&gt;1. 异常&lt;/h2&gt;&lt;p&gt;即处理程序运行过程中出现的各种bug，避免不必要的程序中断。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;目的&lt;/strong&gt;：程序产生异常会中断，造成数据丢失，因此需要对可能出现的异常进行处理&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;做法&lt;/strong&gt;：编写程序时声明可能产生的异常，抛出给jvm处理或者自行处理。避免不必要的中断&lt;/p&gt;
&lt;h3 id=&#34;11-检查性异常和非检查性异常&#34;&gt;&lt;a href=&#34;#1-1-检查性异常和非检查性异常&#34; class=&#34;headerlink&#34; title=&#34;1.1 检查性异常和非检查性异常&#34;&gt;&lt;/a&gt;1.1 检查性异常和非检查性异常&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;非检查性异常&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;编译器不会检查的异常，如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;错误的强制类型转换&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;数组访问越界     &lt;code&gt;ArrayIndexOutOfBoundsException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;访问null指针     &lt;code&gt;NullPointerException&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt; 这些异常往往是编写的&lt;strong&gt;逻辑错误&lt;/strong&gt;导致，应尽量避免，&lt;strong&gt;不需要声明抛出&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;检查性异常&lt;/strong&gt;：&lt;/p&gt;
&lt;p&gt;编译器会检查的异常，主要是用户错误操作导致，所以需要程序有处理该异常的机制&lt;/p&gt;
&lt;p&gt;如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;文件路径访问错误&lt;/li&gt;
&lt;li&gt;参数类型错误&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;我们需要处理的异常主要是检查性异常&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&#34;12-处理异常的方法&#34;&gt;&lt;a href=&#34;#1-2-处理异常的方法&#34; class=&#34;headerlink&#34; title=&#34;1.2 处理异常的方法&#34;&gt;&lt;/a&gt;1.2 处理异常的方法&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;直接&lt;code&gt;throw&lt;/code&gt;抛出异常，交给调用该方法的地方处理或者由jvm处理&lt;/li&gt;
&lt;li&gt;用&lt;code&gt;try-catch&lt;/code&gt;捕获异常，进行处理。如下&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    var in&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//创建一个输入流&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;method1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;c://name.tx&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可能抛出异常的代码&lt;/span&gt;
code&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可能的异常类型&lt;/span&gt;
    e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//处理字段&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;一般来说最常见的处理方法就是输出异常信息&lt;/p&gt;
&lt;h4 id=&#34;13-释放资源&#34;&gt;&lt;a href=&#34;#1-3-释放资源&#34; class=&#34;headerlink&#34; title=&#34;1.3 释放资源&#34;&gt;&lt;/a&gt;1.3 释放资源&lt;/h4&gt;&lt;h4 id=&#34;131-关键字finally&#34;&gt;&lt;a href=&#34;#1-3-1-关键字finally&#34; class=&#34;headerlink&#34; title=&#34;1.3.1 关键字finally&#34;&gt;&lt;/a&gt;1.3.1 关键字finally&lt;/h4&gt;&lt;p&gt;使用finally表示&lt;strong&gt;无论是否发生异常执行&lt;/strong&gt;。适用于必须执行的代码，如输入输入流的关闭&lt;code&gt;close&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    var in&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//创建一个输入流&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;method1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;c://name.tx&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可能抛出异常的代码&lt;/span&gt;
code&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可能的异常类型&lt;/span&gt;
    e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//处理字段&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;finally&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//关闭输入流&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;132-自动释放资源&#34;&gt;&lt;a href=&#34;#1-3-2-自动释放资源&#34; class=&#34;headerlink&#34; title=&#34;1.3.2 自动释放资源&#34;&gt;&lt;/a&gt;1.3.2 自动释放资源&lt;/h4&gt;&lt;p&gt;在try后的()中声明资源，在try块退出时会自动释放该资源&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;var in&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;FileInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可以创建多个&lt;/span&gt;
        
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//可能的异常类型&lt;/span&gt;
    e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//处理字段&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;14-自定义异常很少用不太记得了&#34;&gt;&lt;a href=&#34;#1-4-自定义异常（很少用，不太记得了）&#34; class=&#34;headerlink&#34; title=&#34;1.4 自定义异常（很少用，不太记得了）&#34;&gt;&lt;/a&gt;1.4 自定义异常（很少用，不太记得了）&lt;/h3&gt;&lt;p&gt;如果遇到了标准异常类无法描述清楚的问题，则需要自己定义异常类&lt;/p&gt;
&lt;p&gt;格式：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ExceptionCustom&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;extends&lt;/span&gt; 父类异常&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//就和最简单的子类继承父类一样&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ExceptionCustom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//一个无参构造函数&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;ExceptionCustom&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//一个一参构造函数&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;super&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;message&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//message是自定义的异常描述&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用法和Java自带异常对象一样&lt;/p&gt;
&lt;h2 id=&#34;2-断言缺省&#34;&gt;&lt;a href=&#34;#2-断言（缺省）&#34; class=&#34;headerlink&#34; title=&#34;2. 断言（缺省）&#34;&gt;&lt;/a&gt;2. 断言（缺省）&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;编写代码时,我们总是会做出一些假设,断言就是用于在代码中捕捉这些假设。 &lt;/li&gt;
&lt;li&gt;可以将断言看作是异常处理的一种高级形式。&lt;/li&gt;
&lt;li&gt;断言表示为一些布尔表达式,程序员相信在程序中的某个特定点该表达式值为真。 &lt;/li&gt;
&lt;li&gt;单元测试必须使用断言(Junit/JunitX)。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;3-日志缺省&#34;&gt;&lt;a href=&#34;#3-日志（缺省）&#34; class=&#34;headerlink&#34; title=&#34;3. 日志（缺省）&#34;&gt;&lt;/a&gt;3. 日志（缺省）&lt;/h2&gt;&lt;h1 id=&#34;六-反射不是很清楚&#34;&gt;&lt;a href=&#34;#六、-反射（不是很清楚）&#34; class=&#34;headerlink&#34; title=&#34;六、 反射（不是很清楚）&#34;&gt;&lt;/a&gt;六、 反射（不是很清楚）&lt;/h1&gt;&lt;p&gt;将类的各个组成部分（成员变量、成员函数、构造函数等）封装为对象。也可以被称之为专用于分析类的程序。&lt;/p&gt;
&lt;p&gt;简单点说就是把方法之类的当做变量处理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;反射是框架的核心技术&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;1-获取类的信息&#34;&gt;&lt;a href=&#34;#1-获取类的信息&#34; class=&#34;headerlink&#34; title=&#34;1. 获取类的信息&#34;&gt;&lt;/a&gt;1. 获取类的信息&lt;/h2&gt;&lt;p&gt;类在创建好后有3个阶段：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;source源码阶段：以&lt;code&gt;.java&lt;/code&gt;和&lt;code&gt;.class&lt;/code&gt;字节码字段的形式存储与硬盘&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;Class.forName(&amp;quot;全类名&amp;quot;)&lt;/code&gt;获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Class&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;全类名&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//全类名：包名+.类名。&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//返回与带有给定字符串名的类或接口相关联的 Class 对象。&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//加载源代码阶段的.class字节码&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Class类对象阶段：在java程序中&lt;code&gt;import&lt;/code&gt;导包，导入该类时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;类名.class&lt;/code&gt;获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//此处Person是自定义的一个类&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//加载于Class类对象阶段，即导包后&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;runtime运行时阶段：创建该类的对象参与运行时&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;类对象.getClass()&lt;/code&gt;获取&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getClass&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//加载与runtime阶段，即创建类对象时加载&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img data-src=&#34;/2021/05/18/note/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20210519140330233.png&#34; alt=&#34;image-20210519140330233&#34;&gt;&lt;/p&gt;
&lt;p&gt;同一.class字节码在一次程序运行过程中只会&lt;strong&gt;加载一次&lt;/strong&gt;。所以以上123获取的Class对象==，即内存地址值是同一个&lt;/p&gt;
&lt;h2 id=&#34;2-获取成员变量&#34;&gt;&lt;a href=&#34;#2-获取成员变量&#34; class=&#34;headerlink&#34; title=&#34;2. 获取成员变量&#34;&gt;&lt;/a&gt;2. 获取成员变量&lt;/h2&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Object
  java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;AccessibleObject
      java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;lang&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;Field
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;java中通过&lt;code&gt;Field类&lt;/code&gt; 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;通过Class类获取Field对象&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数（Class对象的函数）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Field](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)&lt;/td&gt;
&lt;td&gt;[**getField**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getField(java.lang.String))&lt;code&gt;(&lt;/code&gt;[String](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/String.html)&lt;code&gt; name)&lt;/code&gt; 返回指定公共成员字段。（Java中不同数据类型的变量也不可重名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Field](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getFields**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getFields())&lt;code&gt;()&lt;/code&gt; 返回所有可访问公共字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Field](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)&lt;/td&gt;
&lt;td&gt;[&lt;em&gt;&lt;em&gt;getDeclaredField*&lt;/em&gt;](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredField(java.lang.String))&lt;code&gt;(&lt;/code&gt;[String](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/String.html)&lt;code&gt; name)&lt;/code&gt;返回指定已声明字段。（所有修饰符）  *//declared**：v.公布;宣布;宣告;表明;宣称;断言;申报(收益)&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Field](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getDeclaredFields**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredFields())&lt;code&gt;()&lt;/code&gt; 返回所有字段。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;通过Field对象操作成员变量&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数（Field对象的函数）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;/td&gt;
&lt;td&gt;[**get**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html#get(java.lang.Object))&lt;code&gt;(&lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;code&gt; obj)&lt;/code&gt; 返回指定对象上该字段的值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[String](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/String.html)&lt;/td&gt;
&lt;td&gt;[**getName**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html#getName())&lt;code&gt;()&lt;/code&gt; 返回此字段的名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**set**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html#set(java.lang.Object, java.lang.Object))&lt;code&gt;(&lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;code&gt;obj,&lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;code&gt; value)&lt;/code&gt;将指定对象变量设置为指定的新值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**setAccessible**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/AccessibleObject.html#setAccessible(boolean))&lt;code&gt;(boolean flag)&lt;/code&gt;设置字段的&lt;code&gt;accessible&lt;/code&gt;。 &lt;br&gt; &lt;em&gt;accessible：暴力反射。&lt;code&gt;true&lt;/code&gt;表示可访问（包括private）&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;用法如下：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Class &lt;span class=&#34;token class-name&#34;&gt;personClass&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Person&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//获取一个Class对象，表示的是Person类&lt;/span&gt;
Field field&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;personClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getField&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//value1是Person类的字段名&lt;/span&gt;
System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;field&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//输出：public java.lang.String Person.value1&lt;/span&gt;
field&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//获取new Person的value1的值&lt;/span&gt;
field&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;字段新值&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//将new Person的value1设为新的值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Field field1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;personClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getDeclaredField&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;value2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
field1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setAccessible&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token boolean&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//value2是私有变量，加上此句后可get/set访问&lt;/span&gt;
field1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//合法&lt;/span&gt;
field1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;person&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//合法&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-获取构造器&#34;&gt;&lt;a href=&#34;#3-获取构造器&#34; class=&#34;headerlink&#34; title=&#34;3. 获取构造器&#34;&gt;&lt;/a&gt;3. 获取构造器&lt;/h2&gt;&lt;p&gt;java通过&lt;code&gt;Constructor类&lt;/code&gt;来捕获类的构造器。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以Class类获取Constructor&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;以下&lt;code&gt;T&lt;/code&gt;表示类名&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数（Class对象的函数）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Constructor](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)&lt;code&gt;&amp;lt;&lt;/code&gt;[T](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getConstructor**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getConstructor(java.lang.Class…))&lt;code&gt;(&lt;/code&gt;[Class](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)&lt;code&gt;&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;返回指定公共构造方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Constructor](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)&lt;code&gt;&amp;lt;?&amp;gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getConstructors**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getConstructors())&lt;code&gt;()&lt;/code&gt; 返回所有公共构造方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Constructor](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)&lt;code&gt;&amp;lt;&lt;/code&gt;[T](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)&lt;code&gt;&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getDeclaredConstructor**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredConstructor(java.lang.Class…))&lt;code&gt;(&lt;/code&gt;[Class](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)&lt;code&gt;&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;返回指定构造方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Constructor](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)&lt;code&gt;&amp;lt;?&amp;gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getDeclaredConstructors**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredConstructors())&lt;code&gt;()&lt;/code&gt; 返回所有构造方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;用Constructor的方法使用构造器&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数（Constructor对象的函数）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[T](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)&lt;/td&gt;
&lt;td&gt;[**newInstance**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html#newInstance(java.lang.Object…))&lt;code&gt;(&lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;code&gt;... initargs)&lt;/code&gt;使用此构造器构造对象&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如下&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Constructor constructor&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;
personClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getConstructor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//获取person类的指定参数的构造器&lt;/span&gt;
Object p&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;constructor&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;新值&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;c&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//根据构造器构造一个Person类对象&lt;/span&gt;
输出：
    Person&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;value&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;56&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;新值&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; value2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;c&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//空参构造可以直接用Class的newInstance方法&lt;/span&gt;
Object p1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;personClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//已过时&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;4-获取成员函数&#34;&gt;&lt;a href=&#34;#4-获取成员函数&#34; class=&#34;headerlink&#34; title=&#34;4. 获取成员函数&#34;&gt;&lt;/a&gt;4. 获取成员函数&lt;/h2&gt;&lt;p&gt;java通过&lt;code&gt;Method类&lt;/code&gt;来捕获操作成员函数&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;以Class对象获取Method&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数（Class对象的函数）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Method](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)&lt;/td&gt;
&lt;td&gt;[&lt;strong&gt;getMethod**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getMethod(java.lang.String, java.lang.Class…))&lt;code&gt;(&lt;/code&gt;[String](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/String.html)&lt;code&gt;name,&lt;/code&gt;[Class](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)&lt;code&gt;&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;&lt;br&gt;根据指定&lt;/strong&gt;方法名&lt;strong&gt;和&lt;/strong&gt;参数类型**返回指定公共方法（空参可不写参数类型）&lt;br&gt;如&lt;code&gt;personClass.getMethod(&amp;quot;myMethod&amp;quot;);//myMethod是个空参方法&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Method](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getMethods**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getMethods())&lt;code&gt;()&lt;/code&gt; 返回所有（包括接口、从超类和超接口继承）的公共 方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Method](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)&lt;/td&gt;
&lt;td&gt;[**getDeclaredMethod**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredMethod(java.lang.String, java.lang.Class…))&lt;code&gt;(&lt;/code&gt;[String](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/String.html)&lt;code&gt;name,&lt;/code&gt;[Class](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)&lt;code&gt;&amp;lt;?&amp;gt;... parameterTypes)&lt;/code&gt;返回指定已声明方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Method](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**getDeclaredMethods**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredMethods())&lt;code&gt;()&lt;/code&gt;返回所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;&lt;strong&gt;以Method对象操作方法&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数（Method对象的函数）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[String](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/String.html)&lt;/td&gt;
&lt;td&gt;[**getName**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html#getName())&lt;code&gt;()&lt;/code&gt; 返回此 &lt;code&gt;Method&lt;/code&gt; 对象表示的方法名称。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; &lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;/td&gt;
&lt;td&gt;[**invoke**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html#invoke(java.lang.Object, java.lang.Object…))&lt;code&gt;(&lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;code&gt;obj,&lt;/code&gt;[Object](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)&lt;code&gt;... args)&lt;/code&gt;根据指定对象和指定参数调用此方法。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;[**isAnnotationPresent**](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/reflect/AccessibleObject.html#isAnnotationPresent(java.lang.Class))&lt;code&gt;(&lt;/code&gt;[Class](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)&lt;code&gt;&amp;lt;? extends &lt;/code&gt;[Annotation](mk:@MSITStore:C:\Users\nitgod\Desktop\JDK API 1.6.0 中文版.chm::/java/lang/annotation/Annotation.html)&lt;code&gt;&amp;gt; annotationClass)&lt;/code&gt;如果指定类型的注释存在于此元素上，则返回 true，否则返回 false。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Method method&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;personClass&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;myMethod1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
method&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Person&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;这是一个方法&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
输出：
    这是一个方法

&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;myMethod1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;s&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-反射的意义&#34;&gt;&lt;a href=&#34;#5-反射的意义&#34; class=&#34;headerlink&#34; title=&#34;5. 反射的意义&#34;&gt;&lt;/a&gt;5. 反射的意义&lt;/h2&gt;&lt;p&gt;反射是写框架的核心技术，而框架则需要不改动代码的情况下使用任意的对象和方法&lt;/p&gt;
&lt;p&gt;∴ 反射-将改动代码-&amp;gt;改动配置文件&lt;/p&gt;
&lt;p&gt;通过可IO集合的&lt;strong&gt;类&lt;/strong&gt; &lt;strong&gt;Properties&lt;/strong&gt;读取配置文件，利用反射调用任意类对象的方法&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//1.加载配置文件&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//1.1创建properties对象&lt;/span&gt;
Properties pro&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;Properties&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//1.2获取class目录下的配置文件&lt;/span&gt;
ClassLoader classLoader&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Reflect&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getClassLoader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//获取配置文件的输入流&lt;/span&gt;
InputStream is&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;classLoader&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getResourceAsStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;pro.properties&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
pro&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;load&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;is&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//加载&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//2.获取配置文件中的数据&lt;/span&gt;
String className&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pro&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;className&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String methodName&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;pro&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getProperty&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;methodName&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//3.加载该类进内存&lt;/span&gt;
Class &lt;span class=&#34;token class-name&#34;&gt;cls&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;Class&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;forName&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;className&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//4.创建对象&lt;/span&gt;
Object obj&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;cls&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;newInstance&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//5.获取方法对象&lt;/span&gt;
Method method1&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;cls&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;methodName&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//6.调用方法&lt;/span&gt;
method1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;invoke&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;obj&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;调用方法&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//5、6两处，需要知道方法的参数类型才可&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h1 id=&#34;七-测试test&#34;&gt;&lt;a href=&#34;#七、-测试Test&#34; class=&#34;headerlink&#34; title=&#34;七、 测试Test&#34;&gt;&lt;/a&gt;七、 测试Test&lt;/h1&gt;&lt;h2 id=&#34;1-测试一般步骤&#34;&gt;&lt;a href=&#34;#1-测试一般步骤&#34; class=&#34;headerlink&#34; title=&#34;1. 测试一般步骤&#34;&gt;&lt;/a&gt;1. 测试一般步骤&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;定义一个测试类&lt;ol&gt;
&lt;li&gt;测试类名：被测试的类名+Test&lt;/li&gt;
&lt;li&gt;包名：xxx.xxx.xx.test。一般在Test总包下&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;定义测试函数&lt;ol&gt;
&lt;li&gt;方法名：test+测试的方法名。或者方法名+Test&lt;/li&gt;
&lt;li&gt;返回值：一般为void&lt;/li&gt;
&lt;li&gt;参数列表：空参。实际上是当做main函数测试&lt;/li&gt;
&lt;li&gt;在方法上加上&lt;code&gt;@Test&lt;/code&gt;注解&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;导入&lt;code&gt;Junit&lt;/code&gt;依赖，即&lt;code&gt;@Test&lt;/code&gt;所需的依赖包&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;2-测试技巧用断言assert判定结果&#34;&gt;&lt;a href=&#34;#2-测试技巧：用断言assert判定结果&#34; class=&#34;headerlink&#34; title=&#34;2. 测试技巧：用断言assert判定结果&#34;&gt;&lt;/a&gt;2. 测试技巧：用断言assert判定结果&lt;/h2&gt;&lt;p&gt;一般来说，测试结果&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1. 红色：失败
 2. 绿色：成功
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;用断言assert来处理判定结果Assert.assertEquals(期望值,实际值);&lt;/p&gt;
&lt;p&gt;如下：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Test&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;testAdd&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; res&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;demo01&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    Assert&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;assertEquals&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果res和期望值不同，则会显示&lt;/p&gt;
&lt;p&gt;java.lang.AssertionError:&lt;/p&gt;
&lt;p&gt;Expected :3&lt;/p&gt;
&lt;p&gt;Actual  :2&lt;/p&gt;
&lt;h2 id=&#34;3-测试技巧注解after和before&#34;&gt;&lt;a href=&#34;#3-测试技巧：注解-after和-before&#34; class=&#34;headerlink&#34; title=&#34;3. 测试技巧：注解@after和@before&#34;&gt;&lt;/a&gt;3. 测试技巧：注解&lt;code&gt;@after&lt;/code&gt;和&lt;code&gt;@before&lt;/code&gt;&lt;/h2&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token annotation punctuation&#34;&gt;@Before&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;before&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;该方法会在所有测试方法执行之前执行&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token annotation punctuation&#34;&gt;@After&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;after&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;该方法会在所有测试方法执行之后执行&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;@Before&lt;/code&gt;一般用来申请资源&lt;/p&gt;
&lt;p&gt;&lt;code&gt;@After&lt;/code&gt;一般用来释放资源&lt;/p&gt;
&lt;h1 id=&#34;七-集合&#34;&gt;&lt;a href=&#34;#七、-集合&#34; class=&#34;headerlink&#34; title=&#34;七、 集合&#34;&gt;&lt;/a&gt;七、 集合&lt;/h1&gt;&lt;p&gt;相当于C++中的容器，jdk定义好各种数据结构，提供相应接口，程序员只需使用特定接口而不用管底层原理&lt;/p&gt;
&lt;p&gt;集合采用接口与实现分离的方式。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;接口&lt;/strong&gt;是指一个数据结构的大类（栈、队列、散列表等）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;实现类&lt;/strong&gt;是细化功能（如用数组还是链表）&lt;/p&gt;
&lt;p&gt;即使用多态&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;List&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;list&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;1-collection接口&#34;&gt;&lt;a href=&#34;#1-Collection接口&#34; class=&#34;headerlink&#34; title=&#34;1. Collection接口&#34;&gt;&lt;/a&gt;1. Collection接口&lt;/h2&gt;&lt;p&gt;除了&lt;code&gt;map&lt;/code&gt;，其他所有的集合都继承了&lt;code&gt;collection&lt;/code&gt;接口&lt;/p&gt;
&lt;p&gt;&lt;code&gt;list&lt;/code&gt;接口（有序）：&lt;code&gt;ArrayList&lt;/code&gt;、&lt;code&gt;LinkedList&lt;/code&gt;、&lt;code&gt;Vector&lt;/code&gt;实现类&lt;/p&gt;
&lt;p&gt;&lt;code&gt;set&lt;/code&gt;接口（无序）：&lt;code&gt;HashSet&lt;/code&gt;-&amp;gt;&lt;code&gt;LinkedHashSet&lt;/code&gt;、&lt;code&gt;TreeSet&lt;/code&gt;实现类&lt;/p&gt;
&lt;p&gt;&lt;code&gt;queue&lt;/code&gt;接口：&lt;code&gt;deque&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;11-collection接口通用方法&#34;&gt;&lt;a href=&#34;#1-1-Collection接口通用方法&#34; class=&#34;headerlink&#34; title=&#34;1.1 Collection接口通用方法&#34;&gt;&lt;/a&gt;1.1 Collection接口通用方法&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;add(E e)&lt;/code&gt; 将元素添加到集合尾，成功返回true&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;addAll(Collection&amp;lt;? extends E&amp;gt; c)&lt;/code&gt; 将指定 collection 中的所有元素都添加到此 collection 中（可选操作）。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;clear()&lt;/code&gt; 清空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;contains(Object o)&lt;/code&gt; 查找&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;containsAll(Collection&amp;lt;?&amp;gt; c) 是否包含c的所有元素&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;equals(Object o) 元素是否对应相等（set中重载）&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hashCode()&lt;/code&gt; 返回此 collection 的哈希码值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;isEmpty()&lt;/code&gt; 是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; Iterator&amp;lt;E&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;iterator()&lt;/code&gt; 返回迭代器。*//*&lt;em&gt;默认从第一个元素之前开始&lt;/em&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;remove(Object o)&lt;/code&gt; 按元素移除&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;removeAll(Collection&amp;lt;?&amp;gt; c) 移除c在此集合中的元素&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; int&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;size()&lt;/code&gt; 返回长度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; Object[]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;toArray()&lt;/code&gt; 返回数组。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;2-迭代器iterator&#34;&gt;&lt;a href=&#34;#2-迭代器iterator&#34; class=&#34;headerlink&#34; title=&#34;2. 迭代器iterator&#34;&gt;&lt;/a&gt;2. 迭代器iterator&lt;/h2&gt;&lt;p&gt;类似指针的用法&lt;/p&gt;
&lt;p&gt;获取：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Iterator&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;iterator&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;collection&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//迭代器的泛型和集合一致&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回类型&lt;/th&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt; boolean&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;hasNext()&lt;/code&gt; 如果仍有元素可以迭代，则返回 &lt;code&gt;true&lt;/code&gt;。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; E&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;next()&lt;/code&gt; 返回迭代的下一个元素，并且迭代到下一个元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt; void&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;remove()&lt;/code&gt; 移除迭代器指向的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;示例：用迭代器遍历集合&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;iterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;hasNext&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    iterator&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-集合概览&#34;&gt;&lt;a href=&#34;#3-集合概览&#34; class=&#34;headerlink&#34; title=&#34;3. 集合概览&#34;&gt;&lt;/a&gt;3. 集合概览&lt;/h2&gt;&lt;p&gt;详细的集合使用在之后的文档中列出，也可参考jdk文档&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;集合名&lt;/th&gt;
&lt;th&gt;特点&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ArrayList&lt;/td&gt;
&lt;td&gt;可以动态增长和缩减的一个索引序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedList&lt;/td&gt;
&lt;td&gt;可以在任何位置高效插入和删除的有序序列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashSet&lt;/td&gt;
&lt;td&gt;没有重复元素的无序集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HashMap&lt;/td&gt;
&lt;td&gt;哈希表&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;strong&gt;以上4个较为常用&lt;/strong&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ArrayDeque&lt;/td&gt;
&lt;td&gt;实现为循环数组的一个双端队列&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeSet&lt;/td&gt;
&lt;td&gt;一个有序集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumSet&lt;/td&gt;
&lt;td&gt;包含枚举类型的集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashSet&lt;/td&gt;
&lt;td&gt;可记住元素插入次序的集&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;PriorityQueue&lt;/td&gt;
&lt;td&gt;允许高效删除最小元素的集合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;TreeMap&lt;/td&gt;
&lt;td&gt;键有序的映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;EnumMap&lt;/td&gt;
&lt;td&gt;键属于枚举类型的映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;LinkedHashMap&lt;/td&gt;
&lt;td&gt;可以记住键/值对添加次序的映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;WeakHashMap&lt;/td&gt;
&lt;td&gt;值不会在别处使用时就可以被垃圾回收的映射&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;IdentityHashMap&lt;/td&gt;
&lt;td&gt;用==而不是用equals比较键的映射&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;4-泛型&#34;&gt;&lt;a href=&#34;#4-泛型&#34; class=&#34;headerlink&#34; title=&#34;4. 泛型&#34;&gt;&lt;/a&gt;4. 泛型&lt;/h2&gt;&lt;p&gt;当创建集合时不知道用什么类型定义，则可以用泛型&lt;/p&gt;
&lt;p&gt;Java泛型中的标记符含义：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;E - Element (在集合中使用，因为集合中存放的是元素)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;T - Type（Java 类）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;K - Key（键）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;V - Value（值）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;N - Number（数值类型）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;？ - 表示不确定的java类型&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如&lt;code&gt;ArrayList&amp;lt;E&amp;gt;、Collection&amp;lt;E&amp;gt;&lt;/code&gt;……&lt;/p&gt;
&lt;p&gt;泛型在创建对象时确定，如下：&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;List&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;list&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//此时E为Integer&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;把数据类型作为参数传递，复制给泛型E&lt;/p&gt;
&lt;h3 id=&#34;41-不适用泛型创建集合&#34;&gt;&lt;a href=&#34;#4-1-不适用泛型创建集合&#34; class=&#34;headerlink&#34; title=&#34;4.1 不适用泛型创建集合&#34;&gt;&lt;/a&gt;4.1 不适用泛型创建集合&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;ArrayList array&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;ssss&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;好处：可以添加任意类型元素&lt;/p&gt;
&lt;p&gt;坏处：不安全，容易引起异常（如类型转换等）&lt;/p&gt;
&lt;p&gt;对应的迭代器也不适用泛型。&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Iterator iterator&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//对应的迭代器也不使用泛型&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;42-使用泛型创建集合对象&#34;&gt;&lt;a href=&#34;#4-2-使用泛型创建集合对象&#34; class=&#34;headerlink&#34; title=&#34;4.2 使用泛型创建集合对象&#34;&gt;&lt;/a&gt;4.2 使用泛型创建集合对象&lt;/h3&gt;&lt;p&gt;好处：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;简单，避免了类型转换的异常&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;把运行期异常提前到了编译器（运行时才发现的错误编译的时候就给你报错）&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;坏处：只能存单一类型的元素&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;ArrayList&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; array2&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//而对应的迭代器也要用泛型&lt;/span&gt;
Iterator&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; iterator&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;array2&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;iterator&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;5-自定义泛型类&#34;&gt;&lt;a href=&#34;#5-自定义泛型类&#34; class=&#34;headerlink&#34; title=&#34;5. 自定义泛型类&#34;&gt;&lt;/a&gt;5. 自定义泛型类&lt;/h2&gt;&lt;h3 id=&#34;51-创建类&#34;&gt;&lt;a href=&#34;#5-1-创建类&#34; class=&#34;headerlink&#34; title=&#34;5.1 创建类&#34;&gt;&lt;/a&gt;5.1 创建类&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericClass&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; String name&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; E id&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;private&lt;/span&gt; E classId&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//各种方法&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;52-新建对象并使用&#34;&gt;&lt;a href=&#34;#5-2-新建对象并使用&#34; class=&#34;headerlink&#34; title=&#34;5.2 新建对象并使用&#34;&gt;&lt;/a&gt;5.2 新建对象并使用&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;GenericClass&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;student&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericClass&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;小明&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;65&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;152&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//该对象的泛型E就变成了Integer类型&lt;/span&gt;
student&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;setId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;73&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;student&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getClassId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34; &#34;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt;student&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getId&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//152 73&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;53-创建普通类中的泛型方法&#34;&gt;&lt;a href=&#34;#5-3-创建普通类中的泛型方法&#34; class=&#34;headerlink&#34; title=&#34;5.3 创建普通类中的泛型方法&#34;&gt;&lt;/a&gt;5.3 创建普通类中的泛型方法&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericMethod&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;M&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;M m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;m&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//泛型M在调用方法时传入的参数是什么类型就变为什么类型&lt;/span&gt;
GenericMethod demo&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericMethod&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
demo&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;hahaha&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//M可以是任何字符，甚至可以是中文&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;泛型&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;泛型 泛型&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;泛型&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//静态方法也可以用泛型&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;泛型&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;泛型 泛型&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;泛型&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//调用&lt;/span&gt;
GenericMethod&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;method2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;泛型&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//输出：泛型&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;54-创建有泛型的接口&#34;&gt;&lt;a href=&#34;#5-4-创建有泛型的接口&#34; class=&#34;headerlink&#34; title=&#34;5.4 创建有泛型的接口&#34;&gt;&lt;/a&gt;5.4 创建有泛型的接口&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericInterface&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;E&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;abstract&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;E e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;泛型在实现类中确定类型，如&lt;code&gt;Iterator&lt;/code&gt;接口&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericInterfaceImp&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericInterface&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Integer integer&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
GenericInterface pp&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericInterfaceImp&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
pp&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4456&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//4456&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在创建对象时确定泛型，如&lt;code&gt;ArrayList&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericInterfaceImp2&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;implements&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericInterface&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token annotation punctuation&#34;&gt;@Override&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Object o&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;o&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
GenericInterface&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;pq&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;GenericInterfaceImp2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
pq&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;method&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;4567&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//4567&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;55-泛型通配符&#34;&gt;&lt;a href=&#34;#5-5-泛型通配符：&#34; class=&#34;headerlink&#34; title=&#34;5.5 泛型通配符：?&#34;&gt;&lt;/a&gt;5.5 泛型通配符：?&lt;/h3&gt;&lt;p&gt;？：代表任意数据类型。不能创建对象使用，只能作为方法的参数使用&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;pra&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;ArrayList&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;?&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;list&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//主函数：&lt;/span&gt;
    ArrayList&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; str&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    str&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;122&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    ArrayList&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;Integer&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt; in&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;ArrayList&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;&gt;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;pra&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token function&#34;&gt;pra&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;in&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="Java" scheme="https://nitgod1996.com/categories/note/java/" />
        <category term="Java" scheme="https://nitgod1996.com/tags/Java/" />
        <category term="面向对象" scheme="https://nitgod1996.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/" />
        <updated>2021-05-18T11:43:42.000Z</updated>
    </entry>
    <entry>
        <id>https://nitgod1996.com/2021/05/17/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-Java%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC/</id>
        <title>随笔-Java调用Python脚本</title>
        <link rel="alternate" href="https://nitgod1996.com/2021/05/17/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-Java%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC/"/>
        <content type="html">&lt;h1 id=&#34;一-rest&#34;&gt;&lt;a href=&#34;#一、-REST&#34; class=&#34;headerlink&#34; title=&#34;一、 REST&#34;&gt;&lt;/a&gt;一、 REST&lt;/h1&gt;&lt;h2 id=&#34;1-什么是rest以及restful&#34;&gt;&lt;a href=&#34;#1-什么是REST以及RESTful&#34; class=&#34;headerlink&#34; title=&#34;1. 什么是REST以及RESTful&#34;&gt;&lt;/a&gt;1. 什么是REST以及RESTful&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;REST指的是一组架构约束条件和原则。” 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​        相当于是编写API的一套规则，像高德地图提供的API。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;URL&lt;/th&gt;
&lt;th&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZXN0YXBpLmFtYXAuY29tL3YzL3BsYWNlL3RleHQ/cGFyYW1ldGVycw==&#34;&gt;https://restapi.amap.com/v3/place/text?parameters&lt;/span&gt;&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;请求方式&lt;/td&gt;
&lt;td&gt;GET&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;上面是高德地图提供的API，返回的是json格式的数据信息。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt; 以下介绍REST的几大概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;资源与URI&lt;/li&gt;
&lt;li&gt;统一资源接口&lt;/li&gt;
&lt;li&gt;资源的表述&lt;/li&gt;
&lt;li&gt;资源的链接&lt;/li&gt;
&lt;li&gt;状态的转移&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;11-资源与uri&#34;&gt;&lt;a href=&#34;#1-1-资源与URI&#34; class=&#34;headerlink&#34; title=&#34;1.1 资源与URI&#34;&gt;&lt;/a&gt;1.1 资源与URI&lt;/h3&gt;&lt;p&gt;URI是用于标记网络上的资源的&lt;em&gt;唯一标识&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 要让一个资源可以被识别，需要有个唯一标识，在Web中这个唯一标识就是URI(Uniform Resource Identifier)。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;URI既可以看成是资源的地址，也可以看成是资源的名称。&lt;/p&gt;
&lt;p&gt;以下是URI的编写技巧：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用_或-分隔单词。如&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5vc2NoaW5hLm5ldC9uZXdzLzM4MTE5L29zY2hpbmEtdHJhbnNsYXRlLXJld2FyZC1wbGFuJUUzJTgwJTgy&#34;&gt;http://www.oschina.net/news/38119/oschina-translate-reward-plan。&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;使用/来表示资源的层级关系&lt;/li&gt;
&lt;li&gt;使用?用来参数传递，&amp;amp;分隔参数&lt;ul&gt;
&lt;li&gt;如&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9yZXN0YXBpLmFtYXAuY29tL3YzL3BsYWNlL3RleHQ/a2V5d29yZHM9JUU1JThDJTk3JUU0JUJBJUFDJUU1JUE0JUE3JUU1JUFEJUE2JmFtcDtjaXR5PWJlaWppbmcmYW1wO291dHB1dD14bWwmYW1wO29mZnNldD0yMCZhbXA7cGFnZT0xJmFtcDtrZXk9&#34;&gt;https://restapi.amap.com/v3/place/text?keywords=北京大学&amp;amp;city=beijing&amp;amp;output=xml&amp;amp;offset=20&amp;amp;page=1&amp;amp;key=&lt;/span&gt;&amp;lt;用户的key&amp;gt;&amp;amp;extensions=all&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;,或;可以用来表示同级资源的关系&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-统一资源接口&#34;&gt;&lt;a href=&#34;#1-2-统一资源接口&#34; class=&#34;headerlink&#34; title=&#34;1.2 统一资源接口&#34;&gt;&lt;/a&gt;1.2 统一资源接口&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;RESTful架构应该遵循统一接口原则，接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;13-资源的表述&#34;&gt;&lt;a href=&#34;#1-3-资源的表述&#34; class=&#34;headerlink&#34; title=&#34;1.3 资源的表述&#34;&gt;&lt;/a&gt;1.3 资源的表述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;客户端通过HTTP方法可以获取资源。确切的说，客户端获取的只是资源的表述而已。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​        资源在外界的具体呈现，可以有多种形式。在客户端和服务端之间传送的也是资源的表述，而不是资源本身。&lt;/p&gt;
&lt;p&gt;​         例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt; 资源的表述包括数据和元数据（描述数据的数据），例如，HTTP头”Content-Type” 就是这样一个元数据属性。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;​        客户端需要在&lt;code&gt;Request&lt;/code&gt;头通过&lt;code&gt;Accept&lt;/code&gt;说明自己需要的格式，而服务端在&lt;code&gt;Content-Type&lt;/code&gt;返回该格式。如果不支持返回该格式，则报&lt;strong&gt;406错误&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL3Jlc3RmdWwtYXJjaGl0ZWN0dXJlLmh0bWw=&#34;&gt;参考菜鸟教程&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;2-python编写简单的restful-api&#34;&gt;&lt;a href=&#34;#2-python编写简单的RESTful-API&#34; class=&#34;headerlink&#34; title=&#34;2. python编写简单的RESTful API&#34;&gt;&lt;/a&gt;2. python编写简单的RESTful API&lt;/h2&gt;&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIyMTIxNTcvYXJ0aWNsZS9kZXRhaWxzLzc4MjE2MjY3&#34;&gt;参考博客&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;21-安装flask库&#34;&gt;&lt;a href=&#34;#2-1-安装flask库&#34; class=&#34;headerlink&#34; title=&#34;2.1 安装flask库&#34;&gt;&lt;/a&gt;2.1 安装flask库&lt;/h3&gt;&lt;p&gt;使用豆瓣源&lt;/p&gt;
&lt;pre class=&#34; language-bash&#34;&gt;&lt;code class=&#34;language-bash&#34;&gt;pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; flask -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-编写简单代码测试一下&#34;&gt;&lt;a href=&#34;#2-2-编写简单代码测试一下&#34; class=&#34;headerlink&#34; title=&#34;2.2 编写简单代码测试一下&#34;&gt;&lt;/a&gt;2.2 编写简单代码测试一下&lt;/h3&gt;&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; flask &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; Flask
app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Flask&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__name__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
@app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;route&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  
&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hello_world&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;hello world&#34;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__&lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    app&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;run&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;23-访问localhost5000&#34;&gt;&lt;a href=&#34;#2-3-访问localho​st-50​00&#34; class=&#34;headerlink&#34; title=&#34;2.3 访问localho​st:50​00&#34;&gt;&lt;/a&gt;2.3 访问localho​st:50​00&lt;/h3&gt;&lt;p&gt;&lt;img data-src=&#34;/2021/05/17/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-Java%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC/image-20210516142311629.png&#34; alt=&#34;image-20210516142311629&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;24-flask介绍&#34;&gt;&lt;a href=&#34;#2-4-Flask介绍&#34; class=&#34;headerlink&#34; title=&#34;2.4 Flask介绍&#34;&gt;&lt;/a&gt;2.4 Flask介绍&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;Flask是一个使用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9QeXRob24=&#34;&gt;Python&lt;/span&gt; 编写的轻量级 Web 应用框架。它可以很好地结合&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9NVkMlRTYlQTglQTElRTUlQkMlOEYvNzEzMTQ3&#34;&gt;MVC模式&lt;/span&gt;进行开发，开发人员分工合作，小型团队在短时间内就可以完成功能丰富的中小型网站或&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9XZWIlRTYlOUMlOEQlRTUlOEElQTEvMjgzNzU5Mw==&#34;&gt;Web服务&lt;/span&gt;的实现。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;25-总结&#34;&gt;&lt;a href=&#34;#2-5-总结&#34; class=&#34;headerlink&#34; title=&#34;2.5 总结&#34;&gt;&lt;/a&gt;2.5 总结&lt;/h3&gt;&lt;p&gt;​        此方法是通过调用flask部署到线上的API实现的Java-Python交互。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;调用方便，直接调取API即可获取数据。&lt;/li&gt;
&lt;li&gt;减少耦合度&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;缺点是需要提前部署，且不能断开&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&#34;二-rpc&#34;&gt;&lt;a href=&#34;#二、-RPC&#34; class=&#34;headerlink&#34; title=&#34;二、 RPC&#34;&gt;&lt;/a&gt;二、 RPC&lt;/h1&gt;&lt;h2 id=&#34;1-什么是rpc&#34;&gt;&lt;a href=&#34;#1-什么是RPC&#34; class=&#34;headerlink&#34; title=&#34;1. 什么是RPC&#34;&gt;&lt;/a&gt;1. 什么是RPC&lt;/h2&gt;&lt;p&gt;RPC：Remote Procedure Call 远程过程调用&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;RPC就是要像调用本地的函数一样去调远程函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在远程调用时，我们需要执行的函数体是在远程的机器上的。以下是一些RPC的概念&lt;/p&gt;
&lt;h3 id=&#34;11-call-id映射&#34;&gt;&lt;a href=&#34;#1-1-Call-ID映射&#34; class=&#34;headerlink&#34; title=&#34;1.1 Call ID映射&#34;&gt;&lt;/a&gt;1.1 Call ID映射&lt;/h3&gt;&lt;p&gt;​    我们如何告诉远程机器我们要调用哪个函数？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在本地调用中：函数体是直接通过函数指针来指定的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在RPC中：每个函数都有自己的一个ID，这个ID是所有进程中都是唯一确定的。&lt;strong&gt;客户端在做远程过程调用时，必须附上这个ID。&lt;/strong&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;12-序列化和反序列化&#34;&gt;&lt;a href=&#34;#1-2-序列化和反序列化&#34; class=&#34;headerlink&#34; title=&#34;1.2 序列化和反序列化&#34;&gt;&lt;/a&gt;1.2 序列化和反序列化&lt;/h3&gt;&lt;p&gt;​        客户端怎么把参数值传给远程的函数呢？&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;本地调用中：我们只需要把参数压到栈里，然后让函数自己去栈里读就行。&lt;/li&gt;
&lt;li&gt;RPC中：需要客户端把&lt;strong&gt;参数&lt;/strong&gt;先转成一个字节流，传给服务端后，再把字节流转成自己能读取的格式。这个过程叫序列化和反序列化。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;13-网络传输&#34;&gt;&lt;a href=&#34;#1-3-网络传输&#34; class=&#34;headerlink&#34; title=&#34;1.3 网络传输&#34;&gt;&lt;/a&gt;1.3 网络传输&lt;/h3&gt;&lt;p&gt;​        客户端和服务端是通过网络连接的。所有的数据都需要通过网络传输，因此就需要有一个网络传输层。&lt;/p&gt;
&lt;p&gt;​        尽管大部分RPC框架都使用TCP协议，但其实UDP也可以。&lt;/p&gt;
&lt;h2 id=&#34;2-rpc与rest的区别&#34;&gt;&lt;a href=&#34;#2-RPC与REST的区别&#34; class=&#34;headerlink&#34; title=&#34;2. RPC与REST的区别&#34;&gt;&lt;/a&gt;2. RPC与REST的区别&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;REST是一种架构风格，指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大部分的REST的实现中使用了RPC的机制，大致与有三部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;method：访问方式，&lt;code&gt;get&lt;/code&gt;，&lt;code&gt;post&lt;/code&gt;之类的&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Host/post：URI(统一资源标识)、服务器，端口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Path：路径&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;RPC是远程过程调用，就是像调用本地方法一样调用远程方法&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通常的调用过程，把函数序列化，远端收到后，再把函数反序列化，完成函数调用。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;比较项&lt;/th&gt;
&lt;th&gt;REST&lt;/th&gt;
&lt;th&gt;RPC&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;通信协议&lt;/td&gt;
&lt;td&gt;HTTP&lt;/td&gt;
&lt;td&gt;一般使用TCP&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;性能&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;灵活度&lt;/td&gt;
&lt;td&gt;高&lt;/td&gt;
&lt;td&gt;低&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2 id=&#34;2-实现java调用python函数&#34;&gt;&lt;a href=&#34;#2-实现Java调用Python函数&#34; class=&#34;headerlink&#34; title=&#34;2. 实现Java调用Python函数&#34;&gt;&lt;/a&gt;2. 实现Java调用Python函数&lt;/h2&gt;&lt;p&gt;主要RPC适用C/S模式的项目，还需要搭配Netty，所以暂时放弃此方法。&lt;/p&gt;
&lt;h1 id=&#34;三-直接使用runtime推荐&#34;&gt;&lt;a href=&#34;#三、-直接使用Runtime-推荐&#34; class=&#34;headerlink&#34; title=&#34;三、 直接使用Runtime(推荐)&#34;&gt;&lt;/a&gt;三、 直接使用Runtime(推荐)&lt;/h1&gt;&lt;p&gt;​        在Java中如果需要调用第三方程序/脚本，可以直接通过Runtime实现，这也是最直接最粗暴的做法。&lt;/p&gt;
&lt;h2 id=&#34;1-无参调用&#34;&gt;&lt;a href=&#34;#1-无参调用&#34; class=&#34;headerlink&#34; title=&#34;1. 无参调用&#34;&gt;&lt;/a&gt;1. 无参调用&lt;/h2&gt;&lt;h3 id=&#34;11-python代码&#34;&gt;&lt;a href=&#34;#1-1-Python代码&#34; class=&#34;headerlink&#34; title=&#34;1.1 Python代码&#34;&gt;&lt;/a&gt;1.1 Python代码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;runtimeDemo2.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sys
sys&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 新加入的&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; Java_connect_Python&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;funDemo &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; hello
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; numpy &lt;span class=&#34;token keyword&#34;&gt;as&lt;/span&gt; np
a&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;np&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;array&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; __name__ &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;__main__&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
    hello&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;funDemo.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;def&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;Hello,Python&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;12-java代码&#34;&gt;&lt;a href=&#34;#1-2-java代码&#34; class=&#34;headerlink&#34; title=&#34;1.2 java代码&#34;&gt;&lt;/a&gt;1.2 java代码&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;example&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;simpleDemo&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;BufferedReader&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;File&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;IOException&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;InputStreamReader&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

 
&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RuntimeDemo02&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String executer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// python绝对路径&lt;/span&gt;
        String file_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python\\runtimeDemo2.py&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; command_line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;executer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_path&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
          &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;//  Process process = Runtime.getRuntime().exec(command_line);&lt;/span&gt;
            Process process &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command_line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;null&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            BufferedReader in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GBK&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            String line&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; null&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
                System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// java代码中的 process.waitFor() 返回值（和我们通常意义上见到的0与1定义正好相反）&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 返回值为0 - 表示调用python脚本成功；&lt;/span&gt;
            &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 返回值为1 - 表示调用python脚本失败。&lt;/span&gt;
            &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; re &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;调用 python 脚本是否成功：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; re&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            e1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
            e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;2-传参调用&#34;&gt;&lt;a href=&#34;#2-传参调用&#34; class=&#34;headerlink&#34; title=&#34;2. 传参调用&#34;&gt;&lt;/a&gt;2. 传参调用&lt;/h2&gt;&lt;h3 id=&#34;21-python代码&#34;&gt;&lt;a href=&#34;#2-1-Python代码&#34; class=&#34;headerlink&#34; title=&#34;2.1 Python代码&#34;&gt;&lt;/a&gt;2.1 Python代码&lt;/h3&gt;&lt;p&gt;&lt;code&gt;add.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# coding=utf-8&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;from&lt;/span&gt; sys &lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; argv
 
a &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
b &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; argv&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;
res &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;a&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; int&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;b&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;print&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;res&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;22-java代码&#34;&gt;&lt;a href=&#34;#2-2-Java代码&#34; class=&#34;headerlink&#34; title=&#34;2.2 Java代码&#34;&gt;&lt;/a&gt;2.2 Java代码&lt;/h3&gt;&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;package&lt;/span&gt; com&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;example&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;simpleDemo&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;DataInputStream&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;IOException&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; java&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;io&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;InputStream&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;

&lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;RuntimeDemo01&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;main&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; args&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;throws&lt;/span&gt; IOException&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; InterruptedException &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String exe &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String command &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python\\add.py&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String num1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String num2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; cmdArr &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;exe&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; command&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; num2&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        Process process &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;cmdArr&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        InputStream is &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        DataInputStream dis &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;DataInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;is&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        String str &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; dis&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;str&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;3-解析&#34;&gt;&lt;a href=&#34;#3-解析&#34; class=&#34;headerlink&#34; title=&#34;3. 解析&#34;&gt;&lt;/a&gt;3. 解析&lt;/h2&gt;&lt;h3 id=&#34;31-当py调用其他py函数时&#34;&gt;&lt;a href=&#34;#3-1-当py调用其他py函数时&#34; class=&#34;headerlink&#34; title=&#34;3.1 当py调用其他py函数时&#34;&gt;&lt;/a&gt;3.1 当py调用其他py函数时&lt;/h3&gt;&lt;p&gt;​        当Java需要调用的py脚本，其内部引用了其他py脚本定义的函数时，需要指定其包的路径，否则找不到模块。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;在py文件添加&lt;/p&gt;
&lt;pre class=&#34; language-python&#34;&gt;&lt;code class=&#34;language-python&#34;&gt;&lt;span class=&#34;token keyword&#34;&gt;import&lt;/span&gt; sys
sys&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;path&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;append&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;../&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;  &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;# 新加入的&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Java调用时，使用&lt;code&gt;Runtime.getRuntime().exec(cmd,null,new File(path));&lt;/code&gt;方法&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;String executer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// python绝对路径&lt;/span&gt;
String file_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python\\runtimeDemo2.py&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; command_line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;executer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_path&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
Process process &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command_line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;null&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;32-步骤解析&#34;&gt;&lt;a href=&#34;#3-2-步骤解析&#34; class=&#34;headerlink&#34; title=&#34;3.2 步骤解析&#34;&gt;&lt;/a&gt;3.2 步骤解析&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;通过&lt;code&gt;Runtime.getRuntime().exec()&lt;/code&gt;创建进程类&lt;code&gt;Process&lt;/code&gt;。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;定义命令行执行脚本的语句&lt;code&gt;command_line&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;String executer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// python绝对路径&lt;/span&gt;
String file_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python\\runtimeDemo2.py&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; command_line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;executer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_path&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;如果是需要传参的，那么在&lt;code&gt;command_line&lt;/code&gt;中添加，如下&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;String num1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String num2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; command_line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;executer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num2&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;定义模块路径（py的项目路径）&lt;code&gt;module_path&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;String module_path&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建进程类&lt;code&gt;process&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;Process process &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command_line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;null&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;module_path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;捕获&lt;code&gt;process&lt;/code&gt;的输出流，读取输出内容&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;创建&lt;code&gt;process&lt;/code&gt;的输入流，此处选择&lt;code&gt;reader&lt;/code&gt;，可以识别汉语字码&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;InputStreamReader is &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GBK&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;捕获输出流&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;BufferedReader in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;is&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;读取输出内容&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;String line&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; null&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;关闭输出流&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;打印状态信息&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// java代码中的 process.waitFor() 返回值（和我们通常意义上见到的0与1定义正好相反）&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 返回值为0 - 表示调用python脚本成功；&lt;/span&gt;
&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 返回值为1 - 表示调用python脚本失败。&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; re &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;调用 python 脚本是否成功：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; re&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;完整代码如下&lt;/strong&gt;&lt;/p&gt;
&lt;pre class=&#34; language-java&#34;&gt;&lt;code class=&#34;language-java&#34;&gt;String executer &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// python绝对路径&lt;/span&gt;
String file_path &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python\\runtimeDemo2.py&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String num1 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;1&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String num2 &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;2&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; command_line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;String&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;executer&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt; file_path&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num1&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;num2&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
String module_path&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;F:\\project\\demo01\\Java_connect_Python&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token keyword&#34;&gt;try&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    Process process &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Runtime&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getRuntime&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;exec&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;command_line&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;null&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;File&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;module_path&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    InputStreamReader is &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;InputStreamReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;getInputStream&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;GBK&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    BufferedReader in &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;token class-name&#34;&gt;BufferedReader&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;is&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    String line&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;readLine&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;!=&lt;/span&gt; null&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
        System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;line&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    in&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;close&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// java代码中的 process.waitFor() 返回值（和我们通常意义上见到的0与1定义正好相反）&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 返回值为0 - 表示调用python脚本成功；&lt;/span&gt;
    &lt;span class=&#34;token comment&#34; spellcheck=&#34;true&#34;&gt;// 返回值为1 - 表示调用python脚本失败。&lt;/span&gt;
    &lt;span class=&#34;token keyword&#34;&gt;int&lt;/span&gt; re &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; process&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;waitFor&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    System&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;out&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;println&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;调用 python 脚本是否成功：&#34;&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;+&lt;/span&gt; re&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;IOException&lt;/span&gt; e1&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    e1&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;token keyword&#34;&gt;catch&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token class-name&#34;&gt;InterruptedException&lt;/span&gt; e&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;123&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
    e&lt;span class=&#34;token punctuation&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;printStackTrace&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;token operator&#34;&gt;&amp;amp;&lt;/span&gt;#&lt;span class=&#34;token number&#34;&gt;125&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;33-函数解析&#34;&gt;&lt;a href=&#34;#3-3-函数解析&#34; class=&#34;headerlink&#34; title=&#34;3.3 函数解析&#34;&gt;&lt;/a&gt;3.3 函数解析&lt;/h3&gt;&lt;h4 id=&#34;331-类runtime&#34;&gt;&lt;a href=&#34;#3-3-1-类Runtime&#34; class=&#34;headerlink&#34; title=&#34;3.3.1 类Runtime&#34;&gt;&lt;/a&gt;3.3.1 类&lt;code&gt;Runtime&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;每个 Java 应用程序都有一个 &lt;code&gt;Runtime&lt;/code&gt; 类实例，使应用程序能够与其运行的环境相连接。可以通过  &lt;code&gt;getRuntime&lt;/code&gt; 方法获取当前运行时。 &lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值类型&lt;/th&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;static Runtime&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Runtime.getRuntime()&lt;/code&gt; &lt;br&gt;        返回与当前 Java 应用程序相关的运行时对象。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;Process&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;Runtime.getRuntime().exec(String[] cmdarray, String[] envp, File dir) &lt;/code&gt;         &lt;br&gt;        在指定环境和工作目录的独立进程中执行指定的命令和变量。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h4 id=&#34;332-类process&#34;&gt;&lt;a href=&#34;#3-3-2-类Process&#34; class=&#34;headerlink&#34; title=&#34;3.3.2 类Process&#34;&gt;&lt;/a&gt;3.3.2 类&lt;code&gt;Process&lt;/code&gt;&lt;/h4&gt;&lt;p&gt;可通过&lt;code&gt;ProcessBuilder.start()&lt;/code&gt; 和 &lt;code&gt;Runtime.exec &lt;/code&gt;方法创建一个本机进程，并返回 &lt;code&gt;Process&lt;/code&gt; 子类的一个实例，该实例可用来控制进程并获得相关信息。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Process &lt;/code&gt;类提供了执行从&lt;strong&gt;进程输入、执行输出到进程、等待进程完成、检查进程的退出状态以及销毁（杀掉）进程&lt;/strong&gt;的方法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;返回值类型&lt;/th&gt;
&lt;th&gt;函数（以下process是Process的对象）&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abstract  InputStream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;process.getInputStream() &lt;/code&gt; &lt;br&gt;        获取子进程的输入流。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abstract  OutputStream&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;process.getOutputStream() &lt;/code&gt;         &lt;br&gt;        获取子进程的输出流。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abstract  int&lt;/code&gt;&lt;br&gt;返回：进程的出口值。&lt;br&gt;0 表示正常终止，1表示有错误&lt;/td&gt;
&lt;td&gt;&lt;code&gt;process.waitFor()&lt;/code&gt; &lt;br&gt;        导致当前线程等待，如有必要，一直要等到由该 Process 对象表示的进程已经终止。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h3 id=&#34;34-总结&#34;&gt;&lt;a href=&#34;#3-4-总结&#34; class=&#34;headerlink&#34; title=&#34;3.4 总结&#34;&gt;&lt;/a&gt;3.4 总结&lt;/h3&gt;&lt;p&gt;比起前面的，显然Java自带的Runtime更加方便、简单粗暴。此方法适用于离线项目。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;优点：&lt;ol&gt;
&lt;li&gt;简单、方便&lt;/li&gt;
&lt;li&gt;不需要部署，相当于直接内嵌在Java项目&lt;/li&gt;
&lt;li&gt;jdk自带功能，不需要其他外部依赖支持&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;缺点：&lt;ol&gt;
&lt;li&gt;耦合度过大，每次调用Python脚本都需要重写一次&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
</content>
        <category term="笔记" scheme="https://nitgod1996.com/categories/note/" />
        <category term="随笔" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/" />
        <category term="Python" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/Python/" />
        <category term="Java" scheme="https://nitgod1996.com/categories/note/%E9%9A%8F%E7%AC%94/java/" />
        <category term="Java" scheme="https://nitgod1996.com/tags/Java/" />
        <category term="Python" scheme="https://nitgod1996.com/tags/Python/" />
        <updated>2021-05-17T04:24:00.000Z</updated>
    </entry>
</feed>
