<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>宁理大神1996</title>
        <subtitle></subtitle>
        <icon>https://nitgod1996.com/images/favicon.ico</icon>
        <link>https://nitgod1996.com</link>
        <author>
          <name>宁理大神1996</name>
        </author>
        <description>宁理大神的个人博客</description>
        <language>zh-CN</language>
        <pubDate>Wed, 07 Sep 2022 20:00:42 +0800</pubDate>
        <lastBuildDate>Wed, 07 Sep 2022 20:00:42 +0800</lastBuildDate>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/09/07/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo000002/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/09/07/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo000002/</link>
            <pubDate>Wed, 07 Sep 2022 20:00:42 +0800</pubDate>
            <description><![CDATA[ /**
 * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可
 *
 *
 * @param array int整型一维数组
 * @param target int整型
 * @return int整型二维数组
 */
function combinationSum(array, target) {
    // write code here
    let ans = [];
    let dfs = (curIdx, curSum, temp) =&gt; {
        if (curIdx &gt;= array.length || curSum &gt; target) {
            return;
        } else if (array[curIdx] + curSum === target) {
            ans.push([...temp, array[curIdx]]);
            return;
        }
        dfs(curIdx, curSum + array[curIdx], [...temp, array[curIdx]]);
        dfs(curIdx + 1, curSum, [...temp]);
    };
    dfs(0, 0, []);
    return ans;
}

console.log(combinationSum([2, 3, 5], 8));
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo111/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo111/</link>
            <pubDate>Fri, 02 Sep 2022 14:53:20 +0800</pubDate>
            <description><![CDATA[ let Tree = function (val, children) {
    this.val = val || 0;
    this.children = children || [];
};
let method = (n, nums1, nums2) =&gt; {
    let tree = new Array(n).fill(0).map(() =&gt; [0, [], 0]);
    for (let i = 0; i &lt; n - 1; i++) {
        tree[i][0] = nums2[i];
        tree[nums1[i] - 1][1].push(i + 1);
    }
    tree[n - 1][0] = nums2[n - 1];

    let dfs = (idx) =&gt; {
        let set = new Set([tree[idx][0]]);
        if (tree[idx][1].length === 0) {
            tree[idx][2] = set.size;
            return set;
        }

        for (let i = 0; i &lt; tree[idx][1].length; i++) {
            let curSet = dfs(tree[idx][1][i]);
            for (let s of curSet) {
                set.add(s);
            }
        }
        tree[idx][2] = set.size;
        return set;
        //  console.log(tree);
    };
    dfs(0);

    console.log(tree.map((item) =&gt; (item = item[2])));
};

method(6, [1, 2, 2, 1, 4], &#39;ABCCAD&#39;);
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/xiec/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/xiec/</link>
            <pubDate>Fri, 02 Sep 2022 13:32:45 +0800</pubDate>
            <description><![CDATA[  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/09/01/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/CSS/%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/09/01/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/CSS/%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0/</link>
            <pubDate>Thu, 01 Sep 2022 17:31:32 +0800</pubDate>
            <description><![CDATA[ &lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;title&gt;Document&lt;/title&gt;
    &lt;style&gt;
        h2 {
            margin: 19px;
        }
        div {
            margin: 15px;
        }
        p {
            margin: 16px;
        }
    &lt;/style&gt;
&lt;/head&gt;
&lt;body&gt;
    &lt;main class=&#34;main&#34;&gt;
        &lt;h2 id=&#34;come-join-us&#34;&gt;Come join us!&lt;/h2&gt;
        &lt;div&gt;
            &lt;p&gt;
                &lt;!--无论嵌套多少层，都会产生折叠--&gt;
                The Franklin Running club meets at 6:00pm
            &lt;/p&gt;
        &lt;/div&gt;
    &lt;/main&gt;
&lt;/body&gt;
&lt;/html&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/474.%20%E4%B8%80%E5%92%8C%E9%9B%B6/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/474.%20%E4%B8%80%E5%92%8C%E9%9B%B6/</link>
            <pubDate>Tue, 30 Aug 2022 17:37:36 +0800</pubDate>
            <description><![CDATA[ /**
 * 0-1背包
 * 很明显，0和1的数量均为weight，而子集长度是value
 * @param {string[]} strs
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var findMaxForm = function (strs, m, n) {
    strs.forEach((item) =&gt; {
        let zeros = 0,
            ones = 0;
        for (let i = 0; i &lt; item.length; i++) {
            if (item[i] === &#39;0&#39;) {
                zeros++;
            } else {
                ones++;
            }
            item = zeros + &#39;&#39; + ones;
        }
    });
    let dp = new Array(m + 1).fill(0).map(() =&gt; new Array(n + 1).fill(0));
    for (let i = 0; i &lt; strs.length; i++) {
        for (let j = 0; j  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/494.%20%E7%9B%AE%E6%A0%87%E5%92%8C/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/494.%20%E7%9B%AE%E6%A0%87%E5%92%8C/</link>
            <pubDate>Tue, 30 Aug 2022 15:25:55 +0800</pubDate>
            <description><![CDATA[ /**
 * dp[i][j]保存前i个数自由组合（加/减）得到j的种数
 * 因为nums可以随意添加+-，因此target正负的种数一定是一样的
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var findTargetSumWays1 = function (nums, target) {
    target = Math.abs(target);
    let n = nums.length,
        m = target + nums.reduce((a, b) =&gt; Math.abs(a) + Math.abs(b)) + 1;
    let dp = new Array(n).fill(0).map(() =&gt; new Array(m));
    for (let i = 0; i &lt; n; i++) {
        for (let j = 0; j &lt; m; j++) {
            if (i === 0) {
                dp[0][j] = Number(nums[0] === j) + Number(nums[0] === -j);
            } else {
                let add = dp[i - 1][j + nums[i]] === undefined ? dp[i - 1][-(j + nums[i])] : dp[i - 1][j + nums[i]],
                    sub = dp[i - 1][j - nums[i]] === undefined ? dp[i - 1][-(j - nums[i])] : dp[i - 1][j - nums[i]];

                dp[i][j] = add + sub;
            }
        }
    }
    console.log(dp);
    return dp[n - 1][target];
};
/**
 * 把target加到nums中，只要加起来有sum/2的就算能销完（因为+-可以任取）
 * 这样就可以只算+号了（-号认为是另一半sum/2）
 * dp[i][j]保存前i个数加起来为j的种数，j&lt;=sum 2 * @param {number[]} nums {number} target @return var findtargetsumways2=&#34;function&#34; (nums, target) { nums.push(math.abs(target)); let sum=&#34;nums.reduce((a,&#34; b)&gt; a + b);
    if (sum % 2) {
        return 0;
    }
    let n = nums.length,
        m = sum / 2 + 1;
    let dp = new Array(n).fill(0).map(() =&gt; new Array(m));
    for (let i = 0; i &lt; n; i++) {
        for (let j = 0; j &lt; m; j++) {
            if (i === 0) {
                dp[0][j] = Number(nums[i] === j);
            } else {
                dp[i][j] = (dp[i - 1][j - nums[i]] || 0) + dp[i - 1][j];
            }
        }
    }
    return dp[n - 1][sum / 2];
};
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var findTargetSumWays = function (nums, target) {
    nums.push(Math.abs(target));
    let sum = nums.reduce((a, b) =&gt; a + b);
    if (sum % 2) {
        return 0;
    }
    let n = nums.length,
        m = sum / 2 + 1;
    let dp = new Array(m).fill(0);
    for (let i = 0; i &lt; n; i++) {
        for (let j = m - 1; j &gt;= 0; j--) {
            if (i === 0) {
                dp[j] = Number(j === nums[i]);
            } else {
                dp[j] = (dp[j - nums[i]] || 0) + dp[j];
            }
        }
    }
    return dp[sum / 2];
};

console.log(findTargetSumWays([1, 1, 1, 1, 1], 3));
console.log(findTargetSumWays([0, 0, 0, 0, 0, 0, 0, 0, 1], 1));
&lt;/=sum&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1049.%20%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F%20II/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1049.%20%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F%20II/</link>
            <pubDate>Tue, 30 Aug 2022 13:53:40 +0800</pubDate>
            <description><![CDATA[ /**
 * 抽象成0-1背包。d[i][j]保存的是前i个石头组合（加减）与j的最小绝对值差
 * @param {number[]} stones
 * @return {number}
 */
var lastStoneWeightII1 = function (stones) {
    if (stones.length === 1) {
        return stones[0];
    }
    stones.sort((a, b) =&gt; a - b);
    let sum = stones.reduce((a, b) =&gt; a + b);
    let dp = new Array(stones.length - 1).fill(0).map(() =&gt; new Array(sum + 1));
    for (let i = 0; i &lt; dp.length; i++) {
        for (let j = 0; j &lt; dp[0].length; j++) {
            if (i === 0) {
                dp[0][j] = Math.abs(j - stones[0]);
            } else {
                dp[i][j] = Math.min(dp[i - 1][Math.abs(j - stones[i])], dp[i - 1][j + stones[i]]);
            }
        }
    }
    console.log(dp);
    return dp[dp.length - 1][stones[stones.length - 1]];
};
/**
 * 抽象成0-1背包。换种思路，找到总和尽量趋近于一半的两组互相减
 * dp[i][j]保存的是前i个石头组合（相加/不加）的&lt;=sum 2的最大值 * 这就抽象为了上一道题，找有没有sum 2的子集 @param {number[]} stones @return {number} var laststoneweightii2=&#34;function&#34; (stones) { let sum=&#34;stones.reduce((a,&#34; b)&gt; a + b);
    let n = stones.length,
        m = Math.floor(sum / 2) + 1;
    let dp = new Array(n).fill(0).map(() =&gt; new Array(m));
    for (let i = 0; i &lt; n; i++) {
        for (let j = 0; j &lt; m; j++) {
            if (i === 0) {
                dp[0][j] = stones[i] &lt;= 2 j ? stones[i] : 0; } else { dp[i][j]=&#34;Math.max(dp[i&#34; - 1][j stones[i]] + || 0, dp[i 1][j]); return sum * dp[n 1][m 1]; }; ** 抽象成0-1背包。用一维动规 @param {number[]} stones @return {number} var laststoneweightii=&#34;function&#34; (stones) let b)&gt; a + b);
    let n = stones.length,
        m = Math.floor(sum / 2) + 1;
    let dp = new Array(m).fill(0);
    for (let i = 0; i &lt; n; i++) {
        for (let j = m - 1; j &gt;= 0; j--) {
            dp[j] = Math.max(dp[j - stones[i]] + stones[i] || 0, dp[j]);
        }
    }

    return sum - 2 * dp[m - 1];
};
console.log(lastStoneWeightII([2, 7, 4, 1, 8, 1]));
console.log(lastStoneWeightII([31, 26, 33, 21, 40]));
&lt;/=&gt;&lt;/=sum&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/416.%20%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/416.%20%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/</link>
            <pubDate>Mon, 29 Aug 2022 21:10:53 +0800</pubDate>
            <description><![CDATA[ /**
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition1 = function (nums) {
    let sum = nums.reduce((a, b) =&gt; a + b);
    if (sum % 2 === 1) {
        return false;
    }
    let dp = new Array(nums.length).fill(0).map(() =&gt; new Array(sum / 2 + 1).fill(0));
    nums.sort((a, b) =&gt; a - b);
    for (let j = 0; j &lt; nums.length; j++) {
        for (let capacity = 0; capacity &lt;= sum 2; capacity++) { if (j=&#34;==&#34; 0) dp[0][capacity]=&#34;nums[0]&#34; &lt;=&#34;capacity&#34; ? nums[0] : 0; } else (nums[j]&gt; capacity) {
                dp[j][capacity] = dp[j - 1][capacity];
            } else {
                dp[j][capacity] = Math.max(dp[j - 1][capacity - nums[j]] + nums[j], dp[j - 1][capacity]);
            }
        }
    }

    return dp[dp.length - 1][sum / 2] === sum / 2;
};
/**
 * 一维数组动规
 * @param {number[]} nums
 * @return {boolean}
 */
var canPartition = function (nums) {
    let sum = nums.reduce((a, b) =&gt; a + b);
    if (sum % 2 === 1) {
        return false;
    }
    let dp = new Array(sum / 2 + 1).fill(0);
    nums.sort((a, b) =&gt; a - b);
    for (let j = 0; j &lt; nums.length; j++) {
        for (let capacity = sum / 2; capacity &gt;= 0; capacity--) {
            if (nums[j] &lt;/=&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/96.%20%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/96.%20%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/</link>
            <pubDate>Mon, 29 Aug 2022 20:56:09 +0800</pubDate>
            <description><![CDATA[ /**
 * Sum(左边i个节点的种类*右边n-i-1的种类)
 * @param {number} n
 * @return {number}
 */
var numTrees = function (n) {
    let dp = new Array(n + 1).fill(0);
    dp[0] = 1;
    for (let i = 1; i  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/343.%20%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/343.%20%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/</link>
            <pubDate>Mon, 29 Aug 2022 20:34:10 +0800</pubDate>
            <description><![CDATA[ /**
 * @param {number} n
 * @return {number}
 */
var integerBreak = function (n) {
    let dp = new Array(n + 1);
    dp[0] = 0;
    dp[1] = 1;
    for (let i = 2; i &lt;= 2 3=&#34;6&#34; n; i++) { let max=&#34;0;&#34; for (let j=&#34;1;&#34; &lt; i; j++) * (i - j) 是单纯的把整数拆分为两个数相乘，而j dp[i j]是拆分成两个以及两个以上的个数相乘。 j] j, j); } dp[i]=&#34;max;&#34; return dp[n]; }; **&gt; 5,2 * 4 = 2 * 2 * 2= 8 &gt; 6, 2 * 5 = 10 &lt; 2 * 2 * 3 = 12
 * 如果一个最优乘积包含因子f&gt;=4，那么你可以用因子2和f-2替换它，而不会失去最优性，因为2*（f-2）=2f-4&gt;=f。
 * 因此，你永远不需要大于或等于4的因子，这意味着你只需要因子1、2和3
 * （而1当然是浪费的，你只需要在需要时将其用于n=2和n=3）。
 * 3*3比2*2*2好，所以你永远不会使用2超过两次
 * @param {number} n
 * @return {number}
 */
var integerBreak = function (n) {};
console.log(integerBreak(2));
console.log(integerBreak(10));
console.log(integerBreak(2));
&lt;/=&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/63.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84%20II/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/63.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84%20II/</link>
            <pubDate>Mon, 29 Aug 2022 20:21:20 +0800</pubDate>
            <description><![CDATA[ /**
 * @param {number[][]} obstacleGrid
 * @return {number}
 */
var uniquePathsWithObstacles = function (obstacleGrid) {
    let m = obstacleGrid.length,
        n = obstacleGrid[0].length;
    let dp = new Array(m).fill(0).map(() =&gt; new Array(n));
    dp[0][0] = obstacleGrid[0][0] ^ 1;
    for (let i = 0; i &lt; m; i++) {
        for (let j = 0; j &lt; n; j++) {
            if (i === 0 &amp;&amp; j === 0) {
                continue;
            }
            if (obstacleGrid[i][j] === 1) {
                dp[i][j] = 0;
            } else {
                dp[i][j] = (i &gt; 0 ? dp[i - 1][j] : 0) + (dp[i][j - 1] || 0);
            }
        }
    }

    return dp[m - 1][n - 1];
};
console.log(
    uniquePathsWithObstacles([
        [0, 0, 0],
        [0, 1, 0],
        [0, 0, 0],
    ])
);
console.log(
    uniquePathsWithObstacles([
        [0, 1],
        [0, 0],
    ])
);
console.log(uniquePathsWithObstacles([[1, 0]]));
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/62.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/62.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/</link>
            <pubDate>Mon, 29 Aug 2022 20:16:47 +0800</pubDate>
            <description><![CDATA[ /**
 * dp是二维数组，保存到每个格子的路径数
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
var uniquePaths = function (m, n) {
    let dp = new Array(m).fill(0).map(() =&gt; new Array(n));
    dp[0][0] = 1;
    for (let i = 0; i &lt; m; i++) {
        for (let j = 0; j &lt; n; j++) {
            if (i === 0 || j === 0) {
                dp[i][j] = 1;
            } else {
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
    }
    return dp[m - 1][n - 1];
};
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/746.%20%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/746.%20%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/</link>
            <pubDate>Mon, 29 Aug 2022 20:11:21 +0800</pubDate>
            <description><![CDATA[ /**
 *dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);
 * @param {number[]} cost
 * @return {number}
 */
var minCostClimbingStairs = function (cost) {
    let len = cost.length;
    let dp = new Array(len + 1);
    dp[0] = 0;
    dp[1] = 0;
    for (let i = 2; i  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/</link>
            <pubDate>Mon, 29 Aug 2022 20:06:25 +0800</pubDate>
            <description><![CDATA[ /**
 * 每种都可以从前一层+1 和 前2层+2得到，因此是n-1和n-2之和，也就是斐波那契数的变体
 * @param {number} n
 * @return {number}
 */
var climbStairs = function (n) {
    let dp = new Array(n + 1);
    dp[0] = 1;
    dp[1] = 1;
    for (let i = 2; i  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/509.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/509.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/</link>
            <pubDate>Mon, 29 Aug 2022 20:00:44 +0800</pubDate>
            <description><![CDATA[ /**
 * @param {number} n
 * @return {number}
 */
var fib1 = function (n) {
    if (n === 0) {
        return 0;
    } else if (n === 1) {
        return 1;
    }
    return fib(n - 1) + fib(n - 2);
};

/**
 * @param {number} n
 * @return {number}
 */
var fib = function (n) {
    let fibs = new Array(n + 1);
    fibs[0] = 0;
    fibs[1] = 1;
    for (let i = 2; i  ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo0003/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo0003/</link>
            <pubDate>Thu, 25 Aug 2022 19:17:46 +0800</pubDate>
            <description><![CDATA[ let Person = function () {};
let person = new Person();
console.log(person.constructor === Person); //true
console.log(Person.prototype.constructor === Person); //true
console.log(Person.prototype.constructor === Object); //false

console.log(person.__proto__ === Person.prototype); //true
console.log(Function.prototype.__proto__); //true
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/web/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/web/</link>
            <pubDate>Thu, 25 Aug 2022 16:06:23 +0800</pubDate>
            <description><![CDATA[ &lt;!DOCTYPE html&gt;
&lt;html lang=&#34;en&#34;&gt;
&lt;head&gt;
    &lt;meta charset=&#34;UTF-8&#34;&gt;
    &lt;title&gt;
        Title&lt;/title&gt;
&lt;/head&gt;
&lt;body&gt;
&lt;button id=&#34;connect&#34;&gt;
    连接
&lt;/button&gt;
&lt;button disabled id=&#34;sendMessage&#34;&gt;
    发送
&lt;/button&gt;
&lt;button disabled id=&#34;destroy&#34;&gt;
    关闭
&lt;/button&gt;
&lt;script type=&#34;module&#34;&gt;
    const name = &#39;test&#39;//连接用户名
    let connect = document.querySelector(&#39;#connect&#39;),//连接按钮
        sendMessage = document.querySelector(&#39;#sendMessage&#39;),//发送按钮
        destroy = document.querySelector(&#39;#destroy&#39;),//关闭按钮
        wsUrl = &#39;ws://127.0.0.1:1024/ws/?name=&#39; + name,//连接地址
        ws;

    connect.addEventListener(&#39;click&#39;, connectWebSocket)
    sendMessage.addEventListener(&#39;click&#39;, function (e) {
        ws.send(JSON.stringify({
            ModeCode: &#34;message&#34;,
            msg: &#39;hello&#39;
        }))
    })
    destroy.addEventListener(&#39;click&#39;, function (e) {
        ws.close()
        ws = null
    })

    function connectWebSocket () {
        if(!ws) {//第一次执行，初始化或ws断开时可执行
            ws = new WebSocket(wsUrl)
            initWebSocket()
        }
    }

    function initWebSocket () {
        ws.onopen = function (e) {
            setButtonState(&#39;open&#39;)
            console.log(&#39;开启&#39;)
        }//连接上时回调
        ws.onclose = function (e) {
            setButtonState(&#39;close&#39;)
            console.log(&#39;关闭&#39;)
        }//断开连接时回调
        ws.onmessage = function (e) {
            let data = JSON.parse(e.data)
            console.log(&#39;收到消息&#39; + data.msg)
        }//收到服务端消息
        ws.onerror = function (e) {
            setButtonState(&#39;close&#39;)
            console.log(&#39;出错&#39;)
        }//连接出错
    }

    /*
  * 设置按钮是否可点击
  * @param state：open表示开启状态，close表示关闭状态
  */
    function setButtonState (state) {
        switch(state) {
            case &#39;open&#39;:
                connect.disabled = true
                sendMessage.disabled = false
                destroy.disabled = false
                break;
            case &#39;close&#39;:
                connect.disabled = false
                sendMessage.disabled = true
                destroy.disabled = true
                break;
        }
    }
&lt;/script&gt;
&lt;/body&gt;
&lt;/html&gt;
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/server/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/server/</link>
            <pubDate>Thu, 25 Aug 2022 16:02:31 +0800</pubDate>
            <description><![CDATA[ const WebSocket = require(&#39;ws&#39;);
const port = 1024; //端口
const pathname = &#39;/ws/&#39;; //访问路径

new WebSocket.Server({ port }, function () {
    console.log(&#39;websocket服务开启&#39;);
}).on(&#39;connection&#39;, connectHandler);

function connectHandler(ws) {
    console.log(&#39;客户端连接&#39;);
    ws.on(&#39;error&#39;, errorHandler);
    ws.on(&#39;close&#39;, closeHandler);
    ws.on(&#39;message&#39;, messageHandler);
    setInterval(() =&gt; {
        ws.send(
            JSON.stringify({
                ModeCode: &#39;message&#39;,
                msg: &#39;推送&#39;,
            })
        );
    }, 1000);
}

function messageHandler(e) {
    console.info(&#39;接收客户端消息&#39;);
    e = e.toLocaleString();
    this.send(e);
}

function errorHandler(e) {
    console.info(&#39;客户端出错&#39;);
}

function closeHandler(e) {
    console.info(&#39;客户端已断开&#39;);
}
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/19/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E8%B4%AA%E5%BF%83/1005.%20K%20%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/19/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E8%B4%AA%E5%BF%83/1005.%20K%20%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/</link>
            <pubDate>Fri, 19 Aug 2022 17:09:51 +0800</pubDate>
            <description><![CDATA[ /**
 * @param {number[]} nums
 * @param {number} k
 * @return {number}
 */
var largestSumAfterKNegations = function (nums, k) {};
 ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://nitgod1996.com/2022/08/14/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo02/</guid>
            <title></title>
            <link>https://nitgod1996.com/2022/08/14/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo02/</link>
            <pubDate>Sun, 14 Aug 2022 11:13:34 +0800</pubDate>
            <description><![CDATA[ /**
 * @param {number} n
 * @return {number}
 */
var countSpecialNumbers = function (n) {
    // let bigN = BigInt(n);
    let dynamic = 0;
    for (let i = 1; i &lt;= n; i++) { if (isspecial(i)) dynamic++; } return dynamic; }; function isspecial(n) let s=&#34;String(n);&#34; set=&#34;new&#34; set(); for (let i=&#34;0;&#34; &lt; s.length; (set.has(s[i])) false; set.add(s[i]); true; var countnumberswithuniquedigits=&#34;function&#34; (n) (n=&#34;==&#34; 0) 1; 1) 10; res=&#34;10,&#34; cur=&#34;9;&#34; n - *=&#34;9&#34; i; +=&#34;cur;&#34; res; settimeout(()&gt; {
    console.log(&#39;3秒后&#39;);
}, 3000);
new Promise((resolve) =&gt; {
    resolve();
}).then(() =&gt; {
    console.log(countSpecialNumbers(999999999));
});
&lt;/=&gt; ]]></description>
        </item>
    </channel>
</rss>
