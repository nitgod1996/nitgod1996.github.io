{
    "version": "https://jsonfeed.org/version/1",
    "title": "宁理大神1996",
    "subtitle": "",
    "icon": "https://nitgod1996.com/images/favicon.ico",
    "description": "宁理大神的个人博客",
    "home_page_url": "https://nitgod1996.com",
    "items": [
        {
            "id": "https://nitgod1996.com/2022/09/07/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo000002/",
            "url": "https://nitgod1996.com/2022/09/07/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo000002/",
            "title": "",
            "date_published": "2022-09-07T12:00:42.544Z",
            "content_html": "/**\n * 代码中的类名、方法名、参数名已经指定，请勿修改，直接返回方法规定的值即可\n *\n *\n * @param array int整型一维数组\n * @param target int整型\n * @return int整型二维数组\n */\nfunction combinationSum(array, target) {\n    // write code here\n    let ans = [];\n    let dfs = (curIdx, curSum, temp) => {\n        if (curIdx >= array.length || curSum > target) {\n            return;\n        } else if (array[curIdx] + curSum === target) {\n            ans.push([...temp, array[curIdx]]);\n            return;\n        }\n        dfs(curIdx, curSum + array[curIdx], [...temp, array[curIdx]]);\n        dfs(curIdx + 1, curSum, [...temp]);\n    };\n    dfs(0, 0, []);\n    return ans;\n}\n\nconsole.log(combinationSum([2, 3, 5], 8));\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo111/",
            "url": "https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo111/",
            "title": "",
            "date_published": "2022-09-02T06:53:20.525Z",
            "content_html": "let Tree = function (val, children) {\n    this.val = val || 0;\n    this.children = children || [];\n};\nlet method = (n, nums1, nums2) => {\n    let tree = new Array(n).fill(0).map(() => [0, [], 0]);\n    for (let i = 0; i < n - 1; i++) {\n        tree[i][0] = nums2[i];\n        tree[nums1[i] - 1][1].push(i + 1);\n    }\n    tree[n - 1][0] = nums2[n - 1];\n\n    let dfs = (idx) => {\n        let set = new Set([tree[idx][0]]);\n        if (tree[idx][1].length === 0) {\n            tree[idx][2] = set.size;\n            return set;\n        }\n\n        for (let i = 0; i < tree[idx][1].length; i++) {\n            let curSet = dfs(tree[idx][1][i]);\n            for (let s of curSet) {\n                set.add(s);\n            }\n        }\n        tree[idx][2] = set.size;\n        return set;\n        //  console.log(tree);\n    };\n    dfs(0);\n\n    console.log(tree.map((item) => (item = item[2])));\n};\n\nmethod(6, [1, 2, 2, 1, 4], 'ABCCAD');\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/xiec/",
            "url": "https://nitgod1996.com/2022/09/02/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/xiec/",
            "title": "",
            "date_published": "2022-09-02T05:32:45.683Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/09/01/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/CSS/%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0/",
            "url": "https://nitgod1996.com/2022/09/01/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/CSS/%E5%A4%96%E8%BE%B9%E8%B7%9D%E6%8A%98%E5%8F%A0/",
            "title": "",
            "date_published": "2022-09-01T09:31:32.934Z",
            "content_html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Document</title>\n    <style>\n        h2 {\n            margin: 19px;\n        }\n        div {\n            margin: 15px;\n        }\n        p {\n            margin: 16px;\n        }\n    </style>\n</head>\n<body>\n    <main class=\"main\">\n        <h2 id=\"come-join-us\">Come join us!</h2>\n        <div>\n            <p>\n                <!--无论嵌套多少层，都会产生折叠-->\n                The Franklin Running club meets at 6:00pm\n            </p>\n        </div>\n    </main>\n</body>\n</html>",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/474.%20%E4%B8%80%E5%92%8C%E9%9B%B6/",
            "url": "https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/474.%20%E4%B8%80%E5%92%8C%E9%9B%B6/",
            "title": "",
            "date_published": "2022-08-30T09:37:36.797Z",
            "content_html": "/**\n * 0-1背包\n * 很明显，0和1的数量均为weight，而子集长度是value\n * @param {string[]} strs\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar findMaxForm = function (strs, m, n) {\n    strs.forEach((item) => {\n        let zeros = 0,\n            ones = 0;\n        for (let i = 0; i < item.length; i++) {\n            if (item[i] === '0') {\n                zeros++;\n            } else {\n                ones++;\n            }\n            item = zeros + '' + ones;\n        }\n    });\n    let dp = new Array(m + 1).fill(0).map(() => new Array(n + 1).fill(0));\n    for (let i = 0; i < strs.length; i++) {\n        for (let j = 0; j ",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/494.%20%E7%9B%AE%E6%A0%87%E5%92%8C/",
            "url": "https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/494.%20%E7%9B%AE%E6%A0%87%E5%92%8C/",
            "title": "",
            "date_published": "2022-08-30T07:25:55.017Z",
            "content_html": "/**\n * dp[i][j]保存前i个数自由组合（加/减）得到j的种数\n * 因为nums可以随意添加+-，因此target正负的种数一定是一样的\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar findTargetSumWays1 = function (nums, target) {\n    target = Math.abs(target);\n    let n = nums.length,\n        m = target + nums.reduce((a, b) => Math.abs(a) + Math.abs(b)) + 1;\n    let dp = new Array(n).fill(0).map(() => new Array(m));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i === 0) {\n                dp[0][j] = Number(nums[0] === j) + Number(nums[0] === -j);\n            } else {\n                let add = dp[i - 1][j + nums[i]] === undefined ? dp[i - 1][-(j + nums[i])] : dp[i - 1][j + nums[i]],\n                    sub = dp[i - 1][j - nums[i]] === undefined ? dp[i - 1][-(j - nums[i])] : dp[i - 1][j - nums[i]];\n\n                dp[i][j] = add + sub;\n            }\n        }\n    }\n    console.log(dp);\n    return dp[n - 1][target];\n};\n/**\n * 把target加到nums中，只要加起来有sum/2的就算能销完（因为+-可以任取）\n * 这样就可以只算+号了（-号认为是另一半sum/2）\n * dp[i][j]保存前i个数加起来为j的种数，j<=sum 2 * @param {number[]} nums {number} target @return var findtargetsumways2=\"function\" (nums, target) { nums.push(math.abs(target)); let sum=\"nums.reduce((a,\" b)> a + b);\n    if (sum % 2) {\n        return 0;\n    }\n    let n = nums.length,\n        m = sum / 2 + 1;\n    let dp = new Array(n).fill(0).map(() => new Array(m));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i === 0) {\n                dp[0][j] = Number(nums[i] === j);\n            } else {\n                dp[i][j] = (dp[i - 1][j - nums[i]] || 0) + dp[i - 1][j];\n            }\n        }\n    }\n    return dp[n - 1][sum / 2];\n};\n/**\n * @param {number[]} nums\n * @param {number} target\n * @return {number}\n */\nvar findTargetSumWays = function (nums, target) {\n    nums.push(Math.abs(target));\n    let sum = nums.reduce((a, b) => a + b);\n    if (sum % 2) {\n        return 0;\n    }\n    let n = nums.length,\n        m = sum / 2 + 1;\n    let dp = new Array(m).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = m - 1; j >= 0; j--) {\n            if (i === 0) {\n                dp[j] = Number(j === nums[i]);\n            } else {\n                dp[j] = (dp[j - nums[i]] || 0) + dp[j];\n            }\n        }\n    }\n    return dp[sum / 2];\n};\n\nconsole.log(findTargetSumWays([1, 1, 1, 1, 1], 3));\nconsole.log(findTargetSumWays([0, 0, 0, 0, 0, 0, 0, 0, 1], 1));\n</=sum>",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1049.%20%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F%20II/",
            "url": "https://nitgod1996.com/2022/08/30/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/1049.%20%E6%9C%80%E5%90%8E%E4%B8%80%E5%9D%97%E7%9F%B3%E5%A4%B4%E7%9A%84%E9%87%8D%E9%87%8F%20II/",
            "title": "",
            "date_published": "2022-08-30T05:53:40.418Z",
            "content_html": "/**\n * 抽象成0-1背包。d[i][j]保存的是前i个石头组合（加减）与j的最小绝对值差\n * @param {number[]} stones\n * @return {number}\n */\nvar lastStoneWeightII1 = function (stones) {\n    if (stones.length === 1) {\n        return stones[0];\n    }\n    stones.sort((a, b) => a - b);\n    let sum = stones.reduce((a, b) => a + b);\n    let dp = new Array(stones.length - 1).fill(0).map(() => new Array(sum + 1));\n    for (let i = 0; i < dp.length; i++) {\n        for (let j = 0; j < dp[0].length; j++) {\n            if (i === 0) {\n                dp[0][j] = Math.abs(j - stones[0]);\n            } else {\n                dp[i][j] = Math.min(dp[i - 1][Math.abs(j - stones[i])], dp[i - 1][j + stones[i]]);\n            }\n        }\n    }\n    console.log(dp);\n    return dp[dp.length - 1][stones[stones.length - 1]];\n};\n/**\n * 抽象成0-1背包。换种思路，找到总和尽量趋近于一半的两组互相减\n * dp[i][j]保存的是前i个石头组合（相加/不加）的<=sum 2的最大值 * 这就抽象为了上一道题，找有没有sum 2的子集 @param {number[]} stones @return {number} var laststoneweightii2=\"function\" (stones) { let sum=\"stones.reduce((a,\" b)> a + b);\n    let n = stones.length,\n        m = Math.floor(sum / 2) + 1;\n    let dp = new Array(n).fill(0).map(() => new Array(m));\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            if (i === 0) {\n                dp[0][j] = stones[i] <= 2 j ? stones[i] : 0; } else { dp[i][j]=\"Math.max(dp[i\" - 1][j stones[i]] + || 0, dp[i 1][j]); return sum * dp[n 1][m 1]; }; ** 抽象成0-1背包。用一维动规 @param {number[]} stones @return {number} var laststoneweightii=\"function\" (stones) let b)> a + b);\n    let n = stones.length,\n        m = Math.floor(sum / 2) + 1;\n    let dp = new Array(m).fill(0);\n    for (let i = 0; i < n; i++) {\n        for (let j = m - 1; j >= 0; j--) {\n            dp[j] = Math.max(dp[j - stones[i]] + stones[i] || 0, dp[j]);\n        }\n    }\n\n    return sum - 2 * dp[m - 1];\n};\nconsole.log(lastStoneWeightII([2, 7, 4, 1, 8, 1]));\nconsole.log(lastStoneWeightII([31, 26, 33, 21, 40]));\n</=></=sum>",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/416.%20%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/416.%20%E5%88%86%E5%89%B2%E7%AD%89%E5%92%8C%E5%AD%90%E9%9B%86/",
            "title": "",
            "date_published": "2022-08-29T13:10:53.700Z",
            "content_html": "/**\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition1 = function (nums) {\n    let sum = nums.reduce((a, b) => a + b);\n    if (sum % 2 === 1) {\n        return false;\n    }\n    let dp = new Array(nums.length).fill(0).map(() => new Array(sum / 2 + 1).fill(0));\n    nums.sort((a, b) => a - b);\n    for (let j = 0; j < nums.length; j++) {\n        for (let capacity = 0; capacity <= sum 2; capacity++) { if (j=\"==\" 0) dp[0][capacity]=\"nums[0]\" <=\"capacity\" ? nums[0] : 0; } else (nums[j]> capacity) {\n                dp[j][capacity] = dp[j - 1][capacity];\n            } else {\n                dp[j][capacity] = Math.max(dp[j - 1][capacity - nums[j]] + nums[j], dp[j - 1][capacity]);\n            }\n        }\n    }\n\n    return dp[dp.length - 1][sum / 2] === sum / 2;\n};\n/**\n * 一维数组动规\n * @param {number[]} nums\n * @return {boolean}\n */\nvar canPartition = function (nums) {\n    let sum = nums.reduce((a, b) => a + b);\n    if (sum % 2 === 1) {\n        return false;\n    }\n    let dp = new Array(sum / 2 + 1).fill(0);\n    nums.sort((a, b) => a - b);\n    for (let j = 0; j < nums.length; j++) {\n        for (let capacity = sum / 2; capacity >= 0; capacity--) {\n            if (nums[j] </=>",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/96.%20%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/96.%20%E4%B8%8D%E5%90%8C%E7%9A%84%E4%BA%8C%E5%8F%89%E6%90%9C%E7%B4%A2%E6%A0%91/",
            "title": "",
            "date_published": "2022-08-29T12:56:09.849Z",
            "content_html": "/**\n * Sum(左边i个节点的种类*右边n-i-1的种类)\n * @param {number} n\n * @return {number}\n */\nvar numTrees = function (n) {\n    let dp = new Array(n + 1).fill(0);\n    dp[0] = 1;\n    for (let i = 1; i ",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/343.%20%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/343.%20%E6%95%B4%E6%95%B0%E6%8B%86%E5%88%86/",
            "title": "",
            "date_published": "2022-08-29T12:34:10.094Z",
            "content_html": "/**\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function (n) {\n    let dp = new Array(n + 1);\n    dp[0] = 0;\n    dp[1] = 1;\n    for (let i = 2; i <= 2 3=\"6\" n; i++) { let max=\"0;\" for (let j=\"1;\" < i; j++) * (i - j) 是单纯的把整数拆分为两个数相乘，而j dp[i j]是拆分成两个以及两个以上的个数相乘。 j] j, j); } dp[i]=\"max;\" return dp[n]; }; **> 5,2 * 4 = 2 * 2 * 2= 8 > 6, 2 * 5 = 10 < 2 * 2 * 3 = 12\n * 如果一个最优乘积包含因子f>=4，那么你可以用因子2和f-2替换它，而不会失去最优性，因为2*（f-2）=2f-4>=f。\n * 因此，你永远不需要大于或等于4的因子，这意味着你只需要因子1、2和3\n * （而1当然是浪费的，你只需要在需要时将其用于n=2和n=3）。\n * 3*3比2*2*2好，所以你永远不会使用2超过两次\n * @param {number} n\n * @return {number}\n */\nvar integerBreak = function (n) {};\nconsole.log(integerBreak(2));\nconsole.log(integerBreak(10));\nconsole.log(integerBreak(2));\n</=>",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/63.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84%20II/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/63.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84%20II/",
            "title": "",
            "date_published": "2022-08-29T12:21:20.841Z",
            "content_html": "/**\n * @param {number[][]} obstacleGrid\n * @return {number}\n */\nvar uniquePathsWithObstacles = function (obstacleGrid) {\n    let m = obstacleGrid.length,\n        n = obstacleGrid[0].length;\n    let dp = new Array(m).fill(0).map(() => new Array(n));\n    dp[0][0] = obstacleGrid[0][0] ^ 1;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i === 0 && j === 0) {\n                continue;\n            }\n            if (obstacleGrid[i][j] === 1) {\n                dp[i][j] = 0;\n            } else {\n                dp[i][j] = (i > 0 ? dp[i - 1][j] : 0) + (dp[i][j - 1] || 0);\n            }\n        }\n    }\n\n    return dp[m - 1][n - 1];\n};\nconsole.log(\n    uniquePathsWithObstacles([\n        [0, 0, 0],\n        [0, 1, 0],\n        [0, 0, 0],\n    ])\n);\nconsole.log(\n    uniquePathsWithObstacles([\n        [0, 1],\n        [0, 0],\n    ])\n);\nconsole.log(uniquePathsWithObstacles([[1, 0]]));\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/62.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/62.%20%E4%B8%8D%E5%90%8C%E8%B7%AF%E5%BE%84/",
            "title": "",
            "date_published": "2022-08-29T12:16:47.641Z",
            "content_html": "/**\n * dp是二维数组，保存到每个格子的路径数\n * @param {number} m\n * @param {number} n\n * @return {number}\n */\nvar uniquePaths = function (m, n) {\n    let dp = new Array(m).fill(0).map(() => new Array(n));\n    dp[0][0] = 1;\n    for (let i = 0; i < m; i++) {\n        for (let j = 0; j < n; j++) {\n            if (i === 0 || j === 0) {\n                dp[i][j] = 1;\n            } else {\n                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];\n            }\n        }\n    }\n    return dp[m - 1][n - 1];\n};\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/746.%20%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/746.%20%E4%BD%BF%E7%94%A8%E6%9C%80%E5%B0%8F%E8%8A%B1%E8%B4%B9%E7%88%AC%E6%A5%BC%E6%A2%AF/",
            "title": "",
            "date_published": "2022-08-29T12:11:21.574Z",
            "content_html": "/**\n *dp[i] = Math.min(dp[i - 1] + cost[i - 1], dp[i - 2] + cost[i - 2]);\n * @param {number[]} cost\n * @return {number}\n */\nvar minCostClimbingStairs = function (cost) {\n    let len = cost.length;\n    let dp = new Array(len + 1);\n    dp[0] = 0;\n    dp[1] = 0;\n    for (let i = 2; i ",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/70.%20%E7%88%AC%E6%A5%BC%E6%A2%AF/",
            "title": "",
            "date_published": "2022-08-29T12:06:25.474Z",
            "content_html": "/**\n * 每种都可以从前一层+1 和 前2层+2得到，因此是n-1和n-2之和，也就是斐波那契数的变体\n * @param {number} n\n * @return {number}\n */\nvar climbStairs = function (n) {\n    let dp = new Array(n + 1);\n    dp[0] = 1;\n    dp[1] = 1;\n    for (let i = 2; i ",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/509.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/",
            "url": "https://nitgod1996.com/2022/08/29/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/509.%20%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E6%95%B0/",
            "title": "",
            "date_published": "2022-08-29T12:00:44.404Z",
            "content_html": "/**\n * @param {number} n\n * @return {number}\n */\nvar fib1 = function (n) {\n    if (n === 0) {\n        return 0;\n    } else if (n === 1) {\n        return 1;\n    }\n    return fib(n - 1) + fib(n - 2);\n};\n\n/**\n * @param {number} n\n * @return {number}\n */\nvar fib = function (n) {\n    let fibs = new Array(n + 1);\n    fibs[0] = 0;\n    fibs[1] = 1;\n    for (let i = 2; i ",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo0003/",
            "url": "https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo0003/",
            "title": "",
            "date_published": "2022-08-25T11:17:46.076Z",
            "content_html": "let Person = function () {};\nlet person = new Person();\nconsole.log(person.constructor === Person); //true\nconsole.log(Person.prototype.constructor === Person); //true\nconsole.log(Person.prototype.constructor === Object); //false\n\nconsole.log(person.__proto__ === Person.prototype); //true\nconsole.log(Function.prototype.__proto__); //true\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/web/",
            "url": "https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/web/",
            "title": "",
            "date_published": "2022-08-25T08:06:23.943Z",
            "content_html": "<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>\n        Title</title>\n</head>\n<body>\n<button id=\"connect\">\n    连接\n</button>\n<button disabled id=\"sendMessage\">\n    发送\n</button>\n<button disabled id=\"destroy\">\n    关闭\n</button>\n<script type=\"module\">\n    const name = 'test'//连接用户名\n    let connect = document.querySelector('#connect'),//连接按钮\n        sendMessage = document.querySelector('#sendMessage'),//发送按钮\n        destroy = document.querySelector('#destroy'),//关闭按钮\n        wsUrl = 'ws://127.0.0.1:1024/ws/?name=' + name,//连接地址\n        ws;\n\n    connect.addEventListener('click', connectWebSocket)\n    sendMessage.addEventListener('click', function (e) {\n        ws.send(JSON.stringify({\n            ModeCode: \"message\",\n            msg: 'hello'\n        }))\n    })\n    destroy.addEventListener('click', function (e) {\n        ws.close()\n        ws = null\n    })\n\n    function connectWebSocket () {\n        if(!ws) {//第一次执行，初始化或ws断开时可执行\n            ws = new WebSocket(wsUrl)\n            initWebSocket()\n        }\n    }\n\n    function initWebSocket () {\n        ws.onopen = function (e) {\n            setButtonState('open')\n            console.log('开启')\n        }//连接上时回调\n        ws.onclose = function (e) {\n            setButtonState('close')\n            console.log('关闭')\n        }//断开连接时回调\n        ws.onmessage = function (e) {\n            let data = JSON.parse(e.data)\n            console.log('收到消息' + data.msg)\n        }//收到服务端消息\n        ws.onerror = function (e) {\n            setButtonState('close')\n            console.log('出错')\n        }//连接出错\n    }\n\n    /*\n  * 设置按钮是否可点击\n  * @param state：open表示开启状态，close表示关闭状态\n  */\n    function setButtonState (state) {\n        switch(state) {\n            case 'open':\n                connect.disabled = true\n                sendMessage.disabled = false\n                destroy.disabled = false\n                break;\n            case 'close':\n                connect.disabled = false\n                sendMessage.disabled = true\n                destroy.disabled = true\n                break;\n        }\n    }\n</script>\n</body>\n</html>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/server/",
            "url": "https://nitgod1996.com/2022/08/25/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/websocket%E7%BB%83%E4%B9%A0/server/",
            "title": "",
            "date_published": "2022-08-25T08:02:31.426Z",
            "content_html": "const WebSocket = require('ws');\nconst port = 1024; //端口\nconst pathname = '/ws/'; //访问路径\n\nnew WebSocket.Server({ port }, function () {\n    console.log('websocket服务开启');\n}).on('connection', connectHandler);\n\nfunction connectHandler(ws) {\n    console.log('客户端连接');\n    ws.on('error', errorHandler);\n    ws.on('close', closeHandler);\n    ws.on('message', messageHandler);\n    setInterval(() => {\n        ws.send(\n            JSON.stringify({\n                ModeCode: 'message',\n                msg: '推送',\n            })\n        );\n    }, 1000);\n}\n\nfunction messageHandler(e) {\n    console.info('接收客户端消息');\n    e = e.toLocaleString();\n    this.send(e);\n}\n\nfunction errorHandler(e) {\n    console.info('客户端出错');\n}\n\nfunction closeHandler(e) {\n    console.info('客户端已断开');\n}\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/19/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E8%B4%AA%E5%BF%83/1005.%20K%20%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/",
            "url": "https://nitgod1996.com/2022/08/19/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/%E7%AE%97%E6%B3%95%E7%BB%83%E4%B9%A0/%E8%B4%AA%E5%BF%83/1005.%20K%20%E6%AC%A1%E5%8F%96%E5%8F%8D%E5%90%8E%E6%9C%80%E5%A4%A7%E5%8C%96%E7%9A%84%E6%95%B0%E7%BB%84%E5%92%8C/",
            "title": "",
            "date_published": "2022-08-19T09:09:51.885Z",
            "content_html": "/**\n * @param {number[]} nums\n * @param {number} k\n * @return {number}\n */\nvar largestSumAfterKNegations = function (nums, k) {};\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/14/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo02/",
            "url": "https://nitgod1996.com/2022/08/14/note/%E5%89%8D%E7%AB%AF/%E7%BB%83%E4%B9%A0%E4%BB%A3%E7%A0%81/demo02/",
            "title": "",
            "date_published": "2022-08-14T03:13:34.258Z",
            "content_html": "/**\n * @param {number} n\n * @return {number}\n */\nvar countSpecialNumbers = function (n) {\n    // let bigN = BigInt(n);\n    let dynamic = 0;\n    for (let i = 1; i <= n; i++) { if (isspecial(i)) dynamic++; } return dynamic; }; function isspecial(n) let s=\"String(n);\" set=\"new\" set(); for (let i=\"0;\" < s.length; (set.has(s[i])) false; set.add(s[i]); true; var countnumberswithuniquedigits=\"function\" (n) (n=\"==\" 0) 1; 1) 10; res=\"10,\" cur=\"9;\" n - *=\"9\" i; +=\"cur;\" res; settimeout(()> {\n    console.log('3秒后');\n}, 3000);\nnew Promise((resolve) => {\n    resolve();\n}).then(() => {\n    console.log(countSpecialNumbers(999999999));\n});\n</=>",
            "tags": []
        }
    ]
}