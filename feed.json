{
    "version": "https://jsonfeed.org/version/1",
    "title": "宁理大神1996",
    "subtitle": "",
    "icon": "https://nitgod1996.com/images/favicon.ico",
    "description": "宁理大神的个人博客",
    "home_page_url": "https://nitgod1996.com",
    "items": [
        {
            "id": "https://nitgod1996.com/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/",
            "url": "https://nitgod1996.com/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/",
            "title": "ps学习之路",
            "date_published": "2021-08-10T14:06:13.000Z",
            "content_html": "<h1 id=\"一-ps基础教程\"><a href=\"#一、-ps基础教程\" class=\"headerlink\" title=\"一、 ps基础教程\"></a>一、 ps基础教程</h1><h2 id=\"1-调整图层\"><a href=\"#1-调整图层\" class=\"headerlink\" title=\"1. 调整图层\"></a>1. <strong>调整图层</strong></h2><p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221140722.png\" alt=\"image-20210810221140722\"></p>\n<h2 id=\"2-污点去除工具\"><a href=\"#2-污点去除工具\" class=\"headerlink\" title=\"2. 污点去除工具\"></a>2. <strong>污点去除工具</strong><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221218328.png\" alt=\"image-20210810221218328\"></h2><p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221227889.png\" alt=\"image-20210810221227889\"><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221250330.png\" alt=\"image-20210810221250330\"> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810221259847.png\" alt=\"image-20210810221259847\"></p>\n<h2 id=\"3-导入图片\"><a href=\"#3-导入图片\" class=\"headerlink\" title=\"3. 导入图片\"></a>3. <strong>导入图片</strong></h2><ol>\n<li>添加新的图层：文件&gt;打开</li>\n<li>添加到图层：文件→置入嵌入对象</li>\n</ol>\n<h2 id=\"4-调整大小\"><a href=\"#4-调整大小\" class=\"headerlink\" title=\"4. 调整大小\"></a>4. <strong>调整大小</strong></h2><h3 id=\"41-缩放\"><a href=\"#4-1-缩放\" class=\"headerlink\" title=\"4.1 缩放\"></a>4.1 缩放</h3><p><strong>Ctrl+T</strong>： 编辑→自由变换：。按住<strong>shift</strong>不成比例放大/缩小</p>\n<h3 id=\"42-裁剪\"><a href=\"#4-2-裁剪\" class=\"headerlink\" title=\"4.2 裁剪\"></a>4.2 裁剪</h3><p>左侧工具栏<img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811105954296.png\" alt=\"image-20210811105954296\"></p>\n<h2 id=\"5-快速选择\"><a href=\"#5-快速选择\" class=\"headerlink\" title=\"5. 快速选择\"></a>5. <strong>快速选择</strong><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810222803903.png\" alt=\"image-20210810222803903\"></h2><p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810222821041.png\" alt=\"image-20210810222821041\"></p>\n<p>按住<strong>Alt</strong>可以减掉多选的部分</p>\n<h2 id=\"6-蒙版去除背景\"><a href=\"#6-蒙版：去除背景\" class=\"headerlink\" title=\"6. 蒙版：去除背景\"></a>6. <strong>蒙版</strong>：去除背景</h2><ol>\n<li><p>手动擦除</p>\n<p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210810224839694.png\" alt=\"image-20210810224839694\"></p>\n</li>\n<li><p>通过快速选择<img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111927148.png\" alt=\"image-20210811111927148\"></p>\n<ol>\n<li><p>通过快速选择选中铅笔<img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811112022283.png\" alt=\"image-20210811112022283\"></p>\n</li>\n<li><p>添加<strong>蒙版</strong>去除背景</p>\n<p> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811112050594.png\" alt=\"image-20210811112050594\"></p>\n</li>\n<li><p>显示其他图层当做新背景</p>\n<p> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811112117201.png\" alt=\"image-20210811112117201\"></p>\n</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"7-存储格式的区别\"><a href=\"#7-存储格式的区别\" class=\"headerlink\" title=\"7. 存储格式的区别\"></a>7. <strong>存储格式的区别</strong></h2><ol>\n<li><p>PSD：ps格式，含所有编辑内容</p>\n</li>\n<li><p>JPEG：在线发布的照片的最佳格式</p>\n</li>\n<li><p>PNG：包含透明度的图像</p>\n<ol>\n<li><p><strong>魔棒</strong><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103015647.png\" alt=\"image-20210811103015647\">：消除背景。<img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103045724.png\" alt=\"image-20210811103045724\"></p>\n</li>\n<li><p>delete：<img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103101940.png\" alt=\"image-20210811103101940\"></p>\n</li>\n<li><p>Ctrl+D：取消选择；或者选择→取消选择</p>\n</li>\n</ol>\n<p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811103138038.png\" alt=\"image-20210811103138038\"></p>\n<ol start=\"4\">\n<li>存储为PNG</li>\n</ol>\n</li>\n</ol>\n<h2 id=\"8-调配颜色\"><a href=\"#8-调配颜色\" class=\"headerlink\" title=\"8. 调配颜色\"></a>8. <strong>调配颜色</strong></h2><p>图像→调整→</p>\n<ol>\n<li><p>亮度/对比度：</p>\n<ol>\n<li>亮度：增强高光</li>\n<li>对比度：让亮的地方更亮，暗的更暗</li>\n</ol>\n</li>\n<li><p>饱和度</p>\n<ol>\n<li>自然饱和度：暗色的强度</li>\n<li>饱和度：所有颜色的强度，也就是<strong>鲜艳程度</strong></li>\n</ol>\n</li>\n<li><p>滤镜</p>\n<ol>\n<li><p>图像→调整→照片滤镜：设置普通滤镜，复古、暖色、冷色等</p>\n</li>\n<li><p>滤镜→转为智能滤镜；滤镜→风格化→可转为<strong>油画</strong>、<strong>浮雕</strong>等</p>\n<p>设置好后，如果想更改，则双击油画滤镜图层</p>\n<p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120840955.png\" alt=\"image-20210811120840955\"></p>\n</li>\n<li><p>还原：编辑→还原</p>\n</li>\n</ol>\n</li>\n<li><p>阴影/高光</p>\n<ol>\n<li>阴影：阴影部分的颜色强度（一般照片的背景）</li>\n<li>高光：高光部分的颜色强度（一般是聚焦的部分）</li>\n</ol>\n</li>\n<li><p>黑白</p>\n</li>\n</ol>\n<h2 id=\"9-仿制图章工具复制纹理图案\"><a href=\"#9-仿制图章工具：复制纹理图案\" class=\"headerlink\" title=\"9. 仿制图章工具：复制纹理图案\"></a>9. <strong>仿制图章工具</strong><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111116706.png\" alt=\"image-20210811111116706\">：复制纹理图案</h2><p> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111131419.png\" alt=\"image-20210811111131419\"><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111307849.png\" alt=\"image-20210811111307849\"><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811111430576.png\" alt=\"image-20210811111430576\"></p>\n<ol>\n<li>点击图章按钮</li>\n<li>按住Alt，点击要复制的中心</li>\n<li>松开Alt，在想要的地方进行复制填补</li>\n</ol>\n<h2 id=\"10-下拉菜单和透明度设置光照\"><a href=\"#10-下拉菜单和透明度设置光照\" class=\"headerlink\" title=\"10. 下拉菜单和透明度设置光照\"></a>10. 下拉菜单和透明度设置光照</h2><p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120209104.png\" alt=\"image-20210811120209104\"></p>\n<p>效果图：</p>\n<p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120222978.png\" alt=\"image-20210811120222978\"><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811120227848.png\" alt=\"image-20210811120227848\"></p>\n<h2 id=\"11-选择颜色\"><a href=\"#11-选择颜色\" class=\"headerlink\" title=\"11. 选择颜色\"></a>11. 选择颜色</h2><ol>\n<li><p><strong>吸管取色器</strong><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121249769.png\" alt=\"image-20210811121249769\"></p>\n</li>\n<li><p><strong>色板选择</strong></p>\n<p> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121637303.png\" alt=\"image-20210811121637303\"></p>\n</li>\n<li><p><strong>拾色器</strong><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121659893.png\" alt=\"image-20210811121659893\"></p>\n<p> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121712644.png\" alt=\"image-20210811121712644\"></p>\n</li>\n<li><p><strong>快速切换前/后景色，黑白前/后景色</strong></p>\n<p><img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811121901093.png\" alt=\"image-20210811121901093\"></p>\n</li>\n</ol>\n<h2 id=\"12-画笔\"><a href=\"#12-画笔\" class=\"headerlink\" title=\"12. 画笔\"></a>12. 画笔</h2><ol>\n<li><p>点击画笔工具<img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811122227074.png\" alt=\"image-20210811122227074\"></p>\n</li>\n<li><p>设置画笔</p>\n<p> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811122245898.png\" alt=\"image-20210811122245898\"></p>\n</li>\n<li><p>设置透明度和流量</p>\n<p> <img data-src=\"/2021/08/10/note/%E5%89%8D%E7%AB%AF/ps%E5%AD%A6%E4%B9%A0%E4%B9%8B%E8%B7%AF/image-20210811122312596.png\" alt=\"image-20210811122312596\"></p>\n</li>\n</ol>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "url": "https://nitgod1996.com/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/",
            "title": "python使用技巧",
            "date_published": "2021-07-27T13:53:26.000Z",
            "content_html": "<h2 id=\"1-python2转python3\"><a href=\"#1-python2转python3\" class=\"headerlink\" title=\"1. python2转python3\"></a>1. python2转python3</h2><p>网上经常找到一些源码是使用python2的，看起来非常不方便，而python官方其实自带了python2转3的脚本，就在python3/Tools/scripts目录下</p>\n<p><img data-src=\"/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20210727215611838.png\" alt=\"image-20210727215611838\"></p>\n<p><strong>使用方法：</strong></p>\n<ol>\n<li><p>把2to3.py复制到要转换的python2代码<strong>同目录</strong>下</p>\n</li>\n<li><p>在该目录启动cmd控制台，输入</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">python 2to3.py -w 文件夹/文件名\n</code></pre>\n</li>\n</ol>\n<p>如下：</p>\n<p><img data-src=\"/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20210727215820184.png\" alt=\"image-20210727215820184\"></p>\n<p><img data-src=\"/2021/07/27/note/Python/python%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/image-20210727215908158.png\" alt=\"image-20210727215908158\"></p>\n<blockquote>\n<p>我把python.exe重命名为了python39.exe，所以这里用的是python39</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/07/27/note/Python/pytorch/",
            "url": "https://nitgod1996.com/2021/07/27/note/Python/pytorch/",
            "title": "pytorch",
            "date_published": "2021-07-27T13:13:27.403Z",
            "content_html": "<h1 id=\"一-安装\"><a href=\"#一、-安装\" class=\"headerlink\" title=\"一、 安装\"></a>一、 安装</h1><p>安装步骤详细看<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzIzMDEzMzA5L2FydGljbGUvZGV0YWlscy8xMDM5NjU2MTk=\">https://blog.csdn.net/qq_23013309/article/details/103965619</span></p>\n<p>以下主要记录一些遇到的坑</p>\n<blockquote>\n<p>我因为电脑上装了好几个版本的python，所以把python.exe以版本号重命名了，使用pip时按python39 -m pip install 包名安装。正常情况下只需pip install 包名即可</p>\n</blockquote>\n<h2 id=\"1-cuda安装成功但torchcudais_available输出false\"><a href=\"#1-cuda安装成功，但torch-cuda-is-available-输出False\" class=\"headerlink\" title=\"1. cuda安装成功，但torch.cuda.is_available()输出False\"></a>1. cuda安装成功，但torch.cuda.is_available()输出False</h2><p>原因是torch和torchvision安装成了cpu版</p>\n<p>解决方法：去<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb3dubG9hZC5weXRvcmNoLm9yZy93aGwvdG9yY2hfc3RhYmxlLmh0bWw=\">官网</span>下载GPU版的torch（cu开头的）。下载完在文件路径用pip安装即可</p>\n<p><img data-src=\"/2021/07/27/note/Python/pytorch/image-20210727212106336.png\" alt=\"image-20210727212106336\"></p>\n<pre class=\" language-bash\"><code class=\"language-bash\">python39 -m pip <span class=\"token function\">install</span> torch-1.8.0-cp39-cp39-win_amd64.whl\npython39 -m pip <span class=\"token function\">install</span> torch-1.9.0+cu111-cp39-cp39-win_amd64.whl\n或\npip <span class=\"token function\">install</span> torch-1.8.0-cp39-cp39-win_amd64.whl\npip <span class=\"token function\">install</span> torch-1.9.0+cu111-cp39-cp39-win_amd64.whl\n</code></pre>\n<p><strong>要注意和python版本对应，如python38就下载cp38，否则安装不了，下载cp37的也不行</strong></p>\n<h2 id=\"2-安装torch时报错torch-1x0-cp3x-cp3xm-win_amd64whl-is-not-a-supported-wheel-on-this-platform\"><a href=\"#2-安装torch时报错torch-1-X-0-cp3X-cp3Xm-win-amd64-whl-is-not-a-supported-wheel-on-this-platform\" class=\"headerlink\" title=\"2. 安装torch时报错torch-1.X.0-cp3X-cp3Xm-win_amd64.whl is not a supported wheel on this platform.\"></a>2. 安装torch时报错torch-1.X.0-cp3X-cp3Xm-win_amd64.whl is not a supported wheel on this platform.</h2><p>原因是python版本对不上，上面讲到过，python39就下cp39，不要下cp37、cp38什么的</p>\n<h2 id=\"3-torch安装完成后import-torch报错runtimeerror-module-compiled-against-api-version-0xc-but-this-version-of-numpy-is-0xb\"><a href=\"#3-torch安装完成后import-torch报错RuntimeError-module-compiled-against-API-version-0xc-but-this-version-of-numpy-is-0xb\" class=\"headerlink\" title=\"3. torch安装完成后import torch报错RuntimeError: module compiled against API version 0xc but this version of numpy is 0xb\"></a>3. torch安装完成后import torch报错RuntimeError: module compiled against API version 0xc but this version of numpy is 0xb</h2><p>原因：numpy版本跟不上</p>\n<p>解决：更新numpy</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">python39 -m pip <span class=\"token function\">install</span> numpy --upgrade \n或\npip <span class=\"token function\">install</span> numpy --upgrade \n</code></pre>\n<h1 id=\"pytorch简介\"><a href=\"#pytorch简介\" class=\"headerlink\" title=\"pytorch简介\"></a>pytorch简介</h1><p>pytorch是深度学习的框架，或者说是库。类似sklearn之于机器学习。</p>\n<h2 id=\"1-基本概念\"><a href=\"#1-基本概念\" class=\"headerlink\" title=\"1. 基本概念\"></a>1. 基本概念</h2><ol>\n<li><p><strong>张量（tensor）：</strong>即向量，类似于<code>NumPy</code>的<code>ndarray</code>。</p>\n<p><code>tensor</code>可以使用像标准的NumPy一样的各种索引操作：如<code>x[:,1]</code>返回<strong>张量x</strong>第2列的内容</p>\n</li>\n</ol>\n<h2 id=\"2-基本用法\"><a href=\"#2-基本用法\" class=\"headerlink\" title=\"2. 基本用法\"></a>2. 基本用法</h2><h3 id=\"21-初始化张量\"><a href=\"#2-1-初始化张量\" class=\"headerlink\" title=\"2.1 初始化张量\"></a>2.1 初始化张量</h3><ol>\n<li> 创建一个没有初始化5*3的矩阵</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>empty<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\ntensor([[2.2391e-19, 4.5869e-41, 1.4191e-17],\n        [4.5869e-41, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 0.0000e+00, 0.0000e+00],\n        [0.0000e+00, 0.0000e+00, 0.0000e+00]])\"\"\"</span>\n</code></pre>\n<ol start=\"2\">\n<li><p>创建一个随机矩阵</p>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\ntensor([[0.5307, 0.9752, 0.5376],\n        [0.2789, 0.7219, 0.1254],\n        [0.6700, 0.6100, 0.3484],\n        [0.0922, 0.0779, 0.2446],\n        [0.2967, 0.9481, 0.1311]])\"\"\"</span>\n</code></pre>\n</li>\n<li><p>构造一个填满<code>0</code>且数据类型为<code>long</code>的矩阵:</p>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>long<span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n<li><p>创建全为<code>1</code>的矩阵</p>\n<pre class=\" language-python\"><code class=\"language-python\">x<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>ones<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n<li><p>直接从<strong>数据</strong>构造张量</p>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#tensor([5.5000, 3.0000])</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"22-获取张量信息\"><a href=\"#2-2-获取张量信息\" class=\"headerlink\" title=\"2.2 获取张量信息\"></a>2.2 获取张量信息</h3><ol>\n<li><p>获取张量形状</p>\n<pre class=\" language-python\"><code class=\"language-python\">x<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#x是5*3的矩阵</span>\n<span class=\"token comment\" spellcheck=\"true\">#torch.Size([5, 3])</span>\n</code></pre>\n<blockquote>\n<p><code>torch.Size</code>本质上还是<code>tuple</code>，所以支持tuple的一切操作。</p>\n</blockquote>\n</li>\n<li><p>改变张量形状</p>\n<pre class=\" language-python\"><code class=\"language-python\">x<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#size(4,4)</span>\ny<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#size(16)</span>\nz<span class=\"token operator\">=</span>x<span class=\"token punctuation\">.</span>view<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#size(2,8),-1表示自动匹配，如此处-1=4*4/8=2，即2行8列</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"23-张量运算\"><a href=\"#2-3-张量运算\" class=\"headerlink\" title=\"2.3 张量运算\"></a>2.3 张量运算</h3><ol>\n<li><p>加法</p>\n<pre class=\" language-python\"><code class=\"language-python\">x<span class=\"token operator\">+</span>y\ntorch<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#以上等价，张量对应位置相加</span>\ntorch<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>out<span class=\"token operator\">=</span>result<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#把和赋值给result</span>\ny<span class=\"token punctuation\">.</span>add_<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#y=y+x</span>\n</code></pre>\n<blockquote>\n<p>任何一个in-place改变张量的操作后面都固定一个<code>_</code>。例如<code>x.copy_(y)</code>、<code>x.t_()</code>将更改x</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"24-对接numpy\"><a href=\"#2-4-对接numpy\" class=\"headerlink\" title=\"2.4 对接numpy\"></a>2.4 对接<code>numpy</code></h3><ol>\n<li><p>tensor转numpy</p>\n<pre class=\" language-python\"><code class=\"language-python\">b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">.</span>numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#b=[1. 1. 1. 1. 1.]</span>\na<span class=\"token punctuation\">.</span>add_<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#a.add_(1)和torch.add(a,1,a)可以让b和a同步更新。操作符=则不行</span>\n<span class=\"token comment\" spellcheck=\"true\">#a=tensor([2., 2., 2., 2., 2.])</span>\n<span class=\"token comment\" spellcheck=\"true\">#b=[2. 2. 2. 2. 2.]</span>\n</code></pre>\n</li>\n<li><p>numpy转tensor</p>\n<pre class=\" language-python\"><code class=\"language-python\">a<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>from_numpy<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#a=tensor([1. 1. 1. 1. 1.])</span>\nnp<span class=\"token punctuation\">.</span>add<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> out<span class=\"token operator\">=</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#a=tensor([2., 2., 2., 2., 2.])</span>\n<span class=\"token comment\" spellcheck=\"true\">#b=[2. 2. 2. 2. 2.]</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"25-将张量移动到指定设备cpugpu\"><a href=\"#2-5-将张量移动到指定设备（CPU-GPU）\" class=\"headerlink\" title=\"2.5 将张量移动到指定设备（CPU/GPU）\"></a>2.5 将张量移动到指定设备（CPU/GPU）</h3><p>张量可以使用<code>.to</code>方法移动到任何设备（device）上：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 当GPU可用时,我们可以运行以下代码</span>\n<span class=\"token comment\" spellcheck=\"true\"># 我们将使用`torch.device`来将tensor移入和移出GPU</span>\n<span class=\"token keyword\">if</span> torch<span class=\"token punctuation\">.</span>cuda<span class=\"token punctuation\">.</span>is_available<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    device <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>device<span class=\"token punctuation\">(</span><span class=\"token string\">\"cuda\"</span><span class=\"token punctuation\">)</span>          <span class=\"token comment\" spellcheck=\"true\"># a CUDA device object</span>\n    y <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>ones_like<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span>device<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 直接在GPU上创建tensor</span>\n    x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span>                       <span class=\"token comment\" spellcheck=\"true\"># 或者使用`.to(\"cuda\")`方法</span>\n    z <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>z<span class=\"token punctuation\">.</span>to<span class=\"token punctuation\">(</span><span class=\"token string\">\"cpu\"</span><span class=\"token punctuation\">,</span> torch<span class=\"token punctuation\">.</span>double<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\" spellcheck=\"true\"># `.to`也能在移动时改变dtype</span>\n</code></pre>\n<p>输出：</p>\n<pre class=\" language-python\"><code class=\"language-python\">tensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.0445</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> device<span class=\"token operator\">=</span><span class=\"token string\">'cuda:0'</span><span class=\"token punctuation\">)</span>\ntensor<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1.0445</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>torch<span class=\"token punctuation\">.</span>float64<span class=\"token punctuation\">)</span>\n</code></pre>\n<h1 id=\"二-torchnn\"><a href=\"#二、-torch-nn\" class=\"headerlink\" title=\"二、  torch.nn\"></a>二、  <code>torch.nn</code></h1><h2 id=\"1-torchnnparameter\"><a href=\"#1-torch-nn-Parameter\" class=\"headerlink\" title=\"1. torch.nn.Parameter()\"></a>1. <code>torch.nn.Parameter()</code></h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC9kOGI3N2NjMDI0MTA=\">https://www.jianshu.com/p/d8b77cc02410</span></p>\n<blockquote>\n<p>pytorch中用于保存Variable的函数。一般将参数W和b转换成parameter类型，可供训练中改动</p>\n</blockquote>\n<p>如</p>\n<pre class=\" language-python\"><code class=\"language-python\">W <span class=\"token operator\">=</span> Parameter<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>Tensor<span class=\"token punctuation\">(</span>RNN_HID_SIZE<span class=\"token punctuation\">,</span> input_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nb <span class=\"token operator\">=</span> Parameter<span class=\"token punctuation\">(</span>torch<span class=\"token punctuation\">.</span>Tensor<span class=\"token punctuation\">(</span>RNN_HID_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#parameter.data得到tensor数据 </span>\nW<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>uniform_<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>stdv<span class=\"token punctuation\">,</span> stdv<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#初始化</span>\n</code></pre>\n<ol>\n<li><p>将一个不可训练的类型Tensor转换成可以训练的类型parameter</p>\n</li>\n<li><p>并将这个parameter绑定到这个module里面</p>\n</li>\n<li><p>经过类型转换这个self.v变成了模型的一部分，成为了模型中根据训练可以改动的参数了。</p>\n</li>\n</ol>\n<h1 id=\"三-torchnnfunctional\"><a href=\"#三、-torch-nn-functional\" class=\"headerlink\" title=\"三、 torch.nn.functional\"></a>三、 <code>torch.nn.functional</code></h1><blockquote>\n<p>这是pytorch的主要库，里边包含了绝大部分的深度学习函数</p>\n</blockquote>\n<h2 id=\"1-激活函数\"><a href=\"#1-激活函数\" class=\"headerlink\" title=\"1. 激活函数\"></a>1. 激活函数</h2><h3 id=\"11-relu\"><a href=\"#1-1-relu\" class=\"headerlink\" title=\"1.1 relu()\"></a>1.1 <code>relu()</code></h3><p><img data-src=\"/2021/07/27/note/Python/pytorch/image-20210621220811079.png\" alt=\"image-20210621220811079\"> </p>\n<ol>\n<li><p>调用方法</p>\n<pre class=\" language-python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>relu<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> inplace<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#input：函数中的自变量x</span>\n</code></pre>\n</li>\n<li><p>也可自定义</p>\n</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">relu</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"2-线性函数\"><a href=\"#2-线性函数\" class=\"headerlink\" title=\"2. 线性函数\"></a>2. 线性函数</h2><h3 id=\"21-linear\"><a href=\"#2-1-linear\" class=\"headerlink\" title=\"2.1 linear()\"></a>2.1 <code>linear()</code></h3><p>$$<br>f(x)=ax+b<br>$$</p>\n<pre class=\" language-python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>linear<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> weight<span class=\"token punctuation\">,</span> bias<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#input: 自变量x</span>\n<span class=\"token comment\" spellcheck=\"true\">#weight: 权重a</span>\n<span class=\"token comment\" spellcheck=\"true\">#bias: 偏置b</span>\n</code></pre>\n<h2 id=\"3-损失函数\"><a href=\"#3-损失函数\" class=\"headerlink\" title=\"3. 损失函数\"></a>3. 损失函数</h2><h3 id=\"31-交叉熵误差cross_entropy\"><a href=\"#3-1-交叉熵误差cross-entropy\" class=\"headerlink\" title=\"3.1 交叉熵误差cross_entropy()\"></a>3.1 交叉熵误差<code>cross_entropy()</code></h3><p> <img data-src=\"/2021/07/27/note/Python/pytorch/image-20210622160932219.png\" alt=\"image-20210622160932219\"></p>\n<ol>\n<li><p>调用方法：</p>\n<pre class=\" language-python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>cross_entropy<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> weight<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> size_average<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#input: 预测值</span>\n<span class=\"token comment\" spellcheck=\"true\">#target: 监督值</span>\n<span class=\"token comment\" spellcheck=\"true\">#（大概应该是这样？）</span>\n</code></pre>\n</li>\n<li><p>也可自定义</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cross_entropy_error</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    损失函数：交叉熵误差\n    :param y: 预测值，np数组\n    :param t: 监督值,np数组\n    :return: 交叉熵误差float\n    \"\"\"</span>\n    delta<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">7</span>  <span class=\"token comment\" spellcheck=\"true\">#10的-7次，为了防止log0导致的下溢</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"32-二元交叉熵binary_cross_entropy\"><a href=\"#3-2-二元交叉熵binary-cross-entropy\" class=\"headerlink\" title=\"3.2 二元交叉熵binary_cross_entropy()\"></a>3.2 二元交叉熵<code>binary_cross_entropy()</code></h3><p><img data-src=\"/2021/07/27/note/Python/pytorch/equation-1628496458752.svg\" alt=\"[公式]\"></p>\n<p>其中， <img data-src=\"/2021/07/27/note/Python/pytorch/equation%20(3).svg\" alt=\"[公式]\">， <img data-src=\"/2021/07/27/note/Python/pytorch/equation%20(4).svg\" alt=\"[公式]\"> 。</p>\n<pre class=\" language-python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>binary_cross_entropy<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> weight<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> size_average<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"33-二元逻辑交叉熵binary_cross_entropy_with_logits\"><a href=\"#3-3-二元逻辑交叉熵binary-cross-entropy-with-logits\" class=\"headerlink\" title=\"3.3 二元逻辑交叉熵binary_cross_entropy_with_logits()\"></a>3.3 二元逻辑交叉熵<code>binary_cross_entropy_with_logits()</code></h3><blockquote>\n<p>with_logits就是把sigmod函数<strong>集成</strong>进交叉熵函数，就不需要之后再调用一边sigmod函数了</p>\n</blockquote>\n<p>在 <img data-src=\"/2021/07/27/note/Python/pytorch/equation%20(5)-1628496675068.svg\" alt=\"[公式]\"> 外边复合一层sigmoid函数，即 <img data-src=\"/2021/07/27/note/Python/pytorch/equation%20(6).svg\" alt=\"[公式]\"> ，损失函数变为：</p>\n<p><img data-src=\"/2021/07/27/note/Python/pytorch/equation%20(7)-1628496675069.svg\" alt=\"[公式]\"></p>\n<ol>\n<li><p>自定义</p>\n<pre class=\" language-python\"><code class=\"language-python\">torch<span class=\"token punctuation\">.</span>nn<span class=\"token punctuation\">.</span>functional<span class=\"token punctuation\">.</span>binary_cross_entropy<span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> weight<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> size_average<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    :param input: 输入，任意形状的张量--神经网络预测结果\n    :param target: 靶向值，即用于验证的标签值：与输入形状相同的张量\n    :param weight: 权重，可用于mask的作用，和input形状一致\n    :return: 损失值（误差），可能是向量，也可能是一个float值\n    \"\"\"</span>\n</code></pre>\n</li>\n<li><p>也可自定义</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">binary_cross_entropy_with_logits</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">,</span> target<span class=\"token punctuation\">,</span> weight<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> size_average<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> reduce<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    损失函数，二元交叉熵。可以直接调用nn.functional.binary_cross_entropy_with_logits()\n    :param size_average: 可选，已弃用。是否求平均：默认情况下，损失是批次中每个损失元素的平均值。注意，对于有些损失，每个样品有多个元素。\n    :param reduce: 可选，不推荐使用。是否压缩，如把向量求和；\n    :return: 损失值（误差），可能是向量，也可能是一个float值\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> <span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> input<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">\"Target size (&amp;#123;&amp;#125;) must be the same as input size (&amp;#123;&amp;#125;)\"</span><span class=\"token punctuation\">.</span>format<span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> input<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n    max_val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>clamp<span class=\"token punctuation\">(</span>min<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    loss <span class=\"token operator\">=</span> input <span class=\"token operator\">-</span> input <span class=\"token operator\">*</span> target <span class=\"token operator\">+</span> max_val <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>max_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>input <span class=\"token operator\">-</span> max_val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> weight <span class=\"token keyword\">is</span> <span class=\"token operator\">not</span> None<span class=\"token punctuation\">:</span>\n        loss <span class=\"token operator\">=</span> loss <span class=\"token operator\">*</span> weight\n\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> reduce<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> loss\n    <span class=\"token keyword\">elif</span> size_average<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> loss<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> loss<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n</ol>\n<h1 id=\"四-torchtensor\"><a href=\"#四、-torch-Tensor\" class=\"headerlink\" title=\"四、 torch.Tensor\"></a>四、 <code>torch.Tensor</code></h1><p>Tensor：张量，也就是向量。相当于numpy的array</p>\n<blockquote>\n<p><code>torch.Tensor(2,3)</code>：随机生成2X3的矩阵，float类型</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>Data tyoe</th>\n<th>CPU tensor</th>\n<th>GPU tensor</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>32-bit floating point</td>\n<td><code>torch.FloatTensor</code></td>\n<td><code>torch.cuda.FloatTensor</code></td>\n</tr>\n<tr>\n<td>64-bit floating point</td>\n<td><code>torch.DoubleTensor</code></td>\n<td><code>torch.cuda.DoubleTensor</code></td>\n</tr>\n<tr>\n<td>16-bit floating point</td>\n<td>N/A</td>\n<td><code>torch.cuda.HalfTensor</code></td>\n</tr>\n<tr>\n<td>8-bit integer (unsigned)</td>\n<td><code>torch.ByteTensor</code></td>\n<td><code>torch.cuda.ByteTensor</code></td>\n</tr>\n<tr>\n<td>8-bit integer (signed)</td>\n<td><code>torch.CharTensor</code></td>\n<td><code>torch.cuda.CharTensor</code></td>\n</tr>\n<tr>\n<td>16-bit integer (signed)</td>\n<td><code>torch.ShortTensor</code></td>\n<td><code>torch.cuda.ShortTensor</code></td>\n</tr>\n<tr>\n<td>32-bit integer (signed)</td>\n<td><code>torch.IntTensor</code></td>\n<td><code>torch.cuda.IntTensor</code></td>\n</tr>\n<tr>\n<td>64-bit integer (signed)</td>\n<td><code>torch.LongTensor</code></td>\n<td><code>torch.cuda.LongTensor</code></td>\n</tr>\n</tbody></table>\n<p><code>torch.Tensor</code>是默认的tensor类型（<code>torch.FlaotTensor</code>）的简称。</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/06/25/note/Python/numpy/",
            "url": "https://nitgod1996.com/2021/06/25/note/Python/numpy/",
            "title": "numpy常用函数",
            "date_published": "2021-06-25T12:38:09.829Z",
            "content_html": "<h1 id=\"一-常用函数\"><a href=\"#一、-常用函数\" class=\"headerlink\" title=\"一、 常用函数\"></a>一、 常用函数</h1><blockquote>\n<p>注意：文本以array代表np.array类型的<strong>对象</strong></p>\n</blockquote>\n<h2 id=\"1-创建\"><a href=\"#1-创建\" class=\"headerlink\" title=\"1. 创建\"></a>1. 创建</h2><h3 id=\"11-自定义创建\"><a href=\"#1-1-自定义创建\" class=\"headerlink\" title=\"1.1 自定义创建\"></a>1.1 自定义创建</h3><pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\narray<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#定义一个numpy类型矩阵</span>\nnp<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#括号里直接放数组，则是把list类型转换成numpy</span>\nnp<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>dtype<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>int<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#也可以放表达式，输出结果是bool型的numpy，x是数组</span>\n</code></pre>\n<p><strong>指定形状创建</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>zeros_like<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#返回形状和x一致的矩阵，元素全部为0</span>\nnp<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#输出形状为shape(1,2)的全是0的矩阵</span>\n</code></pre>\n<p><strong>循环形式创建</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\"> x<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5.0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#在-5.0到5.0以0.1为单位(左闭右开)生成numpy数组[-5.0，-4.9....。4.9]</span>\n</code></pre>\n<h3 id=\"12-随机创建\"><a href=\"#1-2-随机创建\" class=\"headerlink\" title=\"1.2 随机创建\"></a>1.2 随机创建</h3><p><strong>随机抽取数创建：</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#从list中随机抽取n个元素组成array</span>\nnp<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#从[0,a)中随机抽取b个元素组成array</span>\n</code></pre>\n<p><strong>生成随机数创建：</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\">a<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">100000</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\">#随机创建一个长10000的向量</span>\na2<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\">#随机创建一个100*100的向量</span>\n</code></pre>\n<blockquote>\n<p>rand生成的随机数是&lt;1的</p>\n</blockquote>\n<h2 id=\"2-nparray的性质\"><a href=\"#2-np-array的性质\" class=\"headerlink\" title=\"2. np.array的性质\"></a>2. np.array的性质</h2><blockquote>\n<p>np.array是n维向量（矩阵），在Python中，多维向量类型常用的主要有3个：list、DataFrame和np.array。后两者显然更适合科研数据处理，其中，dataframe主要倾向于<strong>数据类型</strong>、<strong>数据格式</strong>等处理；np.array主要倾向于<strong>矩阵运算</strong></p>\n</blockquote>\n<h2 id=\"3-矩阵运算\"><a href=\"#3-矩阵运算\" class=\"headerlink\" title=\"3. 矩阵运算\"></a>3. 矩阵运算</h2><p><strong>乘法：</strong></p>\n<ul>\n<li><code>np.dot(x,y)</code>：矩阵乘法（行X列），<code>x</code>和<code>y</code>不一定是<code>np.array</code>类型</li>\n<li><code>x*y</code>：对应位置相乘。1. <code>x</code>必须是<code>np.array</code>类型。2. <code>x</code>和<code>y</code>必须形状相同</li>\n</ul>\n<p><strong>加减法：</strong></p>\n<ul>\n<li><code>x+y</code>/<code>x-y</code>：对应位置相加/键、减</li>\n</ul>\n<p><strong>逻辑运算：</strong></p>\n<ul>\n<li><p><code>x&lt;2</code>：每个元素和2比较，返回一个bool类型矩阵</p>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token triple-quoted-string string\">\"\"\"\n[[False False]\n [False  True]\n [ True  True]]\n\"\"\"</span>\n</code></pre>\n</li>\n</ul>\n<p><strong>求和：</strong></p>\n<ul>\n<li><code>np.sum(x)</code>：<strong>所有</strong>元素相加</li>\n</ul>\n<h2 id=\"4-增删改查\"><a href=\"#4-增删改查\" class=\"headerlink\" title=\"4. 增删改查\"></a>4. 增删改查</h2><pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n              <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"41-增\"><a href=\"#4-1-增\" class=\"headerlink\" title=\"4.1 增\"></a>4.1 增</h3><pre class=\" language-python\"><code class=\"language-python\">b<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>insert<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n <span class=\"token comment\" spellcheck=\"true\">#b是被插数组（二维）,a是插入数组（一维），第一个0是插入的位置，第二个0表示插入的是一位数组</span>\n</code></pre>\n<h3 id=\"42-删\"><a href=\"#4-2-删\" class=\"headerlink\" title=\"4.2 删\"></a>4.2 删</h3><h3 id=\"43-改\"><a href=\"#4-3-改\" class=\"headerlink\" title=\"4.3 改\"></a>4.3 改</h3><ul>\n<li><strong>类型转换：</strong><ul>\n<li><code>array.astype(np.float32) </code>：转换成固定的数据类型float32并返回</li>\n</ul>\n</li>\n<li><strong>矩阵转置：</strong>（行列互换）<ul>\n<li><code>x.T</code>：直接.T即可</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"44-查\"><a href=\"#4-4-查\" class=\"headerlink\" title=\"4.4 查\"></a>4.4 查</h3><p>和dataframe的<code>.iloc[]</code>用法差不多</p>\n<ul>\n<li><p><strong>取单个元素：</strong><code>x[1,1]</code>：#矩阵第2行第2列的元素</p>\n</li>\n<li><p><strong>取行向量：</strong></p>\n<ul>\n<li><code>x[1]</code>：第<strong>2</strong>行的向量</li>\n<li><code>x[1,...]</code>：第<strong>2</strong>的向量</li>\n<li><code>x[[1,2]]</code>：第<strong>2,3</strong>行的向量</li>\n</ul>\n</li>\n<li><p><strong>取列向量：</strong></p>\n<ul>\n<li><code>x[:,1]</code>  ：矩阵第<strong>2</strong>列的向量（从0开始）</li>\n<li><code>x[...,1]</code>：第<strong>2</strong>列向量</li>\n<li><code>y[:,[1,2]]</code>：矩阵第<strong>2,3</strong>列的向量</li>\n</ul>\n</li>\n<li><p><strong>获取矩阵形状：</strong></p>\n<ul>\n<li><p><code>array.shape[n]</code>：返回矩阵第<strong>n+1</strong>维的长度</p>\n<p>如：<code>x[0]</code>返回<strong>3</strong>，<code>x[1]</code>返回<strong>2</strong>。</p>\n<p>​    最外面那层<code>[]</code>包裹的就是第1维（行）</p>\n<p>​    里面一层<code>[]</code>是第2维（列）</p>\n<p>​    再里面是第3维</p>\n</li>\n<li><p><code>np.shape(x)</code>：返回矩阵<code>x</code>的各维度长度，此例返回**(3, 2)**</p>\n</li>\n<li><p><code>np.ndim(x)</code>：返回矩阵的<strong>维数</strong>，此例返回<strong>2</strong></p>\n</li>\n</ul>\n</li>\n<li><p><strong>获取特殊值的索引：</strong></p>\n<ul>\n<li><code>array.argmax()</code>：返回向量最大值的索引</li>\n<li><code>np.argmax(array,axis=n)</code>：返回向量在<strong>第n+1维</strong>最大值的索引，可不写</li>\n<li></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二-其他函数\"><a href=\"#二、-其他函数\" class=\"headerlink\" title=\"二、 其他函数\"></a>二、 其他函数</h1><pre class=\" language-python\"><code class=\"language-python\">\n<span class=\"token number\">9</span><span class=\"token punctuation\">.</span> numpy<span class=\"token punctuation\">.</span>frombuffer<span class=\"token punctuation\">(</span>buffer<span class=\"token punctuation\">,</span> dtype<span class=\"token operator\">=</span>float<span class=\"token punctuation\">,</span> count<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> offset<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\">#通过使用指定的缓冲区来创建数组</span>\n</code></pre>\n<p>参数</p>\n<p>  缓冲区：它表示暴露缓冲区接口的对象。</p>\n<p>  dtype：代表返回的数据类型数组的数据类型。</p>\n<p>  count：代表返回的ndarray的长度。默认值为-1。</p>\n<p>  偏移量：代表读取的起始位置。默认值为0。</p>\n<h3 id=\"23-迭代nditer\"><a href=\"#2-3-迭代nditer\" class=\"headerlink\" title=\"2.3 迭代nditer\"></a>2.3 迭代nditer</h3><p>it=np.nditer(a, flags=[<strong>‘multi_index’</strong>], op_flags=[<strong>‘readwrite’</strong>])</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>flags</th>\n<th>op_flags</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>迭代的数组</td>\n<td><strong>‘multi_index’*<em><strong>：正常迭代（</strong>每次迭代可以跟踪一种索引类型</em>*）</strong></td>\n<td>设置对原数组的权限  默认read_only</td>\n</tr>\n</tbody></table>\n<p>while not it.finished:<br>   print(it[0],it.multi_index)<br>   it.iternext()</p>\n<p>/</p>\n<p>for x in it:</p>\n<p>·it.finished:迭代器是否到最后</p>\n<p>·it.iternext()：迭代器往后迭代一个位置</p>\n<p>·it.multi_index:迭代器所指元素在原数组的位置（行列…）</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/06/21/note/Python/jupyter/",
            "url": "https://nitgod1996.com/2021/06/21/note/Python/jupyter/",
            "title": "jupty使用方法",
            "date_published": "2021-06-21T08:13:57.416Z",
            "content_html": "<h1 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h1><p>安装了anaconda, 直接使用命令行： <code>conda install jupyter notebook</code></p>\n<p>使用命令行： <code>pip install jupyter</code></p>\n<h1 id=\"打开\"><a href=\"#打开\" class=\"headerlink\" title=\"打开\"></a>打开</h1><p>使用命令行： <code>jupyter notebook</code></p>\n<h1 id=\"关闭\"><a href=\"#关闭\" class=\"headerlink\" title=\"关闭\"></a>关闭</h1><p>在命令符提示窗口：ctrl+C停止服务，双击则跳过确认</p>\n<h1 id=\"简要说明\"><a href=\"#简要说明\" class=\"headerlink\" title=\"简要说明\"></a>简要说明</h1><ol>\n<li>选择markdown时，可编辑标题和文本</li>\n</ol>\n<p><img data-src=\"/2021/06/21/note/Python/jupyter/201803171927340\" alt=\"img\"></p>\n<ol start=\"2\">\n<li><p>使用快捷键shift+enter : 执行单元格代码并移动到下一个单元格 run cell,select below</p>\n<pre><code>              ctrl+enter : 运行当前单元格代码 run selected cells\n              \n              alt+enter : 运行当前单元格代码并创建下一个单元格 run cell and insert below\n</code></pre>\n</li>\n</ol>\n<p><img data-src=\"/2021/06/21/note/Python/jupyter/20180317193059669\" alt=\"img\"></p>\n<ol start=\"3\">\n<li><p>选择单元格，enter进入编辑格式，esc进入命令格式。 进入命令格式后，H–查看所有快捷键，M–切换成markdown单元，Y–切换成代码单元，B–在本单元的下方增加一个单元 。</p>\n</li>\n<li><p>在Jupyter Note 的markdown单元格内可以使用latex语法进行数学公式编辑。</p>\n<p>文本行中插入数学公式用一对$  ;</p>\n<p>文本行中插入数学块用一对 $$.</p>\n</li>\n</ol>\n<p><img data-src=\"/2021/06/21/note/Python/jupyter/20180317203421119\" alt=\"img\"></p>\n<ol start=\"5\">\n<li><p>接收HTML代码，可以在markdown单元格内实现更加丰富的样式，添加图片等。</p>\n<p><img data-src=\"/2021/06/21/note/Python/jupyter/2018031722555929\" alt=\"img\"></p>\n</li>\n<li><p>可以将notebook导出为多种格式–HTML, Markdown, ReST, PDF(通过Latex), Raw Python.</p>\n</li>\n<li><p>魔术关键字  <span class=\"exturl\" data-url=\"aHR0cDovL2lweXRob24ucmVhZHRoZWRvY3MuaW8vZW4vc3RhYmxlL2ludGVyYWN0aXZlL21hZ2ljcy5odG1s\">http://ipython.readthedocs.io/en/stable/interactive/magics.html</span></p>\n</li>\n<li><p>幻灯片的制作   <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuamlhbnNodS5jb20vcC84NjExNzYxM2I3YTY=\">https://www.jianshu.com/p/86117613b7a6</span></p>\n</li>\n<li><p>查看.ipynb文件的方法               </p>\n</li>\n</ol>\n<p>①GitHub中直接打开 ②可以把 .ipynb 文件对应的github之类的下载链接复制到 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9uYnZpZXdlci5qdXB5dGVyLm9yZy8=\">https://nbviewer.jupyter.org/</span> 中查看 ③安装anaconda, 把 .ipynb 文件复制到C：Users\\name目录下面,打开Jupyter notebook. 或cmd,先cd到目标文件夹再jupyter notebook</p>\n<ol start=\"10\">\n<li>运行python文件：</li>\n</ol>\n<p>①%run file.py ②！python test.py  </p>\n<p>导入外部代码：    %load test.py</p>\n<ol start=\"11\">\n<li><p>为Jupyter Notebook 添加目录 <span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8yNDAyOTU3OD9yZWZlcj1sZWFybk1M\">点击打开链接</span></p>\n</li>\n<li><p>使用matplotlib：  %matplotlib inline</p>\n<p><img data-src=\"/2021/06/21/note/Python/jupyter/20180317233738117\" alt=\"img\"></p>\n</li>\n</ol>\n<p>————————————————<br>版权声明：本文为CSDN博主「李国菁」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。<br>原文链接：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM4MTk1MTk3L2FydGljbGUvZGV0YWlscy83OTU5NDczNQ==\">https://blog.csdn.net/qq_38195197/article/details/79594735</span></p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/",
            "url": "https://nitgod1996.com/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/",
            "title": "西瓜书复习及其部分代码实现",
            "date_published": "2021-06-10T11:20:23.000Z",
            "content_html": "<h1 id=\"数学符号\"><a href=\"#数学符号\" class=\"headerlink\" title=\"数学符号\"></a>数学符号</h1><ul>\n<li><code>argmin</code>：表示函数取最小值时自变量的集合</li>\n</ul>\n<h1 id=\"一-绪论\"><a href=\"#一、-绪论\" class=\"headerlink\" title=\"一、 绪论\"></a>一、 绪论</h1><h2 id=\"1-基本术语及概念\"><a href=\"#1-基本术语及概念\" class=\"headerlink\" title=\"1. 基本术语及概念\"></a>1. 基本术语及概念</h2><ul>\n<li><strong>特征(feature)<strong>：样本的某个</strong>属性</strong>。</li>\n<li><strong>属性空间/样本空间</strong>：一条属性是一个<strong>维度</strong>，n条属性看作是<strong>n维空间</strong>。每个样本可以在该空间找到自己的<strong>坐标</strong></li>\n<li><strong>维数</strong>：样本的特征/属性数</li>\n<li>**数据集(dataSet)**：一组样本</li>\n<li><strong>标记</strong>：训练样本的<strong>结果</strong>。如西瓜是好瓜还是坏瓜。</li>\n<li>**样例(example)**：拥有标记信息的示例 </li>\n<li><strong>分类(classificaation)/回归(regression)<strong>：预测</strong>离散值</strong>为分类，如好瓜、坏瓜；预测<strong>连续值</strong>为回归，如成熟度0.95</li>\n<li><strong>最小二乘</strong>：最小二乘法是一种数学优化技术，它通过<strong>最小化误差的平方和</strong>找到一组数据的<strong>最佳函数</strong>匹配。<ul>\n<li>几何意义：求一条线使得所有点到该线的<strong>距离平方和</strong>最小</li>\n</ul>\n</li>\n<li><strong>权重ω：</strong>代表各参数的<strong>重要性</strong></li>\n<li><strong>偏置b：</strong>在神经网络中表示该神经元被激活的<strong>容易程度</strong>；</li>\n<li><strong>激活函数：</strong>神经网络中，将每层输入信号(a=wx+b)转换为输出信号，其作用是决定该神经元是否被激活</li>\n</ul>\n<h2 id=\"2-激活函数\"><a href=\"#2-激活函数\" class=\"headerlink\" title=\"2. 激活函数\"></a>2. 激活函数</h2><p>有下激活函数所示，绝大多数激活函数在特定范围为0，即不被激活，也就意味着该神经元对后序网络没有信息传递</p>\n<h3 id=\"21-阶跃函数\"><a href=\"#2-1-阶跃函数\" class=\"headerlink\" title=\"2.1 阶跃函数\"></a>2.1 阶跃函数</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220755046.png\" alt=\"image-20210621220755046\"></p>\n<h3 id=\"22-sigmoid函数\"><a href=\"#2-2-sigmoid函数\" class=\"headerlink\" title=\"2.2 sigmoid函数\"></a>2.2 sigmoid函数</h3><p>​     <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220802439.png\" alt=\"image-20210621220802439\"></p>\n<h3 id=\"23-relu函数\"><a href=\"#2-3-ReLU函数\" class=\"headerlink\" title=\"2.3 ReLU函数\"></a>2.3 ReLU函数</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220811079.png\" alt=\"image-20210621220811079\"></p>\n<h3 id=\"24-softmax函数最后一层输出层的激活函数\"><a href=\"#2-4-softmax函数（最后一层输出层的激活函数）\" class=\"headerlink\" title=\"2.4 softmax函数（最后一层输出层的激活函数）\"></a>2.4 softmax函数（最后一层输出层的激活函数）</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220818680.png\" alt=\"image-20210621220818680\"></p>\n<h3 id=\"25-函数图\"><a href=\"#2-5-函数图\" class=\"headerlink\" title=\"2.5 函数图\"></a>2.5 函数图</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220826903.png\" alt=\"image-20210621220826903\">其中：深蓝色的是relu，虚线是阶跃函数，蓝绿色的是sigmod函数</p>\n<h2 id=\"3-梯度下降法\"><a href=\"#3-梯度下降法\" class=\"headerlink\" title=\"3. 梯度下降法\"></a>3. 梯度下降法</h2><p><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210710171023412.png\" alt=\"image-20210710171023412\">θ是属性集合，在一维函数是x，二维函数一般是x、y</p>\n<p>因为是往梯度负方向走，所以是减法</p>\n<h2 id=\"梯度\"><a href=\"#梯度\" class=\"headerlink\" title=\"梯度\"></a>梯度</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbm9sdXllL3AvMTExMDg1MTMuaHRtbA==\">https://www.cnblogs.com/noluye/p/11108513.html</span></p>\n<h2 id=\"缺点\"><a href=\"#缺点：\" class=\"headerlink\" title=\"缺点：\"></a>缺点：</h2><p>​    可能会因为梯度过小，无法收敛，如下图(x,y)=(3,-3)时</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现：\" class=\"headerlink\" title=\"代码实现：\"></a>代码实现：</h2><p>以f(x,y)=−e−(x2+y2)为例</p>\n<h4 id=\"1-定义目标函数\"><a href=\"#1-定义目标函数\" class=\"headerlink\" title=\"1. 定义目标函数\"></a>1. 定义目标函数</h4><pre><code>def func_2d(x):\n    :param x: 自变量，一维数组x[]\n    :return: 因变量，标量y\n    return - math.exp(-(x[0] ** 2 + x[1] ** 2))\n</code></pre>\n<h4 id=\"2-求出梯度函数\"><a href=\"#2-求出梯度函数\" class=\"headerlink\" title=\"2. 求出梯度函数\"></a>2. 求出梯度函数</h4><pre><code>def grad_2d(x):\n    :param x: 自变量，二维向量\n    :return: 因变量，二维向量\n    deriv0 = 2 * x[0] * math.exp(-(x[0] ** 2 + x[1] ** 2))\n    deriv1 = 2 * x[1] * math.exp(-(x[0] ** 2 + x[1] ** 2))\n    return np.array([deriv0, deriv1])    \n \n</code></pre>\n<h4 id=\"3-实现梯度下降法\"><a href=\"#3-实现梯度下降法\" class=\"headerlink\" title=\"3. 实现梯度下降法\"></a>3. 实现梯度下降法</h4><pre><code>def gradient_descent_2d(grad, cur_x=np.array([0.1, 0.1]), learning_rate=0.01, precision=0.0001, max_iters=10000):\n    二维问题的梯度下降法\n    :param grad: 目标函数的梯度，以函数传参\n    :param cur_x: 起始点，通过参数可以提供初始值\n    :param learning_rate: 学习率，也相当于设置的步长（上式α）\n    :param precision: 设置收敛精度\n    :param max_iters: 最大迭代次数\n    :return: 局部最小值 x*\n    for i in range(max_iters):\n        grad_cur = grad(cur_x) #更新梯度\n        if np.linalg.norm(grad_cur, ord=2) &lt; precision:\n            break  # 当梯度趋近为 0 时，视为收敛\n        cur_x = cur_x - grad_cur * learning_rate#迭代自变量\n \n公式：\n \n\n        print(&quot;第&quot;, i, &quot;次迭代：x 值为 &quot;, cur_x)\n\n    print(&quot;局部最小值 x =&quot;, cur_x)\n    return cur_x\n</code></pre>\n<h1 id=\"二-模型评估与选择\"><a href=\"#二、-模型评估与选择\" class=\"headerlink\" title=\"二、 模型评估与选择\"></a>二、 模型评估与选择</h1><h2 id=\"1-误差与过拟合\"><a href=\"#1-误差与过拟合\" class=\"headerlink\" title=\"1. 误差与过拟合\"></a>1. 误差与过拟合</h2><ul>\n<li><strong>训练误差/经验误差</strong>：学习器在训练集上的误差</li>\n<li><strong>泛化误差</strong>：在<strong>新样本</strong>（不知道的样本）上的误差</li>\n</ul>\n<p>在建立学习器时，我们往往使用一组样本，将其分为训练样本和测试样本，训练和测试用的是同一样本。</p>\n<p>精度accuracy是学习器预测结果相较于测试样本标记的正确率，当测试样本足够大时，精确到可能能到100%，但会造成<strong>过拟合</strong>。</p>\n<p>因为我们希望是学习器在<strong>新样本</strong>上的预测效果好，而非是训练和测试的样本</p>\n<ul>\n<li><strong>过拟合</strong>：对训练样本<strong>非一般</strong>的特征学习，导致泛化能力不足。</li>\n</ul>\n<h2 id=\"2-评估方法\"><a href=\"#2-评估方法\" class=\"headerlink\" title=\"2. 评估方法\"></a>2. 评估方法</h2><p>我们对学习器的<strong>泛化误差</strong>进行评估，以此来评价这个学习器的好坏</p>\n<h1 id=\"三-线性模型\"><a href=\"#三、-线性模型\" class=\"headerlink\" title=\"三、 线性模型\"></a>三、 线性模型</h1><blockquote>\n<p>这里是开始的重点，主要是线性回归和逻辑回归</p>\n</blockquote>\n<ul>\n<li><strong>线性模型</strong>：通过属性的线性组合来进行预测<br>$$<br>f(x)=w_1x_1+w_2x_2+…+w_dx_d+b<br>$$<br>用向量形式，写成<br>$$<br>f(\\boldsymbol{x})=\\boldsymbol{w}^T\\boldsymbol{x}+b<br>$$<br>其中，<code>x</code>：属性，<code>w</code>：属性<strong>权重</strong>，<code>b</code>：偏移</li>\n</ul>\n<p>因此，只需**求出<code>w=(w1,w2..)</code>和<code>b</code>**，模型即可确定。而几何意义上看是一条直线把样本分成了2个阵营（二分类）</p>\n<ul>\n<li><strong>最小二乘</strong>：最小二乘法是一种数学优化技术，它通过<strong>最小化误差的平方和</strong>找到一组数据的<strong>最佳函数</strong>匹配。<ul>\n<li>几何意义：求一条线使得所有点到该线的<strong>距离平方和</strong>最小</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-线性回归linear-regression\"><a href=\"#1-线性回归（linear-regression）\" class=\"headerlink\" title=\"1. 线性回归（linear regression）\"></a>1. 线性回归（linear regression）</h2><p>回归一般用于预测<strong>连续值</strong></p>\n<h3 id=\"11-算法原理\"><a href=\"#1-1-算法原理\" class=\"headerlink\" title=\"1.1 算法原理\"></a>1.1 算法原理</h3><p>试图通过学得一个<strong>线性模型</strong>来预测数据<br>$$<br>f(\\boldsymbol{x})=\\boldsymbol{w}^T\\boldsymbol{x}+b\\tag{1.1}<br>$$</p>\n<blockquote>\n<p>所以，只需求出<strong>权重w</strong>和<strong>偏移b</strong>，即可得出线性模型</p>\n</blockquote>\n<h4 id=\"111-单属性线性回归\"><a href=\"#1-1-1-单属性线性回归\" class=\"headerlink\" title=\"1.1.1 单属性线性回归\"></a>1.1.1 单属性线性回归</h4><p>当每条样本仅有一个属性时：</p>\n<p>对于每条样本数据的预测，即为<br>$$<br>f({x_i})={w_i}{x_i}+b,使得f(x_i)\\simeq y_i\\tag{1.2}<br>$$<br>其中，<code>f(x)</code>是是样本的<strong>预测数据</strong>。<code>yi</code>是样本的<strong>测试数据</strong>，<code>f(x)</code>应尽量趋近<code>y</code></p>\n<p>最常用的是通过<strong>均方误差最小化</strong>来求<code>w</code>和<code>b</code>，也称<strong>欧几里得距离</strong>，是L0范数<br>$$<br>\\DeclareMathOperator*{\\argmin}{argmin}<br>(w^*,b^*)=\\argmin\\limits_{(w,b)}\\sum_{i=1}^{m}(f(x_i)-y_i)^2=\\argmin\\limits_{(w,b)}\\sum_{i=1}^{m}(y_i-wx_i-b)^2\\tag{1.3}<br>$$<br>公式(1.3)的意思是：f(xi)和yi均方差取最小时(w,b)的集合</p>\n<blockquote>\n<p>基于均方误差最小化进行模型求解的方法成为<strong>最小二乘法</strong></p>\n<p>几何意义：找一条直线使所有样本到该直线的欧氏距离之和最小。如物理实验的描点画直线</p>\n</blockquote>\n<p>对公式(1.3)求最小化时自变量<code>w</code>和<code>b</code>的取值，称为线性回归的最小二乘<strong>参数估计</strong>。</p>\n<p>分别对<code>w</code>和<code>b</code>求偏导，令偏导为0即可求出<code>w</code>和<code>b</code>的取值</p>\n<h4 id=\"112-多元线性回归\"><a href=\"#1-1-2-多元线性回归\" class=\"headerlink\" title=\"1.1.2 多元线性回归\"></a>1.1.2 多元线性回归</h4><p>当每条样本有n条属性时，<code>w</code>和<code>x</code>是矩阵形式，<code>y</code>也是向量形式</p>\n<blockquote>\n<p><strong>X</strong>是数据集，最后一个元素恒置1；<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/20170817104340827\" alt=\"这里写图片描述\"></p>\n<p><strong>y</strong>是样本标记<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210610202842085.png\" alt=\"image-20210610202842085\"></p>\n</blockquote>\n<p>预测模型即为<br>$$<br>f(\\boldsymbol{x_i})=\\boldsymbol{w}^T\\boldsymbol{x_i}+b,使得f(x_i)\\simeq y_i\\tag{1.4}<br>$$<br>为方便讨论将<strong>ω</strong>和<strong>b</strong>写在一起，如下。<br>$$<br>\\widehat{w}=(w;b)\\tag{1.5}<br>$$<br>此处省略推导过程，利用<strong>最小二乘法</strong>对<strong>ω</strong>和<strong>b</strong>进行估计，得出<br>$$<br>\\boldsymbol{\\widehat{w}^*=(X^TX)^{-1}X^Ty}\\tag{1.6}<br>$$</p>\n<p>那么线性回归模型即为<br>$$<br>f(\\widehat{\\boldsymbol{x}}<em>i)=\\widehat{\\boldsymbol{x}}</em>{i}^{T}\\boldsymbol{(X^TX)^{-1}X^Ty}\\tag{1.7}<br>$$<br>然而<strong>X</strong>常常<strong>不满秩</strong>，如变量数超过样本数。此时可解出多个解，<strong>均能使均方误差最小化</strong>。此时选择哪个解由算法偏好决定，常见的是引入<strong>正则化</strong></p>\n<p><strong>总结</strong>：</p>\n<p>​        就是通过一顿操作求出了样本每个特征的<strong>权重</strong>和<strong>偏移</strong>（<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210610211038636.png\" alt=\"image-20210610211038636\">)，然后通过它预测<strong>新样本</strong>。线性回归的<strong>学习器</strong>就是<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210610211038636.png\" alt=\"image-20210610211038636\"></p>\n<p>​        类似于物理实验描点画直线，最终得到<strong>学习模型（学习器）</strong>。只不过这里是多元的直线<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/u=3884380577,2563057688&fm=15&gp=0.jpg\" alt=\"img\"></p>\n<h3 id=\"12-python代码实现\"><a href=\"#1-2-Python代码实现\" class=\"headerlink\" title=\"1.2 Python代码实现\"></a>1.2 Python代码实现</h3><blockquote>\n<p>Python有装门用于机器学习的sklearn库，可直接利用</p>\n</blockquote>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#1. 读取数据</span>\ndataset <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'F:\\project\\watermelon\\melon_data1.csv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#2. 定义样本属性和训练目标，此例是用密度预测含糖率</span>\nX <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token string\">'密度'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#其中属性值是二维向量：n个样本;n个属性/样本</span>\nY <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'含糖率'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">#3. 切分训练集和验证集</span>\nX_train<span class=\"token punctuation\">,</span>X_test<span class=\"token punctuation\">,</span>Y_train<span class=\"token punctuation\">,</span>Y_test <span class=\"token operator\">=</span> model_selection<span class=\"token punctuation\">.</span>train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">,</span>test_size<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#4. 建立模型</span>\nlog_model <span class=\"token operator\">=</span> LinearRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#5. 训练</span>\nlog_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>Y_train<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#6. 预测</span>\nY_pred <span class=\"token operator\">=</span> log_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#7. 评估（此处用均方差）</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>mean<span class=\"token punctuation\">(</span>Y_pred<span class=\"token operator\">-</span>Y_test<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>关于sklearn.linear_model.LinearRegression</strong></p>\n<p>已知线性模型是<br>$$<br>f(\\boldsymbol{x})=\\boldsymbol{w}^T\\boldsymbol{x}+b<br>$$<br>其中：</p>\n<p>​    -<code>w</code>是权重，表示特征的重要程度。一维向量</p>\n<p>​    -<code>b</code>是偏置，模型的偏移量。单个数值</p>\n<p>​    -<code>x</code>是样本，一组特征值。一维向量</p>\n<pre class=\" language-python\"><code class=\"language-python\">LinearRegression<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> fit_intercept<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> normalize<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> copy_X<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> n_jobs<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> positive<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n       创建线性回归模型，以下参数均为可选，一般来说都选默认值\n    :param fit_intercept: bool, default=True.是否计算此模型的截距b。如果设置为False，则在计算中不使用截距（即数据应居中）。\n    :param normalize: bool, default=False。如果为真，回归系数X将在回归前通过减去平均值并除以l2范数进行归一化。\n    :param copy_X: bool, default=True。如果为True，则复制X；否则，它可能会被覆盖。\n    :param n_jobs: int, default=None。用于计算的作业数。\n    :param positive: bool, default=False。设置为True时，强制系数为正。只有密集阵列才支持此选项。\n    :return: sklearn.linear_model._logistic.LogisticRegression\n    \"\"\"</span>\n</code></pre>\n<p>函数<code>LinearRegression()</code>返回一个<code>LogisticRegression</code>对象。</p>\n<p><strong>常用属性（成员变量）：</strong></p>\n<ul>\n<li><code>coef_</code>：<strong>array</strong>。（系数），指的是权重<code>w</code></li>\n<li><code>intercept_ </code>：<strong>float</strong>。模型的偏置<code>b</code></li>\n</ul>\n<p><strong>常用函数：</strong></p>\n<ul>\n<li><code>fit(X, y, sample_weight=None)</code>：拟合线性模型（以最小二乘法，即求最小均方差）。<ul>\n<li><code>X</code>：训练样本特征值。二维数组（行-样本，列-特征）</li>\n<li><code>y</code>：靶值。一维数组，样本的结果值</li>\n<li><code>sample_weight</code>：每个样品的单独重量（暂时不清楚，可能是属性的权重2？）</li>\n<li><strong>return：</strong>self。返回拟合后的线性模型，这种不需要去接收，属于修改型的函数</li>\n</ul>\n</li>\n<li><code>predict(X)</code>：预测<ul>\n<li><code>X</code>：用于预测的样本</li>\n<li><strong>return：</strong>array。样本的预测值 </li>\n</ul>\n</li>\n<li><code>get_params(deep=True)</code>：以字典形式返回模型参数，包括但不限于<code>fit_intercept</code><ul>\n<li><code>deep</code>：如果为True，则将返回此估计器的参数以及作为估计器的包含子对象。</li>\n<li><strong>return：</strong>dict</li>\n</ul>\n</li>\n<li><code>set_params(**params)</code>：设置参数<ul>\n<li><code>**params</code>：dict</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-对数几率回归逻辑回归\"><a href=\"#2-对数几率回归（逻辑回归）\" class=\"headerlink\" title=\"2. 对数几率回归（逻辑回归）\"></a>2. 对数几率回归（逻辑回归）</h2><p>虽然叫作<strong>回归</strong>，但逻辑回归是<strong>分类器</strong></p>\n<h3 id=\"21-与线性回归的区别\"><a href=\"#2-1-与线性回归的区别\" class=\"headerlink\" title=\"2.1 与线性回归的区别\"></a>2.1 与线性回归的区别</h3><blockquote>\n<p>逻辑回归和线性回归一样，都是求ω和b。即学习器均是β=(ω:b)</p>\n</blockquote>\n<p><strong>liner回归：</strong></p>\n<pre><code> 1. 主要学习**线性模型**。\n 2. 预测一般是预测该样本在线性模型上的取值（当然取值也可以看做分类）\n</code></pre>\n<p><strong>logic回归：</strong></p>\n<ol>\n<li>通过学习后的<strong>模型</strong>对新样本进行<strong>分类</strong>。</li>\n<li>主要通过<strong>跃迁函数（sigmod）</strong>加强分类效果。</li>\n</ol>\n<h3 id=\"22-sigmod函数\"><a href=\"#2-2-sigmod函数\" class=\"headerlink\" title=\"2.2 sigmod函数\"></a>2.2 sigmod函数</h3><p><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621165221963.png\" alt=\"image-20210621165221963\"><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621170226764.png\" alt=\"image-20210621170226764\"></p>\n<p>意义：大于0判正，大于0判负</p>\n<blockquote>\n<p>因为单位阶跃函数不连续，所以用sigmod函数（对数几率函数logistic function）替代，因此称为对数几率回归/逻辑回归</p>\n</blockquote>\n<h3 id=\"23-算法原理\"><a href=\"#2-3-算法原理\" class=\"headerlink\" title=\"2.3 算法原理\"></a>2.3 算法原理</h3><p>与线性回归稍有不同，这是用于<strong>分类</strong>学习的算法，目标值是离散的</p>\n<p><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png\" alt=\"image-20210621163134066\"></p>\n<p>​    其公式是线性回归和跃迁函数的结合</p>\n<ol>\n<li><p>线性函数<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621171121845.png\" alt=\"image-20210621171121845\">与<em>sigmod</em>函数<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621165221963.png\" alt=\"image-20210621165221963\">结合→<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png\" alt=\"image-20210621163134066\"></p>\n</li>\n<li><p>推出<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621171318629.png\" alt=\"image-20210621171318629\">，y以0.5为临界点</p>\n</li>\n<li><p>得出极大似然函数<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621171854071.png\" alt=\"image-20210621171854071\">。求出其取<strong>最小值</strong>时<em>β</em>的取值即为模型解参数</p>\n<blockquote>\n<p>其中，<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621172030205.png\" alt=\"image-20210621172030205\"></p>\n</blockquote>\n</li>\n</ol>\n<p>可以<strong>梯度下降法</strong>或<strong>牛顿法</strong>解</p>\n<p>其中关于β的一阶、二阶导数分别为<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621172247380.png\" alt=\"image-20210621172247380\">可用来求梯度<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621172300230.png\" alt=\"image-20210621172300230\"></p>\n<p><strong>总结：</strong>logic回归就是求模型<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png\" alt=\"image-20210621163134066\">的参数ω和b。</p>\n<h3 id=\"24-代码\"><a href=\"#2-4-代码\" class=\"headerlink\" title=\"2.4 代码\"></a>2.4 代码</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#1. 读取数据</span>\ndataset <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'F:\\project\\watermelon\\melon_data1.csv'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#2. 定义样本属性和训练目标，此例是用密度预测含糖率</span>\nX <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">.</span>loc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">'密度'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'含糖率'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#其中属性值是二维向量：n个样本;n个属性/样本</span>\nY <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'含糖率'</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">#3. 切分训练集和验证集</span>\nX_train<span class=\"token punctuation\">,</span>X_test<span class=\"token punctuation\">,</span>Y_train<span class=\"token punctuation\">,</span>Y_test <span class=\"token operator\">=</span> model_selection<span class=\"token punctuation\">.</span>train_test_split<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>Y<span class=\"token punctuation\">,</span>test_size<span class=\"token operator\">=</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span>random_state<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#4. 建立模型</span>\nlog_model <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#逻辑回归，就是对数线性回归，离散分类</span>\n<span class=\"token comment\" spellcheck=\"true\">#5. 训练</span>\nlog_model<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X_train<span class=\"token punctuation\">,</span>Y_train<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#6. 预测</span>\nY_pred <span class=\"token operator\">=</span> log_model<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>X_test<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#7. 评估（此处用精确度，即预测到到的/没预测到的）</span>\n<span class=\"token number\">1</span><span class=\"token operator\">-</span>sum<span class=\"token punctuation\">(</span>Y_pred<span class=\"token operator\">-</span>Y_test<span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>len<span class=\"token punctuation\">(</span>Y_test<span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>关于sklearn.linear_model.LogisticRegression</strong></p>\n<p>已知逻辑回归模型<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621163134066.png\" alt=\"image-20210621163134066\"></p>\n<p>其中：</p>\n<p>​    -<code>w</code>是权重，表示特征的重要程度。一维向量</p>\n<p>​    -<code>b</code>是偏置，模型的偏移量。单个数值</p>\n<p>​    -<code>x</code>是样本，一组特征值。一维向量</p>\n<pre class=\" language-python\"><code class=\"language-python\">LogisticRegression<span class=\"token punctuation\">(</span>penalty<span class=\"token operator\">=</span><span class=\"token string\">'l2'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> dual<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> tol<span class=\"token operator\">=</span><span class=\"token number\">0.0001</span><span class=\"token punctuation\">,</span> C<span class=\"token operator\">=</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">,</span> fit_intercept<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> intercept_scaling<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> class_weight<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> random_state<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> solver<span class=\"token operator\">=</span><span class=\"token string\">'lbfgs'</span><span class=\"token punctuation\">,</span> max_iter<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> multi_class<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> warm_start<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">,</span> n_jobs<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> l1_ratio<span class=\"token operator\">=</span>None<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#虽然有这么多的参数，但一般默认就行</span>\nlog_model <span class=\"token operator\">=</span> LogisticRegression<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#直接这样就行</span>\n</code></pre>\n<p>函数<code>LogisticRegression()</code>返回一个<code>LogisticRegression</code>对象。</p>\n<p><strong>常用属性（成员变量）：</strong></p>\n<ul>\n<li><code>coef_</code>：<strong>array</strong>。（系数），指的是权重<code>w</code></li>\n<li><code>intercept_ </code>：<strong>float</strong>。模型的偏置<code>b</code></li>\n<li><code>classes_ </code>：<strong>ndarray</strong>。分类器已知的类标签列表（逻辑回归可以是多分类）</li>\n<li><code>n_iter_</code>：<strong>ndarray</strong> 。各分类的实际<strong>迭代次数</strong>。</li>\n</ul>\n<p><strong>常用函数：</strong></p>\n<ul>\n<li><code>fit(X, y, sample_weight=None)</code>：拟合模型。</li>\n<li><code>predict(X)</code>：预测</li>\n<li><code>get_params(deep=True)</code>：以字典形式返回模型参数，包括但不限于<code>fit_intercept</code></li>\n<li><code>set_params(**params)</code>：设置参数</li>\n<li><code>decision_function(X)</code>：预测样本的置信度。样本的置信度与样本到超平面的有符号距离成正比。</li>\n</ul>\n<h1 id=\"四-决策树\"><a href=\"#四、-决策树\" class=\"headerlink\" title=\"四、 决策树\"></a>四、 决策树</h1><p>决策树主要就是靠计算<strong>信息增益</strong>或<strong>基尼指数</strong>决定选哪条支线，属于<strong>分类</strong>算法。</p>\n<h1 id=\"五-神经网络初阶\"><a href=\"#五、-神经网络初阶\" class=\"headerlink\" title=\"五、 神经网络初阶\"></a>五、 神经网络初阶</h1><blockquote>\n<p>神经网络这块西瓜书讲得不是很详细，而且神经网络本来就是不小于机器学习的模块，所以我这里主要参考了别的一些专门讲<strong>深度学习</strong>的书。</p>\n</blockquote>\n<p>参考：《深度学习入门<em>基于python的理论与实现</em>》</p>\n<p>神经网络是个层次递进的结构，每层通过一定的函数计算到下一层，如图所示</p>\n<p><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/neural_network.jpg\" alt=\"neural_network\"></p>\n<p>在此之前，先来熟悉一下神经网络的一些概念</p>\n<ul>\n<li><strong>权重ω：</strong>代表各参数的<strong>重要性</strong></li>\n<li><strong>偏置b：</strong>在神经网络中表示该神经元被激活的<strong>容易程度</strong>；</li>\n<li><strong>激活函数：</strong>神经网络中，将每层输入信号(a=wx+b)转换为输出信号，其作用是决定该神经元是否被激活</li>\n<li><strong>张量(tensor)：</strong>神经网络使用的数据存储在<strong>多维Numpy 数组</strong>中，也叫<strong>张量（tensor）</strong>。<font color=\"red\">所以张量其实就是多维数组</font>，之所以不能叫做矩阵，矩阵只是二维的数组，张量所指的维度是没有限制的。一般来说，当前所有机器学习系统都使用张量作为基本数据结构。张量这一概念的核心在于，它是一个<strong>数据容器</strong>。它包含的数据几乎总是<strong>数值数据</strong>，因此它是数字的容器。<strong>矩阵</strong>就是<strong>二维张量</strong>。张量是矩阵向<strong>任意维度</strong>的扩展。</li>\n<li><strong>梯度(grad)：</strong>由<strong>全部</strong>变量的<strong>偏导数</strong>汇总而成的<strong>张量</strong>称为**梯度(gradient)**。如grad_xy=(dz/dx,dz/dy)</li>\n</ul>\n<h2 id=\"1-激活函数\"><a href=\"#1-激活函数\" class=\"headerlink\" title=\"1. 激活函数\"></a>1. 激活函数</h2><p>有下激活函数所示，绝大多数激活函数在特定范围为0，即不被激活，也就意味着该神经元对后序网络没有信息传递</p>\n<h3 id=\"11-阶跃函数\"><a href=\"#1-1-阶跃函数\" class=\"headerlink\" title=\"1.1 阶跃函数\"></a>1.1 阶跃函数</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220755046.png\" alt=\"image-20210621220755046\"></p>\n<h3 id=\"12-sigmoid函数\"><a href=\"#1-2-sigmoid函数\" class=\"headerlink\" title=\"1.2 sigmoid函数\"></a>1.2 sigmoid函数</h3><p>​     <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220802439.png\" alt=\"image-20210621220802439\"></p>\n<h3 id=\"13-relu函数\"><a href=\"#1-3-ReLU函数\" class=\"headerlink\" title=\"1.3 ReLU函数\"></a>1.3 ReLU函数</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220811079.png\" alt=\"image-20210621220811079\"></p>\n<h3 id=\"14-softmax函数最后一层输出层的激活函数\"><a href=\"#1-4-softmax函数（最后一层输出层的激活函数）\" class=\"headerlink\" title=\"1.4 softmax函数（最后一层输出层的激活函数）\"></a>1.4 softmax函数（最后一层输出层的激活函数）</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220818680.png\" alt=\"image-20210621220818680\"></p>\n<h3 id=\"15-函数图\"><a href=\"#1-5-函数图\" class=\"headerlink\" title=\"1.5 函数图\"></a>1.5 函数图</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220826903.png\" alt=\"image-20210621220826903\"></p>\n<p>其中：深蓝色的是relu，黑色虚线是阶跃函数，蓝绿色的是sigmod函数</p>\n<h2 id=\"2-神经网络的层次递进\"><a href=\"#2-神经网络的层次递进\" class=\"headerlink\" title=\"2. 神经网络的层次递进\"></a>2. 神经网络的层次递进</h2><p>如上图：<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/neural_network.jpg\" alt=\"neural_network\"></p>\n<p>其中<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621221751826.png\" alt=\"image-20210621221751826\"></p>\n<blockquote>\n<p><strong>X</strong>：特征矩阵。<strong>ω</strong>：各属性权重的矩阵。</p>\n</blockquote>\n<p>注意以下几点：</p>\n<ol>\n<li><p><strong>输出层</strong>神经元一般取决于<strong>分类数</strong>（几分类就几个），<strong>输入</strong>神经元一般取决于<strong>属性/特征</strong>个数</p>\n</li>\n<li><p><strong>x-&gt;a(隐藏层)-&gt;输出层</strong>是<strong>矩阵运算</strong></p>\n</li>\n<li><p><code>x</code>是输入<code>1*n</code>的向量，<code>n</code>代表<strong>特征值数量</strong></p>\n</li>\n</ol>\n<p>​      <code>ω</code>是<code>n*m</code>的权值，行：n个特征值，列：下一层 m个神经元</p>\n<p>​      <code>b</code>是<code>1*m</code>的向量（b的每个元素并不一样）</p>\n<ol start=\"4\">\n<li><p>**激活函数<code>h()</code>**用于隐藏层将输入→输出，及<code>a()→z()</code></p>\n</li>\n<li><p>输出层的激活函数<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621222800025.png\" alt=\"image-20210621222800025\">要视情况而定，</p>\n<p>一般而言：</p>\n<ul>\n<li>回归（连续）：恒等函数（输入即输出）</li>\n<li>分类：</li>\n</ul>\n<p>​       二元分类：<code>sigmoid()</code><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621220802439.png\" alt=\"image-20210621220802439\"></p>\n<p>​       多分类：<code>softmax()</code><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621223227999.png\" alt=\"image-20210621223227999\"></p>\n</li>\n</ol>\n<h2 id=\"3-神经网络的学习\"><a href=\"#3-神经网络的学习\" class=\"headerlink\" title=\"3. 神经网络的学习\"></a>3. 神经网络的学习</h2><blockquote>\n<p>模型的学习主要是为了找到合适的**权重<code>ω</code><strong>和</strong>偏置<code>b</code>**。学习的过程就是<code>ω</code>和<code>b</code><strong>更新</strong>的过程</p>\n</blockquote>\n<p>大致学习过程如下：</p>\n<ol>\n<li><strong>初始化：</strong>选取初始权重<code>ω</code>和偏置<code>b</code></li>\n<li><strong>预测：</strong>根据损失函数求误差</li>\n<li><strong>损失函数求梯度：</strong>主要是求关于<strong>权重</strong>的梯度。一般用求导公式或<strong>误差反向传播算法</strong></li>\n<li><strong>更新权重：</strong>向损失函数<strong>梯度反方向</strong>更新</li>\n<li><strong>预测：</strong>是否满足要求？是→结束；否→继续3,4,5</li>\n</ol>\n<h3 id=\"31-特征提取与算法设计\"><a href=\"#3-1-特征提取与算法设计\" class=\"headerlink\" title=\"3.1 特征提取与算法设计\"></a>3.1 特征提取与算法设计</h3><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210621223607967.png\" alt=\"image-20210621223607967\"></p>\n<p>神经网络是没有人为介入，自动提取特征值的。如直接提取图像的本质数据（像素什么的）</p>\n<h3 id=\"32-损失函数\"><a href=\"#3-2-损失函数\" class=\"headerlink\" title=\"3.2 损失函数\"></a>3.2 损失函数</h3><ul>\n<li><p>用于表示神经网络<strong>优劣</strong>的指标，损失<strong>越小</strong>，神经网络性能越好。类似误差率。</p>\n</li>\n<li><p>通过不断更新<strong>权重ω</strong>来使损失最小化→以使神经网络最优</p>\n<ul>\n<li>一般使用<strong>梯度下降法</strong>，沿损失函数<strong>梯度反方向</strong>（损失函数减小的方向）更新权重</li>\n<li><strong>梯度</strong>可以直接求导公式求，也可以用<strong>误差反向传播法</strong>求梯度</li>\n</ul>\n</li>\n<li><p>一般用的比较多的损失函数是<strong>均方误差</strong>和<strong>交叉熵误差</strong></p>\n</li>\n</ul>\n<h4 id=\"321-均方误差\"><a href=\"#3-2-1-均方误差\" class=\"headerlink\" title=\"3.2.1 均方误差\"></a>3.2.1 均方误差</h4><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622160555811.png\" alt=\"image-20210622160555811\"></p>\n<p><code>yk</code>和<code>tk</code>分别是预测值和实际值，y是长度为n的一维向量</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">mean_squared_error</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    损失函数：均方误差\n    :param y: 预测值,np数组\n    :param t: 监督值,np数组\n    :return: 均方误差float\n    \"\"\"</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.5</span><span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"322-交叉熵误差\"><a href=\"#3-2-2-交叉熵误差\" class=\"headerlink\" title=\"3.2.2 交叉熵误差\"></a>3.2.2 交叉熵误差</h4><p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622160932219.png\" alt=\"image-20210622160932219\"></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cross_entropy_error</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    损失函数：交叉熵误差\n    :param y: 预测值，np数组\n    :param t: 监督值,np数组\n    :return: 交叉熵误差float\n    \"\"\"</span>\n    delta<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">7</span>  <span class=\"token comment\" spellcheck=\"true\">#10的-7次，为了防止log0导致的下溢</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>t<span class=\"token operator\">*</span>np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>y<span class=\"token operator\">+</span>delta<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"33-神经网络学习\"><a href=\"#3-3-神经网络学习\" class=\"headerlink\" title=\"3.3 神经网络学习\"></a>3.3 神经网络学习</h3><p><strong>步骤：</strong></p>\n<ol>\n<li><p>抽取mini-batch</p>\n</li>\n<li><p>计算梯度（权重的梯度）</p>\n</li>\n<li><p>更新参数（权重，沿梯度反方向更新）</p>\n</li>\n<li><p>重复123</p>\n</li>\n</ol>\n<p><strong>代码：</strong></p>\n<ol>\n<li><p>神经网络类</p>\n<ol>\n<li>初始化权重</li>\n<li>预测函数</li>\n<li>损失函数</li>\n<li>精确率函数</li>\n<li>梯度下降函数</li>\n</ol>\n</li>\n<li><p>训练学习类</p>\n<ol>\n<li>MNIST上导入训练集和数据集</li>\n<li>设定学习参数（训练次数、神经网络各层神经元数、小批量样本数、学习率等）</li>\n<li>迭代计算，各权重沿自己梯度反方向更新，并保存精度变化</li>\n<li>绘制图形</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"34-误差反向传播求梯度\"><a href=\"#3-4-误差反向传播求梯度\" class=\"headerlink\" title=\"3.4 误差反向传播求梯度\"></a>3.4 误差反向传播求梯度</h3><p>通过反向传播求得损失函数的梯度（各自变量的导数），然后即可沿梯度反方向<strong>更新权重</strong>。</p>\n<p>反向传播可以比较<strong>快</strong>地计算出梯度。</p>\n<blockquote>\n<p>原理：局部求导</p>\n<p>公式：输出梯度=输入梯度*本层导数</p>\n</blockquote>\n<p>实际上和复合函数求导是一样的道理，图中：上面的是价格，下面的是梯度</p>\n<p><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/3.jpg\" alt=\"neural_network\"></p>\n<h4 id=\"341-关于affine层的矩阵反向求导\"><a href=\"#3-4-1-关于Affine层的矩阵反向求导\" class=\"headerlink\" title=\"3.4.1 关于Affine层的矩阵反向求导\"></a>3.4.1 关于Affine层的矩阵反向求导</h4><p><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622162354257.png\" alt=\"image-20210622162354257\"> </p>\n<blockquote>\n<p>其中，</p>\n<p>​    X：特征值向量（N*m）；</p>\n<p>​    W：权重矩阵（m*n）；</p>\n<p>​    B：偏移向量（1*n）；</p>\n<p>​    Y：输出数组（N*n）</p>\n<p>​        N为批量数，因为小批量处理可以输入N组向量输出N组向量，通过矩阵乘法</p>\n</blockquote>\n<p>反向传播：</p>\n<p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622165007115.png\" alt=\"image-20210622165007115\"></p>\n<blockquote>\n<p> L是损失函数，Y作为loss函数的自变量，<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210622165455298.png\" alt=\"image-20210622165455298\">是上游传来的导数</p>\n<p> 对于<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210726173859452.png\" alt=\"image-20210726173859452\">，W相当于是常数；同理，对于<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/image-20210726173914864.png\" alt=\"image-20210726173914864\">，X是常数</p>\n</blockquote>\n<p><font color=\"red\">Affine层各权重梯度求出后实时保存</font></p>\n<p>代码：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Affine</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>W <span class=\"token operator\">=</span>W\n        self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b\n        \n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>original_x_shape <span class=\"token operator\">=</span> None\n        <span class=\"token comment\" spellcheck=\"true\"># 权重和偏置参数的导数</span>\n        self<span class=\"token punctuation\">.</span>dW <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 对应张量（相当于维度，矩阵是二维张量）</span>\n        self<span class=\"token punctuation\">.</span>original_x_shape <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        out <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>b\n        <span class=\"token keyword\">return</span> out\n    \n    <span class=\"token comment\" spellcheck=\"true\">#反向传播</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        dout是上游传下来的梯度\n        \"\"\"</span>\n        dx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dW <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># Affine层各权重梯度求出后实时保存</span>\n        dx <span class=\"token operator\">=</span> dx<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>original_x_shape<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 还原输入数据的形状（对应张量）</span>\n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h4 id=\"342-最上游导数生成softmax_with_loss损失函数相对于softmax的输出y的伪梯度矩阵\"><a href=\"#3-4-2-最上游导数生成，softmax-with-loss，损失函数相对于softmax的输出y的伪梯度矩阵\" class=\"headerlink\" title=\"3.4.2 最上游导数生成，softmax_with_loss，损失函数相对于softmax的输出y的伪梯度矩阵\"></a>3.4.2 最上游导数生成，softmax_with_loss，损失函数相对于softmax的输出y的伪梯度矩阵</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SoftmaxWithLoss</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    softmax层和loss函数层一起\n    其实就是y-l的关系，即最上游的导数求解\n    \"\"\"</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>loss <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> None <span class=\"token comment\" spellcheck=\"true\"># softmax的输出</span>\n        self<span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> None <span class=\"token comment\" spellcheck=\"true\"># 监督数据</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        得到softmax输出和误差函数输出，还有监督数据\n        :param x: \n        :param t: 监督值,np数组\n        :return: 交叉熵误差\n        \"\"\"</span>\n        self<span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> softmax<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>loss <span class=\"token operator\">=</span> cross_entropy_error<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>loss\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        求dl/dy\n        :param dout:\n        :return: (y1-t1,y2-t2,y3-t3...)差分数组\n        loss中相对于y的梯度，差分数组代表梯度数组，越接近0越精确。各元素往梯度负方向更新即可\n        t和y都是多组一维向量组成的二维向量\n        \"\"\"</span>\n        batch_size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\"># 监督数据是one-hot-vector的情况，one-hot-vector就是[0,0,0,0,1,0,0,0,0]表示4</span>\n            dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> batch_size\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            dx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            dx<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            <span class=\"token comment\" spellcheck=\"true\">#np.arange是0,1,2,3,4,....</span>\n            <span class=\"token comment\" spellcheck=\"true\">#t是[]表示的是每个样本（每组特征向量）的监督值</span>\n            <span class=\"token comment\" spellcheck=\"true\">#这行的意思是将dx对应行（一行代表一个样本的预测值概率向量）的对应位置（位置是t的监督值，比如监督值为4，对应dx中第5个元素的概率位置）的元素-1</span>\n            dx <span class=\"token operator\">=</span> dx <span class=\"token operator\">/</span> batch_size\n        \n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h4 id=\"343-反向传播求梯度代码全貌\"><a href=\"#3-4-3-反向传播求梯度代码全貌\" class=\"headerlink\" title=\"3.4.3 反向传播求梯度代码全貌\"></a>3.4.3 反向传播求梯度代码全貌</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">gradient</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">#为什么只要导入x呢，因为自变量W和b都在params中保存着了</span>\n    W1<span class=\"token punctuation\">,</span> W2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W2'</span><span class=\"token punctuation\">]</span>\n    b1<span class=\"token punctuation\">,</span> b2 <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">]</span>\n    grads <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\n\n    batch_num <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># forward</span>\n    a1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> W1<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b1\n    z1 <span class=\"token operator\">=</span> sigmoid<span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span>\n    a2 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>z1<span class=\"token punctuation\">,</span> W2<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> b2\n    y <span class=\"token operator\">=</span> softmax<span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># backward</span>\n    dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">-</span> t<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> batch_num <span class=\"token comment\" spellcheck=\"true\">#差分数组，dy是最上层微分（梯度），是公式中的dl/dy</span>\n    grads<span class=\"token punctuation\">[</span><span class=\"token string\">'W2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>z1<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> dy<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#公式中的dl/dw</span>\n    grads<span class=\"token punctuation\">[</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>dy<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#Affine层反向传播的时候沿途就保存权重的梯度了</span>\n\n    da1 <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dy<span class=\"token punctuation\">,</span> W2<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#X*W+B=Y，a是此式中的X</span>\n\n    dz1 <span class=\"token operator\">=</span> sigmoid_grad<span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> da1<span class=\"token comment\" spellcheck=\"true\">#sigmoid层反向传播（sigmoid层是直接求导的）</span>\n    grads<span class=\"token punctuation\">[</span><span class=\"token string\">'W1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> dz1<span class=\"token punctuation\">)</span>\n    grads<span class=\"token punctuation\">[</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>dz1<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> grads\n</code></pre>\n<h2 id=\"4-神经网络的代码设计\"><a href=\"#4-神经网络的代码设计\" class=\"headerlink\" title=\"4. 神经网络的代码设计\"></a>4. 神经网络的代码设计</h2><blockquote>\n<p>y-预测值；t-标签值</p>\n<p>x-样本；w-权重；b-偏置</p>\n</blockquote>\n<h3 id=\"41-functionpy\"><a href=\"#4-1-function-py\" class=\"headerlink\" title=\"4.1 function.py\"></a>4.1 function.py</h3><p>包括各激活函数的、损失函数的实现以及反向传播的局部梯度</p>\n<h4 id=\"411-正向传播\"><a href=\"#4-1-1-正向传播\" class=\"headerlink\" title=\"4.1.1 正向传播\"></a>4.1.1 正向传播</h4><p>sigmoid函数：                                 </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sigmoid</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>ReLU函数：    </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">relu</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>maximum<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span>\nsoftmax函数：  \n \n<span class=\"token keyword\">def</span> <span class=\"token function\">softmax</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> x<span class=\"token punctuation\">.</span>ndim <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>T\n        x <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> y<span class=\"token punctuation\">.</span>T \n\n    x <span class=\"token operator\">=</span> x <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 溢出对策</span>\n    <span class=\"token keyword\">return</span> np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>exp<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"412-反向传播\"><a href=\"#4-1-2-反向传播\" class=\"headerlink\" title=\"4.1.2 反向传播\"></a>4.1.2 反向传播</h4><p>  反向传播本质上是局部求导</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sigmoid_grad</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">relu_grad</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    grad <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    grad<span class=\"token punctuation\">[</span>x<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> grad\n</code></pre>\n<h4 id=\"413-损失函数\"><a href=\"#4-1-3-损失函数\" class=\"headerlink\" title=\"4.1.3 损失函数\"></a>4.1.3 损失函数</h4><p>损失函数在最后softmax处理后算就可以了</p>\n<p>均方误差： </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">mean_squared_error</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#均方差误差</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">-</span>t<span class=\"token punctuation\">)</span><span class=\"token operator\">**</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p> 交叉熵误差： </p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">cross_entropy_error</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#交叉熵误差</span>\n    <span class=\"token keyword\">if</span> y<span class=\"token punctuation\">.</span>ndim <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n        t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span>\n        \n    <span class=\"token comment\" spellcheck=\"true\"># 监督数据是one-hot-vector的情况下，转换为正确解标签的索引</span>\n    <span class=\"token keyword\">if</span> t<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> y<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span>\n        t <span class=\"token operator\">=</span> t<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n             \n    batch_size <span class=\"token operator\">=</span> y<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> batch_size\n\n最终损失函数\n<span class=\"token keyword\">def</span> <span class=\"token function\">softmax_loss</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\">#这里选用的是交叉熵误差</span>\n    y <span class=\"token operator\">=</span> softmax<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> cross_entropy_error<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"42-layerpy各层的类\"><a href=\"#4-2-layer-py各层的类\" class=\"headerlink\" title=\"4.2 layer.py各层的类\"></a>4.2 layer.py各层的类</h3><p>相同结构的层建立一个类，包括各<strong>激活函数</strong>、<strong>Affine</strong>、<strong>卷积池化</strong>、以及<strong>softmax</strong>和<strong>loss</strong></p>\n<p>每层包括初始化函数、正向传播、反向传播</p>\n<p>​    输入输出均为矩阵形式。正向传播输入输出是参数矩阵，反向输入输出是梯度矩阵</p>\n<h4 id=\"421-relu层\"><a href=\"#4-2-1-ReLU层\" class=\"headerlink\" title=\"4.2.1 ReLU层\"></a>4.2.1 ReLU层</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Relu</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>mask <span class=\"token operator\">=</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>mask <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        out<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n        <span class=\"token keyword\">return</span> out\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dout<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>mask<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        dx <span class=\"token operator\">=</span> dout\n\n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h4 id=\"422-sigmoid层\"><a href=\"#4-2-2-sigmoid层\" class=\"headerlink\" title=\"4.2.2 sigmoid层\"></a>4.2.2 sigmoid层</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Sigmoid</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>out <span class=\"token operator\">=</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        out <span class=\"token operator\">=</span> sigmoid<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>out <span class=\"token operator\">=</span> out\n        <span class=\"token keyword\">return</span> out\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dx <span class=\"token operator\">=</span> dout <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span> <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>out\n\n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h4 id=\"423-affine层全连接层也就是awxb那层\"><a href=\"#4-2-3-Affine层（全连接层，也就是a-wx-b那层）\" class=\"headerlink\" title=\"4.2.3 Affine层（全连接层，也就是a=wx+b那层）\"></a>4.2.3 Affine层（全连接层，也就是a=wx+b那层）</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Affine</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>W <span class=\"token operator\">=</span>W\n        self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b\n        \n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>original_x_shape <span class=\"token operator\">=</span> None\n        <span class=\"token comment\" spellcheck=\"true\"># 权重和偏置参数的导数</span>\n        self<span class=\"token punctuation\">.</span>dW <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 对应张量</span>\n        self<span class=\"token punctuation\">.</span>original_x_shape <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape\n        x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n\n        out <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>b\n\n        <span class=\"token keyword\">return</span> out\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dW <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        \n        dx <span class=\"token operator\">=</span> dx<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>original_x_shape<span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 还原输入数据的形状（对应张量）</span>\n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h4 id=\"424-卷积层\"><a href=\"#4-2-4-卷积层\" class=\"headerlink\" title=\"4.2.4 卷积层\"></a>4.2.4 卷积层</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Convolution</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> W<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pad<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>W <span class=\"token operator\">=</span> W\n        self<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> b\n        self<span class=\"token punctuation\">.</span>stride <span class=\"token operator\">=</span> stride\n        self<span class=\"token punctuation\">.</span>pad <span class=\"token operator\">=</span> pad\n        \n        <span class=\"token comment\" spellcheck=\"true\"># 中间数据（backward时使用）</span>\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> None   \n        self<span class=\"token punctuation\">.</span>col <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>col_W <span class=\"token operator\">=</span> None\n        \n        <span class=\"token comment\" spellcheck=\"true\"># 权重和偏置参数的梯度</span>\n        self<span class=\"token punctuation\">.</span>dW <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        FN<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> FH<span class=\"token punctuation\">,</span> FW <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">.</span>shape\n        <span class=\"token comment\" spellcheck=\"true\"># print(\"输入矩阵初始形状\")</span>\n        <span class=\"token comment\" spellcheck=\"true\"># print(x.shape)</span>\n        N<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">,</span> W <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape\n        out_h <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>H <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>pad <span class=\"token operator\">-</span> FH<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">)</span>\n        out_w <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> int<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>W <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>pad <span class=\"token operator\">-</span> FW<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">)</span>\n\n        col <span class=\"token operator\">=</span> im2col<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> FH<span class=\"token punctuation\">,</span> FW<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">)</span>\n        col_W <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>FN<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>T\n        <span class=\"token comment\" spellcheck=\"true\"># print(\"形状\")</span>\n        <span class=\"token comment\" spellcheck=\"true\"># print(col.shape,col_W.shape)</span>\n\n        out <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> col_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>b\n        out <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> out_h<span class=\"token punctuation\">,</span> out_w<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span>col <span class=\"token operator\">=</span> col\n        self<span class=\"token punctuation\">.</span>col_W <span class=\"token operator\">=</span> col_W\n\n        <span class=\"token keyword\">return</span> out\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        FN<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> FH<span class=\"token punctuation\">,</span> FW <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>W<span class=\"token punctuation\">.</span>shape\n        dout <span class=\"token operator\">=</span> dout<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> FN<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>db <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dW <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>col<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>dW <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>dW<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>FN<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> FH<span class=\"token punctuation\">,</span> FW<span class=\"token punctuation\">)</span>\n\n        dcol <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>dot<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>col_W<span class=\"token punctuation\">.</span>T<span class=\"token punctuation\">)</span>\n        dx <span class=\"token operator\">=</span> col2im<span class=\"token punctuation\">(</span>dcol<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> FH<span class=\"token punctuation\">,</span> FW<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h4 id=\"425-池化层\"><a href=\"#4-2-5-池化层\" class=\"headerlink\" title=\"4.2.5 池化层\"></a>4.2.5 池化层</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Pooling</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> pool_h<span class=\"token punctuation\">,</span> pool_w<span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> pad<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>pool_h <span class=\"token operator\">=</span> pool_h\n        self<span class=\"token punctuation\">.</span>pool_w <span class=\"token operator\">=</span> pool_w\n        self<span class=\"token punctuation\">.</span>stride <span class=\"token operator\">=</span> stride\n        self<span class=\"token punctuation\">.</span>pad <span class=\"token operator\">=</span> pad\n        \n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>arg_max <span class=\"token operator\">=</span> None\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        N<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">,</span> H<span class=\"token punctuation\">,</span> W <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>shape\n        out_h <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>H <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>pool_h<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">)</span>\n        out_w <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>W <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>pool_w<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">)</span>\n\n        col <span class=\"token operator\">=</span> im2col<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pool_h<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pool_w<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">)</span>\n        col <span class=\"token operator\">=</span> col<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pool_h<span class=\"token operator\">*</span>self<span class=\"token punctuation\">.</span>pool_w<span class=\"token punctuation\">)</span>\n\n        arg_max <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>max<span class=\"token punctuation\">(</span>col<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        out <span class=\"token operator\">=</span> out<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>N<span class=\"token punctuation\">,</span> out_h<span class=\"token punctuation\">,</span> out_w<span class=\"token punctuation\">,</span> C<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n        self<span class=\"token punctuation\">.</span>arg_max <span class=\"token operator\">=</span> arg_max\n\n        <span class=\"token keyword\">return</span> out\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        dout <span class=\"token operator\">=</span> dout<span class=\"token punctuation\">.</span>transpose<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        \n        pool_size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pool_h <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>pool_w\n        dmax <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> pool_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        dmax<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>arg_max<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>arg_max<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dout<span class=\"token punctuation\">.</span>flatten<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        dmax <span class=\"token operator\">=</span> dmax<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">.</span>shape <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>pool_size<span class=\"token punctuation\">,</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> \n        \n        dcol <span class=\"token operator\">=</span> dmax<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span>dmax<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> dmax<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">*</span> dmax<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        dx <span class=\"token operator\">=</span> col2im<span class=\"token punctuation\">(</span>dcol<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pool_h<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pool_w<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>stride<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>pad<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h4 id=\"426-softmax至损失函数层\"><a href=\"#4-2-6-softmax至损失函数层\" class=\"headerlink\" title=\"4.2.6 softmax至损失函数层\"></a>4.2.6 softmax至损失函数层</h4><p>将softmax与loss合并为一层</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">SoftmaxWithLoss</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>loss <span class=\"token operator\">=</span> None\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> None <span class=\"token comment\" spellcheck=\"true\"># softmax的输出</span>\n        self<span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> None <span class=\"token comment\" spellcheck=\"true\"># 监督数据</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">forward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>t <span class=\"token operator\">=</span> t\n        self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> softmax<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>loss <span class=\"token operator\">=</span> cross_entropy_error<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>loss\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">backward</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> dout<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        batch_size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">.</span>size <span class=\"token operator\">==</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">:</span> <span class=\"token comment\" spellcheck=\"true\"># 监督数据是one-hot-vector的情况</span>\n            dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>y <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> batch_size\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            dx <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            dx<span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t<span class=\"token punctuation\">]</span> <span class=\"token operator\">-=</span> <span class=\"token number\">1</span>\n            dx <span class=\"token operator\">=</span> dx <span class=\"token operator\">/</span> batch_size\n        \n        <span class=\"token keyword\">return</span> dx\n</code></pre>\n<h3 id=\"43-neuralnet神经网络类\"><a href=\"#4-3-Neuralnet神经网络类\" class=\"headerlink\" title=\"4.3 Neuralnet神经网络类\"></a>4.3 Neuralnet神经网络类</h3><p>包括初始化函数（初始化各超参数）、预测函数（神经网络层次递进）、损失函数、准确率函数、梯度函数（学习过程中保存每层各权重的梯度）</p>\n<p>  以卷积神经网络为例</p>\n<h4 id=\"431-类变量\"><a href=\"#4-3-1-类变量\" class=\"headerlink\" title=\"4.3.1 类变量\"></a>4.3.1 类变量</h4><p>权重参数（字典形式：key-名称；value-矩阵）</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 初始化权重</span>\nself<span class=\"token punctuation\">.</span>params <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\nself<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight_init_std <span class=\"token operator\">*</span> \\\n                    np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>filter_num<span class=\"token punctuation\">,</span> input_dim<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> filter_size<span class=\"token punctuation\">,</span> filter_size<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>filter_num<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight_init_std <span class=\"token operator\">*</span> \\\n                    np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>pool_output_size<span class=\"token punctuation\">,</span> hidden_size<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>hidden_size<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> weight_init_std <span class=\"token operator\">*</span> \\\n                    np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>randn<span class=\"token punctuation\">(</span>hidden_size<span class=\"token punctuation\">,</span> output_size<span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span>output_size<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>各个层对象（无序表。）</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 生成层</span>\nself<span class=\"token punctuation\">.</span>layers <span class=\"token operator\">=</span> OrderedDict<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Conv1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Convolution<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n                                   conv_param<span class=\"token punctuation\">[</span><span class=\"token string\">'stride'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> conv_param<span class=\"token punctuation\">[</span><span class=\"token string\">'pad'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Relu1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Relu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Pool1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Pooling<span class=\"token punctuation\">(</span>pool_h<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> pool_w<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> stride<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Affine1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Affine<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Relu2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Relu<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nself<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Affine2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> Affine<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\nself<span class=\"token punctuation\">.</span>last_layer <span class=\"token operator\">=</span> SoftmaxWithLoss<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"432-初始化函数主要用于定义类变量\"><a href=\"#4-3-2-初始化函数（主要用于定义类变量）\" class=\"headerlink\" title=\"4.3.2 初始化函数（主要用于定义类变量）\"></a>4.3.2 初始化函数（主要用于定义类变量）</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> input_dim<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n             conv_param<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'filter_num':30, 'filter_size':5, 'pad':0, 'stride':1&amp;#125;,</span>\n             hidden_size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> output_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> weight_init_std<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</code></pre>\n<p>包括：</p>\n<p>  输入矩阵的形状大小（特征值的数量和排列）</p>\n<p>  滤波器的参数（形状、步幅、填充等，滤波器是卷积层的权重）</p>\n<p>  各层的神经元数量</p>\n<p>  标准差（初始化权重=标准差*范围随机数）</p>\n<h4 id=\"433-预测函数\"><a href=\"#4-3-3-预测函数\" class=\"headerlink\" title=\"4.3.3 预测函数\"></a>4.3.3 预测函数</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">predict</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> \n<span class=\"token comment\" spellcheck=\"true\">#层次递进，计算到输出层softmax处理前（这里softmax和loss合并了）</span>\n    <span class=\"token keyword\">for</span> layer <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        x <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> x\n</code></pre>\n<h4 id=\"434-损失函数\"><a href=\"#4-3-4-损失函数\" class=\"headerlink\" title=\"4.3.4 损失函数\"></a>4.3.4 损失函数</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">loss</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"求损失函数\n    参数x是输入数据、t是教师标签\n       就是比predict多往前走一步（进行softmax处理并求交叉熵误差）\n    \"\"\"</span>\n    y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>last_layer<span class=\"token punctuation\">.</span>forward<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"435-计算精度\"><a href=\"#4-3-5-计算精度\" class=\"headerlink\" title=\"4.3.5 计算精度\"></a>4.3.5 计算精度</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">accuracy</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> batch_size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> t<span class=\"token punctuation\">.</span>ndim <span class=\"token operator\">!=</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">:</span> t <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    \n    acc <span class=\"token operator\">=</span> <span class=\"token number\">0.0</span>\n    \n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>int<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> batch_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        tx <span class=\"token operator\">=</span> x<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>batch_size<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>batch_size<span class=\"token punctuation\">]</span>\n        tt <span class=\"token operator\">=</span> t<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>batch_size<span class=\"token punctuation\">:</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>batch_size<span class=\"token punctuation\">]</span>\n        y <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>tx<span class=\"token punctuation\">)</span>\n        y <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>argmax<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        acc <span class=\"token operator\">+=</span> np<span class=\"token punctuation\">.</span>sum<span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> tt<span class=\"token punctuation\">)</span> \n    \n    <span class=\"token keyword\">return</span> acc <span class=\"token operator\">/</span> x<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h4 id=\"436-求梯度\"><a href=\"#4-3-6-求梯度\" class=\"headerlink\" title=\"4.3.6 求梯度\"></a>4.3.6 求梯度</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">gradient</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"求梯度（误差反向传播法）\n    Parameters\n    ----------\n    x : 输入数据\n    t : 标签值\n    Returns\n    -------\n    具有各层的梯度的字典变量\n        grads['W1']、grads['W2']、...是各层的权重\n        grads['b1']、grads['b2']、...是各层的偏置\n    \"\"\"</span>\n    <span class=\"token comment\" spellcheck=\"true\"># forward</span>\n    self<span class=\"token punctuation\">.</span>loss<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># backward</span>\n    dout <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n    dout <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>last_layer<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">)</span>\n\n    layers <span class=\"token operator\">=</span> list<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    layers<span class=\"token punctuation\">.</span>reverse<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> layer <span class=\"token keyword\">in</span> layers<span class=\"token punctuation\">:</span>\n        dout <span class=\"token operator\">=</span> layer<span class=\"token punctuation\">.</span>backward<span class=\"token punctuation\">(</span>dout<span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\"># 设定</span>\n    grads <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\n    grads<span class=\"token punctuation\">[</span><span class=\"token string\">'W1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grads<span class=\"token punctuation\">[</span><span class=\"token string\">'b1'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Conv1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dW<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Conv1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>db\n    grads<span class=\"token punctuation\">[</span><span class=\"token string\">'W2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grads<span class=\"token punctuation\">[</span><span class=\"token string\">'b2'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Affine1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dW<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Affine1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>db\n    grads<span class=\"token punctuation\">[</span><span class=\"token string\">'W3'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> grads<span class=\"token punctuation\">[</span><span class=\"token string\">'b3'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Affine2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>dW<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span><span class=\"token string\">'Affine2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>db\n\n    <span class=\"token keyword\">return</span> grads\n</code></pre>\n<h4 id=\"437-保存参数学习完后保存下最终权重等参数\"><a href=\"#4-3-7-保存参数（学习完后保存下最终权重等参数）\" class=\"headerlink\" title=\"4.3.7 保存参数（学习完后保存下最终权重等参数）\"></a>4.3.7 保存参数（学习完后保存下最终权重等参数）</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">save_params</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_name<span class=\"token operator\">=</span><span class=\"token string\">\"params.pkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    params <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\n    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">in</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        params<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n    <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>params<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"438-加载参数预测时加载之前学习到的参数\"><a href=\"#4-3-8-加载参数（预测时加载之前学习到的参数）\" class=\"headerlink\" title=\"4.3.8 加载参数（预测时加载之前学习到的参数）\"></a>4.3.8 加载参数（预测时加载之前学习到的参数）</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_params</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> file_name<span class=\"token operator\">=</span><span class=\"token string\">\"params.pkl\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        params <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> val <span class=\"token keyword\">in</span> params<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val\n\n    <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> key <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Conv1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Affine1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Affine2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>W <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'W'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>layers<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">[</span><span class=\"token string\">'b'</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"44-trainer训练类学习类\"><a href=\"#4-4-Trainer训练类（学习类）\" class=\"headerlink\" title=\"4.4 Trainer训练类（学习类）\"></a>4.4 Trainer训练类（学习类）</h3><p>  包括初始化函数（确认训练测试集以及其他训练所用参数等）、训练函数等</p>\n<h4 id=\"441-类变量及初始化函数\"><a href=\"#4-4-1-类变量及初始化函数\" class=\"headerlink\" title=\"4.4.1 类变量及初始化函数\"></a>4.4.1 类变量及初始化函数</h4><p>初始化：<br>   训练所用的 训练测试集、分片、epoch、参数更新算法、神经网络、训练次数</p>\n<p>初始化函数：主要用于定义、初始化变量</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> network<span class=\"token punctuation\">,</span> x_train<span class=\"token punctuation\">,</span> t_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> t_test<span class=\"token punctuation\">,</span>\n             epochs<span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">,</span> mini_batch_size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n             optimizer<span class=\"token operator\">=</span><span class=\"token string\">'SGD'</span><span class=\"token punctuation\">,</span> optimizer_param<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'lr':0.01&amp;#125;, </span>\n             evaluate_sample_num_per_epoch<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> verbose<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    self<span class=\"token punctuation\">.</span>network <span class=\"token operator\">=</span> network<span class=\"token comment\" spellcheck=\"true\">#神经网络（type=神经网络类）</span>\n    self<span class=\"token punctuation\">.</span>verbose <span class=\"token operator\">=</span> verbose<span class=\"token comment\" spellcheck=\"true\">#是否实时输出迭代信息</span>\n    self<span class=\"token punctuation\">.</span>x_train <span class=\"token operator\">=</span> x_train<span class=\"token comment\" spellcheck=\"true\">#训练样本数据集（type=np.array）</span>\n    self<span class=\"token punctuation\">.</span>t_train <span class=\"token operator\">=</span> t_train<span class=\"token comment\" spellcheck=\"true\">#训练监督数据集</span>\n    self<span class=\"token punctuation\">.</span>x_test <span class=\"token operator\">=</span> x_test<span class=\"token comment\" spellcheck=\"true\">#测试样本数据集</span>\n    self<span class=\"token punctuation\">.</span>t_test <span class=\"token operator\">=</span> t_test<span class=\"token comment\" spellcheck=\"true\">#测试监督数据集</span>\n    self<span class=\"token punctuation\">.</span>epochs <span class=\"token operator\">=</span> epochs<span class=\"token comment\" spellcheck=\"true\">#epoch的数量。epoch，把所有样本都过一遍的分片循环次数</span>\n    self<span class=\"token punctuation\">.</span>batch_size <span class=\"token operator\">=</span> mini_batch_size<span class=\"token comment\" spellcheck=\"true\">#分片大小</span>\n    self<span class=\"token punctuation\">.</span>evaluate_sample_num_per_epoch<span class=\"token comment\" spellcheck=\"true\">#每个epoch有几个样本数，默认None，也就是所有样本/epoch</span>\n<span class=\"token comment\" spellcheck=\"true\"># optimzer：优化器（优化算法，更新权重等参数的算法）</span>\noptimizer_class_dict <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'sgd':SGD, 'momentum':Momentum, 'nesterov':Nesterov, 'adagrad':AdaGrad, 'rmsprpo':RMSprop, 'adam':Adam&amp;#125;</span>\n    \nself<span class=\"token punctuation\">.</span>optimizer <span class=\"token operator\">=</span>   \noptimizer_class_dict<span class=\"token punctuation\">[</span>optimizer<span class=\"token punctuation\">.</span>lower<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token operator\">**</span>optimizer_param<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#SGD(&amp;#123;'lr':0.01&amp;#125;),**表示参数以字典形式导入</span>\n    self<span class=\"token punctuation\">.</span>train_size <span class=\"token operator\">=</span> x_train<span class=\"token punctuation\">.</span>shape<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#训练数据集大小</span>\n    self<span class=\"token punctuation\">.</span>iter_per_epoch <span class=\"token operator\">=</span> max<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>train_size <span class=\"token operator\">/</span> mini_batch_size<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#1个epoch的大小，把所有样本都过一遍的分片循环次数</span>\n    self<span class=\"token punctuation\">.</span>max_iter <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>epochs <span class=\"token operator\">*</span> self<span class=\"token punctuation\">.</span>iter_per_epoch<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#迭代次数（训练次数，以学习一个分片为一次）</span>\n \n</code></pre>\n<p>训练中：<br>   实时保存 当前训练次数、当前精度、当前损失函数</p>\n<pre class=\" language-python\"><code class=\"language-python\">    self<span class=\"token punctuation\">.</span>current_iter <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token comment\" spellcheck=\"true\">#当前迭代次数</span>\n    self<span class=\"token punctuation\">.</span>current_epoch <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token comment\" spellcheck=\"true\">#当前epoch数</span>\n    <span class=\"token comment\" spellcheck=\"true\">#记录下迭代信息，方便画图（以epoch为单位）</span>\n    self<span class=\"token punctuation\">.</span>train_loss_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#损失函数</span>\n    self<span class=\"token punctuation\">.</span>train_acc_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#训练准确率</span>\n    self<span class=\"token punctuation\">.</span>test_acc_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#测试准确率</span>\n</code></pre>\n<h4 id=\"442-训练函数\"><a href=\"#4-4-2-训练函数\" class=\"headerlink\" title=\"4.4.2 训练函数\"></a>4.4.2 训练函数</h4><p>（每个分片）训练学习的函数，其中包括<br>   分片、计算梯度、按梯度更新权重、计算保存损失函数、计算保存训练测试精度等</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">train_step</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    （每个分片）训练学习的函数，其中包括\n        分片、计算梯度、按梯度更新权重、计算保存损失函数、计算保存训练测试精度等\n    Returns\n    -------\n    \"\"\"</span>\n    batch_mask <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>choice<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>train_size<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>batch_size<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#从[0,train_size)中随机选取batch_size个数字</span>\n    x_batch <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>x_train<span class=\"token punctuation\">[</span>batch_mask<span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#分片大小&lt;=batch_size，因为batch_mask中有重复元素</span>\n    t_batch <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>t_train<span class=\"token punctuation\">[</span>batch_mask<span class=\"token punctuation\">]</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#神经网络类的gradient函数封装了实时保存权重梯度的功能</span>\n    grads <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>network<span class=\"token punctuation\">.</span>gradient<span class=\"token punctuation\">(</span>x_batch<span class=\"token punctuation\">,</span> t_batch<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>optimizer<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>network<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">,</span> grads<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#按照梯度更新权重</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#计算保存损失函数</span>\n    loss <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>network<span class=\"token punctuation\">.</span>loss<span class=\"token punctuation\">(</span>x_batch<span class=\"token punctuation\">,</span> t_batch<span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>train_loss_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>verbose<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"train loss:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>loss<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>current_iter <span class=\"token operator\">%</span> self<span class=\"token punctuation\">.</span>iter_per_epoch <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>current_epoch <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        <span class=\"token comment\" spellcheck=\"true\">#一次epoch结束保存训练测试精度</span>\n        x_train_sample<span class=\"token punctuation\">,</span> t_train_sample <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>x_train<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t_train\n        x_test_sample<span class=\"token punctuation\">,</span> t_test_sample <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>x_test<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t_test\n\n        <span class=\"token comment\" spellcheck=\"true\"># 指定epoch大小的情况下，一般不指定，默认全部样本为一个epoch</span>\n        <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> self<span class=\"token punctuation\">.</span>evaluate_sample_num_per_epoch <span class=\"token keyword\">is</span> None<span class=\"token punctuation\">:</span>\n            t <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>evaluate_sample_num_per_epoch\n            x_train_sample<span class=\"token punctuation\">,</span> t_train_sample <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>x_train<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t_train<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">]</span>\n            x_test_sample<span class=\"token punctuation\">,</span> t_test_sample <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>x_test<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t_test<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>t<span class=\"token punctuation\">]</span>\n            \n        train_acc <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>network<span class=\"token punctuation\">.</span>accuracy<span class=\"token punctuation\">(</span>x_train_sample<span class=\"token punctuation\">,</span> t_train_sample<span class=\"token punctuation\">)</span>\n        test_acc <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>network<span class=\"token punctuation\">.</span>accuracy<span class=\"token punctuation\">(</span>x_test_sample<span class=\"token punctuation\">,</span> t_test_sample<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>train_acc_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>train_acc<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>test_acc_list<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>test_acc<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>verbose<span class=\"token punctuation\">:</span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=== epoch:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>current_epoch<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", train acc:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>train_acc<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\", test acc:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>test_acc<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">\" ===\"</span><span class=\"token punctuation\">)</span>\n    self<span class=\"token punctuation\">.</span>current_iter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n</code></pre>\n<h4 id=\"443-最终训练函数提供给外界的api\"><a href=\"#4-4-3-最终训练函数（提供给外界的API）\" class=\"headerlink\" title=\"4.4.3 最终训练函数（提供给外界的API）\"></a>4.4.3 最终训练函数（提供给外界的API）</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">train</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    总训练，\n    Returns\n    -------\n    \"\"\"</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>max_iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>train_step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token comment\" spellcheck=\"true\">#最终精度，用学习完的权重参数最后预测一次测试数据集</span>\n    test_acc <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>network<span class=\"token punctuation\">.</span>accuracy<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>x_test<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>t_test<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>verbose<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"=============== Final Test Accuracy ===============\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"test acc:\"</span> <span class=\"token operator\">+</span> str<span class=\"token punctuation\">(</span>test_acc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"45-数据集加载mnistpy\"><a href=\"#4-5-数据集加载mnist-py\" class=\"headerlink\" title=\"4.5 数据集加载mnist.py\"></a>4.5 数据集加载mnist.py</h3><h4 id=\"451-初始化所需参数\"><a href=\"#4-5-1-初始化所需参数\" class=\"headerlink\" title=\"4.5.1 初始化所需参数\"></a>4.5.1 初始化所需参数</h4><ol>\n<li><p>爬数据的网站url</p>\n</li>\n<li><p>本地保存路径（网上下载的压缩文件）</p>\n</li>\n<li><p>本地保存路径（用于实验的处理后数据）</p>\n</li>\n<li><p>训练/测试次数</p>\n</li>\n<li><p>图片像素/一维展开后大小</p>\n</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\">url_base <span class=\"token operator\">=</span> <span class=\"token string\">'http://yann.lecun.com/exdb/mnist/'</span>\nkey_file <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;</span>\n    <span class=\"token string\">'train_img'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'train-images-idx3-ubyte.gz'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'train_label'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'train-labels-idx1-ubyte.gz'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'test_img'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'t10k-images-idx3-ubyte.gz'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'test_label'</span><span class=\"token punctuation\">:</span><span class=\"token string\">'t10k-labels-idx1-ubyte.gz'</span>\n<span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#125;</span>\n<span class=\"token comment\" spellcheck=\"true\">#父目录路径</span>\ndataset_dir <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>dirname<span class=\"token punctuation\">(</span>os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>abspath<span class=\"token punctuation\">(</span>__file__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nsave_file <span class=\"token operator\">=</span> dataset_dir <span class=\"token operator\">+</span> <span class=\"token string\">\"/mnist.pkl\"</span>\n\ntrain_num <span class=\"token operator\">=</span> <span class=\"token number\">60000</span>\ntest_num <span class=\"token operator\">=</span> <span class=\"token number\">10000</span>\nimg_dim <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\nimg_size <span class=\"token operator\">=</span> <span class=\"token number\">784</span>\n</code></pre>\n<h4 id=\"452-下载所需数据集\"><a href=\"#4-5-2-下载所需数据集\" class=\"headerlink\" title=\"4.5.2 下载所需数据集\"></a>4.5.2 下载所需数据集</h4><ol>\n<li>作用：从网站上按照url+file_name爬数据，每个文件爬一次即可（第一次执行会有点慢，之后都正常）</li>\n<li>下载下来的数据一般需要后序处理（解压缩等）</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_download</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    file_path <span class=\"token operator\">=</span> dataset_dir <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> file_name\n    \n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Downloading \"</span> <span class=\"token operator\">+</span> file_name <span class=\"token operator\">+</span> <span class=\"token string\">\" ... \"</span><span class=\"token punctuation\">)</span>\n \n    <span class=\"token comment\" spellcheck=\"true\"># 把url_base+file_name的数据下载到本地file_path</span>\n    urllib<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span>urlretrieve<span class=\"token punctuation\">(</span>url_base <span class=\"token operator\">+</span> file_name<span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span>\n    \n<span class=\"token keyword\">def</span> <span class=\"token function\">download_mnist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    将mnist数据集中需要用到的数据（上面key_file字典中定义的）下载下来\n    Returns\n    -------\n\n    \"\"\"</span>\n    <span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> key_file<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       _download<span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"453-解压打开gzip文件\"><a href=\"#4-5-3-解压打开gzip文件\" class=\"headerlink\" title=\"4.5.3 解压打开gzip文件\"></a>4.5.3 解压打开gzip文件</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_load_label</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"读取gzip文件并提示，读取成功打印Done\n    Returns 文件内容(多维向量)\n    \"\"\"</span>\n    file_path <span class=\"token operator\">=</span> dataset_dir <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> file_name\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Converting \"</span> <span class=\"token operator\">+</span> file_name <span class=\"token operator\">+</span> <span class=\"token string\">\" to NumPy Array ...\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> gzip<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#打开gzip文件，rb r-只读，b-读取的是二进制文件</span>\n            labels <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>frombuffer<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">,</span> offset<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\" spellcheck=\"true\"># numpy.frombuffer(buffer, dtype=float, count=-1, offset=0)</span>\n        <span class=\"token comment\" spellcheck=\"true\"># 参数</span>\n        <span class=\"token comment\" spellcheck=\"true\">#     缓冲区：它表示暴露缓冲区接口的对象。</span>\n        <span class=\"token comment\" spellcheck=\"true\">#     dtype：代表返回的数据类型数组的数据类型。</span>\n        <span class=\"token comment\" spellcheck=\"true\">#     count：代表返回的ndarray的长度。默认值为-1。</span>\n        <span class=\"token comment\" spellcheck=\"true\">#     偏移量：代表读取的起始位置。默认值为0。</span>\n\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> labels\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">_load_img</span><span class=\"token punctuation\">(</span>file_name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    打开图像数据的gzip文件并转换成1*784的一维向量\n    Parameters\n    ----------\n    file_name\n\n    Returns 一维展开的输入图像数据（一维向量）\n    -------\n\n    \"\"\"</span>\n    file_path <span class=\"token operator\">=</span> dataset_dir <span class=\"token operator\">+</span> <span class=\"token string\">\"/\"</span> <span class=\"token operator\">+</span> file_name\n    \n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Converting \"</span> <span class=\"token operator\">+</span> file_name <span class=\"token operator\">+</span> <span class=\"token string\">\" to NumPy Array ...\"</span><span class=\"token punctuation\">)</span>    \n    <span class=\"token keyword\">with</span> gzip<span class=\"token punctuation\">.</span>open<span class=\"token punctuation\">(</span>file_path<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n            data <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>frombuffer<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>uint8<span class=\"token punctuation\">,</span> offset<span class=\"token operator\">=</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> img_size<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done\"</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> data\n</code></pre>\n<h4 id=\"454-将数据集信息保存在dict中\"><a href=\"#4-5-4-将数据集信息保存在dict中\" class=\"headerlink\" title=\"4.5.4 将数据集信息保存在dict中\"></a>4.5.4 将数据集信息保存在dict中</h4><ol>\n<li>主要方便于init_mnist()中将数据集保存在本地文件中</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_convert_numpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Returns 以字典dict形式返回训练集/测试集\n    key-描述数据集监督数据/测试数据 的字符串\n    value-监督数据（label）/测试数据（image）的numpy表示\n    -------\n\n    \"\"\"</span>\n    dataset <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\n    dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'train_img'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>  _load_img<span class=\"token punctuation\">(</span>key_file<span class=\"token punctuation\">[</span><span class=\"token string\">'train_img'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'train_label'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _load_label<span class=\"token punctuation\">(</span>key_file<span class=\"token punctuation\">[</span><span class=\"token string\">'train_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>    \n    dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'test_img'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _load_img<span class=\"token punctuation\">(</span>key_file<span class=\"token punctuation\">[</span><span class=\"token string\">'test_img'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'test_label'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _load_label<span class=\"token punctuation\">(</span>key_file<span class=\"token punctuation\">[</span><span class=\"token string\">'test_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">return</span> dataset\n</code></pre>\n<h4 id=\"455-将解压后的数据集保存到本地\"><a href=\"#4-5-5-将解压后的数据集保存到本地\" class=\"headerlink\" title=\"4.5.5 将解压后的数据集保存到本地\"></a>4.5.5 将解压后的数据集保存到本地</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">init_mnist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    将下载下来的数据保存到本地文件中save_file中\n    Returns\n    -------\n\n    \"\"\"</span>\n    download_mnist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    dataset <span class=\"token operator\">=</span> _convert_numpy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Creating pickle file ...\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>save_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#wb-写入二进制文件</span>\n        pickle<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#将dataset的数据保存到f中，本例是save_file文件，即mnist.pkl。-1表示使用最高protocol对dataset压缩</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Done!\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"456-监督数据格式转换\"><a href=\"#4-5-6-监督数据格式转换\" class=\"headerlink\" title=\"4.5.6 监督数据格式转换\"></a>4.5.6 监督数据格式转换</h4><ol>\n<li>如果参数one_hot_label=False就不用执行此函数</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_change_one_hot_label</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    将监督数据转换成[0,0,1,0,0,0,0,0,0,0]的形式\n    Parameters\n    ----------\n    X 一组监督数据。如[5,9,8,3,4,6]。一维向量\n\n    Returns 一维向量形式的监督数据（一组）\n    -------\n\n    \"\"\"</span>\n    T <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>zeros<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#10是因为本例数字识别一共10个数</span>\n    <span class=\"token keyword\">for</span> idx<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#枚举，同时遍历索引和元素</span>\n        <span class=\"token comment\" spellcheck=\"true\">#idx-索引，row-（idx索引指向的）元素</span>\n        <span class=\"token comment\" spellcheck=\"true\">#row是一个监督数据（标签），T是一组</span>\n        row<span class=\"token punctuation\">[</span>X<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span>\n        \n    <span class=\"token keyword\">return</span> T\n</code></pre>\n<h4 id=\"457-对外接口api\"><a href=\"#4-5-7-对外接口api\" class=\"headerlink\" title=\"4.5.7 对外接口api\"></a>4.5.7 对外接口api</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">load_mnist</span><span class=\"token punctuation\">(</span>normalize<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> flatten<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">,</span> one_hot_label<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"读入MNIST数据集\n    \n    Parameters\n    ----------\n    normalize : 将图像的像素值正规化为0.0~1.0\n    one_hot_label : \n        one_hot_label为True的情况下，标签作为one-hot数组返回\n        one-hot数组是指[0,0,1,0,0,0,0,0,0,0]这样的数组\n    flatten : 是否将图像展开为一维数组\n    \n    Returns\n    -------\n    (训练图像, 训练标签), (测试图像, 测试标签)\n    \"\"\"</span>\n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>exists<span class=\"token punctuation\">(</span>save_file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        init_mnist<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span>save_file<span class=\"token punctuation\">,</span> <span class=\"token string\">'rb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n        dataset <span class=\"token operator\">=</span> pickle<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#加载本地下载好的数据集</span>\n    \n    <span class=\"token keyword\">if</span> normalize<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'train_img'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test_img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dataset<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>astype<span class=\"token punctuation\">(</span>np<span class=\"token punctuation\">.</span>float32<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#转换成固定的数据类型float32</span>\n            dataset<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">/=</span> <span class=\"token number\">255.0</span>\n            \n    <span class=\"token keyword\">if</span> one_hot_label<span class=\"token punctuation\">:</span>\n        dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'train_label'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _change_one_hot_label<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'train_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'test_label'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> _change_one_hot_label<span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'test_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    \n    <span class=\"token keyword\">if</span> <span class=\"token operator\">not</span> flatten<span class=\"token punctuation\">:</span>\n         <span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'train_img'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'test_img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            dataset<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> dataset<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>reshape<span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'train_img'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'train_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'test_img'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> dataset<span class=\"token punctuation\">[</span><span class=\"token string\">'test_label'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<h3 id=\"46-执行主函数包括图像显示\"><a href=\"#4-6-执行主函数（包括图像显示）\" class=\"headerlink\" title=\"4.6 执行主函数（包括图像显示）\"></a>4.6 执行主函数（包括图像显示）</h3><h4 id=\"461-读入数据\"><a href=\"#4-6-1-读入数据\" class=\"headerlink\" title=\"4.6.1 读入数据\"></a>4.6.1 读入数据</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 读入数据</span>\n<span class=\"token punctuation\">(</span>x_train<span class=\"token punctuation\">,</span> t_train<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>x_test<span class=\"token punctuation\">,</span> t_test<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> load_mnist<span class=\"token punctuation\">(</span>flatten<span class=\"token operator\">=</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\" spellcheck=\"true\"># 处理花费时间较长的情况下减少数据 取前5000个样本</span>\n<span class=\"token comment\" spellcheck=\"true\">#x_train, t_train = x_train[:5000], t_train[:5000]</span>\n<span class=\"token comment\" spellcheck=\"true\">#x_test, t_test = x_test[:1000], t_test[:1000]</span>\n\nmax_epochs <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token comment\" spellcheck=\"true\">#20轮次</span>\n</code></pre>\n<h4 id=\"462-创建神经网络对象\"><a href=\"#4-6-2-创建神经网络对象\" class=\"headerlink\" title=\"4.6.2 创建神经网络对象\"></a>4.6.2 创建神经网络对象</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#建立神经网络</span>\nnetwork <span class=\"token operator\">=</span> SimpleConvNet<span class=\"token punctuation\">(</span>input_dim<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">,</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                        conv_param <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'filter_num': 30, 'filter_size': 5, 'pad': 0, 'stride': 1&amp;#125;,</span>\n                        hidden_size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span> output_size<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> weight_init_std<span class=\"token operator\">=</span><span class=\"token number\">0.01</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"463-创建训练对象\"><a href=\"#4-6-3-创建训练对象\" class=\"headerlink\" title=\"4.6.3 创建训练对象\"></a>4.6.3 创建训练对象</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#训练对象，拟定训练参数</span>\ntrainer <span class=\"token operator\">=</span> Trainer<span class=\"token punctuation\">(</span>network<span class=\"token punctuation\">,</span> x_train<span class=\"token punctuation\">,</span> t_train<span class=\"token punctuation\">,</span> x_test<span class=\"token punctuation\">,</span> t_test<span class=\"token punctuation\">,</span>\n                  epochs<span class=\"token operator\">=</span>max_epochs<span class=\"token punctuation\">,</span> mini_batch_size<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>\n                  optimizer<span class=\"token operator\">=</span><span class=\"token string\">'Adam'</span><span class=\"token punctuation\">,</span> optimizer_param<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'lr': 0.001&amp;#125;,</span>\n                  evaluate_sample_num_per_epoch<span class=\"token operator\">=</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"464-训练并保存参数\"><a href=\"#4-6-4-训练并保存参数\" class=\"headerlink\" title=\"4.6.4 训练并保存参数\"></a>4.6.4 训练并保存参数</h4><pre class=\" language-python\"><code class=\"language-python\">trainer<span class=\"token punctuation\">.</span>train<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 保存参数</span>\nnetwork<span class=\"token punctuation\">.</span>save_params<span class=\"token punctuation\">(</span><span class=\"token string\">\"params.pkl\"</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saved Network Parameters!\"</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h4 id=\"465-绘图\"><a href=\"#4-6-5-绘图\" class=\"headerlink\" title=\"4.6.5 绘图\"></a>4.6.5 绘图</h4><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 绘制图形</span>\nmarkers <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'train': 'o', 'test': 's'&amp;#125;</span>\nx <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>arange<span class=\"token punctuation\">(</span>max_epochs<span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> trainer<span class=\"token punctuation\">.</span>train_acc_list<span class=\"token punctuation\">,</span> marker<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'train'</span><span class=\"token punctuation\">,</span> markevery<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> trainer<span class=\"token punctuation\">.</span>test_acc_list<span class=\"token punctuation\">,</span> marker<span class=\"token operator\">=</span><span class=\"token string\">'s'</span><span class=\"token punctuation\">,</span> label<span class=\"token operator\">=</span><span class=\"token string\">'test'</span><span class=\"token punctuation\">,</span> markevery<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>xlabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"epochs\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylabel<span class=\"token punctuation\">(</span><span class=\"token string\">\"accuracy\"</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>ylim<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>legend<span class=\"token punctuation\">(</span>loc<span class=\"token operator\">=</span><span class=\"token string\">'lower right'</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>show<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"5-总结\"><a href=\"#5-总结\" class=\"headerlink\" title=\"5. 总结\"></a>5. 总结</h2><ol>\n<li><p><strong>初始化：</strong>选取初始权重<code>ω</code>和偏置<code>b</code>。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTM5Nzg5NzcvYXJ0aWNsZS9kZXRhaWxzLzg0ODYxNDUz\">参数初始化方法</span></p>\n<ol>\n<li>包括<code>reset_parameters</code>、<code>.uniform_</code>等都是相关<strong>初始化</strong>方法</li>\n<li><code>torch.empty()</code>、<code>torch.rand()</code>、<code>torch.Tensor()</code>：随机生成<strong>张量</strong>的方法</li>\n</ol>\n</li>\n<li><p><strong>建立模型：</strong>即神经网络模型。模型包扩但不限于<strong>参数（权重、偏置、梯度…）</strong>、<strong>每层的对象（也算模型）</strong>，神经网络是由多个函数模型组合而成的模型。</p>\n<ol>\n<li><code>liner()</code>：线性模型，回归层用到比较多（如果有的话）</li>\n<li><code>LSTMCell()</code>：RNN的memory层</li>\n</ol>\n</li>\n<li><p><strong>预测：</strong>根据模型参数求预测值</p>\n<ol>\n<li><code>forward()</code>：根据<strong>公式</strong>，将<strong>各层</strong>输入转为输出，在下一层输入。</li>\n<li><code>predict()</code>：主要工作是根据<strong>学习模型</strong>，将<strong>输入</strong>转换成<strong>输出</strong>。是<code>forward</code>的集成</li>\n</ol>\n</li>\n<li><p><strong>损失函数</strong>：计算预测值和标签值的误差，用于<strong>更新</strong>模型参数</p>\n<ol>\n<li><code>loss()</code>：损失函数一般都命名为loss，主要分<strong>均方差</strong>和<strong>交叉熵</strong>2种方法</li>\n<li><code>mean_squared_error()</code>：均方误差</li>\n<li><code>cross_entropy_error()</code>：交叉熵误差</li>\n<li><code>binary_cross_entropy_error()</code>：二元交叉熵</li>\n<li><code>binary_cross_entropy_error_with_logits()</code>：集成sigmod的二元交叉熵</li>\n</ol>\n</li>\n<li><p><strong>求梯度：</strong>主要是求关于<strong>权重</strong>的梯度。一般用求导公式或<strong>误差反向传播算法</strong></p>\n<ol>\n<li><code>backward()</code>：可以说是<code>forward()</code>的反函数，根据各层上游的<strong>梯度</strong>及该层公式，计算出此层的<strong>梯度</strong></li>\n<li><code>gradient()</code>：求出<strong>每一层</strong>的梯度，集成了<code>backward()</code></li>\n</ol>\n</li>\n<li><p><strong>更新权重：</strong>向损失函数<strong>梯度反方向</strong>更新参数。(参数包括各层<strong>权重</strong>、<strong>偏置</strong>、<strong>梯度</strong>等)</p>\n<ol>\n<li><p><code>params -= learning_rate * grad</code>：根据<strong>学习率</strong>和<strong>梯度</strong>反向更新即可，这是常规写法</p>\n</li>\n<li><p><code>torch</code>更新：</p>\n<ol>\n<li><p>新建一个优化器，参数内容：学习率、模型的所有参数（权重、梯度等）</p>\n<pre class=\" language-python\"><code class=\"language-python\">optim <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>SGD<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr<span class=\"token operator\">=</span><span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> momentum<span class=\"token operator\">=</span><span class=\"token number\">0.9</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#此例是SGD优化器，lr：学习率</span>\noptim <span class=\"token operator\">=</span> torch<span class=\"token punctuation\">.</span>optim<span class=\"token punctuation\">.</span>Adam<span class=\"token punctuation\">(</span>model<span class=\"token punctuation\">.</span>parameters<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> lr <span class=\"token operator\">=</span> <span class=\"token number\">1e</span><span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#Adam优化器</span>\n</code></pre>\n</li>\n<li><p>通过优化器更新参数</p>\n<pre class=\" language-python\"><code class=\"language-python\">optim<span class=\"token punctuation\">.</span>step<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#gradient descent</span>\n</code></pre>\n</li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p><strong>预测：</strong>是否满足要求？是→结束；否→继续3,4,5</p>\n</li>\n</ol>\n<h1 id=\"六-支持向量机\"><a href=\"#六、-支持向量机\" class=\"headerlink\" title=\"六、 支持向量机\"></a>六、 支持向量机</h1><p>什么是支持向量机(SVM)：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuemhpaHUuY29tL3F1ZXN0aW9uLzIxMDk0NDg5JUUzJTgwJTgyJUU1JThGJUFGJUU0JUJCJUE1JUU3JTlDJThCJUU3JTlDJThCJUU4JUJGJTk5JUU0JUI4JUFBJUVGJUJDJThDJUU4JUFFJUIyJUU1JUJFJTk3JUU5JTlEJTlFJUU1JUI4JUI4JUU5JTgwJTlBJUU0JUJGJTk3JUU2JTk4JTkzJUU2JTg3JTgy\">https://www.zhihu.com/question/21094489。可以看看这个，讲得非常通俗易懂</span></p>\n<blockquote>\n<p>大意是找个<strong>函数</strong>尽可能把2类东西分开。</p>\n</blockquote>\n<p>一维：<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/7befaafc45763b9c4469abf245dc98cb_720w.jpg\" alt=\"img\">二维：<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/55d7ad2a6e23579b17aec0c3c9135eb3_720w.jpg\" alt=\"img\"></p>\n<h2 id=\"正则化\"><a href=\"#正则化\" class=\"headerlink\" title=\"正则化\"></a>正则化</h2><blockquote>\n<ul>\n<li><p><strong>正则化是为了防止过拟合</strong></p>\n</li>\n<li><p>理论上来讲正则起到的作用就是：“损失精度去调整样本的不足产生的拟合”。</p>\n</li>\n</ul>\n</blockquote>\n<p>正则化的英文 Regularizaiton-Regular-Regularize，<strong>直译应该是：规则化</strong></p>\n<h1 id=\"十-knn算法\"><a href=\"#十、-KNN算法\" class=\"headerlink\" title=\"十、 KNN算法\"></a>十、 KNN算法</h1><p>参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMzkwOTY1NjA=\">https://zhuanlan.zhihu.com/p/339096560</span></p>\n<h2 id=\"1-knn算法\"><a href=\"#1-KNN算法\" class=\"headerlink\" title=\"1. KNN算法\"></a>1. KNN算法</h2><blockquote>\n<p>所谓K最近邻，就是K个最近的邻居的意思，说的是每个样本都可以用它最接近的K个邻近值来代表。</p>\n</blockquote>\n<ul>\n<li>优：简单</li>\n<li>缺：计算量大，对每一个待分类的文本都要计算它到全体已知样本的距离。<ul>\n<li>剪辑：事先去除对分类作用不大的样本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"11-步骤\"><a href=\"#1-1-步骤\" class=\"headerlink\" title=\"1.1 步骤\"></a>1.1 步骤</h3><ol>\n<li><p><strong>距离</strong>度量：常用<strong>欧几里得距离</strong>。<br>$$<br>\\sqrt[p]{\\sum_{i}\\left | x_{1}-x_{2} \\right |^{p}}<br>$$</p>\n<ol>\n<li>当p=1时，就是曼哈顿距离（对应<code>L1</code>范数）</li>\n<li>当p=2时，就是欧氏距离（对应L2范数）</li>\n<li>当p→∞时，就是切比雪夫距离</li>\n</ol>\n</li>\n<li><p><strong>K值</strong>选择：距离最近的K个样本。通常采用<strong>交叉验证法</strong>来选取最优的K值。</p>\n<ul>\n<li>K值较小：训练误差↓，测试误差↑。<strong>容易过拟合</strong></li>\n<li>K值较大：训练误差↑，测试误差↓。<strong>容易训练不到位</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"12-代码实现\"><a href=\"#1-2-代码实现\" class=\"headerlink\" title=\"1.2 代码实现\"></a>1.2 代码实现</h3><p>knn的库为<code>KNeighborsRegressor</code></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\n<span class=\"token keyword\">import</span> matplotlib<span class=\"token punctuation\">.</span>pyplot <span class=\"token keyword\">as</span> plt\n<span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>neighbors <span class=\"token keyword\">import</span> KNeighborsRegressor\n</code></pre>\n<p><strong>生成训练数据</strong>：以sin函数测试</p>\n<pre class=\" language-python\"><code class=\"language-python\">np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>seed<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 随机生成40个(0, 1)之前的数，乘以5，再进行升序</span>\nX <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">*</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> axis<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 使用sin函数得到y值，并拉伸到一维</span>\ny <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># y值增加噪声</span>\ny<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">1</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0.5</span> <span class=\"token operator\">-</span> np<span class=\"token punctuation\">.</span>random<span class=\"token punctuation\">.</span>rand<span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#在图像上显示样本点，s是点的大小，label表示样本标签，一般显示在图像右上角</span>\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>marker<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span>color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'bad'</span><span class=\"token punctuation\">)</span> \n</code></pre>\n<p>显示如下：</p>\n<p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/1654135.png\" alt=\"img\"></p>\n<p><strong>KNN学习-预测</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\">#建立模型，k近邻数=3，L2欧几里得距离</span>\nclf <span class=\"token operator\">=</span> KNeighborsRegressor<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 拟合</span>\nclf<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\"># 预测</span>\n<span class=\"token comment\" spellcheck=\"true\"># 创建[0, 5]之间的500个数的等差数列, 作为测试数据</span>\nT <span class=\"token operator\">=</span> np<span class=\"token punctuation\">.</span>linspace<span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>newaxis<span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\">#y_是预测值，y_real是数据的实际值</span>\ny_ <span class=\"token operator\">=</span> clf<span class=\"token punctuation\">.</span>predict<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>\ny_real<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>sin<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>ravel<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nplt<span class=\"token punctuation\">.</span>scatter<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span>y_real<span class=\"token punctuation\">,</span>marker<span class=\"token operator\">=</span><span class=\"token string\">'o'</span><span class=\"token punctuation\">,</span>color<span class=\"token operator\">=</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>label<span class=\"token operator\">=</span><span class=\"token string\">'bad'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#在图像上显示样本点，s是点的大小，label表示样本标签，一般显示在图像右上角</span>\nplt<span class=\"token punctuation\">.</span>plot<span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">,</span> y_<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#根据X,Y画出描点图，其实主要作用是连线。X_pred和Y_pred一般为数组</span>\n</code></pre>\n<p>如下图：</p>\n<p> <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/156465.png\" alt=\"img\"></p>\n<p><strong>关于sklearn.neighbors.KNeighborsRegressor</strong></p>\n<p>KNN的模型应该是一张<strong>距离表</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\">KNeighborsRegressor<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> weights<span class=\"token operator\">=</span><span class=\"token string\">'uniform'</span><span class=\"token punctuation\">,</span> algorithm<span class=\"token operator\">=</span><span class=\"token string\">'auto'</span><span class=\"token punctuation\">,</span> leaf_size<span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> metric<span class=\"token operator\">=</span><span class=\"token string\">'minkowski'</span><span class=\"token punctuation\">,</span> metric_params<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> n_jobs<span class=\"token operator\">=</span>None<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwargs<span class=\"token punctuation\">)</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    最近邻回归，用于预测连续数值\n    :param n_neighbors: int, default=5。k值，最近的k个邻居\n    :param weights: \n    :param algorithm: 寻找最近邻的算法\n        ball_tree：will use BallTree。\n        kd_tree： will use KDTree\n        brute： 暴力穷举\n        auto： 自动选择\n    :param leaf_size: int, default=30。传递给BallTree或KDTree的叶大小。这会影响构造和查询的速度，以及存储树所需的内存。\n    :param p: int, default=2。当p=1时，使用曼哈顿距离（l1）；对p=2时，欧几里德距离（l2）。对于任意p，使用minkowski距离（lp）。\n    :param metric: str or callable, default=’minkowski’。要用于树的距离度量。默认的度量是minkowski，p=2等于标准的欧几里德度量。有关可用度量的列表\n    :param metric_params: \n    :param n_jobs: int, default=None。为邻居搜索运行的并行作业数。\n    :param kwargs: \n    :return: KNN模型\n    \"\"\"</span>\n</code></pre>\n<blockquote>\n<p>一般指定一个k就可以了</p>\n</blockquote>\n<pre class=\" language-python\"><code class=\"language-python\">neigh <span class=\"token operator\">=</span> KNeighborsRegressor<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>此外，关于近邻的遍历算法：</strong></p>\n<ul>\n<li><strong>KDTree：</strong>对于<strong>低维度</strong> (<img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/7fb5b8aaa79d55e35332a1f02a5aee04.jpg\" alt=\"D &lt; 20\">) 近邻搜索非常快, 当 <img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/e03066df748abd9273db055cb79f0f01.jpg\" alt=\"D\"> 增长到很大时, 效率变低。这就是所谓的 “维度灾难” 的一种体现。</li>\n<li><strong>BallTree：</strong>比 KD 树消耗更多的时间, 但是这种数据结构对于高结构化的数据是非常有效的, 即使在<strong>高维度</strong>上也是一样.</li>\n</ul>\n<p>函数<code>KNeighborsRegressor()</code>返回一个<code>KNeighborsRegressor</code>对象。</p>\n<p><strong>常用属性（成员变量）：</strong></p>\n<ul>\n<li><code>effective_metric_</code>：<strong>str or callable</strong>。距离度量。如<code>metric=&#39;minkowski&#39;</code>并且<code>p=2</code>时，返回<code>euclidean-欧几里得</code></li>\n<li><code>effective_metric_params_</code>：<strong>dict</strong>。度量函数的其他参数</li>\n<li><code>n_samples_fit_</code>：<strong>int</strong>。用于训练的样本数</li>\n</ul>\n<p><strong>常用函数：</strong></p>\n<ul>\n<li><p><code>fit(X, y)</code>：拟合（训练）模型。</p>\n</li>\n<li><p><code>predict(X)</code>：预测</p>\n</li>\n<li><p><code>get_params(deep=True)</code>：以字典形式返回模型参数，包括但不限于<code>fit_intercept</code></p>\n</li>\n<li><p><code>set_params(**params)</code>：设置参数</p>\n</li>\n<li><p><code>kneighbors(X=None, n_neighbors=None, return_distance=True)</code>：返回指定样本的最近的k个邻居</p>\n<ul>\n<li><code>X</code>：<strong>array</strong>。样本数组</li>\n<li><code>n_neighbors</code>：<strong>int</strong>。邻居数，默认是一开始传入的k值</li>\n<li><code>return_distance</code>：<strong>bool</strong>。是否返回距离。</li>\n<li><strong>return</strong>：<ul>\n<li><code>neigh_dist</code>：<strong>ndarray</strong>。各邻居的距离（需要return_distance为true）。二维数组（一维-样本；二维-每个样本的邻居们）</li>\n<li><code>neigh_ind </code>：<strong>ndarray</strong>。邻居的索引。二维数组（一维-样本；二维-每个样本的邻居们）</li>\n</ul>\n</li>\n</ul>\n<p>例：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> samples <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> neigh <span class=\"token operator\">=</span> NearestNeighbors<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#NearestNeighbors是无监督的最近邻</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> neigh<span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>samples<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> neigh<span class=\"token punctuation\">.</span>kneighbors<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#表示最近的1个邻居距离为0.5，index=2</span>\n<span class=\"token comment\" spellcheck=\"true\">#或者这样接收也可</span>\ndistances<span class=\"token punctuation\">,</span> indices <span class=\"token operator\">=</span> neigh<span class=\"token punctuation\">.</span>kneighbors<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> distances\narray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0.5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#行-样本，列-样本的每个邻居的距离</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> indices\narray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#最近的1个邻居是index=2的点</span>\n</code></pre>\n</li>\n<li><p><code>kneighbors_graph(X=None, n_neighbors=None,mode=&#39;connectivity&#39;)</code>：返回邻居<strong>连接图</strong>，1-相邻；0-不相邻</p>\n<ul>\n<li><code>X</code>：<strong>array</strong>。样本数组</li>\n<li><code>n_neighbors</code>：<strong>int</strong>。邻居数，默认是一开始传入的k值</li>\n<li><code>mode</code>：返回矩阵的类型</li>\n<li><strong>return</strong>：返回一个距离矩阵，可通过<code>toArray()</code>转为<strong>array</strong>。</li>\n</ul>\n<p>例：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> X <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> neigh <span class=\"token operator\">=</span> NearestNeighbors<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>fit<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> A <span class=\"token operator\">=</span> neigh<span class=\"token punctuation\">.</span>kneighbors_graph<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> A<span class=\"token punctuation\">.</span>toarray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\narray<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token comment\" spellcheck=\"true\">#行-被测样本，这行是[0]。这行表示：对[0]来说，[0]和[1]是最近的2个邻居</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token comment\" spellcheck=\"true\">#列-每个邻居（包括自身）</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"13-总结\"><a href=\"#1-3-总结\" class=\"headerlink\" title=\"1.3 总结\"></a>1.3 总结</h3><p>先计算出所有样本距离目标的<strong>距离</strong>，取最进的<strong>K个</strong>样本的平均数/中位数/众数/…</p>\n<h2 id=\"2-knn填充数据\"><a href=\"#2-KNN填充数据\" class=\"headerlink\" title=\"2. KNN填充数据\"></a>2. KNN填充数据</h2><p>实际上，python中的KNNImputer库很好的利用knn实现了数据填充，<strong>直接上原理：</strong></p>\n<blockquote>\n<p>对于数据缺失的特征点，计算与其他数据特征间的距离，选取k个最小距离的数据特征点，把这k个数据特征中对应于目标特征点数据缺失的地方进行求<strong>均值</strong>，作为填充数据。</p>\n</blockquote>\n<p><strong>举个例子：</strong></p>\n<pre class=\" language-text\"><code class=\"language-text\">X = [[1, 2, np.nan], [3, 4, 3], [np.nan, 6, 5], [8, 8, 7]] = [n1 n2 n3 n4]\n</code></pre>\n<p><strong>含空值的欧式距离，如n1与n3：</strong></p>\n<p><img data-src=\"/2021/06/10/%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/equation.svg\" alt=\"img\"></p>\n<blockquote>\n<p>参考文献：John K. Dixon, “Pattern Recognition with Partly Missing Data”, IEEE Transactions on Systems, Man, and Cybernetics, Volume: 9, Issue: 10, pp. 617 - 621, Oct. 1979.<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHA6Ly9pZWVleHBsb3JlLmllZWUub3JnL2Fic3RyYWN0L2RvY3VtZW50LzQzMTAwOTAv\">http://ieeexplore.ieee.org/abs</span></p>\n</blockquote>\n<p>对应n1与n3的距离为：</p>\n<p>![img](%E8%A5%BF%E7%93%9C%E4%B9%A6%E5%A4%8D%E4%B9%A0%E5%8F%8A%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/equation (1).svg)</p>\n<p>对应n1与n2的距离为：<br>$$<br>\\sqrt{\\frac{3}{2}\\times ((1-3)^2+(2-4)^2)}=\\sqrt{12}=3.464<br>$$</p>\n<p><strong>python的nan_euclidean_distances函数可计算含空值的距离矩阵</strong>：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>metrics <span class=\"token keyword\">import</span> nan_euclidean_distances\nX <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nnan_euclidean_distances<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">,</span>X<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>计算出的距离矩阵为：</p>\n<pre class=\" language-python\"><code class=\"language-python\">array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span> <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>        <span class=\"token punctuation\">,</span>  <span class=\"token number\">3.46410162</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">6.92820323</span><span class=\"token punctuation\">,</span> <span class=\"token number\">11.29158979</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span> <span class=\"token number\">3.46410162</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>        <span class=\"token punctuation\">,</span>  <span class=\"token number\">3.46410162</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7.54983444</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span> <span class=\"token number\">6.92820323</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3.46410162</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>        <span class=\"token punctuation\">,</span>  <span class=\"token number\">3.46410162</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">11.29158979</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">7.54983444</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">3.46410162</span><span class=\"token punctuation\">,</span>  <span class=\"token number\">0</span><span class=\"token punctuation\">.</span>        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><strong>python可直接用KNNImputer进行空值填充：</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> sklearn<span class=\"token punctuation\">.</span>impute <span class=\"token keyword\">import</span> KNNImputer\nX <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>np<span class=\"token punctuation\">.</span>nan<span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span>\nimputer <span class=\"token operator\">=</span> KNNImputer<span class=\"token punctuation\">(</span>n_neighbors<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\nimputer<span class=\"token punctuation\">.</span>fit_transform<span class=\"token punctuation\">(</span>X<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>KNNImputer中可选择k值来进行数据填充，这里选择2，填充结果：</p>\n<pre class=\" language-python\"><code class=\"language-python\">array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">5.5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n       <span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">8</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n</code></pre>\n",
            "tags": [
                "笔记",
                "算法",
                "Python",
                "机器学习"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/",
            "url": "https://nitgod1996.com/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/",
            "title": "降低数据稀疏度的算法研究",
            "date_published": "2021-06-07T09:51:11.938Z",
            "content_html": "<h1 id=\"个人见解\"><a href=\"#个人见解\" class=\"headerlink\" title=\"个人见解\"></a>个人见解</h1><ol>\n<li><p>目前主要的填充算法是通过机器学习，像预测结果一样预测缺失值</p>\n<p>缺点：是预测出的缺失值一定程序上算是<strong>噪声</strong>，通过该缺失值又去预测结果可能会对结果产生干扰</p>\n</li>\n<li><p>填充主要是根据其他参数关联出缺失值。（通过其他样本学习出模型，输入缺失样本的参数预测缺失值）。</p>\n<p>也就是意味着：缺失值需要和其他属性有一定的关联，即样本属性最好有一定的<strong>冗余度</strong>（多采集一些特征，也就是常说的高维。通过降维去降低稀疏度）</p>\n</li>\n<li><p>但高维和稀疏往往是互相嵌结的，高维易容易产生数据样本稀疏，距离计算困难；而稀疏数据又需要通过高维来填充。<strong>高维数据降维→低维子空间，子空间样本密度大幅提高，距离计算也更容易</strong>。这是因为观测/收集的数据往往是冗余的，学习任务仅与某个低维分布密切相关。即高维空间的一个低维“嵌入”</p>\n</li>\n<li></li>\n</ol>\n<h1 id=\"一-初窥\"><a href=\"#一、-初窥\" class=\"headerlink\" title=\"一、 初窥\"></a>一、 初窥</h1><h2 id=\"1-一些概念\"><a href=\"#1-一些概念\" class=\"headerlink\" title=\"1. 一些概念\"></a>1. 一些概念</h2><ul>\n<li><p><strong>最小二乘</strong>：最小二乘法是一种数学优化技术，它通过<strong>最小化误差的平方和</strong>找到一组数据的<strong>最佳函数</strong>匹配。</p>\n<ul>\n<li>几何意义：求一条线使得所有点到该线的<strong>距离平方和</strong>最小</li>\n</ul>\n</li>\n<li><p><strong>数据降维</strong>：用于预处理，提高算法效率</p>\n<ul>\n<li>在原始的高维空间中，包含有冗余信息以及噪音信息</li>\n<li>而通过降维,减少冗余信息所造成的误差,提高识别（或其他应用）的精度和效率</li>\n</ul>\n</li>\n<li><p><strong>稀疏数据</strong>：稀疏数据不同于一般数据，它的维度常常极其巨大，并且由于大量的缺失值的存在，使得数据信息极端不完整，常见的降维方法例如主成分、因子分析等无法在此上应用</p>\n</li>\n<li><p><strong>稀疏表示：</strong>X为M*N的数据集，每行表示一个样本，每列表示一个属性。</p>\n<p>寻找一个<strong>系数矩阵A</strong>（K*N）以及一个<strong>字典矩阵B</strong>（M*K），使得B*A尽可能的还原X，且A尽可能的稀疏。A便是X的<strong>稀疏表示</strong>。</p>\n<blockquote>\n<p><strong>将一个大矩阵变成两个小矩阵，而达到压缩</strong></p>\n</blockquote>\n</li>\n<li><p><strong>字典学习：</strong>通过一个字典将原数据转化为稀疏表示，字典学习和稀疏表示互为<strong>逆过程</strong></p>\n</li>\n<li><p><strong>低秩</strong>：秩可以形象地理解为信息冗余程度，<strong>秩越低</strong>意味着冗余信息越少</p>\n</li>\n<li><p><strong>奇异值</strong>：往往对应着矩阵中隐含的<strong>重要信息</strong>，且重要性和奇异值大小正相关。每个矩阵<img data-src=\"https://www.zhihu.com/equation?tex=A\" alt=\"[公式]\">都可以表示为一系列秩为1的”小矩阵”之和，而奇异值则衡量了这些“小矩阵”对于<img data-src=\"https://www.zhihu.com/equation?tex=A\" alt=\"[公式]\">的权重。</p>\n</li>\n<li><p><strong>正交映射</strong>：作用就是保留我们已知的元素，将我们不知道的元素变为0。</p>\n</li>\n<li><p><strong>核范数</strong>：<img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210610151254748.png\" alt=\"image-20210610151254748\"></p>\n<ul>\n<li><strong>核范数是奇异值的和</strong>；rank（秩）是非0奇异值的个数。∴核范数能凸近似矩阵的秩</li>\n</ul>\n</li>\n<li><p><strong>稀疏性</strong>：若信号在某个域中<strong>只有少量非零值</strong>，那么它在该域稀疏，该域也被称为信号的<strong>稀疏域</strong>。（0很多）</p>\n</li>\n<li><p><strong>稀疏矩阵</strong>：在<strong>矩阵</strong>中，若数值为0的元素数目远远多于非0元素的数目，并且非0元素分布没有规律时，则称该矩阵为稀疏矩阵</p>\n</li>\n</ul>\n<h2 id=\"2-可能可以的一些方法\"><a href=\"#2-可能可以的一些方法\" class=\"headerlink\" title=\"2. 可能可以的一些方法\"></a>2. 可能可以的一些方法</h2><ul>\n<li><p><strong>最简单的方法：</strong>取众数、中位数、平均值、均方差等。<strong>效果一般，因为等于人为增加了噪声。</strong></p>\n<p>或者缺失严重的直接删除</p>\n<ul>\n<li>特征删除：删除该特征（删除一列）</li>\n<li>数据删除：删除缺失严重的数据（删除n行）.</li>\n</ul>\n</li>\n</ul>\n<ul>\n<li><p><strong>机器学习预测：</strong>用其他变量做预测模型来算出缺失变量，如<strong>KNN</strong>，<strong>K-means</strong>，<strong>决策树</strong>，<strong>回归算法</strong>等。</p>\n<p>效果比方法1略好。有一个根本缺陷，如果其他变量和缺失变量无关，则预测的结果无意义。如果预测结果相当准确，则又说明这个变量是没必要加入建模的。一般情况下，介于两者之间。</p>\n</li>\n<li><p><strong>期望值最大化（EM算法）：</strong>对未知参数进行<strong>极大似然估计</strong>，计算完全数据对应的对数似然函数的<strong>条件期望</strong></p>\n<p>但是这种方法可能会陷入局部极值，收敛速度也不是很快，并且计算很复杂。</p>\n</li>\n<li><p><strong>把变量映射到高维空间。</strong>如<strong>矩阵补全</strong></p>\n<ul>\n<li>比如性别，有男、女、缺失三种情况，则映射成3个变量：是否男、是否女、是否缺失。连续型变量也可以这样处理。</li>\n<li>比如Google、百度的CTR预估模型，预处理时会把所有变量都这样处理，达到几亿维。</li>\n<li>这样做的<strong>好处</strong>是完整保留了原始数据的全部信息、不用考虑缺失值、不用考虑线性不可分之类的问题。</li>\n<li>缺点是计算量大大提升。</li>\n<li>只有在样本量非常大的时候效果才好，否则会因为过于稀疏，效果很差。</li>\n</ul>\n</li>\n<li><p>GAN数据增强：图像补全</p>\n</li>\n<li><p>需要恢复的数据具有某种<strong>稀疏结构</strong>， 如目标函数的<strong>可分性</strong>、向量的<strong>稀疏性</strong>、矩阵的<strong>低秩性</strong>等。 </p>\n<ul>\n<li><p>矩阵补全：低秩矩阵补全。推荐系统</p>\n</li>\n<li><p>压缩感知：稀疏信号补全。图像修复</p>\n</li>\n<li><p>全变差正则化 (Total-Variation based Regularization) 的图像恢复</p>\n</li>\n</ul>\n</li>\n<li><p>深度补全：图像补全</p>\n</li>\n<li><p>使用sklearn库：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnL3N0YWJsZS9tb2R1bGVzL2NsYXNzZXMuaHRtbCNtb2R1bGUtc2tsZWFybi5pbXB1dGU=\">https://scikit-learn.org/stable/modules/classes.html#module-sklearn.impute</span></p>\n</li>\n</ul>\n<h2 id=\"3-随手记\"><a href=\"#3-随手记\" class=\"headerlink\" title=\"3. 随手记\"></a>3. 随手记</h2><ol>\n<li>一般的步骤是：降噪→降维→补全</li>\n<li></li>\n</ol>\n<h2 id=\"2-gan数据增强\"><a href=\"#2-GAN数据增强\" class=\"headerlink\" title=\"2. GAN数据增强\"></a>2. GAN数据增强</h2><p>用GAN生成的图像来做数据增强，如图。主要解决的问题是</p>\n<ol>\n<li>对于小数据集，数据量不足， 如果能生成一些就好了。</li>\n<li>如果GAN生成了图片？怎么给这些数据label呢？因为他们相比原始数据也不属于预定义的类别。</li>\n</ol>\n<p>在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vcmVmZXJlbmNlLzIyMTgxOTA1LzE4ODE3amlFOWJBTE1EcDJVZmhBVmwwLXhza21lRTFPZXFYMENYN2tZUl9rcDUyOEctYV9RanhONERTOHpUREZMMmFWYVl6YUdSWW8xNnpDRXc=\">Unlabeled Samples Generated by GAN Improve the Person Re-identification Baseline in vitro </span>  中，做了一些尝试。</p>\n<p>实验想法也特别简单，先用原始数据（即使只有2000张图）训练一个GAN，然后生成图片，加入到训练集中。 总结一下就是：</p>\n<ol>\n<li>GAN 生成数据是可以用在实际的图像问题上的（不仅仅是像mnist 这种toy dataset上work）作者在两个行人重识别数据集 和 一个细粒度识别 鸟识别数据集上都有提升。</li>\n<li>GAN 数据有三种给pseudo label的方式， 假设我们做五分类</li>\n</ol>\n<ul>\n<li>把生成的数据都当成新的一类, 六分类，那么生成图像的 label 就可以是 （0, 0, 0, 0, 0, 1） 这样给。</li>\n<li>按照置信度最高的 动态去分配，那个概率高就给谁 比如第三类概率高（0, 0, 1, 0, 0）</li>\n<li>既然所有类都不是，那么可以参考inceptionv3，搞label smooth，每一类置信度相同（0.2, 0.2, 0.2, 0.2, 0.2） 注：作者16年12月写的代码，当时GAN效果没有那么好，用这个效果好也是可能的， 因为生成样本都不是很“真”，所以起到了正则作用。</li>\n</ul>\n<h2 id=\"22-当缺少的数据是标记时\"><a href=\"#2-2-当缺少的数据是标记时\" class=\"headerlink\" title=\"2.2 当缺少的数据是标记时\"></a>2.2 当缺少的数据是标记时</h2><p>​    使用半监督学习，一般的思路是：在全部数据上去学习数据表示，在有标签的样本上去学习<strong>模型</strong>，用所有数据去加正则。</p>\n<h2 id=\"3-矩阵补全matrix-completion\"><a href=\"#3-矩阵补全Matrix-Completion\" class=\"headerlink\" title=\"3. 矩阵补全Matrix Completion\"></a>3. 矩阵补全Matrix Completion</h2><ul>\n<li>通过<strong>矩阵分解</strong>（matrix factorization）将一个含缺失值的矩阵 X 分解为两个（或多个）矩阵，然后这些分解后的矩阵相乘就可以得到原矩阵的近似 X’，我们用这个近似矩阵 X’ 的值来填补原矩阵 X 的缺失部分。</li>\n</ul>\n<p>一般用于推荐系统算法</p>\n<h2 id=\"4-深度补全\"><a href=\"#4-深度补全\" class=\"headerlink\" title=\"4. 深度补全\"></a>4. 深度补全</h2><p>一般用于计算机视觉，图形补全（深度图补全）</p>\n<h2 id=\"5-压缩感知compressed-sensing\"><a href=\"#5-压缩感知Compressed-Sensing\" class=\"headerlink\" title=\"5. 压缩感知Compressed Sensing\"></a>5. 压缩感知Compressed Sensing</h2><ul>\n<li>主要是<strong>信号采样</strong>方法。压缩感知主要涉及到<strong>如何采样</strong>和<strong>如何恢复</strong>的问题。</li>\n<li>主要作用：修复图片/恢复信号</li>\n<li>矩阵补全是基于压缩感知的</li>\n<li>基本前提：信号的<strong>稀疏性</strong>和<strong>不相关性</strong>。（自己理解：稀疏性意味着信号的主要信息在于少数几个（不为零）数据上，而不相关性意味着获得的这几条数据线性无关，可以推出数据包含的信息）</li>\n</ul>\n<p>这套compressed sensing框架和配套理论证明了，在采样率低于critical sampling rate的时候，本来ill-posed的信号恢复和重建问题，可以在通过额外的sparisty prior的帮助下，达到巧妙的<strong>信号完美恢复</strong>。</p>\n<p>不仅如此，Tao他们还推导了<span class=\"exturl\" data-url=\"aHR0cHM6Ly9saW5rLnpoaWh1LmNvbS8/dGFyZ2V0PWh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL1Jlc3RyaWN0ZWRfaXNvbWV0cnlfcHJvcGVydHk=\">Restricted Isotropic Property (RIP)</span> 等一系列理论，证明了为了达到完美恢复，采样矩阵和信号稀疏度需要满足的条件和相互之间的关系。这为之后Compressed Sensing的发展和应用奠定了理论基础。</p>\n<h1 id=\"二-前置知识\"><a href=\"#二、-前置知识\" class=\"headerlink\" title=\"二、 前置知识\"></a>二、 前置知识</h1><h2 id=\"1-数学符号的认识\"><a href=\"#1-数学符号的认识\" class=\"headerlink\" title=\"1. 数学符号的认识\"></a>1. 数学符号的认识</h2><ul>\n<li><p><strong>s.t.</strong>  “使得…满足…”，是subject to 的缩写，表示约束条件。如<img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202820584.png\" alt=\"image-20210622202820584\">，表示满足<code>Ax=y</code>的最小的<code>x</code>的L1范数。其中，x是向量</p>\n<ul>\n<li>其实s.t.也相当于一个括号。</li>\n</ul>\n</li>\n<li><p><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622201802564.png\" alt=\"image-20210622201802564\">：Lp范数，当p缺省时，默认为2。其中，x-向量，X-矩阵</p>\n</li>\n<li><p><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202213487.png\" alt=\"image-20210622202213487\">：全体n维实的列向量构成的集合。同理，<img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202229879.png\" alt=\"image-20210622202229879\">则是全体n1*n2矩阵的集合</p>\n</li>\n<li><p><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622202410553.png\" alt=\"image-20210622202410553\">：正交投影算子</p>\n</li>\n</ul>\n<h2 id=\"1-lp范数\"><a href=\"#1-lp范数\" class=\"headerlink\" title=\"1. lp范数\"></a>1. lp范数</h2><p>以||||符号表示</p>\n<p><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201414597.png\" alt=\"image-20210609201414597\"><br>$$<br>l_{p}=\\left | x \\right |<em>{p}=\\sqrt[p]{\\sum</em>{i}\\left | x_{i} \\right |^{p}}<br>$$<br><strong>当<code>x=x1-x2</code>时，这表示的就是欧几里得度量（距离）</strong><br>$$<br>\\sqrt[p]{\\sum_{i}\\left | x_{1}-x_{2} \\right |^{p}}<br>$$<br><strong>可以表示2个样本间的距离</strong></p>\n<p>其中：</p>\n<ul>\n<li><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201606973.png\" alt=\"image-20210609201606973\">：表示x中非0元素的个数，<img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201628831.png\" alt=\"image-20210609201628831\"></li>\n<li><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201651197.png\" alt=\"image-20210609201651197\">：表示向量的大小，<img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201708621.png\" alt=\"image-20210609201708621\"></li>\n<li><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201724917.png\" alt=\"image-20210609201724917\">：<img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210609201732341.png\" alt=\"image-20210609201732341\">，</li>\n</ul>\n<h2 id=\"2-p-np-npc-np-hard问题\"><a href=\"#2-P、NP、NPC、NP-hard问题\" class=\"headerlink\" title=\"2. P、NP、NPC、NP-hard问题\"></a>2. P、NP、NPC、NP-hard问题</h2><p>前置知识点：</p>\n<blockquote>\n<ul>\n<li>多项式时间：<code>O(n^k)</code>。其中，k是常数</li>\n<li>多项式时间算法：时间复杂度为多项式时间<code>O(n^k)</code>的算法，如<strong>冒泡排序</strong>（复杂度为<code>O(n^2)</code>）</li>\n</ul>\n</blockquote>\n<p>以下开始介绍：</p>\n<ul>\n<li><p><strong>P类问题：</strong>存在多项式时间算法的问题。</p>\n<ul>\n<li>解释：可以找到时间复杂度为<code>O(n^k)</code>的算法解决的问题</li>\n</ul>\n</li>\n<li><p><strong>NP类问题：</strong>能在多项式时间内验证得出一个正确解的问题。</p>\n<ul>\n<li><p>解释：已知时间复杂度<code>o(1)&lt;o(n)&lt;o(lgn)&lt;o(n^2)&lt;o(n^k)&lt;o(e^n)</code></p>\n<p>可以找到一种算法时间复杂度<strong>小于</strong><code>O(n^k)</code>的算法解决的问题</p>\n<p>或者，可以找到<strong>优于</strong>时间复杂度为<code>O(n^k)</code>的方法，但不一定能求出时间复杂度</p>\n</li>\n<li><p>P类问题是NP类问题的<strong>子集</strong></p>\n</li>\n</ul>\n</li>\n<li><p><strong>NPC类问题（Nondeterminism Polynomial complete）：</strong>也可以写做<strong>NP=P？问题</strong></p>\n<ol>\n<li>属于NP类问题</li>\n<li><strong>所有</strong>的NP问题都可以约化成它</li>\n</ol>\n<ul>\n<li><p><strong>约化：</strong>问题B的算法来解决A ，我们就说问题A可以约化成问题B。</p>\n<blockquote>\n<p>如一元一次方程可以约化为一元二次方程，以一元二次方程的算法求解。</p>\n</blockquote>\n</li>\n<li><p>也就是说，解决了NPC问题就能解决所有NP类问题。NPC问题的复杂度&gt;NP类问题</p>\n</li>\n</ul>\n</li>\n<li><p><strong>NPH类问题：</strong>满足NPC的2，但不一定满足1。</p>\n<ul>\n<li>即，<strong>所有</strong>的NP问题都可以约化成NP-Hard问题</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/20150727214918014\" alt=\"这里写图片描述\"></p>\n<h2 id=\"2-knn算法\"><a href=\"#2-KNN算法\" class=\"headerlink\" title=\"2. KNN算法\"></a>2. KNN算法</h2><blockquote>\n<p>所谓K最近邻，就是K个最近的邻居的意思，说的是每个样本都可以用它最接近的K个邻近值来代表。</p>\n</blockquote>\n<ul>\n<li>优：简单</li>\n<li>缺：计算量大，对每一个待分类的文本都要计算它到全体已知样本的距离。<ul>\n<li>剪辑：事先去除对分类作用不大的样本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"21-步骤\"><a href=\"#2-1-步骤\" class=\"headerlink\" title=\"2.1 步骤\"></a>2.1 步骤</h3><ol>\n<li><p><strong>距离</strong>度量：常用<strong>欧几里得距离</strong>。<br>$$<br>\\sqrt[p]{\\sum_{i}\\left | x_{1}-x_{2} \\right |^{p}}<br>$$</p>\n<ol>\n<li>当p=1时，就是曼哈顿距离（对应<code>l1</code>范数）</li>\n<li>当p=2时，就是欧氏距离（对应L2范数）</li>\n<li>当p→∞时，就是切比雪夫距离</li>\n</ol>\n</li>\n<li><p><strong>K值</strong>选择：距离最近的K个样本。通常采用<strong>交叉验证法</strong>来选取最优的K值。</p>\n<ul>\n<li>K值较小：训练误差↓，测试误差↑。容易<strong>过拟合</strong></li>\n<li>K值较大：训练误差↑，测试误差↓。容易<strong>训练不到位</strong></li>\n</ul>\n</li>\n</ol>\n<h3 id=\"22-代码实现\"><a href=\"#2-2-代码实现\" class=\"headerlink\" title=\"2.2 代码实现\"></a>2.2 代码实现</h3><h1 id=\"三-填充评估\"><a href=\"#三、-填充评估\" class=\"headerlink\" title=\"三、 填充评估\"></a>三、 填充评估</h1><h1 id=\"四-矩阵补全\"><a href=\"#四、-矩阵补全\" class=\"headerlink\" title=\"四、 矩阵补全\"></a>四、 矩阵补全</h1><h2 id=\"1-综述\"><a href=\"#1-综述\" class=\"headerlink\" title=\"1. 综述\"></a>1. 综述</h2><h3 id=\"11-溯源\"><a href=\"#1-1-溯源\" class=\"headerlink\" title=\"1.1 溯源\"></a>1.1 溯源</h3><ul>\n<li>由<strong>压缩感知</strong>衍生而来：将矩阵的<strong>低秩性</strong>视为矩阵<strong>稀疏性</strong>，那么<strong>向量空间</strong>的压缩感知便自然拓展为<strong>矩阵空间</strong>的矩阵补全</li>\n<li>压缩感知：基于信号的可压缩性或稀疏性,通过低分辨率、欠 Nyquist 采样数据的非相关观测来实现高维信号的感知.<ul>\n<li>压缩感知理论突破了<strong>香农定理</strong>对信号采样频率的限制，能够以较少的采样资源、较高的采样速度和较低的软硬件复杂度获得原始型号的测量值</li>\n<li>压缩感知主要研究对于以向量 <img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210622190407802.png\" alt=\"image-20210622190407802\">表示的稀疏信号,如何在 m&lt;&lt;n的情形下仅通过测量较少的采样 ym并能从中恢复出原始信号 x.</li>\n<li>压缩感知理论得以成功应用的一个重要前提是信号<strong>向量</strong>的稀疏性。但在很多实际问题中,我们面临的数据，并不是向量空间中的一维数据,而是矩阵空间中的<strong>二维数据</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"12-介绍\"><a href=\"#1-2-介绍\" class=\"headerlink\" title=\"1.2 介绍\"></a>1.2 介绍</h3><ul>\n<li>矩阵补全：主要研究如何在数据不完整的情况下，将矩阵空间的缺失数据进行填补</li>\n<li>原理：通过矩阵分解将一个含缺失值的矩阵 X 分解为两个（或多个）矩阵，然后这些分解后的矩阵相乘就可以得到原矩阵的近似 X’，我们用这个近似矩阵 X’ 的值来填补原矩阵 X 的缺失部分。</li>\n</ul>\n<h2 id=\"2-矩阵分解\"><a href=\"#2-矩阵分解\" class=\"headerlink\" title=\"2. 矩阵分解\"></a>2. 矩阵分解</h2><p>References：</p>\n<ol>\n<li><span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5xdXV4bGFicy5jb20vYmxvZy8yMDEwLzA5L21hdHJpeC1mYWN0b3JpemF0aW9uLWEtc2ltcGxlLXR1dG9yaWFsLWFuZC1pbXBsZW1lbnRhdGlvbi1pbi1weXRob24v\">Matrix Factorization: A Simple Tutorial and Implementation in Python</span></li>\n<li></li>\n</ol>\n<blockquote>\n<p>使用矩阵分解来解决这个问题背后的直觉是应该有一些<strong>潜在的特征</strong>来决定用户如何评价一个项目。</p>\n</blockquote>\n<p>例如，如果两个用户都喜欢这部电影的演员，或者如果电影是动作片，这是两个用户都喜欢的类型，那么两个用户会对某部电影给予高评分。</p>\n<p>因此，如果我们能够发现这些<strong>潜在特征</strong>，我们应该能够预测关于某个用户和某个项目的评分，因为与用户相关的特征应该与与项目相关的特征相匹配。</p>\n<p><strong>项目描述：</strong></p>\n<ul>\n<li><p>一组用户和一组项目（电影）。用户为行，项目为列    </p>\n<p><img data-src=\"/2021/06/07/%E7%A8%80%E7%96%8F%E6%95%B0%E6%8D%AE%E7%AE%97%E6%B3%95%E7%A0%94%E7%A9%B6/image-20210710154544821.png\" alt=\"image-20210710154544821\"></p>\n</li>\n<li><p>每个<strong>项目</strong>有对应特征：</p>\n<ol>\n<li>类型：动作片、喜剧片…</li>\n<li>主演/导演</li>\n<li>…</li>\n</ol>\n</li>\n</ul>\n<p>将矩阵<strong>R(U*D)<strong>分解为矩阵</strong>P(U*K)<strong>和矩阵</strong>Q(D*K)</strong><br>$$<br>R\\approx P\\times Q^T=\\widehat{R}\\tag{4.1}<br>$$</p>\n<blockquote>\n<p>其中：</p>\n<p>​        P—每行代表<strong>用户</strong>与特征之间关联的强度</p>\n<p>​        Q—每行代表<strong>项目</strong>和特征之间关联的强度</p>\n<p>​        ^—估计值</p>\n</blockquote>\n<p>对应的，<br>$$<br>\\widehat{r}<em>{ij}=p^T_iq_i=\\sum^k</em>{k=1}p_{ik}q_{kj}\\tag{4.2}<br>$$</p>\n<blockquote>\n<p>其中：<code>r_ij</code>是矩阵<code>R</code>在<code>i</code>行<code>J</code>列的元素</p>\n</blockquote>\n<p><strong>使用梯度下降法对矩阵进行分解：</strong></p>\n<p>对<code>p</code>、<code>q</code>不断迭代，找到局部差异最小值，使用<strong>均方误差</strong><br>$$<br>e^2_{ij}=(r_{ij}-\\widehat{r}<em>{ij})^2=(r</em>{ij}-\\sum^k_{k=1}p_{ik}q_{kj})^2\\tag{4.3}<br>$$<br>均方差<code>e^2</code>越小越好</p>\n<p>最小值求法，一般是将式4.3求偏导，使偏导=0，则可能为极小值点。在梯度下降法中，是算出<code>e^2</code>的梯度grad（梯度体现了各自变量在该点的偏导）。沿着梯度<strong>反方向</strong>更新，每次更新一个<strong>step</strong>，逐步降到0</p>\n<blockquote>\n<ul>\n<li>梯度&gt;0时，反方向是</li>\n</ul>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/06/04/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%8F%E4%B9%A6/",
            "url": "https://nitgod1996.com/2021/06/04/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/%E7%AE%97%E6%B3%95%E5%85%AC%E5%BC%8F%E4%B9%A6/",
            "title": "算法公式书",
            "date_published": "2021-06-04T10:13:52.000Z",
            "content_html": "<h1 id=\"一-性质总结\"><a href=\"#一、-性质总结\" class=\"headerlink\" title=\"一、 性质总结\"></a>一、 性质总结</h1><h2 id=\"1-数列\"><a href=\"#1-数列\" class=\"headerlink\" title=\"1. 数列\"></a>1. 数列</h2><h3 id=\"11-前缀和\"><a href=\"#1-1-前缀和\" class=\"headerlink\" title=\"1.1 前缀和\"></a>1.1 前缀和</h3><ol>\n<li>如果2个前缀和相等，说明2个前缀和之间的sum为0</li>\n</ol>\n<h1 id=\"二-数据结构特性\"><a href=\"#二、-数据结构特性\" class=\"headerlink\" title=\"二、 数据结构特性\"></a>二、 数据结构特性</h1><h1 id=\"三-经典案例-算法适用场景\"><a href=\"#三、-经典案例、算法适用场景\" class=\"headerlink\" title=\"三、 经典案例、算法适用场景\"></a>三、 经典案例、算法适用场景</h1><h2 id=\"1-链表\"><a href=\"#1-链表\" class=\"headerlink\" title=\"1. 链表\"></a>1. 链表</h2><ol>\n<li><p>相交链表：丫字形</p>\n<ul>\n<li><p>pA走过的路径为A链+B链</p>\n</li>\n<li><p>pB走过的路径为B链+A链</p>\n</li>\n<li><p>如果相交，定会在相交点相遇</p>\n</li>\n</ul>\n</li>\n</ol>\n<h1 id=\"四-错题本非自己做出来需复习\"><a href=\"#四、-错题本（非自己做出来，需复习）\" class=\"headerlink\" title=\"四、 错题本（非自己做出来，需复习）\"></a>四、 错题本（非自己做出来，需复习）</h1><h2 id=\"1-动态规划\"><a href=\"#1-动态规划\" class=\"headerlink\" title=\"1. 动态规划\"></a>1. 动态规划</h2><h3 id=\"11-背包问题\"><a href=\"#1-1-背包问题\" class=\"headerlink\" title=\"1.1 背包问题\"></a>1.1 背包问题</h3><p>基本上所有背包问题都是由01背包衍生而来。</p>\n<ul>\n<li><p><strong>0-1背包：</strong></p>\n<p>​    有N件物品和一个容量为V的背包。第i件物品的体积是c[i]，价值是w[i]。求解将哪些物品装入背包可使<strong>价值</strong>总和最大。</p>\n<ul>\n<li><p>定义状态：</p>\n<ul>\n<li><code>F[i,v]</code>：前<code>i</code>件物品在<code>v</code>容量能够获取的<strong>最大价值</strong></li>\n<li><code>i</code>：前<code>i</code>件物品；</li>\n<li><code>v</code>：当前容量</li>\n</ul>\n</li>\n<li><p>状态转移方程：<code>F[i,v]= max&#123;F[i − 1, v], F[i − 1, v − C[i]] + W[i]&#125;</code></p>\n</li>\n<li><p>解析：当循环到<code>F[i,v]</code>时，<strong>是否添加第<code>i-1</code>件物品？</strong>就要看添加/不添加哪个最终价值更大</p>\n<ul>\n<li><p>不添加：<code>F[i,v]</code>就取<code>F[i-1,v]</code>（前<code>i-1</code>件物品在<code>v</code>容量能够获取的<strong>最大价值</strong>）</p>\n</li>\n<li><p>添加：则容量极限是<code>v-C[i]</code>，</p>\n<p>​    问题转换成：前<code>i-1</code>件物品在<code>v-C[i]</code>容量能获取的最大价值+第<code>i</code>件物品的价值<code>W[i]</code>，即<code>F[i − 1, v − C[i]] + W[i]</code></p>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "经验总结",
                "算法",
                "数据结构"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/",
            "url": "https://nitgod1996.com/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/",
            "title": "Python语法复习",
            "date_published": "2021-06-04T07:56:23.000Z",
            "content_html": "<ul>\n<li><p>豆瓣源下载模块：pip install 包名 -i <span class=\"exturl\" data-url=\"aHR0cDovL3B5cGkuZG91YmFuLmNvbS9zaW1wbGUv\">http://pypi.douban.com/simple/</span> –trusted-host pypi.douban.com</p>\n</li>\n<li><p>函数中加<code>[]</code>的参数为可选，<code>=</code>表示默认值。如下</p>\n<pre class=\" language-python\"><code class=\"language-python\">count<span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>beg<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#参数beg可选，如果不写默认为0</span>\n</code></pre>\n</li>\n</ul>\n<h1 id=\"一-基础知识\"><a href=\"#一、-基础知识\" class=\"headerlink\" title=\"一、 基础知识\"></a>一、 基础知识</h1><p>以下仅介绍Python中与其他语言不同之处（需特别注意的地方）</p>\n<h2 id=\"1-特别注意\"><a href=\"#1-特别注意\" class=\"headerlink\" title=\"1. 特别注意\"></a>1. 特别注意</h2><ol>\n<li><p>Python可以在同一行写多条语句，用<code>;</code>分隔</p>\n</li>\n<li><p>数据类型：</p>\n<ul>\n<li><p>不可变数据：<code>Number</code>、<code>String</code>、<code>Tuple（元组）</code></p>\n</li>\n<li><p>可变数据：<code>List（列表）</code>、<code>Dictionary（字典）</code>、<code>Set（集合）</code></p>\n</li>\n</ul>\n<p>其中，</p>\n<ol>\n<li>不可变数据可以作为dict的键，而可变数据不行</li>\n<li>字典<code>dict</code>对标<code>map</code>，<code>list</code>是数组</li>\n<li>元组<code>tuple</code>是<strong>不可修改</strong>的数组</li>\n</ol>\n</li>\n<li><p>除法：<code>/</code>返回浮点数，<code>//</code>返回数向下取整。（<code>3//2.0=1.0</code>）</p>\n</li>\n<li><p>字符串<strong>不能被修改。<code>word[0]=&#39;m&#39;</code>会报错</strong>，需要用<code>replace</code>函数</p>\n</li>\n</ol>\n<h2 id=\"2-数据类型转换\"><a href=\"#2-数据类型转换\" class=\"headerlink\" title=\"2. 数据类型转换\"></a>2. 数据类型转换</h2><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>int(x [,base])</td>\n<td><em>将<strong>x</strong>转换为一个整数，<strong>base</strong>：进制</em></td>\n</tr>\n<tr>\n<td>float(x)</td>\n<td><em>将<strong>x</strong>转换到一个浮点数</em></td>\n</tr>\n<tr>\n<td>str(x)</td>\n<td><em>将对象</em> <em>x</em> <em>转换为<strong>字符串</strong></em></td>\n</tr>\n<tr>\n<td>tuple(s)</td>\n<td><em>将序列</em> <em>s</em> <em>转换为一个<strong>元组</strong></em></td>\n</tr>\n<tr>\n<td>list(s)</td>\n<td><em>将序列</em> <em>s</em> <em>转换为一个<strong>列表</strong></em></td>\n</tr>\n<tr>\n<td>set(s)</td>\n<td>转换为set</td>\n</tr>\n<tr>\n<td>dict(d)</td>\n<td>创建一个字典。<strong>d必须是一个(key, value)元组序列。</strong></td>\n</tr>\n<tr>\n<td>chr(x)   **</td>\n<td>将一个<strong>整数</strong>转换为一个<strong>字符</strong></td>\n</tr>\n<tr>\n<td>ord(x)</td>\n<td>将一个<strong>字符</strong>转换为它的<strong>整数</strong>值</td>\n</tr>\n<tr>\n<td>hex(x)</td>\n<td>将一个整数转换为一个<strong>十六进制</strong>字符串</td>\n</tr>\n<tr>\n<td>oct(x)</td>\n<td>将一个整数转换为一个<strong>八进制</strong>字符串</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-运算符\"><a href=\"#3-运算符\" class=\"headerlink\" title=\"3. 运算符\"></a>3. 运算符</h2><h3 id=\"31-算术运算法\"><a href=\"#3-1-算术运算法\" class=\"headerlink\" title=\"3.1 算术运算法\"></a>3.1 算术运算法</h3><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/</td>\n<td>除： x 除以 y</td>\n<td>b / a 输出结果 2.1</td>\n</tr>\n<tr>\n<td>**</td>\n<td>幂：返回x的y次幂</td>\n<td>a**b 为10的21次方</td>\n</tr>\n<tr>\n<td>//</td>\n<td>取整除：向下取接近商的整数</td>\n<td>9//2=4、-9//2=-5</td>\n</tr>\n</tbody></table>\n<h3 id=\"32-位运算符\"><a href=\"#3-2-位运算符\" class=\"headerlink\" title=\"3.2 位运算符\"></a>3.2 位运算符</h3><table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>实例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>按位与</td>\n<td>101&amp;100=100</td>\n</tr>\n<tr>\n<td>|</td>\n<td>按位或</td>\n<td>101|100=101</td>\n</tr>\n<tr>\n<td>^</td>\n<td>按位异或</td>\n<td>101^100=001</td>\n</tr>\n<tr>\n<td>~</td>\n<td>按位取反</td>\n<td>~101=010</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>左移动运算符：各二进位全部左移，高位丢弃，低位补0。</td>\n<td>101&lt;&lt;2=10100</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>右移动运算符：各二进位全部右移</td>\n<td>101&gt;&gt;2=1</td>\n</tr>\n</tbody></table>\n<h3 id=\"33-逻辑运算符\"><a href=\"#3-3-逻辑运算符\" class=\"headerlink\" title=\"3.3 逻辑运算符\"></a>3.3 逻辑运算符</h3><table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>逻辑表达式</strong></th>\n<th><strong>描述(number均算True)</strong></th>\n<th><strong>实例a=10,b=20</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>and</td>\n<td>x and y</td>\n<td>布尔”与” - <strong>如果 x 为 False，x and y 返回 x 的值，否则返回 y 的计算值。</strong></td>\n<td>(a and b) **返回 20。  **</td>\n</tr>\n<tr>\n<td>or</td>\n<td>x or y</td>\n<td>布尔”或” -  **如果 x 是 True，它返回 x 的值，否则它返回 y 的计算值。  **</td>\n<td>(a or b) **返回 10。  **</td>\n</tr>\n<tr>\n<td>not</td>\n<td>not x</td>\n<td>布尔”非” -  **如果 x 为 True，返回 False 。如果 x 为  False，它返回 True。  **</td>\n<td>not(a and b) **返回  False  **</td>\n</tr>\n</tbody></table>\n<h3 id=\"34-成员运算符innot-in\"><a href=\"#3-4-成员运算符（in-not-in）\" class=\"headerlink\" title=\"3.4 成员运算符（in/not in）\"></a>3.4 成员运算符（in/not in）</h3><table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>描述（list、tulpe、string均属序列seq，但dict和set也可使用）</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>in</td>\n<td>如果在指定的序列中找到值返回 True</td>\n</tr>\n<tr>\n<td>not in</td>\n<td>如果在指定的序列中没有找到值返回 True</td>\n</tr>\n</tbody></table>\n<h3 id=\"35-身份运算符isis-not\"><a href=\"#3-5-身份运算符（is-is-not）\" class=\"headerlink\" title=\"3.5 身份运算符（is/is not）\"></a>3.5 身份运算符（is/is not）</h3><table>\n<thead>\n<tr>\n<th><strong>运算符</strong></th>\n<th><strong>描述</strong></th>\n<th><strong>实例</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>is</td>\n<td>is 是判断两个标识符是不是引用自一个对象</td>\n<td>x is y, 类似 id(x)  == id(y) , 如果引用的是同一个对象则返回 True，否则返回 False</td>\n</tr>\n<tr>\n<td>is not</td>\n<td>is not 是判断两个标识符是不是引用自不同对象</td>\n<td>x is not y ， 类似  id(a) != id(b)。如果引用的不是同一个对象则返回结果 True，否则返回 False。</td>\n</tr>\n</tbody></table>\n<p><img data-src=\"/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/image-20210604162303013.png\" alt=\"image-20210604162303013\"></p>\n<h2 id=\"4-常用函数全局函数\"><a href=\"#4-常用函数-全局函数\" class=\"headerlink\" title=\"4. 常用函数/全局函数\"></a>4. 常用函数/全局函数</h2><p>其中记录一些比较常用的函数</p>\n<ol>\n<li><code>len()</code>：获取列表/字典/字符串…的<strong>长度</strong></li>\n<li><code>str()</code>：转为<strong>字符串</strong>，Python中的toString</li>\n<li><code>sum()</code>：对序列求和</li>\n<li><code>max()/min()</code>：取序列最小值</li>\n</ol>\n<h1 id=\"二-数组list\"><a href=\"#二、-数组list\" class=\"headerlink\" title=\"二、 数组list\"></a>二、 数组list</h1><p>也称列表。</p>\n<p>在Python中，<strong>列表可以存储不同的数据类型</strong>，如</p>\n<pre class=\" language-python\"><code class=\"language-python\">list1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Google'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h2 id=\"1-创建\"><a href=\"#1-创建\" class=\"headerlink\" title=\"1. 创建\"></a>1. 创建</h2><ol>\n<li><p>定义一个空列表</p>\n<pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</li>\n<li><p>创建一维数组</p>\n<pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</li>\n<li><p>创建二维数组</p>\n<pre class=\" language-python\"><code class=\"language-python\">list_2<span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token comment\" spellcheck=\"true\">#m行n列</span>\n</code></pre>\n</li>\n</ol>\n<h2 id=\"2-list函数\"><a href=\"#2-list函数\" class=\"headerlink\" title=\"2. list函数\"></a>2. list函数</h2><pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<h3 id=\"21-增插入-添加\"><a href=\"#2-1-增（插入、添加）\" class=\"headerlink\" title=\"2.1 增（插入、添加）\"></a>2.1 增（插入、添加）</h3><ul>\n<li><code>list.append(obj)</code>：在列表末尾添加新的对象</li>\n<li><code>list.extend(seq)</code>：在列表末尾一次性追加另一个序列中的多个值（用新列表扩展原来的列表）</li>\n<li><code>list.insert(index, obj)</code>：将对象插入列表指定索引处</li>\n</ul>\n<h3 id=\"22-删清空-删除\"><a href=\"#2-2-删（清空、删除）\" class=\"headerlink\" title=\"2.2 删（清空、删除）\"></a>2.2 删（清空、删除）</h3><ul>\n<li><p><code>clear()</code>：清空</p>\n</li>\n<li><p><code>remove(obj)</code>：按<strong>值</strong>删除。移除列表中某个值的<strong>第一个</strong>匹配项</p>\n<pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token punctuation\">.</span>remove<span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#删除3</span>\n</code></pre>\n</li>\n<li><p><code>pop(index)</code>：按<strong>索引</strong>删除。移除列表中的一个元素（默认最后一个元素），并且返回该元素的值</p>\n<pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#删除索引为1的元素</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"23-改翻转-排序\"><a href=\"#2-3-改（翻转、排序）\" class=\"headerlink\" title=\"2.3 改（翻转、排序）\"></a>2.3 改（翻转、排序）</h3><ul>\n<li><p><code>reverse()</code>：翻转列表</p>\n</li>\n<li><p><code>sort(key, reverse)</code>：列表排序。</p>\n<ul>\n<li><p>key：排序规则。1-根据值排序；2-根据自定义函数排序</p>\n<ul>\n<li><strong>自定义函数</strong>：例，根据第2个元素</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 获取列表的第二个元素</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">takeSecond</span><span class=\"token punctuation\">(</span>elem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> elem<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 列表</span>\nrandom <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n<span class=\"token comment\" spellcheck=\"true\"># 按第二个元素排序</span>\nrandom<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>takeSecond<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#输出：[(4, 1), (2, 2), (1, 3), (3, 4)]</span>\n</code></pre>\n<p>例：根据<strong>字符串长度</strong>排序</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">sort_fun</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> len<span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>len<span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    l<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"92\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"1234\"</span><span class=\"token punctuation\">]</span>\n    l<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span>functools<span class=\"token punctuation\">.</span>cmp_to_key<span class=\"token punctuation\">(</span>sort_fun<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#['92', '123', '1234']</span>\n</code></pre>\n<ul>\n<li><strong><code>lambda</code>表达式</strong>：例，按第2个元素排序</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">KNN<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span> x<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#[(4, 1), (2, 2), (1, 3), (3, 4)]</span>\n<span class=\"token comment\" spellcheck=\"true\">#x是随便取的代号</span>\n</code></pre>\n<p>例：按字符串长度排序</p>\n<pre class=\" language-python\"><code class=\"language-python\">l<span class=\"token punctuation\">.</span>sort<span class=\"token punctuation\">(</span>key<span class=\"token operator\">=</span><span class=\"token keyword\">lambda</span> x<span class=\"token punctuation\">:</span>len<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<blockquote>\n<p>左边的x是list，右边是按照什么排序的规则</p>\n</blockquote>\n</li>\n<li><p>reverse：true-升序，false-降序</p>\n</li>\n</ul>\n</li>\n<li><p><code>[]</code>：按索引访问并替换元素</p>\n</li>\n</ul>\n<h3 id=\"24-查取值-统计-拷贝-求和-最值-判断\"><a href=\"#2-4-查（取值、统计、拷贝、求和、最值、判断）\" class=\"headerlink\" title=\"2.4 查（取值、统计、拷贝、求和、最值、判断）\"></a>2.4 查（取值、统计、拷贝、求和、最值、判断）</h3><ul>\n<li><p>按<strong>索引</strong>访问值</p>\n<ul>\n<li><p>取单值</p>\n<p>```python<br>list[0]#返回1<br>list[-1]#返回倒数第1个数，即6</p>\n</li>\n<li><p>取片段</p>\n<pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#获取索引0-2（左闭右开）的元素</span>\nlist<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#获取索引1开始的所有元素</span>\nlist<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#获取倒数第2个元素之前所有元素</span>\nlist<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#获取list所有元素。[:]相当于拷贝了一个副本</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>按<strong>值</strong>返回索引</p>\n<pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>start<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">#返回第一个匹配项的索引位置.</span>\n<span class=\"token comment\" spellcheck=\"true\">#start,end:可选，开始索引及结束索引</span>\nlist<span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#返回3&lt;=index&lt;5中第一个匹配项的索引位置</span>\n</code></pre>\n</li>\n<li><p><code>count(obj)</code>：统计<strong>某元素</strong>在列表出现的<strong>次数</strong></p>\n</li>\n<li><p><code>copy()</code>：返回该列表的副本（适合函数中使用，不会改变原列表。因为列表是可变数据，所以作为函数参数时如果直接用可能会被修改）</p>\n</li>\n<li><p>以下是全局函数</p>\n<ul>\n<li><code>sum(list)</code>：求和</li>\n<li><code>max()/min()</code>：取最值</li>\n<li><code>3 in [1, 2, 3]</code>：True  判断元素是否存在于列表中</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-遍历列表\"><a href=\"#3-遍历列表\" class=\"headerlink\" title=\"3. 遍历列表\"></a>3. 遍历列表</h2><pre class=\" language-python\"><code class=\"language-python\">list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n</code></pre>\n<ol>\n<li><p>按<strong>值</strong>遍历</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> value <span class=\"token keyword\">in</span> list<span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#输出值。[5,4,3,2,1,0]</span>\n</code></pre>\n</li>\n<li><p>按<strong>索引</strong>遍历</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> index<span class=\"token punctuation\">,</span>value <span class=\"token keyword\">in</span> enumerate<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;index:value&amp;#125;)#index是索引，value是列表元素</span>\n</code></pre>\n</li>\n<li><p>按<strong>索引/值</strong>同时遍历</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> range<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#按索引遍历，i是索引.i从1开始遍历</span>\n</code></pre>\n</li>\n</ol>\n<h2 id=\"4-操作符拼接列表\"><a href=\"#4-操作符拼接列表\" class=\"headerlink\" title=\"4. 操作符拼接列表\"></a>4. 操作符拼接列表</h2><table>\n<thead>\n<tr>\n<th align=\"left\">Python 表达式</th>\n<th align=\"left\">结果</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">[1, 2, 3] + [4, 5, 6]</td>\n<td align=\"left\">[1, 2, 3, 4, 5, 6]</td>\n<td align=\"left\">组合</td>\n</tr>\n<tr>\n<td align=\"left\">[‘Hi!’] * 4</td>\n<td align=\"left\">[‘Hi!’, ‘Hi!’, ‘Hi!’, ‘Hi!’]</td>\n<td align=\"left\">重复</td>\n</tr>\n<tr>\n<td align=\"left\">3 in [1, 2, 3]</td>\n<td align=\"left\">True</td>\n<td align=\"left\">元素是否存在于列表中</td>\n</tr>\n</tbody></table>\n<h1 id=\"三-元组tuple\"><a href=\"#三、-元组tuple\" class=\"headerlink\" title=\"三、 元组tuple\"></a>三、 元组tuple</h1><p>Python 的元组与列表类似，不同之处在于元组的元素<strong>不能修改</strong>。</p>\n<h2 id=\"1-创建\"><a href=\"#1-创建-1\" class=\"headerlink\" title=\"1. 创建\"></a>1. 创建</h2><pre class=\" language-python\"><code class=\"language-python\">tup1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Google'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Runoob'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1997</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2000</span><span class=\"token punctuation\">)</span>\ntup3 <span class=\"token operator\">=</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"c\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"d\"</span>   <span class=\"token comment\" spellcheck=\"true\">#  不需要括号也可以</span>\n</code></pre>\n<p>创建空元组</p>\n<pre class=\" language-python\"><code class=\"language-python\">tup<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"2-tuple函数\"><a href=\"#2-tuple函数\" class=\"headerlink\" title=\"2. tuple函数\"></a>2. tuple函数</h2><p>tuple除了<strong>不能修改</strong>，其他都和list一样。</p>\n<p><code>def</code>可以删除整个tuple</p>\n<h1 id=\"四-字符串str\"><a href=\"#四、-字符串str\" class=\"headerlink\" title=\"四、 字符串str\"></a>四、 字符串str</h1><ol>\n<li><p>Python中，<strong>单双引号</strong>均可表示字符串，<code>str()</code>函数默认转为单引号<code>&#39;&#39;</code></p>\n</li>\n<li><p><code>str</code>的<code>[]</code>用法和<code>list</code>一样</p>\n</li>\n<li><p>在Python中，没有字符，仅有字符串。</p>\n</li>\n</ol>\n<h2 id=\"1-创建\"><a href=\"#1-创建-2\" class=\"headerlink\" title=\"1. 创建\"></a>1. 创建</h2><ul>\n<li>直接自定义创建</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">s1 <span class=\"token operator\">=</span> <span class=\"token string\">'Hello World!'</span> \ns2 <span class=\"token operator\">=</span> <span class=\"token string\">\"Runoob\"</span> <span class=\"token comment\" spellcheck=\"true\">#单双引号都可</span>\n\n<span class=\"token comment\" spellcheck=\"true\">#使用三引号('''或</span><span class=\"token triple-quoted-string string\">\"\"\")可以指定一个多行字符串。\nparagraph = \"\"\"</span> <span class=\"token comment\" spellcheck=\"true\">#这是一个段落，</span>\n</code></pre>\n<ul>\n<li>创建一个空字符串</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">s<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span>\n</code></pre>\n<ul>\n<li><code>+</code>：<strong>多个字符串</strong>拼接成新字符串</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">s<span class=\"token operator\">=</span>s1<span class=\"token operator\">+</span>s2\n</code></pre>\n<ul>\n<li><code>.join(seq)</code>：将<strong>序列</strong>拼接成字符串</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span>\nseq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 字符串序列</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span> seq <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#r-u-n-o-o-b</span>\n</code></pre>\n<h2 id=\"2-字符串运算符\"><a href=\"#2-字符串运算符\" class=\"headerlink\" title=\"2. 字符串运算符\"></a>2. 字符串运算符</h2><table>\n<thead>\n<tr>\n<th align=\"left\">操作符</th>\n<th align=\"left\">描述</th>\n<th align=\"left\">实例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">+</td>\n<td align=\"left\">字符串连接</td>\n<td align=\"left\">a + b 输出结果： HelloPython</td>\n</tr>\n<tr>\n<td align=\"left\">*</td>\n<td align=\"left\">重复输出字符串</td>\n<td align=\"left\">a*2 输出结果：HelloHello</td>\n</tr>\n<tr>\n<td align=\"left\">[]</td>\n<td align=\"left\">通过索引获取字符串中字符</td>\n<td align=\"left\">a[1] 输出结果 <strong>e</strong></td>\n</tr>\n<tr>\n<td align=\"left\">[ : ]</td>\n<td align=\"left\">截取字符串中的一部分，<strong>左闭右开</strong></td>\n<td align=\"left\">a[1:4] 输出结果 <strong>ell</strong></td>\n</tr>\n<tr>\n<td align=\"left\">in</td>\n<td align=\"left\">如果字符串中包含给定的字符返回 True</td>\n<td align=\"left\"><strong>‘H’ in a</strong> 输出结果 True</td>\n</tr>\n<tr>\n<td align=\"left\">not in</td>\n<td align=\"left\">如果字符串中不包含给定的字符返回 True</td>\n<td align=\"left\"><strong>‘M’ not in a</strong> 输出结果 True</td>\n</tr>\n<tr>\n<td align=\"left\">r/R</td>\n<td align=\"left\">原始字符串：反转义，让字符是本身的意思</td>\n<td align=\"left\"><code>print( r&#39;\\n&#39; ) print( R&#39;\\n&#39; )</code>。输出<code>&#39;\\n&#39;</code>而非换行</td>\n</tr>\n<tr>\n<td align=\"left\">%</td>\n<td align=\"left\">格式字符串</td>\n<td align=\"left\">请看下一节内容。</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-转义字符\"><a href=\"#3-转义字符\" class=\"headerlink\" title=\"3. 转义字符\"></a>3. 转义字符</h2><p>反斜杠可以用来转义，使用r可以让反斜杠不发生转义。</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\"># 输出空行</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>r<span class=\"token string\">'\\n'</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\"># 输出 \\n</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">转义字符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\\\</td>\n<td align=\"left\">反斜杠符号</td>\n</tr>\n<tr>\n<td align=\"left\">\\‘</td>\n<td align=\"left\">单引号</td>\n</tr>\n<tr>\n<td align=\"left\">\\“</td>\n<td align=\"left\">双引号</td>\n</tr>\n<tr>\n<td align=\"left\">\\a</td>\n<td align=\"left\">响铃</td>\n</tr>\n<tr>\n<td align=\"left\">\\b</td>\n<td align=\"left\">退格</td>\n</tr>\n<tr>\n<td align=\"left\">\\000</td>\n<td align=\"left\">空</td>\n</tr>\n<tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">换行</td>\n</tr>\n<tr>\n<td align=\"left\">\\v</td>\n<td align=\"left\">纵向制表符</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">横向制表符</td>\n</tr>\n<tr>\n<td align=\"left\">\\f</td>\n<td align=\"left\">换页</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-字符串注入\"><a href=\"#4-字符串注入\" class=\"headerlink\" title=\"4. 字符串注入 %\"></a>4. 字符串注入 %</h2><p>因为Python中string类型不能直接用+和int连接，所以可以用%<strong>在字符串中注入数字</strong>，如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"我叫 %s 今年 %d 岁!\"</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'小明'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th><strong>符  号</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>%c</td>\n<td>格式化字符及其ASCII码</td>\n</tr>\n<tr>\n<td>%s</td>\n<td>格式化字符串</td>\n</tr>\n<tr>\n<td>%d</td>\n<td>格式化整数</td>\n</tr>\n<tr>\n<td>%u</td>\n<td>格式化无符号整型</td>\n</tr>\n<tr>\n<td>%o</td>\n<td>格式化无符号八进制数</td>\n</tr>\n<tr>\n<td>%x</td>\n<td>格式化无符号十六进制数</td>\n</tr>\n<tr>\n<td>%X</td>\n<td>格式化无符号十六进制数（大写）</td>\n</tr>\n<tr>\n<td>%f</td>\n<td>格式化浮点数字，可指定小数点后的精度</td>\n</tr>\n<tr>\n<td>%e</td>\n<td>用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td>%E</td>\n<td>作用同%e，用科学计数法格式化浮点数</td>\n</tr>\n<tr>\n<td>%g</td>\n<td>%f和%e的简写</td>\n</tr>\n<tr>\n<td>%G</td>\n<td>%f  和 %E 的简写</td>\n</tr>\n<tr>\n<td>%p</td>\n<td>用十六进制数格式化变量的地址</td>\n</tr>\n</tbody></table>\n<h2 id=\"5-str函数\"><a href=\"#5-Str函数\" class=\"headerlink\" title=\"5. Str函数\"></a>5. Str函数</h2><h3 id=\"51-增拼接-删两侧\"><a href=\"#5-1-增（拼接）、删（两侧）\" class=\"headerlink\" title=\"5.1 增（拼接）、删（两侧）\"></a>5.1 增（拼接）、删（两侧）</h3><p>​        因为字符串是<strong>不可变数据</strong>，所以不能直接为<code>str</code>添加、插入元素，可以通过拼接字符串得到新的字符串</p>\n<ul>\n<li><p><code>+</code>：可以用<code>+</code>拼接多个字符串</p>\n</li>\n<li><p><code>.lstrip(s)/.rstrip(s)/.strip(s)</code>：删除字符串<strong>最左/最右/两边</strong>的指定字符（串），不写默认删空格</p>\n<pre class=\" language-python\"><code class=\"language-python\">s<span class=\"token operator\">=</span><span class=\"token string\">\"nihaoanihaoahaha\"</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>rstrip<span class=\"token punctuation\">(</span><span class=\"token string\">'ha'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#nihaoanihao</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"52-改大小写-字符替换-转换\"><a href=\"#5-2-改（大小写、字符替换、转换）\" class=\"headerlink\" title=\"5.2 改（大小写、字符替换、转换）\"></a>5.2 改（大小写、字符替换、转换）</h3><ul>\n<li><strong>大小写</strong><ul>\n<li><code>.capitalize()</code>：将字符串的<strong>第一个</strong>字符转换为<strong>大写</strong></li>\n<li><code>.lower()/.upper()</code>：将字符串中<strong>所有</strong>大写/小写字符转为小写/大写</li>\n<li><code>.swapcase()</code>：将字符串大小写<strong>互换</strong></li>\n</ul>\n</li>\n<li><strong>字符替换</strong><ul>\n<li><code>.replace(old,new,[max])</code>：将字符串中old字符替换为new字符。max-可选。最多替换次数</li>\n<li><code>.expandtabs(tabsize)</code>：用<code>tabsize</code>个<strong>空格</strong>替换字符串中的<strong>tab 符</strong></li>\n</ul>\n</li>\n<li><code>.title()</code>：<strong>返回</strong>标题化字符串（开头大写）。<font color=\"red\">注：这仅仅返回，而非修改原字符串</font></li>\n</ul>\n<h3 id=\"53-查查询访问-判断-统计\"><a href=\"#5-3-查（查询访问、判断、统计）\" class=\"headerlink\" title=\"5.3 查（查询访问、判断、统计）\"></a>5.3 查（查询访问、判断、统计）</h3><ul>\n<li><p><strong>查询访问</strong></p>\n<ul>\n<li>按<strong>索引</strong>取值<ul>\n<li><code>[i]</code>：直接用<code>[]</code>取值，可能会越界异常</li>\n</ul>\n</li>\n<li>按<strong>值</strong>查索引<ul>\n<li><code>.rfind/.find(str,[begin=0],[end=len])</code>：查询字符串中<strong>从右/从左</strong>开始第一次出现str的位置，如果没有返回-1。begin/end-开始/结束查询的位置</li>\n<li><code>.rindex/.index(str,[begin=0],[end=len])</code>：和<code>find</code>一样，但如果不存在会<strong>报异常</strong></li>\n</ul>\n</li>\n<li><code>.min/max()</code>：返回最小/最大的<strong>字母</strong></li>\n</ul>\n</li>\n<li><p><strong>判断</strong></p>\n<ul>\n<li><p>指定字符</p>\n<ul>\n<li><code>startswith(substr,[begin=0],[end=len])</code>：是否以指定<code>substr</code>开头。beg 和 end 表示在<strong>指定范围</strong>内检查。</li>\n<li><code>endswith(suffix,[beg=0],[end=len]) </code> 检查字符串是否以<code>suffix</code>结束</li>\n</ul>\n</li>\n<li><p>字母/数字/空格</p>\n<ul>\n<li><p><code>isalnum()</code>：<strong>非空</strong>且都是<strong>字母或数字</strong>则返回True</p>\n</li>\n<li><p><code>isalpha()</code>：<strong>非空</strong>且都是<strong>字母或中文字</strong>则返回 True</p>\n</li>\n<li><p><code>islower()</code>：<strong>非空</strong>且都是<strong>小写</strong>则返回 True</p>\n</li>\n<li><p><code>isupper()</code>：<strong>非空</strong>且都是<strong>大写</strong>则返回 True</p>\n</li>\n<li><p><code>isspace()</code>：<strong>非空</strong>且都是<strong>空格</strong>则返回 True</p>\n</li>\n<li><p><code>isdigit()/isdecimal()/isnumeric()</code>：<strong>非空</strong>且都是<strong>数字</strong>则返回 True</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>True</th>\n<th>False</th>\n<th>Error</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>isdigit()</code></td>\n<td>Unicode，byte(单字节)，全角(双字节)</td>\n<td>汉字，罗马数字,小数</td>\n<td>无</td>\n</tr>\n<tr>\n<td><code>isdecimal()</code></td>\n<td>Unicode，全角(双字节)</td>\n<td>罗马数字，汉字,小数</td>\n<td>byte(单字节)</td>\n</tr>\n<tr>\n<td><code>isnumeric()</code></td>\n<td>Unicode，全角(双字节)，罗马数字，汉字</td>\n<td>小数</td>\n<td>byte(单字节)</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n<li><p><code>istitle()</code>：<strong>非空</strong>且是标题化字符串则返回  True</p>\n</li>\n</ul>\n</li>\n<li><p><strong>统计</strong></p>\n<ul>\n<li><code>count(str,[beg=0],[end=len])</code>：返回指定范围<code>str</code>出现的<strong>次数</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"54-拆分-拼接-填充\"><a href=\"#5-4-拆分、拼接、填充\" class=\"headerlink\" title=\"5.4 拆分、拼接、填充\"></a>5.4 拆分、拼接、填充</h3><ul>\n<li><p><code>.split(str,[num=count])</code>：以<code>str</code>为切割点，拆分字符串。num是最大拆分次数。返回<code>list</code>，如下：</p>\n<pre class=\" language-python\"><code class=\"language-python\">s <span class=\"token operator\">=</span> <span class=\"token string\">'nihao,haha,heihei'</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#['nihao', 'haha', 'heihei']</span>\n</code></pre>\n</li>\n<li><p><code>.join(seq)</code>：将<strong>序列</strong>拼接成字符串，以自身为拼接点</p>\n<pre class=\" language-python\"><code class=\"language-python\">s1 <span class=\"token operator\">=</span> <span class=\"token string\">\"-\"</span>\nseq <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"u\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"n\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"o\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"b\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 字符串序列</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>join<span class=\"token punctuation\">(</span> seq <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#r-u-n-o-o-b</span>\n</code></pre>\n</li>\n<li><p><code>.center(width,[fillchar])</code>：返回宽度 width 的<strong>居中</strong>的字符串，fillchar 为填充的字符，默认为空格。</p>\n<pre class=\" language-python\"><code class=\"language-python\">str <span class=\"token operator\">=</span> <span class=\"token string\">\"[runoob]\"</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>center<span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#****************[runoob]****************</span>\n</code></pre>\n</li>\n<li><p><code>ljust(width,[fillchar])</code>：返回<strong>左对齐</strong>的填充字符串</p>\n</li>\n<li><p><code>zfill (width)</code>：返回<strong>右对齐</strong>的填充字符串，填充物<strong>只能</strong>为0</p>\n</li>\n</ul>\n<h3 id=\"55-字符串映射密码翻译表\"><a href=\"#5-5-字符串映射（密码翻译表）\" class=\"headerlink\" title=\"5.5 字符串映射（密码翻译表）\"></a>5.5 字符串映射（密码翻译表）</h3><ul>\n<li><p><code>.maketrans(intab, outtab)</code>：创建字符映射的转换表</p>\n</li>\n<li><p><code>.translate(table)</code>：根据密码表翻译密码</p>\n<pre class=\" language-python\"><code class=\"language-python\">intab <span class=\"token operator\">=</span> <span class=\"token string\">\"12345\"</span>\nouttab <span class=\"token operator\">=</span> <span class=\"token string\">\"aeiou\"</span>\ntrantab <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span>maketrans<span class=\"token punctuation\">(</span>intab<span class=\"token punctuation\">,</span> outtab<span class=\"token punctuation\">)</span>   <span class=\"token comment\" spellcheck=\"true\"># 制作翻译表</span>\n\nstr <span class=\"token operator\">=</span> <span class=\"token string\">\"th3s 3s str3ng 2x1mpl2....w4w!!!\"</span>\n<span class=\"token keyword\">print</span> <span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">.</span>translate<span class=\"token punctuation\">(</span>trantab<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#this is string example....wow!!!</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"56-编码\"><a href=\"#5-6-编码\" class=\"headerlink\" title=\"5.6 编码\"></a>5.6 编码</h3><ul>\n<li><code>encode(encoding=&#39;UTF-8&#39;,errors=&#39;strict&#39;)</code>：以指定的编码格式编码字符串</li>\n<li><code>bytes.decode(encoding=&quot;utf-8&quot;, errors=&quot;strict&quot;)</code>：按指定格式解码</li>\n</ul>\n<p><code>errors</code>：设置错误处理方案</p>\n<h1 id=\"五-字典dict\"><a href=\"#五、-字典dict\" class=\"headerlink\" title=\"五、 字典dict\"></a>五、 字典dict</h1><p>即map表</p>\n<p>不能以可变类型，如<code>list</code>或<code>dict</code>作为键，但是把<code>list</code>转换为<code>tuple</code>元组就可</p>\n<p>Python中，字典可以存储<strong>不同类型</strong>的<code>k/v</code>，如<code>d=&#123;&#39;12&#39;:34,56:&#39;78&#39;&#125;</code></p>\n<h2 id=\"1-创建\"><a href=\"#1-创建-3\" class=\"headerlink\" title=\"1. 创建\"></a>1. 创建</h2><ul>\n<li>创建一个自定义字典</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">d <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;key1 : value1, key2 : value2, key3 : value3 &amp;#125;</span>\n</code></pre>\n<ul>\n<li>创建一个空字典</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">d <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;&amp;#125;</span>\n</code></pre>\n<ul>\n<li><code>.copy()</code>：创建一个字典副本</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">d1<span class=\"token operator\">=</span>d<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li><code>.fromkeys(seq,value)</code>以序列元素为<strong>键</strong>，创建字典</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">list1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span>\nd1<span class=\"token operator\">=</span>dict<span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;1: None, 2: None, 3: None, 4: None, 5: None, 6: None&amp;#125;</span>\nd2<span class=\"token operator\">=</span>dict<span class=\"token punctuation\">.</span>fromkeys<span class=\"token punctuation\">(</span>list1<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0&amp;#125;</span>\n</code></pre>\n<h2 id=\"2-dict函数\"><a href=\"#2-dict函数\" class=\"headerlink\" title=\"2. dict函数\"></a>2. dict函数</h2><pre class=\" language-python\"><code class=\"language-python\">d<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'12':34,56:'78'&amp;#125;</span>\n</code></pre>\n<h3 id=\"21-增-删-改-查\"><a href=\"#2-1-增、删、改、查\" class=\"headerlink\" title=\"2.1 增、删、改、查\"></a>2.1 增、删、改、查</h3><ul>\n<li><p><strong>增：</strong>添加键值对</p>\n<ul>\n<li><p><code>[]</code>：直接添新的键值对，如</p>\n<pre class=\" language-python\"><code class=\"language-python\">d<span class=\"token punctuation\">[</span><span class=\"token number\">67</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">89</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#输出&amp;#123;'12': 34, 56: '78', 67: 89&amp;#125;</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><strong>删：</strong></p>\n<ul>\n<li><code>.pop(key)</code>：根据<strong>key</strong>删除键值对，并返回对应的<strong>value</strong></li>\n<li><code>.popitem()</code>：删除<strong>最后一个</strong>键值对，并以<strong>tuple</strong>返回该键值对</li>\n<li><code>.clear()</code>：清空字典</li>\n</ul>\n</li>\n<li><p><strong>改：</strong></p>\n<ul>\n<li><p><code>[]</code>：直接根据键修改值，如</p>\n<pre class=\" language-python\"><code class=\"language-python\">d<span class=\"token punctuation\">[</span><span class=\"token number\">56</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'12': 34, 56: 1&amp;#125;</span>\n</code></pre>\n</li>\n<li><p><code>.update(dict2)</code>：把dict2中的键值对<strong>覆盖替换</strong>到d中。如</p>\n<pre class=\" language-python\"><code class=\"language-python\">d<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'12':34,56:'78'&amp;#125;</span>\nd1<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'12':56,100:0.01&amp;#125;</span>\nd<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>d1<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#d&amp;#123;'12': 56, 56: '78', 100: 0.01&amp;#125;</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><strong>查询键/值</strong>：取值、存在判断</p>\n<ul>\n<li><p><code>[]</code>：直接通过<code>[key]</code>查看对应的<strong>值</strong>。如果不存在，抛出<strong>异常</strong></p>\n</li>\n<li><p><code>.get(key)</code>：通过<strong>key</strong>获取对应的<strong>值</strong>。如果不存在，返回<code>None</code></p>\n</li>\n<li><p><code>.setdefault(key)</code>：通过<strong>key</strong>获取对应的值。如果不存在，返回<code>None</code>，并且添加<code>key:None</code>键值对。如下</p>\n<pre class=\" language-python\"><code class=\"language-python\">d<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'12':34,56:'78'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'12': 34, 56: '78'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>setdefault<span class=\"token punctuation\">(</span><span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#None</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'12': 34, 56: '78', 15: None&amp;#125;</span>\n</code></pre>\n</li>\n<li><p><code>in</code>：in关键字查询字典是否存在该键key，返回true/false</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"22-字典转数组\"><a href=\"#2-2-字典转数组\" class=\"headerlink\" title=\"2.2 字典转数组\"></a>2.2 字典转数组</h3><p><strong>返回序列</strong>，可用于<strong>遍历迭代</strong></p>\n<ul>\n<li><p><code>.items()</code>：以<code>dict_items</code>返回所有<strong>键值对</strong>。  <code>dict_items</code>和<code>list</code>差不多</p>\n<pre class=\" language-python\"><code class=\"language-python\">d<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'12':34,56:'78'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#dict_items([('12', 34), (56, '78')])</span>\n</code></pre>\n</li>\n<li><p><code>.keys()</code>：以<code>dict_keys</code>返回所有<strong>key</strong>。<code>dict_keys</code>和<code>list</code>差不多</p>\n<pre class=\" language-python\"><code class=\"language-python\">d<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'12':34,56:'78'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#dict_keys(['12', 56])</span>\n</code></pre>\n</li>\n<li><p><code>.values()</code>：以<code>dict_values</code>返回所有<strong>value</strong>。<code>dict_values</code>和<code>list</code>差不多</p>\n</li>\n</ul>\n<h2 id=\"3-遍历字典\"><a href=\"#3-遍历字典\" class=\"headerlink\" title=\"3. 遍历字典\"></a>3. 遍历字典</h2><ul>\n<li><p>遍历键值对</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> key<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</code></pre>\n</li>\n<li><p>遍历键</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> key <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</code></pre>\n</li>\n<li><p>遍历值</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">for</span> v <span class=\"token keyword\">in</span> d<span class=\"token punctuation\">.</span>values<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n</code></pre>\n</li>\n</ul>\n<h1 id=\"六-集合set\"><a href=\"#六、-集合set\" class=\"headerlink\" title=\"六、 集合set\"></a>六、 集合set</h1><p>集合（set）是一个<strong>无序</strong>的<strong>不重复</strong>元素序列。</p>\n<p>可以使用大括号 <strong>{ }</strong> 或者 <strong>set()</strong> 函数创建集合，<font color=\"red\">注意：创建一个空集合必须用 <strong>set()</strong> 而不是 **{ }**，因为 <strong>{ }</strong> 是用来创建一个空字典。</font></p>\n<p><code>set</code>和<code>dict</code>的区别是，<strong>set只有键没有值</strong></p>\n<h2 id=\"1-创建\"><a href=\"#1-创建-4\" class=\"headerlink\" title=\"1. 创建\"></a>1. 创建</h2><ul>\n<li>创建自定义set</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">s<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;1,'a',456&amp;#125;</span>\ns<span class=\"token operator\">=</span>set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#一般建议不这么用</span>\n</code></pre>\n<ul>\n<li>创建一个空set</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">s<span class=\"token operator\">=</span>set<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>创建一个set副本</li>\n</ul>\n<pre class=\" language-python\"><code class=\"language-python\">s1<span class=\"token operator\">=</span>set<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\n<span class=\"token comment\" spellcheck=\"true\">#或</span>\ns2<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span>copy<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"2-set操作符求交-差-和-异或\"><a href=\"#2-set操作符（求交、差、和、异或）\" class=\"headerlink\" title=\"2. set操作符（求交、差、和、异或）\"></a>2. set操作符（求交、差、和、异或）</h2><p>主要是与、或、非这些逻辑运算符</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>-</code></td>\n<td>求差</td>\n</tr>\n<tr>\n<td>`</td>\n<td>`</td>\n</tr>\n<tr>\n<td><code>&amp;</code></td>\n<td>与：求交</td>\n</tr>\n<tr>\n<td><code>^</code></td>\n<td>异或：不同时属于a和b的元素</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<pre class=\" language-python\"><code class=\"language-python\">a <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'b', 'r', 'd', 'a', 'c'&amp;#125;</span>\nb <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;'c', 'l', 'a', 'z', 'm'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'d', 'b', 'r'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">|</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'z', 'b', 'd', 'c', 'l', 'r', 'm', 'a'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'a', 'c'&amp;#125;</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">^</span>b<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'z', 'l', 'b', 'r', 'd', 'm'&amp;#125;</span>\n</code></pre>\n<p><img data-src=\"/2021/06/04/note/Python/Python%E8%AF%AD%E6%B3%95%E5%A4%8D%E4%B9%A0/image-20210605165829716.png\" alt=\"image-20210605165829716\"></p>\n<h2 id=\"3-set函数\"><a href=\"#3-set函数\" class=\"headerlink\" title=\"3. set函数\"></a>3. set函数</h2><h3 id=\"31-增-删-改-查\"><a href=\"#3-1-增、删、改、查\" class=\"headerlink\" title=\"3.1 增、删、改、查\"></a>3.1 增、删、改、查</h3><ul>\n<li><p><strong>增</strong>：添加、合并</p>\n<ul>\n<li><p><code>.add()</code>：为集合添加一个元素</p>\n</li>\n<li><p><code>.update(set)</code>：为集合添加元素。相当于并集</p>\n<pre class=\" language-python\"><code class=\"language-python\">x <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;\"apple\", \"banana\", \"cherry\"&amp;#125;</span>\ny <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token comment\" spellcheck=\"true\">#123;\"google\", \"runoob\", \"apple\"&amp;#125;</span>\nx<span class=\"token punctuation\">.</span>update<span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">)</span> \n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#&amp;#123;'banana', 'apple', 'google', 'runoob', 'cherry'&amp;#125;</span>\n</code></pre>\n</li>\n<li><p><code>.union(set1,set2,...)</code>：也是并集，返回<code>set</code></p>\n</li>\n</ul>\n</li>\n<li><p><strong>删</strong></p>\n<ul>\n<li><code>.clear()</code>：清空</li>\n<li><code>.pop()</code>：<strong>随机</strong>删除元素</li>\n<li><code>.remove(item)</code>：<strong>指定</strong>删除元素</li>\n<li><code>.difference_update(set)</code>：移除集合中的元素。相当于求差</li>\n</ul>\n</li>\n<li><p><strong>改</strong>：因为set仅仅是元素的集合，所以没有”改”</p>\n</li>\n<li><p><strong>查</strong>：主要是<strong>判断</strong></p>\n<ul>\n<li><code>in</code>：通过<code>in</code>关键字判断set中是否存在元素</li>\n<li><code>.isdisjoint(set)</code>：判断2个集合是否包含相同的元素</li>\n<li><code>.issubset(set)</code>：判断<strong>集合</strong>是否为该<strong>参数集合</strong>的<strong>子集</strong></li>\n<li><code>.issuperset(set)</code>： 判断<strong>集合</strong>是否为<strong>参数集合</strong>的<strong>父集</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"32-求交-差-和-异或\"><a href=\"#3-2-求交、差、和、异或\" class=\"headerlink\" title=\"3.2 求交、差、和、异或\"></a>3.2 求交、差、和、异或</h3><p>建议用<strong>逻辑运算符</strong>比较方便</p>\n",
            "tags": [
                "笔记",
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/06/02/note/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AC%94/%E5%9F%BA%E4%BA%8EPython%E5%92%8Cecharts%E7%9A%84%E5%8A%A8%E6%80%81%E5%9B%BE/",
            "url": "https://nitgod1996.com/2021/06/02/note/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AC%94/%E5%9F%BA%E4%BA%8EPython%E5%92%8Cecharts%E7%9A%84%E5%8A%A8%E6%80%81%E5%9B%BE/",
            "title": "每日一笔-基于Python和echarts的动态图",
            "date_published": "2021-06-02T12:47:47.589Z",
            "content_html": "<h1 id=\"1-python\"><a href=\"#1-Python\" class=\"headerlink\" title=\"1. Python\"></a>1. Python</h1><h2 id=\"11-字符串默认是单引号3939解决方法\"><a href=\"#1-1-字符串默认是单引号-39-39-解决方法\" class=\"headerlink\" title=\"1.1 字符串默认是单引号&#39;&#39;解决方法\"></a>1.1 字符串默认是单引号<code>&#39;&#39;</code>解决方法</h2><p>由于flask只能上传字符串，Python的字符串默认是<strong>单引号</strong><code>&#39;&#39;</code>包裹，而<code>json</code>的键必须是<strong>双引号</strong><code>&quot;&quot;</code>，导致上传的json字符串不能被<code>ajax</code>所识别</p>\n<p><font color=\"red\"><strong>解决：通过.replace()函数将单引号<code>&#39;&#39;</code>替换为双引号<code>&quot;&quot;</code></strong></font></p>\n<p>如下</p>\n<pre class=\" language-python\"><code class=\"language-python\">_json<span class=\"token operator\">=</span>str<span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>replace<span class=\"token punctuation\">(</span><span class=\"token string\">\"'\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'\"'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"12-json读取pandas还是with-open\"><a href=\"#1-2-json读取：pandas还是with-open\" class=\"headerlink\" title=\"1.2 json读取：pandas还是with open\"></a>1.2 json读取：pandas还是with open</h2><p>如果不需要非常复杂的数据处理，还是建议以<code>with open</code>读取<code>json</code>文件，并保存在<code>dict</code>中。<strong>因为由<code>dataframe</code>转为json会有各种格式转变，如果不熟练会比较麻烦</strong></p>\n<p>如：<code>to_json</code>会将<code>date</code>对象转为<code>milliseconds</code>（自1970年到现在经过的毫秒数）</p>\n<h1 id=\"2-javascript\"><a href=\"#2-JavaScript\" class=\"headerlink\" title=\"2. JavaScript\"></a>2. JavaScript</h1><h2 id=\"21-date对象\"><a href=\"#2-1-Date对象\" class=\"headerlink\" title=\"2.1 Date对象\"></a>2.1 Date对象</h2><p>此次折线图是以<code>date</code>为坐标横轴，所以用到了许多date对象，主要用了一下方法</p>\n<ol>\n<li><p>创建对象</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//以number类型的毫秒数创建</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>dateString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//能表明date的字符串，如\"2016-01-01 00:00:00\"</span>\n<span class=\"token keyword\">var</span> d <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>year<span class=\"token punctuation\">,</span> month<span class=\"token punctuation\">,</span> day<span class=\"token punctuation\">,</span> hours<span class=\"token punctuation\">,</span> minutes<span class=\"token punctuation\">,</span> seconds<span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>主要方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRkYXRlLmh0bWw=\">getDate()</span></td>\n<td>从 Date 对象返回<strong>一个月</strong>中的某一天 (1 ~ 31)。<strong>几号</strong></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRkYXkuaHRtbA==\">getDay()</span></td>\n<td>从 Date 对象返回<strong>一周</strong>中的某一天 (0 ~ 6)。<strong>星期几</strong></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRmdWxseWVhci5odG1s\">getFullYear()</span></td>\n<td>从 Date 对象以四位数字返回年份。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRob3Vycy5odG1s\">getHours()</span></td>\n<td>返回 Date 对象的小时 (0 ~ 23)。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRtaWxsaXNlY29uZHMuaHRtbA==\">getMilliseconds()</span></td>\n<td>返回 Date 对象的毫秒(0 ~ 999)。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRtaW51dGVzLmh0bWw=\">getMinutes()</span></td>\n<td>返回 Date 对象的分钟 (0 ~ 59)。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRtb250aC5odG1s\">getMonth()</span></td>\n<td>从 Date 对象返回月份 (<strong>0 ~ 11</strong>)。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXRzZWNvbmRzLmh0bWw=\">getSeconds()</span></td>\n<td>返回 Date 对象的秒数 (0 ~ 59)。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9qc3JlZi1nZXR0aW1lLmh0bWw=\">getTime()</span></td>\n<td>返回 1970 年 1 月 1 日至今的<strong>毫秒数</strong>。</td>\n</tr>\n</tbody></table>\n</li>\n</ol>\n<p>如</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> text_day<span class=\"token operator\">=</span>day<span class=\"token punctuation\">.</span><span class=\"token function\">getFullYear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'-'</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>day<span class=\"token punctuation\">.</span><span class=\"token function\">getMonth</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">+</span> <span class=\"token string\">'-'</span><span class=\"token operator\">+</span>day<span class=\"token punctuation\">.</span><span class=\"token function\">getDate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//2021-6-2</span>\n</code></pre>\n<h2 id=\"22-间隔函数循环延时函数\"><a href=\"#2-2-间隔函数-循环延时函数\" class=\"headerlink\" title=\"2.2 间隔函数/循环延时函数\"></a>2.2 间隔函数/循环延时函数</h2><blockquote>\n<p>动态图表的核心逻辑是：每隔一定时间更新一次dataSet，重绘一次图表</p>\n</blockquote>\n<p><strong>推荐使用setInterval</strong></p>\n<ol>\n<li><p><code>setInterval()</code>：按照指定的周期（以毫秒计）来调用函数或计算表达式。DOM Window对象</p>\n<blockquote>\n<p>setInterval(code,millisec[,”lang”])</p>\n<p>返回值：一个可以传递给.clearInterval() 取消setInterval的值。</p>\n</blockquote>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> num<span class=\"token operator\">=</span><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">/*代码块*/</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//每1000ms执行一次</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">clearInterval</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//取消循环执行</span>\n</code></pre>\n</li>\n<li><p><code>setTimeout()</code>：指定的毫秒数后调用函数或计算表达式。</p>\n<blockquote>\n<p>语法：setTimeout(code,millisec)</p>\n</blockquote>\n<blockquote>\n<p>setTimeout() 只执行 code 一次。如果要多次调用，请使用 setInterval() 或者让 code 自身再次调用 setTimeout()。</p>\n</blockquote>\n<p>意思是，循环间隔执行建议用<code>setInterval</code>或者递归。</p>\n<p>不过for循环其实也能用，如下</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但，这样会间隔1s后<strong>瞬间</strong>输出<strong>5个6</strong></p>\n<p>如果想每隔一秒输出i，可以如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//匿名函数包裹</span>\n        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>i <span class=\"token operator\">*</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//每隔一秒输出</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>原因：算了，今天太晚了，就不研究了</strong></p>\n</li>\n</ol>\n<h1 id=\"3-echarts\"><a href=\"#3-echarts\" class=\"headerlink\" title=\"3. echarts\"></a>3. echarts</h1><ol start=\"5\">\n<li>echarts动态折线图和柱形图的参数设置及实现逻辑</li>\n<li>echarts其他一些美化设置</li>\n</ol>\n<h2 id=\"31-动态图\"><a href=\"#3-1-动态图\" class=\"headerlink\" title=\"3.1 动态图\"></a>3.1 动态图</h2><p>动态图的逻辑是每隔一定时间更新一次dataSet，重绘一次图表。</p>\n<p>如果需要设置动画的参数，则在animation中设置</p>\n<h3 id=\"32-其他美化设置\"><a href=\"#3-2-其他美化设置\" class=\"headerlink\" title=\"3.2 其他美化设置\"></a>3.2 其他美化设置</h3><ol>\n<li>graphic：图片元素设置，如下</li>\n</ol>\n<p><img data-src=\"/2021/06/02/note/%E9%9A%8F%E7%AC%94/%E6%AF%8F%E6%97%A5%E4%B8%80%E7%AC%94/%E5%9F%BA%E4%BA%8EPython%E5%92%8Cecharts%E7%9A%84%E5%8A%A8%E6%80%81%E5%9B%BE/image-20210603155146424.png\" alt=\"image-20210603155146424\"></p>\n<ol start=\"2\">\n<li><p>柱形图</p>\n<ol>\n<li>柱子宽度设置：<code>series.barWidth: &quot;50%&quot;,</code></li>\n<li>柱子圆角设置：<code>series.itemStyle</code></li>\n</ol>\n</li>\n<li><p>坐标刻度字体设置：<code>yAxis/Xaxis.axisLabel.textStyle</code></p>\n</li>\n<li><p>多个图表数据在一个坐标系显示，点击图例显示/隐藏</p>\n<p><em>只需在series中输入多个{}即可</em>，如</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">series<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'总计'</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> data_total\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'左'</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> data_l\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token string\">'右'</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token punctuation\">:</span> <span class=\"token string\">'line'</span><span class=\"token punctuation\">,</span>\n    data<span class=\"token punctuation\">:</span> data_r\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">]</span>\n</code></pre>\n</li>\n</ol>\n",
            "tags": [
                "笔记",
                "随笔",
                "每日一笔",
                "echarts",
                "Python",
                "JavaScript"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/",
            "url": "https://nitgod1996.com/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/",
            "title": "随笔-利用Python处理json",
            "date_published": "2021-05-28T16:00:00.000Z",
            "content_html": "<h1 id=\"0-json类\"><a href=\"#0-json类\" class=\"headerlink\" title=\"0. json类\"></a>0. json类</h1><p>​        在Python 的 json库中，共有四个方法。分别是：</p>\n<pre class=\" language-python\"><code class=\"language-python\">json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># json文件输入流转为dict</span>\njson<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 将字符串类型的json转为dict</span>\njson<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 将dict类型的json写到文件输出流</span>\njson<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\"># 将dict类型的json转为</span>\n</code></pre>\n<h1 id=\"1-通过pandas读写json\"><a href=\"#1-通过pandas读写json\" class=\"headerlink\" title=\"1. 通过pandas读写json\"></a>1. 通过pandas读写json</h1><p><code>pandas</code>是Python数据处理的库，一般把数据转成<code>DATAFrame</code>或<code>Series</code>进行处理，但这样可能会破坏原有的<code>json</code>格式</p>\n<p>前提：</p>\n<ol>\n<li>引入外部库</li>\n</ol>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> json\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n</code></pre>\n<ol start=\"2\">\n<li><p>读取数据，保存为<code>Dataframe</code>。以<code>.csv</code>文件为例</p>\n<pre class=\" language-python\"><code class=\"language-python\">df <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'DataA09/demo.csv'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>输出如下：第1行和第1列均为索引，不视作数据内容</p>\n<p><img data-src=\"/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/image-20210530200815008.png\" alt=\"image-20210530200815008\"></p>\n</li>\n<li><p>利用<code>DataFrame.to_json</code>转成<code>json</code>字符串</p>\n<pre class=\" language-python\"><code class=\"language-python\">df<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span>orient<span class=\"token operator\">=</span><span class=\"token string\">'index'</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#返回str类型</span>\n<span class=\"token comment\" spellcheck=\"true\">#或者</span>\njson<span class=\"token punctuation\">.</span>loads<span class=\"token punctuation\">(</span>df<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span><span class=\"token string\">'path'</span><span class=\"token punctuation\">,</span>orient<span class=\"token operator\">=</span><span class=\"token string\">'table'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span><span class=\"token comment\" spellcheck=\"true\">#返回map</span>\n<span class=\"token comment\" spellcheck=\"true\">#就能转成比较常见的json格式文件</span>\n</code></pre>\n<p><code>orient = &#39;index&#39;</code>有时候中文乱码，可以和下方例子一样，用<code>json.loads()</code>包裹，再<code>str()</code>转回字符串，就可以显示中文了。<strong>但是仅仅是str是中文，json文件还是乱码的</strong></p>\n<p>2种格式分别如下：</p>\n<p><img data-src=\"/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/image-20210530205052077.png\" alt=\"image-20210530205052077\"></p>\n<p><img data-src=\"/2021/05/29/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E5%A4%84%E7%90%86json/image-20210530205138024.png\" alt=\"image-20210530205138024\"></p>\n</li>\n</ol>\n<h1 id=\"2-以dict格式读取json\"><a href=\"#2-以dict格式读取json\" class=\"headerlink\" title=\"2. 以dict格式读取json\"></a>2. 以dict格式读取json</h1><p>字典（map表）格式是最适合保存json文件的</p>\n<p>以Python自带的文件输入输出流读取：</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># 读取数据</span>\n<span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">'../dataYe/od_map.json'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'r'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    djson <span class=\"token operator\">=</span> json<span class=\"token punctuation\">.</span>load<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n    \n<span class=\"token comment\" spellcheck=\"true\"># 写入 JSON 数据</span>\n<span class=\"token keyword\">with</span> open<span class=\"token punctuation\">(</span><span class=\"token string\">'data.json'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'w'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    json<span class=\"token punctuation\">.</span>dump<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span>\n</code></pre>\n<p>这其中<code>djson</code>、<code>data</code>都是<code>dict</code>类型</p>\n",
            "tags": [
                "笔记",
                "随笔",
                "Python",
                "Python",
                "json"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/28/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/",
            "url": "https://nitgod1996.com/2021/05/28/note/%E9%9A%8F%E7%AC%94/Python/%E9%9A%8F%E7%AC%94-%E5%88%A9%E7%94%A8Python%E6%89%B9%E9%87%8F%E5%A4%84%E7%90%86%E6%96%87%E4%BB%B6/",
            "title": "随笔-利用Python批量处理文件",
            "date_published": "2021-05-27T16:00:00.000Z",
            "content_html": "<p>废话不多说，先看示例</p>\n<pre class=\" language-python\"><code class=\"language-python\">dir <span class=\"token operator\">=</span> <span class=\"token string\">'../dataYe/'</span>\nout_dir <span class=\"token operator\">=</span> <span class=\"token string\">'../structure/'</span>\n<span class=\"token keyword\">for</span> file <span class=\"token keyword\">in</span> os<span class=\"token punctuation\">.</span>listdir<span class=\"token punctuation\">(</span>dir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span><span class=\"token comment\" spellcheck=\"true\">#遍历文件夹内的文件，file是str类型的文件名</span>\n    <span class=\"token keyword\">if</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.json'</span><span class=\"token punctuation\">:</span>\n        newname <span class=\"token operator\">=</span> os<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>splitext<span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token string\">'_struct.json'</span>  <span class=\"token comment\" spellcheck=\"true\"># 是为了后边命名</span>\n        <span class=\"token comment\" spellcheck=\"true\">#print(newname)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>  <span class=\"token comment\" spellcheck=\"true\"># 如果后缀不是json，那么跳过这个文件</span>\n        <span class=\"token keyword\">continue</span>\n</code></pre>\n<ul>\n<li><code>os.listdir()</code>：用于返回指定的<strong>文件夹</strong>内的文件名的<code>str_list</code>；</li>\n<li><code>os.path.splitext()</code>：分离指定文件的<strong>文件名</strong>与<strong>扩展名</strong>；默认返回(fname,fextension)元组，可做分片操作；</li>\n</ul>\n<p>此后可以通过<code>pandas</code>读写处理文件</p>\n",
            "tags": [
                "笔记",
                "随笔",
                "Python",
                "Python"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/jQuery/",
            "url": "https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/jQuery/",
            "title": "jQuery笔记",
            "date_published": "2021-05-27T10:19:56.000Z",
            "content_html": "<h1 id=\"一-基本用法\"><a href=\"#一、-基本用法\" class=\"headerlink\" title=\"一、 基本用法\"></a>一、 基本用法</h1><h2 id=\"1-简介\"><a href=\"#1-简介\" class=\"headerlink\" title=\"1. 简介\"></a>1. 简介</h2><p>jQuery 是一个轻量级的”写的少，做的多”的 JavaScript 库。极大地简化了JavaScript编程。</p>\n<p>此外，jQuery所有的功能函数均是针对<strong>元素</strong>的，也就是<strong>标签</strong></p>\n<p>jQuery 库包含以下功能：</p>\n<ul>\n<li>HTML 元素选取</li>\n<li>HTML 元素操作</li>\n<li>CSS 操作</li>\n<li>HTML 事件函数</li>\n<li>JavaScript 特效和动画</li>\n<li>HTML DOM 遍历和修改</li>\n<li><strong>AJAX</strong></li>\n<li>Utilities</li>\n</ul>\n<p><strong>提示：</strong> 除此之外，jQuery 还提供了大量的插件。</p>\n<h2 id=\"2-安装导入\"><a href=\"#2-安装-导入\" class=\"headerlink\" title=\"2. 安装/导入\"></a>2. 安装/导入</h2><p>有两个版本的 jQuery 可供下载：</p>\n<ul>\n<li>Production version - 用于实际的网站中，已被精简和压缩。</li>\n<li>Development version - 用于测试和开发（未压缩，是可读的代码）</li>\n</ul>\n<p>以上两个版本都可以从 <span class=\"exturl\" data-url=\"aHR0cDovL2pxdWVyeS5jb20vZG93bmxvYWQv\">jquery.com</span> 中下载。</p>\n<h3 id=\"21-本地导入\"><a href=\"#2-1-本地导入\" class=\"headerlink\" title=\"2.1 本地导入\"></a>2.1 本地导入</h3><p><code>jquery-1.10.2.min.js</code>文件下载好后，放到指定目录</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>jquery-1.10.2.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"22-在线导入\"><a href=\"#2-2-在线导入\" class=\"headerlink\" title=\"2.2 在线导入\"></a>2.2 在线导入</h3><p>直接通过CDN(内容分发网络)引用。<strong>需要连网</strong></p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://cdn.staticfile.org/jquery/1.10.2/jquery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"3-语法\"><a href=\"#3-语法\" class=\"headerlink\" title=\"3. 语法\"></a>3. 语法</h2><p>通过 jQuery，您可以选取（查询，query） HTML 元素，并对它们执行”操作”（actions）。</p>\n<blockquote>\n<p>基础语法： <strong>$(selector).action()</strong></p>\n</blockquote>\n<ul>\n<li>美元符号定义 jQuery</li>\n<li>选择符（selector）定位 HTML 元素，<strong>规则和CSS选择器相同</strong></li>\n<li>jQuery 的 action() 执行对元素的操作</li>\n</ul>\n<p>实例:</p>\n<ul>\n<li>$(this).hide() - 隐藏当前元素</li>\n<li>$(“p”).hide() - 隐藏所有 <p> 元素</p></li>\n<li>$(“p.test”).hide() - 隐藏所有 class=”test” 的 <p> 元素</p></li>\n<li>$(“#test”).hide() - 隐藏 id=”test” 的元素</li>\n</ul>\n<h3 id=\"31-文档就绪document-ready\"><a href=\"#3-1-文档就绪document-ready\" class=\"headerlink\" title=\"3.1 文档就绪document ready\"></a>3.1 文档就绪document ready</h3><p>为了防止文档在完全加载（就绪）之前运行 jQuery 代码，即在 DOM 加载完成后才可以对 DOM 进行操作。如果在文档没有完全加载之前就运行函数，操作可能失败。</p>\n<p>所以<strong>所有 jQuery 函数需要用document ready 函数包裹</strong></p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\" spellcheck=\"true\">// 开始写 jQuery 代码...</span>\n \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>或者使用简介点的写法，如下</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\" spellcheck=\"true\">// 开始写 jQuery 代码...</span>\n \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"4-选择器\"><a href=\"#4-选择器\" class=\"headerlink\" title=\"4. 选择器\"></a>4. 选择器</h2><p>规则和CSS选择器相同。除此之外，它还有一些自定义的选择器。</p>\n<p>例：</p>\n<blockquote>\n<p>用户点击按钮后，所有 </p><p> 元素都隐藏：</p>\n</blockquote>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th align=\"left\">语法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">$(“*”)</td>\n<td align=\"left\">选取所有元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(this)</td>\n<td align=\"left\">选取当前 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“p.intro”)</td>\n<td align=\"left\">选取 class 为 intro 的 &lt;p&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“p:first”)</td>\n<td align=\"left\">选取第一个&lt;p&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“ul li:first”)</td>\n<td align=\"left\">选取第一个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“ul li:first-child”)</td>\n<td align=\"left\">选取每个 &lt;ul&gt; 元素的第一个 &lt;li&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“[href]”)</td>\n<td align=\"left\">选取带有 href 属性的元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“a[target=’_blank’]”)</td>\n<td align=\"left\">选取所有 target 属性值等于 “_blank” 的 &lt;a&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“a[target!=’_blank’]”)</td>\n<td align=\"left\">选取所有 target 属性值不等于 “_blank” 的 &lt;a&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“:button”)</td>\n<td align=\"left\">选取所有 type=”button” 的 &lt;input&gt; 元素 和 &lt;button&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“tr:even”)</td>\n<td align=\"left\">选取偶数位置的 &lt;tr&gt; 元素</td>\n</tr>\n<tr>\n<td align=\"left\">$(“tr:odd”)</td>\n<td align=\"left\">选取奇数位置的 &lt;tr&gt; 元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"5-事件\"><a href=\"#5-事件\" class=\"headerlink\" title=\"5. 事件\"></a>5. 事件</h2><p>在jQuery上设置事件。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 动作触发后执行的代码!!</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>比JavaScript更加方便，<strong>不需要</strong>在html标签设置<strong>事件属性</strong>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">鼠标事件</th>\n<th align=\"left\">键盘事件</th>\n<th align=\"left\">表单事件</th>\n<th align=\"left\">文档/窗口事件</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtY2xpY2suaHRtbA==\">click</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQta2V5cHJlc3MuaHRtbA==\">keypress</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtc3VibWl0Lmh0bWw=\">submit</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtbG9hZC5odG1s\">load</span></td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtZGJsY2xpY2suaHRtbA==\">dblclick</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQta2V5ZG93bi5odG1s\">keydown</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtY2hhbmdlLmh0bWw=\">change</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtcmVzaXplLmh0bWw=\">resize</span></td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtbW91c2VlbnRlci5odG1s\">mouseenter</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQta2V5dXAuaHRtbA==\">keyup</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtZm9jdXMuaHRtbA==\">focus</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtc2Nyb2xsLmh0bWw=\">scroll</span></td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtbW91c2VsZWF2ZS5odG1s\">mouseleave</span></td>\n<td align=\"left\"></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtYmx1ci5odG1s\">blur</span></td>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtdW5sb2FkLmh0bWw=\">unload</span></td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZXZlbnQtaG92ZXIuaHRtbA==\">hover</span></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n<td align=\"left\"></td>\n</tr>\n</tbody></table>\n<h1 id=\"二-jquery函数\"><a href=\"#二、-jQuery函数\" class=\"headerlink\" title=\"二、 jQuery函数\"></a>二、 jQuery函数</h1><p>jQuery函数大多有以下<strong>参数</strong>，且含义接近：</p>\n<ul>\n<li>speed：一般为函数执行速度。可选项为<ul>\n<li>毫秒值</li>\n<li>“slow”</li>\n<li>“fast”</li>\n</ul>\n</li>\n<li>easing：函数执行效果。<ul>\n<li>“swing” - 在开头/结尾移动慢，在中间移动快</li>\n<li>“linear” - 匀速移动</li>\n<li><strong>扩展插件中提供更多可用的 easing 函数</strong>。</li>\n</ul>\n</li>\n<li>callback：回调函数。函数执行完之后，要执行的函数。</li>\n</ul>\n<h2 id=\"1-效果函数\"><a href=\"#1-效果函数\" class=\"headerlink\" title=\"1. 效果函数\"></a>1. 效果函数</h2><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWFuaW1hdGUuaHRtbA==\">animate()</span></td>\n<td align=\"left\">对被选元素应用”自定义”的动画</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWNsZWFycXVldWUuaHRtbA==\">clearQueue()</span></td>\n<td align=\"left\">对被选元素移除所有排队函数（仍未运行的）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlbGF5Lmh0bWw=\">delay()</span></td>\n<td align=\"left\">对被选元素的所有排队函数（仍未运行）设置延迟</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlcXVldWUuaHRtbA==\">dequeue()</span></td>\n<td align=\"left\">移除下一个排队函数，然后执行函数</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVpbi5odG1s\">fadeIn()</span></td>\n<td align=\"left\">逐渐改变被选元素的不透明度，从隐藏到可见</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVvdXQuaHRtbA==\">fadeOut()</span></td>\n<td align=\"left\">逐渐改变被选元素的不透明度，从可见到隐藏</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0by5odG1s\">fadeTo()</span></td>\n<td align=\"left\">把被选元素逐渐改变至给定的不透明度</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0b2dnbGUuaHRtbA==\">fadeToggle()</span></td>\n<td align=\"left\">在 fadeIn() 和 fadeOut() 方法之间进行切换</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZpbmlzaC5odG1s\">finish()</span></td>\n<td align=\"left\">对被选元素停止、移除并完成所有排队动画</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWhpZGUuaHRtbA==\">hide()</span></td>\n<td align=\"left\">隐藏被选元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXF1ZXVlLmh0bWw=\">queue()</span></td>\n<td align=\"left\">显示被选元素的排队函数</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNob3cuaHRtbA==\">show()</span></td>\n<td align=\"left\">显示被选元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRlZG93bi5odG1s\">slideDown()</span></td>\n<td align=\"left\">通过调整高度来滑动显示被选元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldG9nZ2xlLmh0bWw=\">slideToggle()</span></td>\n<td align=\"left\">slideUp() 和 slideDown() 方法之间的切换</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldXAuaHRtbA==\">slideUp()</span></td>\n<td align=\"left\">通过调整高度来滑动隐藏被选元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXN0b3AuaHRtbA==\">stop()</span></td>\n<td align=\"left\">停止被选元素上当前正在运行的动画</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXRvZ2dsZS5odG1s\">toggle()</span></td>\n<td align=\"left\">hide() 和 show() 方法之间的切换</td>\n</tr>\n</tbody></table>\n<p>以下详细介绍这些方法：</p>\n<h3 id=\"11-隐藏-显示\"><a href=\"#1-1-隐藏、显示\" class=\"headerlink\" title=\"1.1 隐藏、显示\"></a>1.1 隐藏、显示</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWhpZGUuaHRtbA==\">hide()</span></td>\n<td align=\"left\">隐藏被选元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNob3cuaHRtbA==\">show()</span></td>\n<td align=\"left\">显示被选元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXRvZ2dsZS5odG1s\">toggle()</span></td>\n<td align=\"left\">hide() 和 show() 方法之间的切换</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>hide：</strong>隐藏元素（相当于消失，不会有看不见的尸体占位）</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).hide(<em>speed,easing,callback</em>)</p>\n</blockquote>\n<ul>\n<li>speed：可选。规定隐藏效果的速度。<ul>\n<li>毫秒</li>\n<li>“slow”</li>\n<li>“fast”3</li>\n</ul>\n</li>\n<li>easing：可选。动画运行效果<ul>\n<li>“swing” - 在开头/结尾移动慢，在中间移动快</li>\n<li>“linear” - 匀速移动</li>\n<li><strong>扩展插件中提供更多可用的 easing 函数</strong>。</li>\n</ul>\n</li>\n<li>callback：可选。hide() 方法执行完之后，要执行的函数。</li>\n</ul>\n</li>\n<li><p><strong>show：</strong>显示元素</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).show(<em>speed,easing,callback</em>)</p>\n</blockquote>\n</li>\n<li><p><strong>toggle：</strong>在被选元素上进行<code>hide</code>和<code>show</code>之间的切换。即，元素为hide时，toggle就是show。反之，元素show时，toggle就是hide</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).toggle(<em>speed,easing,callback</em>)</p>\n</blockquote>\n</li>\n</ol>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".btn1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slow\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"swing\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toggle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//等价于</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".btn1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hide</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"slow\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"swing\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">show</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"12-淡入-淡出\"><a href=\"#1-2-淡入、淡出\" class=\"headerlink\" title=\"1.2 淡入、淡出\"></a>1.2 淡入、淡出</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVpbi5odG1s\">fadeIn()</span></td>\n<td align=\"left\">逐渐改变被选元素的不透明度，从隐藏到可见</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGVvdXQuaHRtbA==\">fadeOut()</span></td>\n<td align=\"left\">逐渐改变被选元素的不透明度，从可见到隐藏</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0by5odG1s\">fadeTo()</span></td>\n<td align=\"left\">把被选元素逐渐改变至给定的不透明度</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZhZGV0b2dnbGUuaHRtbA==\">fadeToggle()</span></td>\n<td align=\"left\">在 fadeIn() 和 fadeOut() 方法之间进行切换</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>fadeToggle：</strong><code>In</code>和<code>Out</code>就不解释了，语法都差不多，一般用<code>fadeToggle</code>进行切换</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).fadeToggle(<em>speed,easing,callback</em>)</p>\n</blockquote>\n</li>\n<li><p><strong>fadeTo：</strong>逐渐改变透明度，最终并不会隐藏元素</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).fadeTo(<em>speed,opacity,easing,callback</em>)</p>\n</blockquote>\n<ul>\n<li>speed：必须</li>\n<li>opacity：必须。最终<strong>透明度</strong>，介于0.00-1.00之间</li>\n</ul>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fadeTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"13-滑动\"><a href=\"#1-3-滑动\" class=\"headerlink\" title=\"1.3 滑动\"></a>1.3 滑动</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRlZG93bi5odG1s\">slideDown()</span></td>\n<td>通过调整高度来滑动显示被选元素</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldG9nZ2xlLmh0bWw=\">slideToggle()</span></td>\n<td>slideUp() 和 slideDown() 方法之间的切换</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXNsaWRldXAuaHRtbA==\">slideUp()</span></td>\n<td>通过调整高度来滑动隐藏被选元素</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>slideDown：</strong>下滑<strong>显示</strong>被隐藏的元素</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).slideDown(<em>speed,easing,callback</em>)</p>\n</blockquote>\n</li>\n<li><p><strong>slideUp</strong>：上滑<strong>隐藏</strong>元素</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).slideUp(<em>speed,easing,callback</em>)</p>\n</blockquote>\n</li>\n<li><p><strong>slideToggle：</strong>slideUp() 和 slideDown() 方法之间的切换</p>\n</li>\n</ol>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">ready</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".btn1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//上滑隐藏</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\".btn2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">slideDown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//下滑显示</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"14-动画\"><a href=\"#1-4-动画\" class=\"headerlink\" title=\"1.4 动画\"></a>1.4 动画</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWFuaW1hdGUuaHRtbA==\">animate()</span></td>\n<td>对被选元素应用”自定义”的动画</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXN0b3AuaHRtbA==\">stop()</span></td>\n<td>停止被选元素上当前正在运行的动画</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZpbmlzaC5odG1s\">finish()</span></td>\n<td>对被选元素停止、移除并完成所有排队动画</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>animate：</strong>通过设置CSS自定义动画</p>\n<blockquote>\n<p>语法：(<em>selector</em>).animate(<em>{styles},{options}</em>)</p>\n</blockquote>\n<ul>\n<li><p>styles：必需。规定产生动画效果的一个或多个 CSS 属性/值（同上）。</p>\n</li>\n<li><p>options：可选</p>\n<ul>\n<li>speed - 设置动画的速度</li>\n<li>easing - 规定要使用的 easing 函数</li>\n<li>callback - 规定动画完成之后要执行的函数</li>\n<li>step - 规定动画的每一步完成之后要执行的函数</li>\n<li>queue - 布尔值。指示是否在效果队列中放置动画。如果为 false，则动画将立即开始。</li>\n<li>specialEasing - 来自 <em>styles</em> 参数的一个或多个 CSS 属性的映射，以及它们的对应 easing 函数</li>\n</ul>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#box\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>height<span class=\"token punctuation\">:</span><span class=\"token string\">\"300px\"</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p><strong>stop：</strong>停止元素正在运行的动画。</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).stop(<em>stopAll,goToEnd</em>)</p>\n</blockquote>\n<ul>\n<li>stopAll：可选。布尔值，是否停止队列中所有动画。默认false</li>\n<li>goToEnd：可选。布尔值，是否立即完成当前的动画。默认是 false。</li>\n</ul>\n</li>\n<li><p><strong>finish：</strong>停止当前运行的动画，移除所有排队的动画，并为被选元素完成所有动画。</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).finish(<em>queueName</em>)</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"15-函数队列\"><a href=\"#1-5-函数队列\" class=\"headerlink\" title=\"1.5 函数队列\"></a>1.5 函数队列</h3><blockquote>\n<p>每个元素都有一个<strong>队列</strong>，用于存储该元素绑定的函数。</p>\n<p>可通过设置队列中函数的执行时间、延时、或者删除待执行函数等</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLXF1ZXVlLmh0bWw=\">queue()</span></td>\n<td align=\"left\">显示被选元素的排队函数</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWNsZWFycXVldWUuaHRtbA==\">clearQueue()</span></td>\n<td align=\"left\">对被选元素移除所有排队函数（仍未运行的）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlbGF5Lmh0bWw=\">delay()</span></td>\n<td align=\"left\">对被选元素的所有排队函数（仍未运行）设置延迟</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWRlcXVldWUuaHRtbA==\">dequeue()</span></td>\n<td align=\"left\">移除下一个排队函数，然后执行函数</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvZWZmLWZpbmlzaC5odG1s\">finish()</span></td>\n<td align=\"left\">对被选元素停止、移除并完成所有排队动画</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>queue：</strong>显示元素的函数队列</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).queue(<em>queueName</em>)</p>\n</blockquote>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"span\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">queue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p><strong>clearQueue：</strong>移除队列中尚未运行的函数</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).clearQueue(<em>queueName</em>)</p>\n</blockquote>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#start\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>height<span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>width<span class=\"token punctuation\">:</span><span class=\"token number\">300</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>height<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">animate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>width<span class=\"token punctuation\">:</span><span class=\"token number\">100</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#stop\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">clearQueue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//清空\"div\"还未执行的函数</span>\n</code></pre>\n</li>\n<li><p><strong>delay：</strong>对该元素队列中的函数设置延时</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).delay(<em>speed,queueName</em>)</p>\n</blockquote>\n<ul>\n<li>speed：可选，延迟速度<ul>\n<li>毫秒值</li>\n<li>“slow”</li>\n<li>“fast”</li>\n</ul>\n</li>\n<li>queueName：可选（一般不选）。规定队列名称</li>\n</ul>\n</li>\n<li><p><strong>dequeue：</strong>移除队列中<strong>下一个</strong>函数</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).dequeue(<em>queueName</em>)</p>\n</blockquote>\n</li>\n<li><p><strong>finish：</strong>停止当前运行的动画，移除所有排队的动画，并为被选元素完成所有动画。</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).finish(<em>queueName</em>)</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"2-htmlcss方法对应dom\"><a href=\"#2-HTML-CSS方法（对应DOM）\" class=\"headerlink\" title=\"2. HTML/CSS方法（对应DOM）\"></a>2. HTML/CSS方法（对应DOM）</h2><p>jQuery 中非常重要的部分，就是操作 DOM 的能力。</p>\n<p>jQuery 提供一系列与 DOM 相关的方法，这使访问和操作元素和属性变得很容易。</p>\n<h3 id=\"21-获取设置元素css样式\"><a href=\"#2-1-获取-设置元素CSS样式\" class=\"headerlink\" title=\"2.1 获取/设置元素CSS样式\"></a>2.1 获取/设置元素CSS样式</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLWNzcy5odG1s\">css()</span></td>\n<td align=\"left\">为被选元素设置或返回一个或多个样式属性</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLWhlaWdodC5odG1s\">height()</span></td>\n<td align=\"left\">设置或返回被选元素的高度</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLXdpZHRoLmh0bWw=\">width()</span></td>\n<td align=\"left\">设置或返回被选元素的宽度</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbm5lcmhlaWdodC5odG1s\">innerHeight()</span></td>\n<td align=\"left\">返回元素的高度（包含 padding，不包含 border）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbm5lcndpZHRoLmh0bWw=\">innerWidth()</span></td>\n<td align=\"left\">返回元素的宽度（包含 padding，不包含 border）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1vdXRlcmhlaWdodC5odG1s\">outerHeight()</span></td>\n<td align=\"left\">返回元素的高度（包含 padding 和 border）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1vdXRlcndpZHRoLmh0bWw=\">outerWidth()</span></td>\n<td align=\"left\">返回元素的宽度（包含 padding 和 border）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLW9mZnNldC5odG1s\">offset()</span></td>\n<td align=\"left\">设置或返回被选元素的偏移坐标（相对于文档）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1lc2NhcGVTZWxlY3Rvci5odG1s\">$.escapeSelector()</span></td>\n<td align=\"left\">转义CSS选择器中有特殊意义的字符或字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1jc3Nob29rcy5odG1s\">$.cssHooks</span></td>\n<td align=\"left\">提供了一种方法通过定义函数来获取和设置特定的CSS值</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>css：</strong>返回/设置元素css样式</p>\n<blockquote>\n<p>返回 CSS 属性值：$(<em>selector</em>).css(<em>property</em>)</p>\n<p>设置 CSS 属性和值：$(<em>selector</em>).css(<em>property,value</em>)</p>\n<p>使用函数设置 CSS 属性和值：$(<em>selector</em>).css(<em>property,<em>function</em>(index,currentvalue)</em>)</p>\n<p>设置多个属性和值：$(<em>selector</em>).css({<em>属性：value</em>, <em>属性：value</em>, …})</p>\n</blockquote>\n<ul>\n<li><p>property和value均为string类型</p>\n</li>\n<li><p>function</p>\n<ul>\n<li>index：集合中元素的index位置</li>\n<li>currentvalue：当前css对应属性的<strong>值</strong></li>\n</ul>\n<p>```javascript<br>//将 span 中的文字字体放大为当前字体的两倍。<br>$(“span”).css(“font-size”,function(i,curr){</p>\n<pre><code>return 2*parseInt(curr);\n</code></pre>\n<p>});</p>\n</li>\n</ul>\n</li>\n<li><p><strong>height/width：</strong>设置/返回元素高宽，该方法不包含 padding、border 或 margin。</p>\n<p><img data-src=\"/2021/05/27/note/%E5%89%8D%E7%AB%AF/jQuery/img_height.gif\" alt=\"jQuery Dimensions\"></p>\n<blockquote>\n<p>返回高度：$(<em>selector</em>).height()</p>\n<p>设置高度：$(<em>selector</em>).height(<em>value</em>)</p>\n<p>使用函数设置高度：$(<em>selector</em>).height(function*(index,currentheight)*)</p>\n</blockquote>\n</li>\n<li><p><strong>innerHeight/innerWidth：</strong>返回元素宽高（包含 padding，不包括border）</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).innerHeight()</p>\n</blockquote>\n</li>\n<li><p><strong>outerHeight/outerWidth</strong>：返回元素宽高（包含padding和border）</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).outerHeight(<em>includeMargin</em>)</p>\n</blockquote>\n<ul>\n<li>includeMargin：可选，布尔值。是否包含margin</li>\n</ul>\n</li>\n<li><p><strong>offset：</strong>设置或返回被选元素相对于<strong>文档</strong>的偏移坐标。</p>\n<blockquote>\n<p>返回偏移坐标：$(<em>selector</em>).offset()。<strong>返回带有 top 和 left 的对象，可通过.top/.left关键字调用</strong></p>\n<p>设置偏移坐标：$(<em>selector</em>).offset({top:<em>value</em>,left:<em>value</em>})</p>\n<p>使用函数设置偏移坐标：$(<em>selector</em>).offset(function*(index,currentoffset)*)</p>\n</blockquote>\n<ul>\n<li>{top:<em>value</em>,left:<em>value</em>}：偏移量。可能的值：<ul>\n<li>名/值对，比如 {top:100,left:100}</li>\n<li>一个带有 top 和 left 的对象</li>\n</ul>\n</li>\n<li>function(index,currentoffset)：可选。规定返回包含 top 和 left 坐标的对象的函数。<ul>\n<li><em>index</em> - 返回集合中元素的 index 位置。</li>\n<li><em>currentoffset</em> - 返回被选元素的当前坐标。</li>\n</ul>\n</li>\n</ul>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"button\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">click</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> x<span class=\"token operator\">=</span><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">offset</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Top: \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span>top <span class=\"token operator\">+</span> <span class=\"token string\">\" Left: \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"22-获取设置属性attr\"><a href=\"#2-2-获取-设置属性attr\" class=\"headerlink\" title=\"2.2 获取/设置属性attr\"></a>2.2 获取/设置属性attr</h3><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hdHRyLmh0bWw=\">attr()</span></td>\n<td align=\"left\">设置或返回被选元素的属性/值</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1wcm9wLmh0bWw=\">prop()</span></td>\n<td align=\"left\">设置或返回被选元素的属性/值</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmVhdHRyLmh0bWw=\">removeAttr()</span></td>\n<td align=\"left\">从被选元素移除一个或多个属性</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmVwcm9wLmh0bWw=\">removeProp()</span></td>\n<td align=\"left\">移除通过 prop() 方法设置的属性</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC12YWwuaHRtbA==\">val()</span></td>\n<td align=\"left\">设置或返回被选元素的属性值（针对表单元素）</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>prop和attr差不多，仅有细微的差别，暂时不想去研究</p>\n</blockquote>\n<ol>\n<li><p><strong>attr：</strong>设置/返回元素的属性和值。</p>\n<blockquote>\n<p>返回属性的值：$(<em>selector</em>).attr(<em>attribute</em>)</p>\n<p>设置属性和值：$(<em>selector</em>).attr(<em>attribute,value</em>)</p>\n<p>使用函数设置属性和值：$(<em>selector</em>).attr(*attribute,*function(<em>index,currentvalue</em>))</p>\n<p>设置多个属性和值：$(<em>selector</em>).attr({<em>attribute</em>:<em>value</em>, <em>attribute</em>:<em>value</em>,…})</p>\n</blockquote>\n<ul>\n<li>attribute：属性名，string类型</li>\n<li>value：属性值，string类型</li>\n</ul>\n</li>\n<li><p><strong>removeAttr：</strong>移除元素的属性</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).removeAttr(<em>attribute</em>)</p>\n</blockquote>\n</li>\n<li><p><strong>val：</strong>设置/返回<strong>表单元素</strong>属性值</p>\n<blockquote>\n<p>返回 value 属性：$(<em>selector</em>).val()</p>\n<p>设置 value 属性：$(<em>selector</em>).val(<em>value</em>)</p>\n<p>通过函数设置 value 属性：$(<em>selector</em>).val(function*(index,currentvalue)*)</p>\n</blockquote>\n<p><font color=\"red\">表单元素通过<code>input:表单名</code>捕获，<code>表单名</code>是<code>type</code>的值</font></p>\n<p>例：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input:text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">val</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Glenn Quagmire\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>名称: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>user<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n</ol>\n<h4 id=\"添加删除class属性\"><a href=\"#添加-删除class属性\" class=\"headerlink\" title=\"添加/删除class属性\"></a>添加/删除class属性</h4><table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hZGRjbGFzcy5odG1s\">addClass()</span></td>\n<td align=\"left\">向被选元素添加一个或多个类名</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1oYXNjbGFzcy5odG1s\">hasClass()</span></td>\n<td align=\"left\">检查被选元素是否包含指定的 class 名称</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmVjbGFzcy5odG1s\">removeClass()</span></td>\n<td align=\"left\">从被选元素移除一个或多个类</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC10b2dnbGVjbGFzcy5odG1s\">toggleClass()</span></td>\n<td align=\"left\">在被选元素中添加/移除一个或多个类之间切换</td>\n</tr>\n</tbody></table>\n<ol>\n<li><p><strong>addClass：</strong>添加class属性。<em>该方法不会移除已存在的 class 属性，仅仅添加一个或多个类名到 class 属性。</em></p>\n<blockquote>\n<p>语法：$(<em>selector</em>).addClass(<em>classname</em>,function(<em>index,oldclass</em>))</p>\n</blockquote>\n<ul>\n<li>classname：必须。添加的类名，用<code>,</code>分隔</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"p:first\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addClass</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intro\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p><strong>hasClass：</strong>是否包含指定的类名称。</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).hasClass(<em>classname</em>)</p>\n</blockquote>\n</li>\n<li><p><strong>removeClass：</strong>移除指定类</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).removeClass(<em>classname</em>,function*(index,currentclass)*)</p>\n</blockquote>\n</li>\n<li><p><strong>toggleClass：</strong>添加/移除一个或多个类之间</p>\n<blockquote>\n<p>语法：$(<em>selector</em>).toggleClass(<em>classname,<em>function</em>(index,currentclass),switch</em>)</p>\n</blockquote>\n<ul>\n<li>switch：可选。布尔值，规定是否仅仅添加（true）或移除（false）类。（没懂）</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"23-操作元素节点树\"><a href=\"#2-3-操作元素节点树\" class=\"headerlink\" title=\"2.3 操作元素节点树\"></a>2.3 操作元素节点树</h3><p>这些方法以元素为最小单位，不对元素内容做修改。但也可实现添加/删除元素内容</p>\n<ul>\n<li><strong>添加元素节点</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hZnRlci5odG1s\">after()</span></td>\n<td align=\"left\">在被选元素后插入内容</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1iZWZvcmUuaHRtbA==\">before()</span></td>\n<td align=\"left\">在被选元素前插入内容</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hcHBlbmQuaHRtbA==\">append()</span></td>\n<td align=\"left\">在被选元素的结尾插入内容</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1wcmVwZW5kLmh0bWw=\">prepend()</span></td>\n<td align=\"left\">在被选元素的开头插入内容</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbnNlcnRhZnRlci5odG1s\">insertAfter()</span></td>\n<td align=\"left\">在被选元素后插入 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1pbnNlcnRiZWZvcmUuaHRtbA==\">insertBefore()</span></td>\n<td align=\"left\">在被选元素前插入 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1hcHBlbmR0by5odG1s\">appendTo()</span></td>\n<td align=\"left\">在被选元素的结尾插入 HTML 元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1wcmVwZW5kdG8uaHRtbA==\">prependTo()</span></td>\n<td align=\"left\">在被选元素的开头插入 HTML 元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>移除元素节点</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1yZW1vdmUuaHRtbA==\">remove()</span></td>\n<td align=\"left\">移除被选元素（包含数据和事件）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1kZXRhY2guaHRtbA==\">detach()</span></td>\n<td align=\"left\">移除被选元素（保留数据和事件）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC11bndyYXAuaHRtbA==\">unwrap()</span></td>\n<td align=\"left\">移除被选元素的父元素</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1lbXB0eS5odG1s\">empty()</span></td>\n<td align=\"left\">移除被选元素所有子节点和内容</td>\n</tr>\n</tbody></table>\n<ul>\n<li><strong>返回元素节点</strong></li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvY3NzLW9mZnNldHBhcmVudC5odG1s\">offsetParent()</span></td>\n<td align=\"left\">返回第一个定位的祖先元素</td>\n</tr>\n</tbody></table>\n<h3 id=\"24-获取设置元素内容\"><a href=\"#2-4-获取-设置元素内容\" class=\"headerlink\" title=\"2.4 获取/设置元素内容\"></a>2.4 获取/设置元素内容</h3><p>其实以上设置属性方法也是设置元素内容，这里仅描述设置<strong>标签体内</strong>的内容的方法</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC1odG1sLmh0bWw=\">html()</span></td>\n<td>标签体内容</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvaHRtbC10ZXh0Lmh0bWw=\">text()</span></td>\n<td>文本内容（仅返回文本）</td>\n</tr>\n</tbody></table>\n<p>区别如下</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>test<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>这是段落中的 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>粗体<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span> 文本。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n<span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//这是段落中的 粗体 文本。</span>\n    <span class=\"token function\">$</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#test\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">html</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//这是段落中的 &lt;b>粗体&lt;/b> 文本。</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ol>\n<li><p><strong>html：</strong>返回/设置标签体内容</p>\n<blockquote>\n<p>返回内容：$(<em>selector</em>).html()</p>\n<p>设置内容：$(<em>selector</em>).html(<em>content</em>)</p>\n<p>使用函数设置内容：$(<em>selector</em>).html(function*(index,currentcontent)*)</p>\n</blockquote>\n<ul>\n<li>content：替代文本，string类型</li>\n</ul>\n</li>\n<li><p><strong>text：</strong>：返回设置标签体内<strong>文本</strong>内容</p>\n<blockquote>\n<p>语法同上</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"3-其他函数\"><a href=\"#3-其他函数\" class=\"headerlink\" title=\"3. 其他函数\"></a>3. 其他函数</h2><ul>\n<li><p>**<code>$.when():</code>    **提供一种方法来执行一个或多个对象的回调函数</p>\n<p><strong>回调函数</strong>就是一个被作为参数传递的函数。</p>\n<blockquote>\n<p>语法：*$*.when( deferreds )</p>\n</blockquote>\n<ul>\n<li>deferreds：Deferred类型 一个或多个延迟对象，或者普通的JavaScript对象</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">when</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> testing<span class=\"token punctuation\">:</span> <span class=\"token number\">123</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">done</span><span class=\"token punctuation\">(</span>\n    <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span> <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>testing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//x是&amp;#123;testing:123&amp;#125;</span>\n</code></pre>\n<p><strong>$.when是基于ajax的异步函数，表示当deferred延迟对象加载完后，执行done（加载完成之前不执行，执行其他语句）</strong></p>\n</li>\n</ul>\n<h1 id=\"三-ajax\"><a href=\"#三、-AJAX\" class=\"headerlink\" title=\"三、 AJAX\"></a>三、 AJAX</h1><p>AJAX 是与<strong>服务器交换数据</strong>的技术，它在不重载全部页面的情况下，实现了对部分网页的更新。</p>\n<blockquote>\n<p>通过ajax可以实现前端页面调用后端数据</p>\n</blockquote>\n<h2 id=\"1-什么是ajax\"><a href=\"#1-什么是AJAX\" class=\"headerlink\" title=\"1. 什么是AJAX\"></a>1. 什么是AJAX</h2><p>AJAX = 异步 JavaScript 和 XML（Asynchronous JavaScript and XML）。</p>\n<p>简短地说，在不重载整个网页的情况下，AJAX 通过后台加载数据，并在网页上进行显示。</p>\n<blockquote>\n<p>同步：一定要等任务执行完了，得到结果，才执行下一个任务。</p>\n<p>异步：不等任务执行完，直接执行下一个任务。（即两个不互相影响的任务并行）</p>\n</blockquote>\n<p>​        通过 jQuery AJAX 方法，您能够使用 HTTP Get 和 HTTP Post 从远程服务器上请求文本、HTML、XML 或 JSON - 同时您能够把这些外部数据直接载入网页的被选元素中。</p>\n<h2 id=\"2-语法\"><a href=\"#2-语法\" class=\"headerlink\" title=\"2. 语法\"></a>2. 语法</h2><blockquote>\n<p>$.ajax(<em>{name:value, name:value, … }</em>)</p>\n</blockquote>\n<p>ajax() 方法用于执行 AJAX（异步 HTTP）请求。</p>\n<p>所有的 jQuery AJAX 方法都使用 ajax() 方法。该方法通常用于其他方法不能完成的请求。</p>\n<p><strong>常用参数如下：</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">名称</th>\n<th align=\"left\">值/描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">async</td>\n<td align=\"left\">布尔值，表示请求是否异步处理。默认是 true。<br>（同步请求将会锁住浏览器，用户其他操作必须等待请求完成才可以执行）</td>\n</tr>\n<tr>\n<td align=\"left\">data</td>\n<td align=\"left\">规定要发送到服务器的数据。</td>\n</tr>\n<tr>\n<td align=\"left\">dataType</td>\n<td align=\"left\">预期的服务器响应的<strong>数据类型</strong>。</td>\n</tr>\n<tr>\n<td align=\"left\">error(<em>xhr,status,error</em>)</td>\n<td align=\"left\">如果请求失败要运行的函数。</td>\n</tr>\n<tr>\n<td align=\"left\">success(<em>result,status,xhr</em>)</td>\n<td align=\"left\">当请求成功时运行的函数。<font color=\"red\">拿到后端数据后主要<strong>操作</strong>就写在这里</font>&gt;</td>\n</tr>\n<tr>\n<td align=\"left\">timeout</td>\n<td align=\"left\">设置本地的请求超时时间（以毫秒计）。</td>\n</tr>\n<tr>\n<td align=\"left\">type</td>\n<td align=\"left\">规定请求的类型（**GET **或 <strong>POST</strong>）。</td>\n</tr>\n<tr>\n<td align=\"left\">url</td>\n<td align=\"left\">规定发送请求的 URL。默认是当前页面。</td>\n</tr>\n</tbody></table>\n<p>其中：</p>\n<ul>\n<li><strong>success：</strong><ul>\n<li>result：请求到的数据</li>\n<li><em>xhr</em>： 包含 XMLHttpRequest 对象</li>\n<li>status：响应状态码</li>\n</ul>\n</li>\n<li><strong>error：</strong><ul>\n<li>error：错误信息</li>\n<li><em>xhr</em>： 包含 XMLHttpRequest 对象</li>\n<li>status：响应状态码</li>\n</ul>\n</li>\n</ul>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        type <span class=\"token punctuation\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">async</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\" spellcheck=\"true\">//异步请求（同步请求将会锁住浏览器，用户其他操作必须等待请求完成才可以执行）</span>\n        url <span class=\"token punctuation\">:</span> <span class=\"token string\">\"data/data1\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\" spellcheck=\"true\">//服务器端放出api的地址，一般是把数据以json格式放出</span>\n        data <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        dataType <span class=\"token punctuation\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\" spellcheck=\"true\">//返回数据形式为json</span>\n        success <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//请求成功时执行该函数内容，result即为服务器返回的json对象</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        error <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//请求失败时执行该函数</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"图表请求数据失败!status\"</span><span class=\"token operator\">+</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            myChart<span class=\"token punctuation\">.</span><span class=\"token function\">hideLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"3-简介方法\"><a href=\"#3-简介方法\" class=\"headerlink\" title=\"3. 简介方法\"></a>3. 简介方法</h2><p>ajax提供了一些简单的方法，直接获取指定类型的数据，不需要写参数居多的<code>$.ajax</code></p>\n<p>如<code>$.getJSON()</code></p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">getJSON</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"http://localhost:5000/data/data1\"</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        document<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//result是获取到的json数据</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvYWpheC1nZXQuaHRtbA==\">$.get()</span></td>\n<td>使用 AJAX 的 HTTP GET 请求从服务器加载数据</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvYWpheC1nZXRqc29uLmh0bWw=\">$.getJSON()</span></td>\n<td>使用 HTTP GET 请求从服务器加载 JSON 编码的数据</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qcXVlcnkvYWpheC1nZXRzY3JpcHQuaHRtbA==\">$.getScript()</span></td>\n<td>使用 AJAX 的 HTTP GET 请求从服务器加载并执行 JavaScript</td>\n</tr>\n</tbody></table>\n<p>以<code>$.getJSON()</code>为例，</p>\n<ul>\n<li><p><strong>$.getJSON()：</strong></p>\n<blockquote>\n<p>语法：$(<em>selector</em>).getJSON(<em>url,data,success(result,status,xhr))</em></p>\n</blockquote>\n<ul>\n<li>url：必需。规定将请求发送到哪个 URL。</li>\n<li>data： 可选。规定<strong>发送到服务器</strong>的数据。</li>\n<li>*success(result,status,xhr)*：success函数</li>\n</ul>\n</li>\n</ul>\n",
            "tags": [
                "笔记",
                "前端",
                "前端",
                "JavaScript",
                "jQuery"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/",
            "url": "https://nitgod1996.com/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/",
            "title": "JavaScript基础语法",
            "date_published": "2021-05-27T08:18:19.000Z",
            "content_html": "<h1 id=\"一-javascript简介\"><a href=\"#一、-JavaScript简介\" class=\"headerlink\" title=\"一、 JavaScript简介\"></a>一、 JavaScript简介</h1><ol>\n<li><strong>HTML</strong> 定义了网页的内容</li>\n<li><strong>CSS</strong> 描述了网页的布局</li>\n<li><strong>JavaScript</strong> 控制了网页的行为，<strong>主要用于与用户的交互及提高用户体验</strong>。</li>\n</ol>\n<h2 id=\"1-javascript简单功能\"><a href=\"#1-JavaScript简单功能\" class=\"headerlink\" title=\"1. JavaScript简单功能\"></a>1. JavaScript简单功能</h2><ul>\n<li><p>直接网页输出流</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//直接打印在网页上</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;h1>这是一个标题&lt;/h1>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>这是一个段落。&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//以弹框弹出</span>\nwindow<span class=\"token punctuation\">.</span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"弹框\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//或者直接alert也可</span>\n</code></pre>\n</li>\n<li><p>对事件的响应</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>alert(<span class=\"token punctuation\">'</span>欢迎!<span class=\"token punctuation\">'</span>)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点我!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--在onclick中写js代码--></span>\n</code></pre>\n</li>\n<li><p>修改html内容/CSS样式</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">x<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"demo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\" spellcheck=\"true\">//通过ID查找元素（类似CSS选择器的作用，元素即是标签）</span>\nx<span class=\"token punctuation\">.</span>innerHTML<span class=\"token operator\">=</span><span class=\"token string\">\"Hello JavaScript\"</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//改变内容（注入html）</span>\nx<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">\"#ff0000\"</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\" spellcheck=\"true\">//改变样式</span>\n</code></pre>\n</li>\n<li><p>输出到控制台（适用于用编辑器调试）</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//相当于java的system.out.println</span>\n</code></pre>\n</li>\n</ul>\n<h2 id=\"2-引入javascript\"><a href=\"#2-引入JavaScript\" class=\"headerlink\" title=\"2. 引入JavaScript\"></a>2. 引入JavaScript</h2><h3 id=\"21-内嵌入html\"><a href=\"#2-1-内嵌入html\" class=\"headerlink\" title=\"2.1 内嵌入html\"></a>2.1 内嵌入html</h3><p>直接在html中添加<code>&lt;script&gt;</code>标签，在<code>&lt;script&gt;</code>中写<code>js</code>代码。<code>&lt;script&gt;</code>引入位置会影响执行顺序，一般视情况放在head或body中</p>\n<h3 id=\"22-外部导入js文件\"><a href=\"#2-2-外部导入js文件\" class=\"headerlink\" title=\"2.2 外部导入js文件\"></a>2.2 外部导入js文件</h3><p>单独建一个<code>.js</code>文件，在html中以<code>&lt;script src=&quot;**.js&quot;&gt;&lt;/script&gt;</code>引入。</p>\n<h3 id=\"23-示例\"><a href=\"#2-3-示例\" class=\"headerlink\" title=\"2.3 示例\"></a>2.3 示例</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">)</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    world!\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>js/hello.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/image-20210521164827154.png\" alt=\"image-20210521164827154\"><img data-src=\"/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/image-20210521164832754.png\" alt=\"image-20210521164832754\"></p>\n<h1 id=\"二-基础语法\"><a href=\"#二、-基础语法\" class=\"headerlink\" title=\"二、 基础语法\"></a>二、 基础语法</h1><h2 id=\"1-数据类型\"><a href=\"#1-数据类型\" class=\"headerlink\" title=\"1. 数据类型\"></a>1. 数据类型</h2><p>可以通过<code>type()</code>函数返回数据类型。</p>\n<p>或者<code>typeof</code>+空格+对象。如<code>typeof &quot;John&quot;        // 返回 string</code></p>\n<p><code>isNaN</code>专门用于判断是否为数字</p>\n<h3 id=\"11-基础数据类型\"><a href=\"#1-1-基础数据类型\" class=\"headerlink\" title=\"1.1 基础数据类型\"></a>1.1 基础数据类型</h3><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>number</td>\n<td>整数/小数/NaN（not a number）  <br>  <code>true为1，false为0。数字string等值转换</code></td>\n</tr>\n<tr>\n<td>string</td>\n<td>字符串。””和’’都表示字符串，和Python一样</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>true/false  <br>  <code>0/NaN/null为false</code></td>\n</tr>\n<tr>\n<td>null</td>\n<td>空值</td>\n</tr>\n<tr>\n<td>undefined</td>\n<td>未定义数据类型的变量</td>\n</tr>\n</tbody></table>\n<p>但JavaScript不能以<code>number</code>或<code>string</code>定义变量，而是用弱类型<code>var</code>定义所有的基础数据类型变量，如<code>var a=1;</code>或<code>var list=[1,2,3];</code></p>\n<h3 id=\"12-弱类型var\"><a href=\"#1-2-弱类型var\" class=\"headerlink\" title=\"1.2 弱类型var\"></a>1.2 弱类型<code>var</code></h3><p>​    强类型：开辟变量存储空间时定义数据类型。只能存储固定类型数据，如Java</p>\n<p>​    弱类型：不定义数据类型。可存放任意类型数据，如Python</p>\n<p>​    也可以像Python一样不用var定义，直接a=1;    </p>\n<h3 id=\"13-类型转换\"><a href=\"#1-3-类型转换\" class=\"headerlink\" title=\"1.3 类型转换\"></a>1.3 类型转换</h3><ul>\n<li><p>其他类型转<strong>字符串</strong></p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//使用全局方法String</span>\nnum<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//或者对象的toString方法</span>\n</code></pre>\n</li>\n<li><p>字符串转<strong>数字</strong></p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token function\">Number</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3.14\"</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\" spellcheck=\"true\">// 使用全局方法Number</span>\n<span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123zbc\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//或者使用parseInt、parseFloat等 \"123zbc\"→123</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"14-关键字let\"><a href=\"#1-4-关键字let\" class=\"headerlink\" title=\"1.4 关键字let\"></a>1.4 关键字<code>let</code></h3><p><code>let</code>是ES6新引入的关键字。let 声明的变量只在 let 命令所在的代码块内有效。在 ES6 之前，JavaScript 只有两种作用域： <strong>全局变量</strong> 与 <strong>函数内的局部变量</strong>。</p>\n<p><code>var</code>和<code>let</code>的区别是，**<code>let</code>是局部变量，而<code>var</code>则有点模糊（循环体内全局变量，方法体内局部变量）。所以在块内一般使用<code>let</code>创建对象**。</p>\n<h3 id=\"15-关键字const\"><a href=\"#1-5-关键字const\" class=\"headerlink\" title=\"1.5 关键字const\"></a>1.5 关键字<code>const</code></h3><p><code>const</code> 声明一个只读的常量，一旦声明，常量的值就不能改变。</p>\n<ul>\n<li><code>const</code> 可用于声明一个或多个常量，声明时必须进行初始化，且初始化后值不可再修改：</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> PI <span class=\"token operator\">=</span> <span class=\"token number\">3.141592653589793</span><span class=\"token punctuation\">;</span>\nPI <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\" spellcheck=\"true\">// 报错</span>\nPI <span class=\"token operator\">=</span> PI <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\" spellcheck=\"true\">// 报错</span>\n</code></pre>\n<ul>\n<li><code>const</code>对引用对象如数组等并不能锁死。可利用对应函数修改，但不能用<code>=</code>重新赋值</li>\n<li>不能使用 <strong>const</strong> 关键字来重置 <strong>var</strong> 和 <strong>let</strong>关键字声明的变量:</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\" spellcheck=\"true\">// 合法</span>\n<span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\" spellcheck=\"true\">// 不合法</span>\n</code></pre>\n<h2 id=\"2-运算比较符\"><a href=\"#2-运算-比较符\" class=\"headerlink\" title=\"2. 运算/比较符\"></a>2. 运算/比较符</h2><table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>+/-</td>\n<td>可将其他数据类型转为number。</td>\n</tr>\n</tbody></table>\n<p>**比较时，类型不同会先类型转换  **</p>\n<table>\n<thead>\n<tr>\n<th>比较符</th>\n<th>规则</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>==</td>\n<td>等于（一般不用这个）。类型不一样，值一样，也会判断为true</td>\n</tr>\n<tr>\n<td>===</td>\n<td>绝对等于。类型一样，值一样，判断为true</td>\n</tr>\n<tr>\n<td>&lt;、&gt;</td>\n<td>基本一样。string按字典序逐个比较。</td>\n</tr>\n<tr>\n<td>三元运算符</td>\n<td>a&gt;b?1:0</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-自定义函数function\"><a href=\"#3-自定义函数function\" class=\"headerlink\" title=\"3. 自定义函数function\"></a>3. 自定义函数<code>function</code></h2><h3 id=\"31-创建\"><a href=\"#3-1-创建\" class=\"headerlink\" title=\"3.1 创建\"></a>3.1 创建</h3><p>常见手法如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> functionName <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>或者</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span>var1<span class=\"token punctuation\">,</span>var2<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"32-参数类型声明\"><a href=\"#3-2-参数类型声明\" class=\"headerlink\" title=\"3.2 参数类型声明\"></a>3.2 参数类型声明</h3><p>若不知道参数类型，则有时候编写函数有点麻烦，可通过以下方法设置参数类型。</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param &amp;#123;string&amp;#125; param1\n * @param &amp;#123;string[]&amp;#125; param2\n * @return &amp;#123;string&amp;#125;\n */</span>\n<span class=\"token keyword\">var</span> functionName <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这样调用参数时IDE便能识别类型，显示对应的函数提示了。</p>\n<h3 id=\"33-传值调用与传引用调用\"><a href=\"#3-3-传值调用与传引用调用\" class=\"headerlink\" title=\"3.3 传值调用与传引用调用\"></a>3.3 传值调用与传引用调用</h3><p>先来复习一下传值和传引用的概念。<strong>传值</strong>就是仅仅传递变量的值，在函数体内是无法对参数进行修改的。而<strong>传引用</strong>则是传递地址，可以通过地址对参数进行修改。</p>\n<p>在C++中，<strong>基础类型</strong>默认是传值调用，传引调用需要以&amp;标识。</p>\n<p>在Java和JavaScript中，<strong>基础类型</strong>没有传引调用。java因为完全面向对象，函数可以直接通过<code>this</code>调用成员变量，在函数体内修改。而JavaScript则不行。</p>\n<p>此外，<strong>引用类型</strong>如数组、map等，则均是传引调用，是可以通过目标函数对其进行修改的。（即使是C++也不需要加&amp;）</p>\n<p><strong>对于引用类型，如果只需传值，可以通过在函数体内新建一个局部副本代替</strong>，如下</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">/**\n * @param &amp;#123;Map&amp;#125; temp\n * @param &amp;#123;string&amp;#125; word\n * @return &amp;#123;boolean&amp;#125;\n */</span>\n\n<span class=\"token keyword\">var</span> match <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">,</span> word<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span>temp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"4-regexp正则表达式\"><a href=\"#4-RegExp正则表达式\" class=\"headerlink\" title=\"4. RegExp正则表达式\"></a>4. RegExp正则表达式</h2><p>JavaScript中正则表达式非常重要，许多函数需要使用正则表达式进行<strong>匹配</strong>。此外，JavaScript<strong>判断字符</strong>是数字还是字母也只能通过正则表达式。（JavaScript没有像Java一样的<code>isAlpha</code>等方法）</p>\n<h3 id=\"41-什么是正则表达式\"><a href=\"#4-1-什么是正则表达式\" class=\"headerlink\" title=\"4.1 什么是正则表达式\"></a>4.1 什么是正则表达式</h3><blockquote>\n<p> 正则表达式是由一个<strong>字符序列形成</strong>的<strong>搜索模式</strong>。</p>\n</blockquote>\n<p>正则表达式可用于所有文本搜索和文本替换的操作。</p>\n<h3 id=\"42-语法\"><a href=\"#4-2-语法\" class=\"headerlink\" title=\"4.2 语法\"></a>4.2 语法</h3><p><code> /正则表达式主体/修饰符(可选)</code></p>\n<p>如<code>var patt = /runoob/i</code></p>\n<p><strong>/runoob/i</strong> 是一个正则表达式。</p>\n<p><strong>runoob</strong> 是一个<strong>正则表达式主体</strong> (用于检索)。</p>\n<p><strong>i</strong> 是一个<strong>修饰符</strong> (搜索不区分大小写)。</p>\n<h3 id=\"43-匹配规则\"><a href=\"#4-3-匹配规则\" class=\"headerlink\" title=\"4.3 匹配规则\"></a>4.3 匹配规则</h3><h4 id=\"431-字符区间匹配\"><a href=\"#4-3-1-字符区间匹配\" class=\"headerlink\" title=\"4.3.1 字符区间匹配\"></a>4.3.1 字符区间匹配</h4><table>\n<thead>\n<tr>\n<th><strong>表达式</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[abc]</td>\n<td>查找方括号之间的任何字符。</td>\n</tr>\n<tr>\n<td>[^abc]</td>\n<td>查找任何不在方括号之间的字符。</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>查找任何从 0 至 9 的数字。</td>\n</tr>\n<tr>\n<td>[a-z]</td>\n<td>查找任何从小写 a 到小写 z 的字符。</td>\n</tr>\n<tr>\n<td>[A-Z]</td>\n<td>查找任何从大写 A 到大写 Z 的字符。</td>\n</tr>\n<tr>\n<td>[A-z]</td>\n<td>查找任何从大写 A 到小写 z 的字符。</td>\n</tr>\n<tr>\n<td>[adgk]</td>\n<td>查找给定集合内的任何字符。</td>\n</tr>\n<tr>\n<td>[^adgk]</td>\n<td>查找给定集合外的任何字符。</td>\n</tr>\n<tr>\n<td>(red|blue|green)</td>\n<td>查找任何指定的选项。</td>\n</tr>\n</tbody></table>\n<h4 id=\"432-特殊字符匹配\"><a href=\"#4-3-2-特殊字符匹配\" class=\"headerlink\" title=\"4.3.2 特殊字符匹配\"></a>4.3.2 特殊字符匹配</h4><table>\n<thead>\n<tr>\n<th><strong>元字符</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>查找单个字符，除了换行和行结束符。</td>\n</tr>\n<tr>\n<td>\\w</td>\n<td>查找数字、字母及下划线。</td>\n</tr>\n<tr>\n<td>\\W</td>\n<td>查找非单词字符。</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>查找数字。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>查找非数字字符。</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>查找空白字符。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>查找非空白字符。</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配单词边界。</td>\n</tr>\n<tr>\n<td>\\B</td>\n<td>匹配非单词边界。</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>查找 NULL 字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>查找换行符。</td>\n</tr>\n<tr>\n<td>\\f</td>\n<td>查找换页符。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>查找回车符。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>查找制表符。</td>\n</tr>\n<tr>\n<td>\\v</td>\n<td>查找垂直制表符。</td>\n</tr>\n</tbody></table>\n<h4 id=\"433-字符数量匹配\"><a href=\"#4-3-3-字符数量匹配\" class=\"headerlink\" title=\"4.3.3 字符数量匹配\"></a>4.3.3 字符数量匹配</h4><table>\n<thead>\n<tr>\n<th><strong>量词</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>n+</td>\n<td>匹配任何包含至少一个 n  的字符串。  <font color=\"green\">例如，/a+/ 匹配 “candy” 中的  “a”，”caaaaaaandy”  中所有的 “a”。  </font></td>\n</tr>\n<tr>\n<td>n*</td>\n<td>匹配任何包含零个或多个  n 的字符串。  <font color=\"green\">例如，/bo*/ 匹配 “A ghost booooed” 中的 “boooo”，”A  bird warbled” 中的  “b”，但是不匹配 “A goat  grunted”。  </font></td>\n</tr>\n<tr>\n<td>n?</td>\n<td>匹配任何包含零个或一个  n 的字符串。  <font color=\"green\">例如，/e?le?/ 匹配 “angel” 中的  “el”，”angle” 中的 “le”。 </font></td>\n</tr>\n<tr>\n<td>n{X}</td>\n<td>匹配包含 X 个 n 的序列的字符串。 <font color=\"green\"> 例如，/a{2}/ 不匹配 “candy,” 中的  “a”，但是匹配  “caandy,” 中的两个  “a”，且匹配  “caaandy.” 中的前两个  “a”。  </font></td>\n</tr>\n<tr>\n<td>n{X,}</td>\n<td>X 是一个正整数。前面的模式 n 连续出现至少 X 次时匹配。  <font color=\"green\">例如，/a{2,}/ 不匹配 “candy” 中的  “a”，但是匹配  “caandy” 和  “caaaaaaandy.” 中所有的  “a”。  </font></td>\n</tr>\n<tr>\n<td>n{X,Y}</td>\n<td>X 和 Y 为正整数。前面的模式 n  连续出现至少 X 次，至多 Y 次时匹配。  <font color=\"green\">例如，/a{1,3}/ 不匹配 “cndy”，匹配  “candy,” 中的  “a”，”caandy,” 中的两个 “a”，匹配 “caaaaaaandy” 中的前面三个 “a”。注意，当匹配 “caaaaaaandy” 时，即使原始字符串拥有更多的 “a”，匹配项也是 “aaa”。  </font></td>\n</tr>\n<tr>\n<td>n$</td>\n<td>匹配任何结尾为 n 的字符串。</td>\n</tr>\n<tr>\n<td>^n</td>\n<td>匹配任何开头为 n 的字符串。</td>\n</tr>\n<tr>\n<td>?=n</td>\n<td>匹配任何其后紧接指定字符串 n 的字符串。</td>\n</tr>\n<tr>\n<td>?!n</td>\n<td>匹配任何其后没有紧接指定字符串 n 的字符串。</td>\n</tr>\n</tbody></table>\n<h3 id=\"44-修饰符\"><a href=\"#4-4-修饰符\" class=\"headerlink\" title=\"4.4 修饰符\"></a>4.4 修饰符</h3><table>\n<thead>\n<tr>\n<th align=\"left\">修饰符</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">i</td>\n<td align=\"left\">执行对大小写不敏感的匹配。</td>\n</tr>\n<tr>\n<td align=\"left\">g</td>\n<td align=\"left\">执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>\n</tr>\n<tr>\n<td align=\"left\">m</td>\n<td align=\"left\">执行多行匹配。</td>\n</tr>\n</tbody></table>\n<h3 id=\"45-正则表达式对象\"><a href=\"#4-5-正则表达式对象\" class=\"headerlink\" title=\"4.5 正则表达式对象\"></a>4.5 正则表达式对象</h3><p>正则表达式也有对象，可以调用对象的<code>.test()</code>函数判断字符类型（是数字还是字母还是特殊字符等）。</p>\n<h4 id=\"451-创建\"><a href=\"#4-5-1-创建\" class=\"headerlink\" title=\"4.5.1 创建\"></a>4.5.1 创建</h4><pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> reg1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[a-z]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token comment\" spellcheck=\"true\">//或</span>\n<span class=\"token keyword\">var</span> reg2<span class=\"token operator\">=</span><span class=\"token regex\">/[A-Z]/</span><span class=\"token punctuation\">;</span>                                            \n</code></pre>\n<h4 id=\"452-regexp方法\"><a href=\"#4-5-2-RegExp方法\" class=\"headerlink\" title=\"4.5.2 RegExp方法\"></a>4.5.2 RegExp方法</h4><table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>exec</td>\n<td>检索字符串中指定的值。返回找到的值，并确定其位置。</td>\n</tr>\n<tr>\n<td>test</td>\n<td>检索字符串中指定的值。返回 true 或 false。</td>\n</tr>\n<tr>\n<td>toString</td>\n<td>返回正则表达式的字符串。</td>\n</tr>\n</tbody></table>\n<h3 id=\"46-正则表达式常用场景\"><a href=\"#4-6-正则表达式常用场景\" class=\"headerlink\" title=\"4.6 正则表达式常用场景\"></a>4.6 正则表达式常用场景</h3><h4 id=\"461-判断字符类型\"><a href=\"#4-6-1-判断字符类型\" class=\"headerlink\" title=\"4.6.1 判断字符类型\"></a>4.6.1 判断字符类型</h4><p>设c为待判断字符。</p>\n<ul>\n<li><p>判断是否为字母</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token regex\">/[a-zA-Z]/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n<li><p>判断是否为数字</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token regex\">/[0-9]/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n</ul>\n<h4 id=\"462-搭配string方法\"><a href=\"#4-6-2-搭配string方法\" class=\"headerlink\" title=\"4.6.2 搭配string方法\"></a>4.6.2 搭配string方法</h4><ul>\n<li><p>search() 方法查找</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Visit Runoob!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//搜索 \"Runoob\" 字符串，且不区分大小写：</span>\n<span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/Runoob/i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>返回 <code>6</code></p>\n</li>\n<li><p>replace() 方法替换</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Visit microsoft!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//不区分大小写将字符串中的 Microsoft 替换为 Runoob :</span>\n<span class=\"token keyword\">var</span> txt <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/microsoft/i</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Runoob\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>返回<code>Visit Runoob!</code></p>\n</li>\n<li><p>match() 方法匹配</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> str<span class=\"token operator\">=</span><span class=\"token string\">\"The rain in SPAIN stays mainly in the plain\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token keyword\">var</span> n<span class=\"token operator\">=</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/ain/g</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//返回[ain,ain,ain]</span>\n</code></pre>\n</li>\n</ul>\n<h1 id=\"三-引用类型集合-容器等\"><a href=\"#三、-引用类型（集合、容器等）\" class=\"headerlink\" title=\"三、 引用类型（集合、容器等）\"></a>三、 引用类型（集合、容器等）</h1><h2 id=\"1-数组\"><a href=\"#1-数组\" class=\"headerlink\" title=\"1. 数组\"></a>1. 数组</h2><h3 id=\"11-创建数组\"><a href=\"#1-1-创建数组\" class=\"headerlink\" title=\"1.1 创建数组\"></a>1.1 创建数组</h3><p><code>JavaScript</code>数组是<code>Array</code>对象，可以通过以下手法创建</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//指定初始值的数组</span>\n<span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//初始长度为3的数组</span>\n<span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>js</code>的数组可以动态扩展，甚至可以添加不同的类型。类似<code>java</code>非泛型创建的<code>ArrayList</code>集合</p>\n<h3 id=\"12-array函数\"><a href=\"#1-2-Array函数\" class=\"headerlink\" title=\"1.2 Array函数\"></a>1.2 Array函数</h3><p>其中常用函数如下：</p>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>join()</td>\n<td>把数组的所有元素放入一个字符串。</td>\n</tr>\n<tr>\n<td>pop()</td>\n<td>删除数组的最后一个元素并返回删除的元素。</td>\n</tr>\n<tr>\n<td>push()</td>\n<td>向数组的末尾添加一个或更多元素，并返回新的长度。</td>\n</tr>\n</tbody></table>\n<p>其他函数：</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>concat()</td>\n<td>连接两个或更多的数组，并返回结果。</td>\n</tr>\n<tr>\n<td>copyWithin()</td>\n<td>从数组的指定位置拷贝元素到数组的另一个指定位置中。</td>\n</tr>\n<tr>\n<td>entries()</td>\n<td>返回数组的可迭代对象。</td>\n</tr>\n<tr>\n<td>every()</td>\n<td>检测数值元素的每个元素是否都符合条件。</td>\n</tr>\n<tr>\n<td>fill()</td>\n<td>使用一个固定值来填充数组。</td>\n</tr>\n<tr>\n<td>filter()</td>\n<td>检测数值元素，并返回符合条件所有元素的数组。</td>\n</tr>\n<tr>\n<td>find()</td>\n<td>返回符合传入测试（函数）条件的数组元素。</td>\n</tr>\n<tr>\n<td>findIndex()</td>\n<td>返回符合传入测试（函数）条件的数组元素索引。</td>\n</tr>\n<tr>\n<td>forEach()</td>\n<td>数组每个元素都执行一次回调函数。</td>\n</tr>\n<tr>\n<td>from()</td>\n<td>通过给定的对象中创建一个数组。</td>\n</tr>\n<tr>\n<td>includes()</td>\n<td>判断一个数组是否包含一个指定的值。</td>\n</tr>\n<tr>\n<td>indexOf()</td>\n<td>搜索数组中的元素，并返回它所在的位置。</td>\n</tr>\n<tr>\n<td>isArray()</td>\n<td>判断对象是否为数组。</td>\n</tr>\n<tr>\n<td>keys()</td>\n<td>返回数组的可迭代对象，包含原始数组的键(key)。</td>\n</tr>\n<tr>\n<td>lastIndexOf()</td>\n<td>搜索数组中的元素，并返回它最后出现的位置。</td>\n</tr>\n<tr>\n<td>map()</td>\n<td>通过指定函数处理数组的每个元素，并返回处理后的数组。</td>\n</tr>\n<tr>\n<td>reduce()</td>\n<td>将数组元素计算为一个值（从左到右）。</td>\n</tr>\n<tr>\n<td>reduceRight()</td>\n<td>将数组元素计算为一个值（从右到左）。</td>\n</tr>\n<tr>\n<td>reverse()</td>\n<td>反转数组的元素顺序。</td>\n</tr>\n<tr>\n<td>shift()</td>\n<td>删除并返回数组的第一个元素。</td>\n</tr>\n<tr>\n<td>slice()</td>\n<td>选取数组的一部分，并返回一个新数组。</td>\n</tr>\n<tr>\n<td>some()</td>\n<td>检测数组元素中是否有元素符合指定条件。</td>\n</tr>\n<tr>\n<td>sort()</td>\n<td>对数组的元素进行排序。</td>\n</tr>\n<tr>\n<td>splice()</td>\n<td>从数组中添加或删除元素。</td>\n</tr>\n<tr>\n<td>toString()</td>\n<td>把数组转换为字符串，并返回结果。</td>\n</tr>\n<tr>\n<td>unshift()</td>\n<td>向数组的开头添加一个或更多元素，并返回新的长度。</td>\n</tr>\n<tr>\n<td>valueOf()</td>\n<td>返回数组对象的原始值。</td>\n</tr>\n</tbody></table>\n<h3 id=\"13-遍历数组\"><a href=\"#1-3-遍历数组\" class=\"headerlink\" title=\"1.3 遍历数组\"></a>1.3 遍历数组</h3><p>现有一个数组<code>nums</code>，JavaScript有以下遍历方法。</p>\n<ol>\n<li><p>普通for循环</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//i为索引</span>\n<span class=\"token comment\" spellcheck=\"true\">//或者也可写成这样</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">=</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//i为索引</span>\n</code></pre>\n</li>\n<li><p>for in(效率不高)</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//i为索引</span>\n</code></pre>\n</li>\n<li><p>forEach(性能低于普通for)</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">nums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//item是nums的元素，而非索引</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>for of(需要ES6支持，性能优于forin，劣于普通for)</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//value是元素，而非索引</span>\n</code></pre>\n</li>\n<li><p>map遍历(性能不及forEach)</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">nums<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//num是元素，而非索引</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n</li>\n</ol>\n<h4 id=\"注let是局部变量var是全局变量-一般来说循环中使用let标记循环变量i\"><a href=\"#注：let是局部变量，var是全局变量。一般来说循环中使用let标记循环变量i。\" class=\"headerlink\" title=\"注：let是局部变量，var是全局变量。一般来说循环中使用let标记循环变量i。\"></a>注：let是局部变量，var是全局变量。一般来说循环中使用let标记循环变量i。</h4><h2 id=\"2-map对象\"><a href=\"#2-Map对象\" class=\"headerlink\" title=\"2. Map对象\"></a>2. Map对象</h2><p>JavaScript中map并不常用，所以文档里不怎么好找。</p>\n<p><strong>js中map访问和取值必须通过get/set函数，而非直接[]访存</strong></p>\n<p>大致用法如下</p>\n<h3 id=\"21-创建设置查找删除\"><a href=\"#2-1-创建–设置–查找–删除\" class=\"headerlink\" title=\"2.1 创建–设置–查找–删除\"></a>2.1 创建–设置–查找–删除</h3><ul>\n<li>声明 </li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> map <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>设值</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">map<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"value\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>取值</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">map<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>判断key是否存在</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>删除key</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\">map<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"22-常用函数\"><a href=\"#2-2-常用函数\" class=\"headerlink\" title=\"2.2 常用函数\"></a>2.2 常用函数</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>clear()</code></td>\n<td>删除所有的键值对;</td>\n</tr>\n<tr>\n<td><code>delete(key)</code></td>\n<td>删除指定键;</td>\n</tr>\n<tr>\n<td><code>forEach(callback,context)</code></td>\n<td>循环执行函数并把键值对作为参数，context为执行函数的上下文this;</td>\n</tr>\n<tr>\n<td><code>get(key)</code></td>\n<td>返回Map对象key相对的value值;</td>\n</tr>\n<tr>\n<td><code>has(key)</code></td>\n<td>返回布尔值，判断Map对象是否存在指定的key;</td>\n</tr>\n<tr>\n<td><code>set(key,value)</code></td>\n<td>给Map对象设置key/value键值对，<strong>返回</strong>这个Map对象</td>\n</tr>\n<tr>\n<td><code>keys()</code></td>\n<td>返回一个迭代器，迭代器按照插入的顺序返回每一个key元素;</td>\n</tr>\n<tr>\n<td><code>entries()</code></td>\n<td>返回一个迭代器，迭代器按照对象的插入顺序返回[key,value];</td>\n</tr>\n<tr>\n<td><code>iterator</code></td>\n<td>和entireds()方法一样，返回一个迭代器，迭代器按照对象的插入顺序返回[key,value]</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-set对象\"><a href=\"#3-Set对象\" class=\"headerlink\" title=\"3. Set对象\"></a>3. Set对象</h2><p>相较于map，set只有键没有值。</p>\n<h3 id=\"31-基本用法\"><a href=\"#3-1-基本用法\" class=\"headerlink\" title=\"3.1 基本用法\"></a>3.1 基本用法</h3><ul>\n<li>创建</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">let</span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>返回长度</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span>size\n</code></pre>\n<ul>\n<li>判断是否存在</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>删除</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>清空</li>\n</ul>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"4-字符串\"><a href=\"#4-字符串\" class=\"headerlink\" title=\"4. 字符串\"></a>4. 字符串</h2><p>JavaScript中string用法和Python有点类似，””和’’均可以代表字符串，且没有字符和字符串之分（字符就是长度为1的字符串）</p>\n<h3 id=\"41-基本用法\"><a href=\"#4-1-基本用法\" class=\"headerlink\" title=\"4.1 基本用法\"></a>4.1 基本用法</h3><ul>\n<li><p>创建</p>\n<p>```javascript<br>var s=”zifuchuan”;//直接创建即可<br>var s1=’zifuchuan2’;<br>var y = new String(“John”);//也可以以对象创建，但不建议这样，效率比较低</p>\n</li>\n<li><p>访存</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\" spellcheck=\"true\">//直接通过[]即可</span>\n<span class=\"token keyword\">var</span> s<span class=\"token operator\">=</span><span class=\"token string\">'zifuchuan2'</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//打印i</span>\ns<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>返回长度</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> s<span class=\"token operator\">=</span><span class=\"token string\">'zifuchuan2'</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n<h3 id=\"42-特殊字符转义\"><a href=\"#4-2-特殊字符转义\" class=\"headerlink\" title=\"4.2 特殊字符转义\"></a>4.2 特殊字符转义</h3><p>字符串中有些字符不能直接打，如<code>\\</code>、<code>&quot;</code>等，需要用转义，以下为转义字符表</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">代码</th>\n<th align=\"left\">输出</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">\\‘</td>\n<td align=\"left\">单引号</td>\n</tr>\n<tr>\n<td align=\"left\">\\“</td>\n<td align=\"left\">双引号</td>\n</tr>\n<tr>\n<td align=\"left\">\\\\</td>\n<td align=\"left\">反斜杠</td>\n</tr>\n<tr>\n<td align=\"left\">\\n</td>\n<td align=\"left\">换行</td>\n</tr>\n<tr>\n<td align=\"left\">\\r</td>\n<td align=\"left\">回车</td>\n</tr>\n<tr>\n<td align=\"left\">\\t</td>\n<td align=\"left\">tab(制表符)</td>\n</tr>\n<tr>\n<td align=\"left\">\\b</td>\n<td align=\"left\">退格符</td>\n</tr>\n<tr>\n<td align=\"left\">\\f</td>\n<td align=\"left\">换页符</td>\n</tr>\n</tbody></table>\n<h3 id=\"43-常用函数\"><a href=\"#4-3-常用函数\" class=\"headerlink\" title=\"4.3 常用函数\"></a>4.3 常用函数</h3><ul>\n<li>字段</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">constructor</td>\n<td align=\"left\">返回创建字符串属性的函数</td>\n</tr>\n<tr>\n<td align=\"left\">length</td>\n<td align=\"left\">返回字符串的长度</td>\n</tr>\n<tr>\n<td align=\"left\">prototype</td>\n<td align=\"left\">允许您向对象添加属性和方法</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>函数</p>\n<ul>\n<li><p>访问/查找/匹配</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">charAt()</td>\n<td align=\"left\">返回指定索引位置的字符。<strong>按索引</strong></td>\n</tr>\n<tr>\n<td align=\"left\">indexOf()</td>\n<td align=\"left\">返回字符串中检索指定字符第一次出现的位置。<strong>按内容</strong></td>\n</tr>\n<tr>\n<td align=\"left\">lastIndexOf()</td>\n<td align=\"left\">返回字符串中检索指定字符最后一次出现的位置。<strong>按内容</strong></td>\n</tr>\n<tr>\n<td align=\"left\">search()</td>\n<td align=\"left\">检索与正则表达式相匹配的值，返回<strong>第一个匹配值的索引</strong></td>\n</tr>\n<tr>\n<td align=\"left\">match()</td>\n<td align=\"left\">找到一个或多个正则表达式的匹配</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>截取/拼接/拆分/替换</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">substr()</td>\n<td align=\"left\">从起始索引号提取字符串中指定数目的字符</td>\n</tr>\n<tr>\n<td align=\"left\">substring()</td>\n<td align=\"left\">提取字符串中两个指定的索引号之间的字符</td>\n</tr>\n<tr>\n<td align=\"left\">concat()</td>\n<td align=\"left\">连接两个或多个字符串，返回连接后的字符串</td>\n</tr>\n<tr>\n<td align=\"left\">split()</td>\n<td align=\"left\">把字符串分割为子字符串数组</td>\n</tr>\n<tr>\n<td align=\"left\">replace()</td>\n<td align=\"left\">替换与正则表达式匹配的子串</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>转换大小写/去除空格</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">toLowerCase()</td>\n<td align=\"left\">把字符串转换为小写</td>\n</tr>\n<tr>\n<td align=\"left\">toUpperCase()</td>\n<td align=\"left\">把字符串转换为大写</td>\n</tr>\n<tr>\n<td align=\"left\">trim()</td>\n<td align=\"left\">移除字符串首尾空白</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>其他</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">charCodeAt()</td>\n<td align=\"left\">返回指定索引位置字符的 Unicode 值</td>\n</tr>\n<tr>\n<td align=\"left\">fromCharCode()</td>\n<td align=\"left\">将 Unicode 转换为字符串</td>\n</tr>\n<tr>\n<td align=\"left\">localeCompare()</td>\n<td align=\"left\">用本地特定的顺序来比较两个字符串</td>\n</tr>\n<tr>\n<td align=\"left\">slice()</td>\n<td align=\"left\">提取字符串的片断，并在新的字符串中返回被提取的部分</td>\n</tr>\n<tr>\n<td align=\"left\">toLocaleLowerCase()</td>\n<td align=\"left\">根据主机的语言环境把字符串转换为小写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td>\n</tr>\n<tr>\n<td align=\"left\">toLocaleUpperCase()</td>\n<td align=\"left\">根据主机的语言环境把字符串转换为大写，只有几种语言（如土耳其语）具有地方特有的大小写映射</td>\n</tr>\n<tr>\n<td align=\"left\">toString()</td>\n<td align=\"left\">返回字符串对象值</td>\n</tr>\n<tr>\n<td align=\"left\">valueOf()</td>\n<td align=\"left\">返回某个字符串对象的原始值</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"四-dom\"><a href=\"#四、-DOM\" class=\"headerlink\" title=\"四、 DOM\"></a>四、 DOM</h1><blockquote>\n<p>DOM (文档对象模型)。通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。最主要的就是2点：</p>\n<ol>\n<li>设置html文档内容</li>\n<li>设置事件</li>\n</ol>\n</blockquote>\n<p>在 HTML DOM (Document Object Model) 中 , 每一个元素都是 <strong>节点</strong>，或者说是<strong>对象</strong>:</p>\n<ul>\n<li>文档是一个<strong>文档</strong>节点。<font color=\"red\">即document</font></li>\n<li>所有的HTML<strong>元素</strong>都是元素节点。<font color=\"red\">即element，通过document获取</font></li>\n<li>所有 HTML <strong>属性</strong>都是属性节点。<font color=\"red\">即attr，在element中设置</font></li>\n<li><strong>文本</strong>插入到 HTML 元素是文本节点。are text nodes。</li>\n<li><strong>注释</strong>是注释节点。</li>\n</ul>\n<blockquote>\n<p>大部分用到的节点都是<strong>元素对象</strong>和<strong>属性对象</strong></p>\n</blockquote>\n<p>节点关系如下图</p>\n<p><img data-src=\"/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/pic_htmltree.gif\" alt=\"DOM HTML tree\"></p>\n<blockquote>\n<p>每个节点都是html中一个组成</p>\n</blockquote>\n<p>如下图所示：</p>\n<p><img data-src=\"/2021/05/27/note/%E5%89%8D%E7%AB%AF/JavaScript/image-20210525175719082.png\" alt=\"image-20210525175719082\"></p>\n<p>通过DOM，JavaScript 获得了足够的能力来创建动态的 HTML。</p>\n<ul>\n<li>JavaScript 能够改变页面中的所有 HTML 元素</li>\n<li>JavaScript 能够改变页面中的所有 HTML 属性</li>\n<li>JavaScript 能够改变页面中的所有 CSS 样式</li>\n<li>JavaScript 能够对页面中的所有事件做出反应</li>\n</ul>\n<h2 id=\"1-document对象节点\"><a href=\"#1-document对象（节点）\" class=\"headerlink\" title=\"1. document对象（节点）\"></a>1. document对象（节点）</h2><p>当浏览器载入 HTML 文档, 它就会成为 <strong>Document 对象</strong>。</p>\n<p>Document 对象是 <strong>Window</strong> 对象的一部分，可通过 window.document 属性对其进行访问。</p>\n<h3 id=\"11-通过document获取element对象\"><a href=\"#1-1-通过document获取element对象\" class=\"headerlink\" title=\"1.1 通过document获取element对象\"></a>1.1 通过document获取element对象</h3><p>element对象，即html中的元素，也就是标签。一条标签对应一个element对象。</p>\n<p>可以像<code>css</code>一样通过class/id/标签/name等选择器获取对象。</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>document.getElementsByClassName()  </code></td>\n<td>根据定义的class返回。<font color=\"red\">以数组返回  </font></td>\n</tr>\n<tr>\n<td><code>document.getElementsByName() </code></td>\n<td>根据定义name返回。<font color=\"red\">以数组返回  </font></td>\n</tr>\n<tr>\n<td><code> document.getElementsByTagName() </code></td>\n<td>根据标签名返回。<font color=\"red\">以数组返回  </font></td>\n</tr>\n<tr>\n<td><code>document.getElementById() </code></td>\n<td>返回对拥有指定 id 的<strong>第一个</strong>对象的引用。</td>\n</tr>\n</tbody></table>\n<p>如：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>cls<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>哈哈<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>aa<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>文本框<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByClassName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"cls\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"div\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"12-创建dom节点对象\"><a href=\"#1-2-创建DOM节点对象\" class=\"headerlink\" title=\"1.2 创建DOM节点对象\"></a>1.2 创建DOM节点对象</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>document.createAttribute(&quot;attribute&quot;)  </code></td>\n<td>创建一个属性节点   <font color=\"red\">可用于设置标签的属性</font></td>\n</tr>\n<tr>\n<td><code>document.createComment(&quot;text&quot;) </code></td>\n<td>创建注释节点。</td>\n</tr>\n<tr>\n<td><code>document.createElement(&quot;nodename&quot;) </code></td>\n<td>创建元素节点。  <font color=\"red\"><code>nodename</code>是标签名，或者input的type</font></td>\n</tr>\n<tr>\n<td><code>document.createTextNode() </code></td>\n<td>创建文本节点。</td>\n</tr>\n</tbody></table>\n<p>例：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">var</span> btn<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"BUTTON\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> t<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"CLICK ME\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nbtn<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n<span class=\"token number\">.</span>democlass&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>Hello World<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>单击按钮来创建一个“类”属性值“democlass”插入到上面的H1元素。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myFunction()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> h1<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"H1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> att<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createAttribute</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    att<span class=\"token punctuation\">.</span>value<span class=\"token operator\">=</span><span class=\"token string\">\"democlass\"</span><span class=\"token punctuation\">;</span>\n    h1<span class=\"token punctuation\">.</span><span class=\"token function\">setAttributeNode</span><span class=\"token punctuation\">(</span>att<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h3 id=\"13-直接获取设置html文档信息\"><a href=\"#1-3-直接获取-设置html文档信息\" class=\"headerlink\" title=\"1.3 直接获取/设置html文档信息\"></a>1.3 直接获取/设置html文档信息</h3><p>可直接通过下列方法进行<strong>修改</strong>文档信息，常用方法如下</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1ib2R5Lmh0bWw=\">document.body</span></td>\n<td>返回文档的body元素</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy10aXRsZS5odG1s\">document.title</span></td>\n<td>返回当前文档的标题。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy11cmwuaHRtbA==\">document.URL</span></td>\n<td>返回文档完整的URL</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1saW5rcy5odG1s\">document.links</span></td>\n<td>返回对文档中所有 Area 和 Link 对象引用。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1pbWFnZXMuaHRtbA==\">document.images</span></td>\n<td>返回对文档中所有 Image 对象引用。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1mb3Jtcy5odG1s\">document.forms</span></td>\n<td>返回对文档中所有 Form 对象引用。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvY3VtZW50LWlucHV0ZW5jb2RpbmcuaHRtbA==\">document.inputEncoding</span></td>\n<td>返回用于文档的编码方式（在解析时）。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1sYXN0bW9kaWZpZWQuaHRtbA==\">document.lastModified</span></td>\n<td>返回文档被最后修改的日期和时间。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9jb2xsLWRvYy1hbmNob3JzLmh0bWw=\">document.anchors</span></td>\n<td>返回对文档中所有 Anchor 对象的引用。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1jb29raWUuaHRtbA==\">document.cookie</span></td>\n<td>设置或返回与当前文档有关的所有 cookie。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvY3VtZW50LWRvY3VtZW50dXJpLmh0bWw=\">document.documentURI</span></td>\n<td>设置或返回文档的位置</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWRvYy1kb21haW4uaHRtbA==\">document.domain</span></td>\n<td>返回当前文档的域名。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtZG9jLXdyaXRlLmh0bWw=\">document.write()</span></td>\n<td>向文档写 HTML 表达式 或 JavaScript 代码。</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtZG9jLXdyaXRlbG4uaHRtbA==\">document.writeln()</span></td>\n<td>等同于 write() 方法，不同的是在每个表达式之后写一个换行符。</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-element对象节点\"><a href=\"#2-element对象（节点）\" class=\"headerlink\" title=\"2. element对象（节点）\"></a>2. element对象（节点）</h2><p>对应html的一条标签。</p>\n<p>element对象可通过document对象获取</p>\n<p>element对象可以完成以下功能：</p>\n<ol>\n<li>设置/添加/移除属性</li>\n<li>添加/移除子元素（节点）</li>\n<li>修改html内容（一般是对对应标签的修改，而非像document那么粗暴直接修改body）</li>\n<li>修改css样式</li>\n</ol>\n<h3 id=\"21-获取设置删除属性attr\"><a href=\"#2-1-获取-设置-删除属性attr\" class=\"headerlink\" title=\"2.1 获取/设置/删除属性attr\"></a>2.1 获取/设置/删除属性attr</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-attributes.html\"><em>element</em>.attributes</a></td>\n<td>返回一个元素的<strong>属性数组</strong>。可按索引访问attr</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-getattribute.html\"><em>element</em>.getAttribute(“<em>attributename</em>“)</a></td>\n<td>根据<strong>属性名</strong>返回元素的属性值</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-getattributenode.html\"><em>element</em>.getAttributeNode(“<em>attributename</em>“)</a></td>\n<td>根据<strong>属性名</strong>返回指定属性<strong>节点对象</strong>（其实就是<strong>属性对象attr</strong>）</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-hasattribute.html\"><em>element</em>.hasAttribute(“<em>attributename</em>“)</a></td>\n<td>如果元素中存在指定的属性返回 true，否则返回false。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-node-hasattributes.html\"><em>element</em>.hasAttributes()</a></td>\n<td>如果元素有任何属性返回true，否则返回false。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-removeattribute.html\"><em>element</em>.removeAttribute()</a></td>\n<td>从元素中删除指定的属性</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-removeattributenode.html\"><em>element</em>.removeAttributeNode()</a></td>\n<td>删除指定属性节点并返回移除后的节点。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-setattribute.html\"><em>element</em>.setAttribute()</a></td>\n<td>设置或者改变指定属性并指定值。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-setattributenode.html\"><em>element</em>.setAttributeNode()</a></td>\n<td>设置或者改变指定属性节点。</td>\n</tr>\n</tbody></table>\n<h3 id=\"22-设置标签体内容\"><a href=\"#2-2-设置标签体内容\" class=\"headerlink\" title=\"2.2 设置标签体内容\"></a>2.2 设置标签体内容</h3><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>element.innerHTML=text</td>\n<td>设置或者返回元素的<strong>文本</strong>内容。</td>\n</tr>\n<tr>\n<td>element.id</td>\n<td>设置或者返回元素的 id。</td>\n</tr>\n<tr>\n<td>element.nodeName</td>\n<td>返回元素的标记名（大写） <strong>文本以#text返回</strong></td>\n</tr>\n<tr>\n<td>element.nodeType</td>\n<td>返回元素的节点类型</td>\n</tr>\n<tr>\n<td>element.nodeValue</td>\n<td>返回元素的节点值</td>\n</tr>\n<tr>\n<td>element.href</td>\n<td>返回元素的链接</td>\n</tr>\n<tr>\n<td><em>element</em>.style</td>\n<td>设置或返回元素的样式属性</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-element-tagname.html\"><em>element</em>.tagName</a></td>\n<td>作为一个字符串返回某个元素的标记名（大写）<strong>文本以undefined返回</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-textcontent.html\"><em>element</em>.textContent</a></td>\n<td>设置或返回一个节点和它的文本内容</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-html-title.html\"><em>element</em>.title</a></td>\n<td>设置或返回元素的title属性</td>\n</tr>\n<tr>\n<td><em>element</em>.toString()</td>\n<td>一个元素转换成字符串</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-html-classname.html\"><em>element</em>.className</a></td>\n<td>设置或返回元素的class属性</td>\n</tr>\n</tbody></table>\n<h3 id=\"23-像树一样操作节点\"><a href=\"#2-3-像树一样操作节点\" class=\"headerlink\" title=\"2.3 像树一样操作节点\"></a>2.3 像树一样操作节点</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>intro<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>你好世界!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>该实例展示了 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>b</span><span class=\"token punctuation\">></span></span>getElementById<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>b</span><span class=\"token punctuation\">></span></span> 方法!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\nx<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"intro\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndocument<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;p>文本来自 id 为 intro 段落: \"</span> <span class=\"token operator\">+</span> x<span class=\"token punctuation\">.</span>innerHTML <span class=\"token operator\">+</span> <span class=\"token string\">\"&lt;/p>\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<blockquote>\n<p>此处，</p><p>和<script>互为兄弟节点，且均为<body>的子节点。</p>\n<p>而<code>id=&quot;intro&quot;</code>是attr节点，为第一个<p>的子节点，<code>你好世界!</code>是textnode节点，也为<p>的子节点</p>\n</blockquote>\n<p>节点的父子关系如下图（DOM树）</p>\n<p><img data-src=\"JavaScript/pic_htmltree.gif\" alt=\"DOM HTML tree\"></p>\n<p>text一般是element的子节点，不同的element也会为父子节点。</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myList<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Coffee<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Tea<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>demo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>单击按钮将项目添加到列表中<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>myFunction()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>点我<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">myFunction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> node<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"LI\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> textnode<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createTextNode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Water\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>textnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myList\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>strong</span><span class=\"token punctuation\">></span></span>注意:<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>strong</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>首先创建一个节点，<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span> 然后创建一个文本节点，<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>然后将文本节点添加到LI节点上。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>最后将节点添加到列表中。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h4 id=\"2-3-1-获取父子-兄弟节点\"><a href=\"#2-3-1-获取父子-兄弟节点\" class=\"headerlink\" title=\"2.3.1 获取父子/兄弟节点\"></a>2.3.1 获取父子/兄弟节点</h4><ul>\n<li>判断</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/jsref/met-node-haschildnodes.html\"><em>element</em>.hasChildNodes()</a></td>\n<td>返回一个元素是否具有任何子元素</td>\n</tr>\n</tbody></table>\n<ul>\n<li>获取</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-childnodes.html\"><em>element</em>.childNodes</a></td>\n<td>返回元素的一个子节点的数组</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-element-children.html\"><em>element</em>.children</a></td>\n<td>返回元素的子元素的集合</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-firstchild.html\"><em>element</em>.firstChild</a></td>\n<td>返回元素的第一个子节点</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-lastchild.html\"><em>element</em>.lastChild</a></td>\n<td>返回的最后一个子节点</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-parentnode.html\"><em>element</em>.parentNode</a></td>\n<td>返回元素的<strong>父节点</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-nextsibling.html\"><em>element</em>.nextSibling</a></td>\n<td>返回紧跟的一个兄弟<strong>节点</strong>（textnode也是节点，但不是元素节点）</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-element-nextelementsibling.html\"><em>element</em>.nextElementSibling</a></td>\n<td>返回紧跟的一个兄弟<strong>元素节点</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-node-previoussibling.html\"><em>element</em>.previousSibling</a></td>\n<td>返回之前的兄弟<strong>节点</strong></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/prop-element-previouselementsibling.html\"><em>element</em>.previousElementSibling</a></td>\n<td>返回之前的兄弟<strong>元素节点</strong></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-queryselector.html\"><em>element</em>.querySelector()</a></td>\n<td>返回匹配指定 CSS 选择器元素的第一个子元素</td>\n</tr>\n<tr>\n<td>document.querySelectorAll()</td>\n<td>返回匹配指定 CSS 选择器元素的所有子元素节点列表</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-getattributenode.html\"><em>element</em>.getAttributeNode()</a></td>\n<td>返回指定属性节点</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-getelementsbytagname.html\"><em>element</em>.getElementsByTagName()</a></td>\n<td>返回指定标签名的所有子元素集合。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-element-getelementsbyclassname.html\"><em>element</em>. getElementsByClassName()</a></td>\n<td>返回文档中所有指定类名的元素集合，作为 NodeList 对象。</td>\n</tr>\n</tbody></table>\n<h4 id=\"2-3-2-添加-删除子节点\"><a href=\"#2-3-2-添加-删除子节点\" class=\"headerlink\" title=\"2.3.2 添加/删除子节点\"></a>2.3.2 添加/删除子节点</h4><table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/jsref/met-node-appendchild.html\"><em>element</em>.appendChild()</a></td>\n<td>为元素添加一个新的子元素</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-node-removechild.html\"><em>element</em>.removeChild()</a></td>\n<td>删除一个子元素</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/jsref/met-node-replacechild.html\"><em>element</em>.replaceChild()</a></td>\n<td>替换一个子元素</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-attr对象（节点）\"><a href=\"#3-attr对象（节点）\" class=\"headerlink\" title=\"3. attr对象（节点）\"></a>3. attr对象（节点）</h2><table>\n<thead>\n<tr>\n<th align=\"left\">属性 / 方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-attr-isid.html\"><em>attr</em>.isId</a></td>\n<td align=\"left\">如果属性是 ID 类型，则 isId 属性返回 true，否则返回 false。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-attr-name.html\"><em>attr</em>.name</a></td>\n<td align=\"left\">返回属性名称</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-attr-value.html\"><em>attr</em>.value</a></td>\n<td align=\"left\">设置或者返回属性值</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-attr-specified.html\"><em>attr</em>.specified</a></td>\n<td align=\"left\">如果属性被指定返回 true ，否则返回 false</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-namednodemap-getnameditem.html\"><em>nodemap</em>.getNamedItem()</a></td>\n<td align=\"left\">从节点列表中返回的指定属性节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-namednodemap-item.html\"><em>nodemap</em>.item()</a></td>\n<td align=\"left\">返回节点列表中处于指定索引号的节点。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/prop-namednodemap-length.html\"><em>nodemap</em>.length</a></td>\n<td align=\"left\">返回节点列表的节点数目。</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-namednodemap-removenameditem.html\"><em>nodemap</em>.removeNamedItem()</a></td>\n<td align=\"left\">删除指定属性节点</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"https://www.runoob.com/jsref/met-namednodemap-setnameditem.html\"><em>nodemap</em>.setNamedItem()</a></td>\n<td align=\"left\">设置指定属性节点(通过名称)</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-事件\"><a href=\"#4-事件\" class=\"headerlink\" title=\"4. 事件\"></a>4. 事件</h2><p>用法是在标签内添加事件的同名属性，属性值为响应函数，如下</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script language-javascript\">\n<span class=\"token keyword\">function</span> <span class=\"token function\">bigImg</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"64px\"</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width<span class=\"token operator\">=</span><span class=\"token string\">\"64px\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">normalImg</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>height<span class=\"token operator\">=</span><span class=\"token string\">\"32px\"</span><span class=\"token punctuation\">;</span>\n    x<span class=\"token punctuation\">.</span>style<span class=\"token punctuation\">.</span>width<span class=\"token operator\">=</span><span class=\"token string\">\"32px\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">onmouseover</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>bigImg(this)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onmouseout</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>normalImg(this)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">border</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>0<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>smiley.gif<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Smiley<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>32<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>32<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>函数 bigImg() 在鼠标指针移动到笑脸图片是触发。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>函数 normalImg() 在鼠标指针移出笑脸图片是触发.<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><em>事件比较简单，用到时直接查手册即可</em></p>\n<h2 id=\"5-控制台对象（console）\"><a href=\"#5-控制台对象（console）\" class=\"headerlink\" title=\"5. 控制台对象（console）\"></a>5. 控制台对象（console）</h2><p>控制台主要用于IDE调试JavaScript代码。最常用的即是<code>console.log()</code>控制台打印输出。详细如下，</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1hc3NlcnQuaHRtbA==\">assert()</span></td>\n<td align=\"left\">如果断言为 false，则在信息到控制台输出错误信息。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1jbGVhci5odG1s\">clear()</span></td>\n<td align=\"left\">清除控制台上的信息。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1jb3VudC5odG1s\">count()</span></td>\n<td align=\"left\">记录 count() 调用次数，一般用于计数。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1lcnJvci5odG1s\">error()</span></td>\n<td align=\"left\">输出错误信息到控制台</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1ncm91cC5odG1s\">group()</span></td>\n<td align=\"left\">在控制台创建一个信息分组。 一个完整的信息分组以 console.group() 开始，console.groupEnd() 结束</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1ncm91cGNvbGxhcHNlZC5odG1s\">groupCollapsed()</span></td>\n<td align=\"left\">在控制台创建一个信息分组。 类似 console.group() ，但它默认是折叠的。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1ncm91cGVuZC5odG1s\">groupEnd()</span></td>\n<td align=\"left\">设置当前信息分组结束</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1pbmZvLmh0bWw=\">info()</span></td>\n<td align=\"left\">控制台输出一条信息</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS1sb2cuaHRtbA==\">log()</span></td>\n<td align=\"left\">控制台输出一条信息</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10YWJsZS5odG1s\">table()</span></td>\n<td align=\"left\">以表格形式显示数据</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10aW1lLmh0bWw=\">time()</span></td>\n<td align=\"left\">计时器，开始计时间，与 timeEnd() 联合使用，用于算出一个操作所花费的准确时间。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10aW1lZW5kLmh0bWw=\">timeEnd()</span></td>\n<td align=\"left\">计时结束</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS10cmFjZS5odG1s\">trace()</span></td>\n<td align=\"left\">显示当前执行的代码在堆栈中的调用路径。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtY29uc29sZS13YXJuLmh0bWw=\">warn()</span></td>\n<td align=\"left\">输出警告信息，信息最前面加一个黄色三角，表示警告</td>\n</tr>\n</tbody></table>\n<h1 id=\"五、-BOM\"><a href=\"#五、-BOM\" class=\"headerlink\" title=\"五、 BOM\"></a>五、 BOM</h1><blockquote>\n<p>浏览器对象模型（<strong>B</strong>rowser <strong>O</strong>bject <strong>M</strong>odel (BOM)），主要用于设置浏览器的一些功能，可以算是DOM的上级。</p>\n</blockquote>\n<p>常用于<code>DOM</code>的事件响应函数，和一些动态花里胡哨页面设置</p>\n<h2 id=\"1-window对象\"><a href=\"#1-window对象\" class=\"headerlink\" title=\"1. window对象\"></a>1. window对象</h2><p>Window 对象表示浏览器中打开的窗口。（PS：document可以由window获取）</p>\n<p>window是JavaScript的系统对象，直属于window的方法可以直接写，如alter</p>\n<h3 id=\"1-1-window属性\"><a href=\"#1-1-window属性\" class=\"headerlink\" title=\"1.1 window属性\"></a>1.1 window属性</h3><p>常用属性如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1jbG9zZWQuaHRtbA==\">closed</span></td>\n<td align=\"left\">返回窗口是否已被关闭。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9kb20tb2JqLWRvY3VtZW50Lmh0bWw=\">document</span></td>\n<td align=\"left\">对 Document 对象的只读引用。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1uYW1lLmh0bWw=\">name</span></td>\n<td align=\"left\">设置或返回窗口的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotaGlzdG9yeS5odG1s\">history</span></td>\n<td align=\"left\">对 History 对象的只读引用。请参数 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotaGlzdG9yeS5odG1s\">History 对象</span>。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zZWxmLmh0bWw=\">self</span></td>\n<td align=\"left\">返回对当前窗口的引用。等价于 Window 属性。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi10b3AuaHRtbA==\">top</span></td>\n<td align=\"left\">返回最顶层的父窗口。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1wYXJlbnQuaHRtbA==\">parent</span></td>\n<td align=\"left\">返回父窗口。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1pbm5lcmhlaWdodC5odG1s\">innerHeight</span></td>\n<td align=\"left\">返回窗口的文档显示区的高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1pbm5lcmhlaWdodC5odG1s\">innerWidth</span></td>\n<td align=\"left\">返回窗口的文档显示区的宽度。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1vdXRlcmhlaWdodC5odG1s\">outerHeight</span></td>\n<td align=\"left\">返回窗口的外部高度，包含工具条与滚动条。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1vdXRlcmhlaWdodC5odG1s\">outerWidth</span></td>\n<td align=\"left\">返回窗口的外部宽度，包含工具条与滚动条。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1sb2NhbHN0b3JhZ2UuaHRtbA==\">localStorage</span></td>\n<td align=\"left\">在浏览器中存储 key/value 对。没有过期时间。<strong>本地存储</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zZXNzaW9uc3RvcmFnZS5odG1s\">sessionStorage</span></td>\n<td align=\"left\">在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。<strong>会话存储</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotc2NyZWVuLmh0bWw=\">screen</span></td>\n<td align=\"left\">对 Screen 对象的只读引用。请参数 <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9vYmotc2NyZWVuLmh0bWw=\">Screen 对象</span>。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW5sZWZ0Lmh0bWw=\">screenLeft</span></td>\n<td align=\"left\">返回相对于屏幕窗口的x坐标</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW5sZWZ0Lmh0bWw=\">screenTop</span></td>\n<td align=\"left\">返回相对于屏幕窗口的y坐标</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW54Lmh0bWw=\">screenX</span></td>\n<td align=\"left\">返回相对于屏幕窗口的x坐标</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zY3JlZW54Lmh0bWw=\">screenY</span></td>\n<td align=\"left\">返回相对于屏幕窗口的y坐标</td>\n</tr>\n</tbody></table>\n<h3 id=\"1-2-window方法\"><a href=\"#1-2-window方法\" class=\"headerlink\" title=\"1.2 window方法\"></a>1.2 window方法</h3><ol>\n<li><p>弹出类方法，输入均为提示用户的消息</p>\n<table>\n<thead>\n<tr>\n<th><strong>方法</strong></th>\n<th><strong>描述</strong></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>alert()</td>\n<td>显示带有一段消息和一个确认按钮的警告框。</td>\n</tr>\n<tr>\n<td>confirm()</td>\n<td>显示带有一段消息以及确认按钮和取消按钮的对话框。  返回：确认返回true，取消返回false</td>\n</tr>\n<tr>\n<td>prompt()</td>\n<td>显示可提示用户输入的对话框。  返回：用户的输入值</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>打开/关闭窗口</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>open()</td>\n<td>打开一个新的浏览器窗口或查找一个已命名的窗口。  输入：新的窗口的url  返回：新的窗口的window对象</td>\n</tr>\n<tr>\n<td>close()</td>\n<td>关闭浏览器窗口。  输入：无输入，但需要对应的window对象调用</td>\n</tr>\n</tbody></table>\n</li>\n<li><p>定时器</p>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setTimeout()</td>\n<td>在指定的毫秒数后调用函数或计算表达式。  <br>输入：1. “代码” or 方法对象（适用于无参函数）。2. 毫秒值  返回：用于取消定时器的标识</td>\n</tr>\n<tr>\n<td>clearTimeout()</td>\n<td>取消由 setTimeout() 方法设置的 timeout。</td>\n</tr>\n<tr>\n<td>setInterval()</td>\n<td>按照指定的周期（以毫秒计）来调用函数或计算表达式。  输入/返回：与setTimeout一样</td>\n</tr>\n<tr>\n<td>clearInterval()</td>\n<td>取消由 setInterval() 设置的 timeout。</td>\n</tr>\n</tbody></table>\n<p>setTimeout示例如下：</p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fun(3,4)\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//或</span>\n<span class=\"token keyword\">var</span> fun1<span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>fun1<span class=\"token punctuation\">,</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h2 id=\"2-Navigator-对象\"><a href=\"#2-Navigator-对象\" class=\"headerlink\" title=\"2. Navigator 对象\"></a>2. Navigator 对象</h2><p>Navigator 对象包含有关浏览器的信息。一般用的不多</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1hcHBjb2RlbmFtZS5odG1s\">appCodeName</span></td>\n<td align=\"left\">返回浏览器的代码名</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1hcHBuYW1lLmh0bWw=\">appName</span></td>\n<td align=\"left\">返回浏览器的名称</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1hcHB2ZXJzaW9uLmh0bWw=\">appVersion</span></td>\n<td align=\"left\">返回浏览器的平台和版本信息</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1jb29raWVlbmFibGVkLmh0bWw=\">cookieEnabled</span></td>\n<td align=\"left\">返回指明浏览器中是否启用 cookie 的布尔值</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi1wbGF0Zm9ybS5odG1s\">platform</span></td>\n<td align=\"left\">返回运行浏览器的操作系统平台</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLW5hdi11c2VyYWdlbnQuaHRtbA==\">userAgent</span></td>\n<td align=\"left\">返回由客户机发送服务器的user-agent 头部的值</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbmF2LWphdmFlbmFibGVkLmh0bWw=\">javaEnabled()</span></td>\n<td align=\"left\">指定是否在浏览器中启用Java</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbmF2LXRhaW50ZW5hYmxlZC5odG1s\">taintEnabled()</span></td>\n<td align=\"left\">规定浏览器是否启用数据污点(data tainting)</td>\n</tr>\n</tbody></table>\n<h2 id=\"3-Screen-对象\"><a href=\"#3-Screen-对象\" class=\"headerlink\" title=\"3. Screen 对象\"></a>3. Screen 对象</h2><p>Screen 对象包含有关客户端显示屏幕的信息。用得也不多</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1hdmFpbGhlaWdodC5odG1s\">availHeight</span></td>\n<td align=\"left\">返回屏幕的高度（不包括Windows任务栏）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1hdmFpbHdpZHRoLmh0bWw=\">availWidth</span></td>\n<td align=\"left\">返回屏幕的宽度（不包括Windows任务栏）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1jb2xvcmRlcHRoLmh0bWw=\">colorDepth</span></td>\n<td align=\"left\">返回目标设备或缓冲器上的调色板的比特深度</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1oZWlnaHQuaHRtbA==\">height</span></td>\n<td align=\"left\">返回屏幕的总高度</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1waXhlbGRlcHRoLmh0bWw=\">pixelDepth</span></td>\n<td align=\"left\">返回屏幕的颜色分辨率（每象素的位数）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi13aWR0aC5odG1s\">width</span></td>\n<td align=\"left\">返回屏幕的总宽度</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-History-对象\"><a href=\"#4-History-对象\" class=\"headerlink\" title=\"4. History 对象\"></a>4. History 对象</h2><p>History 对象包含用户（在浏览器窗口中）访问过的 URL。</p>\n<p>History 对象是 window 对象的一部分，可通过 window.history 属性对其进行访问。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWhpcy1sZW5ndGguaHRtbA==\">length</span></td>\n<td align=\"left\">返回历史列表中的网址数</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtaGlzLWJhY2suaHRtbA==\">back()</span></td>\n<td align=\"left\">加载 history 列表中的前一个 URL</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtaGlzLWZvcndhcmQuaHRtbA==\">forward()</span></td>\n<td align=\"left\">加载 history 列表中的下一个 URL</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtaGlzLWdvLmh0bWw=\">go()</span></td>\n<td align=\"left\">加载 history 列表中的某个具体页面</td>\n</tr>\n</tbody></table>\n<h2 id=\"5-Location-对象\"><a href=\"#5-Location-对象\" class=\"headerlink\" title=\"5. Location 对象\"></a>5. Location 对象</h2><p>Location 对象包含有关当前 URL 的信息。</p>\n<p>Location 对象是 window 对象的一部分，可通过 window.Location 属性对其进行访问。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1oYXNoLmh0bWw=\">hash</span></td>\n<td align=\"left\">返回一个URL的锚部分</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1ob3N0Lmh0bWw=\">host</span></td>\n<td align=\"left\">返回一个URL的主机名和端口</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1ob3N0bmFtZS5odG1s\">hostname</span></td>\n<td align=\"left\">返回URL的主机名</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1ocmVmLmh0bWw=\">href</span></td>\n<td align=\"left\">返回完整的URL</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1wYXRobmFtZS5odG1s\">pathname</span></td>\n<td align=\"left\">返回的URL路径名。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1wb3J0Lmh0bWw=\">port</span></td>\n<td align=\"left\">返回一个URL服务器使用的端口号</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1wcm90b2NvbC5odG1s\">protocol</span></td>\n<td align=\"left\">返回一个URL协议</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLWxvYy1zZWFyY2guaHRtbA==\">search</span></td>\n<td align=\"left\">返回一个URL的查询部分</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbG9jLWFzc2lnbi5odG1s\">assign()</span></td>\n<td align=\"left\">载入一个新的文档</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbG9jLXJlbG9hZC5odG1s\">reload()</span></td>\n<td align=\"left\">重新载入当前文档</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9tZXQtbG9jLXJlcGxhY2UuaHRtbA==\">replace()</span></td>\n<td align=\"left\">用新的文档替换当前文档</td>\n</tr>\n</tbody></table>\n<h2 id=\"6-Storage对象\"><a href=\"#6-Storage对象\" class=\"headerlink\" title=\"6. Storage对象\"></a>6. Storage对象</h2><p>Web 存储 API 提供了 sessionStorage （会话存储） 和 localStorage（本地存储）两个存储对象来对网页的数据进行添加、删除、修改、查询操作。</p>\n<ul>\n<li>localStorage 用于长久保存整个网站的数据，保存的数据没有过期时间，直到手动去除。</li>\n<li>sessionStorage 用于临时保存同一窗口(或标签页)的数据，在关闭窗口或标签页之后将会删除这些数据。</li>\n</ul>\n<p>前面window的属性中有提到2个存储键值对的storage对象，如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1sb2NhbHN0b3JhZ2UuaHRtbA==\">window.localStorage</span></td>\n<td align=\"left\">在浏览器中存储 key/value 对。没有过期时间。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zZXNzaW9uc3RvcmFnZS5odG1s\">window.sessionStorage</span></td>\n<td align=\"left\">在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。</td>\n</tr>\n</tbody></table>\n<p>storage对象有以下属性和方法</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">length</td>\n<td align=\"left\">返回存储对象中包含多少条数据。</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th align=\"left\">方法</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">key(<em>n</em>)</td>\n<td align=\"left\">返回存储对象中第 <em>n</em> 个键的名称</td>\n</tr>\n<tr>\n<td align=\"left\">getItem(<em>keyname</em>)</td>\n<td align=\"left\">返回指定键的值</td>\n</tr>\n<tr>\n<td align=\"left\">setItem(<em>keyname</em>, <em>value</em>)</td>\n<td align=\"left\">添加键和值，如果对应的值存在，则更新该键对应的值。</td>\n</tr>\n<tr>\n<td align=\"left\">removeItem(<em>keyname</em>)</td>\n<td align=\"left\">移除键</td>\n</tr>\n<tr>\n<td align=\"left\">clear()</td>\n<td align=\"left\">清除存储对象中所有的键</td>\n</tr>\n</tbody></table>\n</script></p></blockquote>",
            "tags": [
                "笔记",
                "前端",
                "前端",
                "JavaScript"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/",
            "url": "https://nitgod1996.com/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/",
            "title": "前端调用Python数据",
            "date_published": "2021-05-27T08:14:53.000Z",
            "content_html": "<h1 id=\"1-安装依赖包\"><a href=\"#1-安装依赖包\" class=\"headerlink\" title=\"1. 安装依赖包\"></a>1. 安装依赖包</h1><p>通过豆瓣源安装对应包</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> 包名 -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com\n</code></pre>\n<h1 id=\"2-启动python的flask\"><a href=\"#2-启动Python的Flask\" class=\"headerlink\" title=\"2. 启动Python的Flask\"></a>2. 启动Python的Flask</h1><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#这个是对函数的注解</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span>\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>运行一下，控制台出现<img data-src=\"/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531165347088.png\" alt=\"image-20210531165347088\"></p>\n<p>说明已经布置完成，**字符串<code>hello world</code>**被发送到了<code>localhost:5000/hello</code></p>\n<p>此时直接访问/爬取都能直接获取”hello world”<img data-src=\"/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531165707667.png\" alt=\"image-20210531165707667\"></p>\n<h1 id=\"3-ajax获取flask发送的信息\"><a href=\"#3-ajax获取Flask发送的信息\" class=\"headerlink\" title=\"3. ajax获取Flask发送的信息\"></a>3. ajax获取Flask发送的信息</h1><pre class=\" language-javascript\"><code class=\"language-javascript\">$<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        type <span class=\"token punctuation\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">async</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\" spellcheck=\"true\">//异步请求（同步请求将会锁住浏览器，用户其他操作必须等待请求完成才可以执行）</span>\n        url <span class=\"token punctuation\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>    <span class=\"token comment\" spellcheck=\"true\">//服务器端放出api的地址，一般是把数据以json格式放出</span>\n        data <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        dataType <span class=\"token punctuation\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\" spellcheck=\"true\">//返回数据形式为json</span>\n        success <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//请求成功时执行该函数内容，result即为服务器返回的json对象</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        error <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//请求失败时执行该函数</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>重点在<code>url</code>。</p>\n<ol>\n<li><p>如果js文件一起部署到了<code>localhost:5000</code>，那么直接填”/hello”即可</p>\n</li>\n<li><p>如果是外部js文件，那么需要填完整路径<code>http://localhost:5000/hello</code>.<strong>同时，解决跨域问题</strong>，否则会报错</p>\n<blockquote>\n<p>Access to XMLHttpRequest at ‘<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo1MDAwL2FwaS9tc2clRTIlODAlOTk=\">http://localhost:5000/api/msg’</span> from origin ‘<span class=\"exturl\" data-url=\"aHR0cDovL2xvY2FsaG9zdDo2MzM0MuKAmQ==\">http://localhost:63342’</span> has been blocked by CORS policy: No ‘Access-Control-Allow-Origin’ header is present on the requested resource.</p>\n</blockquote>\n</li>\n</ol>\n<h2 id=\"问题一解决跨域问题\"><a href=\"#问题一：解决跨域问题\" class=\"headerlink\" title=\"问题一：解决跨域问题\"></a>问题一：解决跨域问题</h2><p>py引入<code>flask-cors</code>包，并用CORS包裹app即可，<strong>需要写上完整路径，http://不要忘记</strong></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\n<span class=\"token keyword\">from</span> flask_cors <span class=\"token keyword\">import</span> CORS\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\nCORS<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/hello'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span>\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>此后，ajax即可接受到hello world</p>\n<h2 id=\"问题二访问成功ajax仍然error请求失败\"><a href=\"#问题二：访问成功，ajax仍然error请求失败\" class=\"headerlink\" title=\"问题二：访问成功，ajax仍然error请求失败\"></a>问题二：访问成功，ajax仍然error请求失败</h2><p>这有可能是<code>dataType</code>参数的原因。</p>\n<p>因为有时候（刚刚）上传的数据是<code>str</code>类型，如果<code>dataType</code>设置成<code>json</code>，那么就接受不到数据，就会转到<code>error</code></p>\n<h1 id=\"4-python上传各种格式数据\"><a href=\"#4-Python上传各种格式数据\" class=\"headerlink\" title=\"4. Python上传各种格式数据\"></a>4. Python上传各种格式数据</h1><p>一般来说，前端主要接受<code>json</code>和<code>str</code>类型的数据，最多的是<code>json</code>，所以一般在Python中先将数据处理一下再上传</p>\n<p>Python的非常优秀的数据处理语言，这取决于它有各种数据分析的库，如<code>numpy</code>、<code>pandas</code>等</p>\n<p><strong>Python中可以做以下事情：</strong></p>\n<ul>\n<li>flask只能上传<code>str</code>类型的数据，但上传<code>json</code>格式的字符串可以被<code>ajax</code>识别成<code>json</code>类型</li>\n<li>可通过<code>pandas</code>将其他类型的数据转为<code>str</code>或<code>json</code></li>\n<li><em>在Python中把数据处理好后传给前端</em>。这样前端接受数据后就不需要再处理数据，或者简单处理数据就可以直接用了</li>\n</ul>\n<h1 id=\"5-例用echarts显示csv的数据\"><a href=\"#5-例：用echarts显示csv的数据\" class=\"headerlink\" title=\"5. 例：用echarts显示csv的数据\"></a>5. 例：用echarts显示csv的数据</h1><ul>\n<li><p>Python</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask_cors <span class=\"token keyword\">import</span> CORS\n<span class=\"token keyword\">import</span> pandas <span class=\"token keyword\">as</span> pd\n<span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\nCORS<span class=\"token punctuation\">(</span>app<span class=\"token punctuation\">)</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/data/data1'</span><span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">#以上是跨域部署服务器及url</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">xianlu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token comment\" spellcheck=\"true\">#读取csv文件，第一列作为索引，dataSet是DataFrame的类型</span>\n    dataSet <span class=\"token operator\">=</span> pd<span class=\"token punctuation\">.</span>read_csv<span class=\"token punctuation\">(</span><span class=\"token string\">'DataA09/station.csv'</span><span class=\"token punctuation\">,</span> index_col<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#统计各线路的人次，保存在Series中</span>\n    array<span class=\"token operator\">=</span>pd<span class=\"token punctuation\">.</span>Series<span class=\"token punctuation\">(</span>dataSet<span class=\"token punctuation\">[</span><span class=\"token string\">'线路'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>value_counts<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\" spellcheck=\"true\">#将&amp;#123;线路:人次&amp;#125;转为json</span>\n    json_split<span class=\"token operator\">=</span>array<span class=\"token punctuation\">.</span>to_json<span class=\"token punctuation\">(</span>orient<span class=\"token operator\">=</span><span class=\"token string\">'split'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> json_split\n\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p>解析：csv文件如下图所示</p>\n<p><img data-src=\"/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531183207279.png\" alt=\"image-20210531183207279\"></p>\n<ul>\n<li><p><code>dataSet</code>：以编号为行索引，以”站点名称”、”线路”、”行政区域”为列索引。<em>索引不算作数据内容</em></p>\n<p><img data-src=\"/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531183300352.png\" alt=\"image-20210531183300352\"></p>\n</li>\n<li><p><code>array</code>：线路的人次。转为<code>DataFrame</code>的目的是可以转成<code>json</code></p>\n<p><img data-src=\"/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531183522711.png\" alt=\"image-20210531183522711\"></p>\n</li>\n<li><p><code>json_split</code>：<code>Series</code>是<code>pandas</code>中保存<strong>一维数组</strong>的类型。而<code>DataFrame</code>对应的是<strong>多维数组</strong></p>\n<p><code>Series</code>转为<code>json</code>有很多种形式，这里选择<code>split</code>比较合适。保存在<code>json</code>中的中文以<code>Unicode</code>编码，会看上去乱码。</p>\n<p><img data-src=\"/2021/05/27/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-%E5%85%B3%E4%BA%8E%E5%89%8D%E7%AB%AF%E8%B0%83%E5%8F%96Python%E6%95%B0%E6%8D%AE/image-20210531185240411.png\" alt=\"image-20210531185240411\"></p>\n</li>\n</ul>\n</li>\n<li><p>html：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>b_right_box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>chart_5<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>echart<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">100%</span><span class=\"token punctuation\">;</span> <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3.6</span>rem<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>JavaScript：<strong>这里要注意，echarts接受的数据一定要是list的，不然会报各种错</strong></p>\n<pre class=\" language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">echart_5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 基于准备好的dom，初始化echarts实例</span>\n    <span class=\"token keyword\">var</span> myChart <span class=\"token operator\">=</span> echarts<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'chart_5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    $<span class=\"token punctuation\">.</span><span class=\"token function\">ajax</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        type <span class=\"token punctuation\">:</span> <span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span>\n        <span class=\"token keyword\">async</span> <span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>            \n        url <span class=\"token punctuation\">:</span> <span class=\"token string\">\"http://127.0.0.1:5000/data/data1\"</span><span class=\"token punctuation\">,</span>   \n        data <span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        dataType <span class=\"token punctuation\">:</span> <span class=\"token string\">\"json\"</span><span class=\"token punctuation\">,</span>        <span class=\"token comment\" spellcheck=\"true\">//返回数据形式为json</span>\n        success <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">//请求成功时执行该函数内容，result即为服务器返回的json对象</span>\n            <span class=\"token keyword\">var</span> data <span class=\"token operator\">=</span> result<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//data是str类型的json数据</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">let</span> index<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"index\"</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">let</span> values<span class=\"token operator\">=</span>data<span class=\"token punctuation\">[</span><span class=\"token string\">\"data\"</span><span class=\"token punctuation\">]</span>\n\n                myChart<span class=\"token punctuation\">.</span><span class=\"token function\">hideLoading</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\" spellcheck=\"true\">//隐藏加载动画</span>\n                myChart<span class=\"token punctuation\">.</span><span class=\"token function\">setOption</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\" spellcheck=\"true\">//加载数据图表</span>\n                    xAxis<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'category'</span><span class=\"token punctuation\">,</span>\n                        data<span class=\"token punctuation\">:</span> index<span class=\"token punctuation\">,</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n                    yAxis<span class=\"token punctuation\">:</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n                    series<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                        data<span class=\"token punctuation\">:</span> values<span class=\"token punctuation\">,</span>\n                        type<span class=\"token punctuation\">:</span> <span class=\"token string\">'bar'</span><span class=\"token punctuation\">,</span>\n                        barWidth<span class=\"token punctuation\">:</span> <span class=\"token string\">\"35%\"</span><span class=\"token punctuation\">,</span>\n                    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">]</span>\n                <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">,</span>\n        error <span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"错误\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ul>\n",
            "tags": [
                "笔记",
                "随笔",
                "echarts",
                "Python",
                "前端",
                "JavaScript",
                "jQuery",
                "AJAX",
                "Flask"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/",
            "url": "https://nitgod1996.com/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/",
            "title": "html常用功能手册",
            "date_published": "2021-05-26T07:16:17.000Z",
            "content_html": "<h1 id=\"一-简介\"><a href=\"#一、-简介\" class=\"headerlink\" title=\"一、 简介\"></a>一、 简介</h1><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token doctype\">&lt;!DOCTYPE html></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>utf-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>菜鸟教程(runoob.com)<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>我的第一个标题<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>我的第一个段落。<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n \n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li><strong><!DOCTYPE html></strong> 声明为 HTML5 文档</li>\n<li><strong><html></html></strong> 元素是 HTML 页面的根元素</li>\n<li><strong><head></head></strong> 元素包含了文档的元（meta）数据，如 <strong><meta charset=\"utf-8\"></strong> 定义网页编码格式为 <strong>utf-8</strong>。</li>\n<li><strong><title></title></strong> 元素描述了文档的标题</li>\n<li><strong><body></body></strong> 元素包含了可见的页面内容</li>\n<li><strong><h1 id></h1></strong> 元素定义一个大标题</li>\n<li><strong><p></p></strong> 元素定义一个段落</li>\n</ul>\n<h1 id=\"二-标签\"><a href=\"#二、-标签\" class=\"headerlink\" title=\"二、 标签\"></a>二、 标签</h1><h2 id=\"1-标签类型\"><a href=\"#1-标签类型\" class=\"headerlink\" title=\"1. 标签类型\"></a>1. 标签类型</h2><p>标签，也称元素，分为内联元素和块级元素。</p>\n<p>块级元素会换行，而内联元素不会，可以通过CSS的<code>display</code>属性修改设置。</p>\n<h3 id=\"11-内联元素\"><a href=\"#1-1-内联元素\" class=\"headerlink\" title=\"1.1 内联元素\"></a>1.1 内联元素</h3><p>​        内联元素又名行内元素，和其对应的是块元素(block element)，都是html规范中的概念。内联元素的显示，为了帮助理解，可以形象的称为“文本模式”，即<strong>一个挨着一个，都在同一行按从左至右的顺序显示，不单独占一行</strong>。</p>\n<blockquote>\n<p>任何不是块级元素的可见元素都是内联元素。其表现的特性是“行布局”形式，这里的“行布局”的意思就是说其表现形式始终以行进行显示。</p>\n</blockquote>\n<p>内联元素有以下特点：</p>\n<ol>\n<li>和其他元素都在一行上，遇到父级元素边界会自动换行</li>\n<li>高、行高以及内外边距都<strong>不可以改变</strong></li>\n<li>宽度与内容一样宽，且<strong>不可改变</strong></li>\n<li>行内元素只能容纳文本或者其他行内元素</li>\n<li>对于行内元素，需要注意的是：设置宽度width无效，设置高度无效，可以通过设置line-height来设置，设置margin只有左右有效，上下无效，设置padding只有左右有效，上下无效</li>\n</ol>\n<p>常见的内联元素有：</p>\n<ul>\n<li><code>a</code> – 锚点</li>\n<li><code>abbr</code> – 缩写</li>\n<li><code>b</code> – 粗体(不推荐)</li>\n<li><code>big</code> – 大字体</li>\n<li><code>br</code> – 换行</li>\n<li><code>cite</code> – 引用</li>\n<li><code>font</code> – 字体设定(不推荐)</li>\n<li><code>i </code>– 斜体</li>\n<li><code>img</code> – 图片</li>\n<li><code>input</code> – 输入框</li>\n<li><code>label</code> – 表格标签</li>\n<li><code>select</code> – 项目选择</li>\n<li><code>small</code> – 小字体文本</li>\n<li><code>sub</code> – 下标</li>\n<li><code>sup</code> – 上标</li>\n<li><code>textarea</code> – 多行文本输入框</li>\n<li><code>u</code> – 下划线</li>\n</ul>\n<h3 id=\"12-块元素\"><a href=\"#1-2-块元素\" class=\"headerlink\" title=\"1.2 块元素\"></a>1.2 块元素</h3><p>块元素和内联元素的基本差异是块元素一般都从新行开始，相邻的块级元素将会在不同行显示。</p>\n<p>块级元素的特点：</p>\n<ol>\n<li>独霸一行，总是在新行上开始</li>\n<li>宽度缺省是它父级元素的100%，除非设定一个宽度</li>\n<li>高度、行高、外边距、内边距都可以设置</li>\n<li>可以容纳其他内联元素或者其他块元素</li>\n</ol>\n<p>以下是常见的块级元素：</p>\n<ul>\n<li><code>address</code> – 地址</li>\n<li><code>center</code> – 举中对齐块</li>\n<li><code>dir</code> – 目录列表</li>\n<li><code>div</code> – 常用块级容易，也是CSS layout的主要标签</li>\n<li><code>dl</code> – 定义列表</li>\n<li><code>form</code> – 交互表单</li>\n<li><code>h1~h6</code> – 标题</li>\n<li><code>hr</code> – 水平分隔线</li>\n<li><code>menu</code> – 菜单列表</li>\n<li><code>ol</code> – 有序表单</li>\n<li><code>p</code> – 段落</li>\n<li><code>table</code> – 表格</li>\n<li><code>ul</code> – 无序列表</li>\n</ul>\n<h2 id=\"2-基本标签\"><a href=\"#2-基本标签\" class=\"headerlink\" title=\"2. 基本标签\"></a>2. 基本标签</h2><h3 id=\"21-头部\"><a href=\"#2-1-头部\" class=\"headerlink\" title=\"2.1 头部\"></a>2.1 头部</h3><p><code>&lt;head&gt; </code>元素包含了所有的头部标签元素。在 <code>&lt;head&gt;</code>元素中你可以插入脚本（scripts）, 样式文件（CSS），及各种meta信息。</p>\n<p>可以添加在头部区域的元素标签为: <code>&lt;title&gt;</code>, <code>&lt;style&gt;</code>, <code>&lt;meta&gt;</code>, <code>&lt;link&gt;</code>, <code>&lt;script&gt;</code>, <code>&lt;noscript&gt;</code> 和 <code>&lt;base&gt;</code>。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标签</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>&lt;head&gt;</code></td>\n<td align=\"left\">定义了文档的信息</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;title&gt;</code></td>\n<td align=\"left\">定义了文档的标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;base&gt;</code></td>\n<td align=\"left\">定义了页面链接标签的默认链接地址</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;link&gt;</code></td>\n<td align=\"left\">定义了一个文档和外部资源之间的关系</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;meta&gt;</code></td>\n<td align=\"left\">定义了HTML文档中的元数据</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;script&gt;</code></td>\n<td align=\"left\">定义了客户端的JavaScript脚本</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;style&gt;</code></td>\n<td align=\"left\">定义了HTML文档的CSS样式</td>\n</tr>\n</tbody></table>\n<h3 id=\"22-ltbodygt\"><a href=\"#2-2-lt-body-gt\" class=\"headerlink\" title=\"2.2 &lt;body&gt;\"></a>2.2 <code>&lt;body&gt;</code></h3><p>主要内容基本都写在<code>&lt;body&gt;</code>体内。很多时候<code>&lt;body&gt;</code>排版为<code>&lt;header&gt;</code>页眉，<code>&lt;main&gt;</code>主体和<code>&lt;footer&gt;</code>页脚三段式。如下：</p>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210520175848867.png\" alt=\"image-20210520175848867\"></p>\n<p>当然也不一定全是这样。</p>\n<h2 id=\"3-文本段落标签\"><a href=\"#3-文本-段落标签\" class=\"headerlink\" title=\"3. 文本/段落标签\"></a>3. 文本/段落标签</h2><p>与文本相关的标签，也是用得最多的标签。如标题、字体、段落、换行等。</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">标签</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><code>&lt;h1 - h6&gt;</code></td>\n<td align=\"left\">标题</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;hr&gt;</code></td>\n<td align=\"left\">水平线分隔。<strong>无结束标签</strong></td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;p&gt;</code></td>\n<td align=\"left\">段落</td>\n</tr>\n<tr>\n<td align=\"left\"><code>&lt;br&gt;</code></td>\n<td align=\"left\">换行。<strong>无结束标签</strong></td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>标签</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>&lt;b&gt;</code></td>\n<td>定义粗体文本</td>\n</tr>\n<tr>\n<td><code>&lt;em&gt;</code></td>\n<td>定义着重文字</td>\n</tr>\n<tr>\n<td><code>&lt;i&gt;</code></td>\n<td>定义斜体字</td>\n</tr>\n<tr>\n<td><code>&lt;small&gt;</code></td>\n<td>定义小号字</td>\n</tr>\n<tr>\n<td><code>&lt;strong&gt;</code></td>\n<td>定义加重语气</td>\n</tr>\n<tr>\n<td><code>&lt;sub&gt;</code></td>\n<td>定义下标字</td>\n</tr>\n<tr>\n<td><code>&lt;sup&gt;</code></td>\n<td>定义上标字</td>\n</tr>\n<tr>\n<td><code>&lt;ins&gt;</code></td>\n<td>定义插入字</td>\n</tr>\n<tr>\n<td><code>&lt;del&gt;</code></td>\n<td>定义删除字</td>\n</tr>\n<tr>\n<td><code>&lt;cite&gt;</code></td>\n<td>定义引用、引证</td>\n</tr>\n</tbody></table>\n<p><strong>至于font以及对齐方式等，一般在css中设置</strong></p>\n<h2 id=\"4-锚点链接\"><a href=\"#4-锚点-链接\" class=\"headerlink\" title=\"4. 锚点/链接\"></a>4. 锚点/链接</h2><h3 id=\"41-ltagt\"><a href=\"#4-1-lt-a-gt\" class=\"headerlink\" title=\"4.1 &lt;a&gt;\"></a>4.1 <code>&lt;a&gt;</code></h3><p>Anchor Element：锚元素，<code>&lt;a&gt;</code> 标签定义超链接，用于从一个页面链接到另一个页面。</p>\n<p><code>&lt;a&gt;</code> 元素最重要的属性是<code>href</code>属性，它指定链接的目标。</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>https://nitgod1996.github.io/<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>进入宁理大神1996的快乐小屋!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>可用于：</p>\n<ul>\n<li><p>打开新页面</p>\n</li>\n<li><p>移动到文档指定位置（当目录用）。这需要用到<code>PJAX</code>或者使用插件，大致逻辑如下</p>\n<ol>\n<li><p>在标题处建立一个锚点，并设置<code>href</code></p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>anchor<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#2-创建虚拟机<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-pjax-state</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>anchor<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>#<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n<li><p>目录出设置<code>href</code>属性与标题的<code>href</code>一致</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>toc-link<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#2-%E5%88%9B%E5%BB%BA%E8%99%9A%E6%8B%9F%E6%9C%BA<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">data-pjax-state</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>toc-text<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 2. 创建虚拟机<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n</li>\n</ol>\n</li>\n</ul>\n<p>主要属性如下：</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWhyZWYuaHRtbA==\">href</span></td>\n<td><em>URL</em></td>\n<td>规定链接的目标 URL。</td>\n</tr>\n</tbody></table>\n<p>其他属性如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWNoYXJzZXQuaHRtbA==\">charset</span></td>\n<td align=\"left\"><em>char_encoding</em></td>\n<td align=\"left\">HTML5 不支持。规定目标 URL 的字符编码。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWNvb3Jkcy5odG1s\">coords</span></td>\n<td align=\"left\"><em>coordinates</em></td>\n<td align=\"left\">HTML5 不支持。规定链接的坐标。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWRvd25sb2FkLmh0bWw=\">download</span></td>\n<td align=\"left\"><em>filename</em></td>\n<td align=\"left\">指定下载链接</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLWhyZWZsYW5nLmh0bWw=\">hreflang</span></td>\n<td align=\"left\"><em>language_code</em></td>\n<td align=\"left\">规定目标 URL 的基准语言。仅在 href 属性存在时使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLW1lZGlhLmh0bWw=\">media</span></td>\n<td align=\"left\"><em>media_query</em></td>\n<td align=\"left\">规定目标 URL 的媒介类型。默认值：all。仅在 href 属性存在时使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLW5hbWUuaHRtbA==\">name</span></td>\n<td align=\"left\"><em>section_name</em></td>\n<td align=\"left\">HTML5 不支持。规定锚的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXJlbC5odG1s\">rel</span></td>\n<td align=\"left\">alternate author bookmark help license next nofollow noreferrer prefetch prev search tag</td>\n<td align=\"left\">规定当前文档与目标 URL 之间的关系。仅在 href 属性存在时使用。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXJldi5odG1s\">rev</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">HTML5 不支持。规定目标 URL 与当前文档之间的关系。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXNoYXBlLmh0bWw=\">shape</span></td>\n<td align=\"left\">default rect circle poly</td>\n<td align=\"left\">HTML5 不支持。规定链接的形状。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXRhcmdldC5odG1s\">target</span></td>\n<td align=\"left\">_blank _parent _self _top <em>framename</em></td>\n<td align=\"left\">规定在何处打开目标 URL。仅在 href 属性存在时使用。_blank：新窗口打开。_parent：在父窗口中打开链接。_self：默认，当前页面跳转。_top：在当前窗体打开链接，并替换当前的整个窗体(框架页)。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1hLXR5cGUuaHRtbA==\">type</span></td>\n<td align=\"left\"><em>MIME_type</em></td>\n<td align=\"left\">规定目标 URL 的 MIME 类型。仅在 href 属性存在时使用。 注：MIME = Multipurpose Internet Mail Extensions。</td>\n</tr>\n</tbody></table>\n<h3 id=\"42-ltlinkgt\"><a href=\"#4-2-lt-link-gt\" class=\"headerlink\" title=\"4.2 &lt;link&gt;\"></a>4.2 <code>&lt;link&gt;</code></h3><p><code>&lt;link&gt;</code> 主要用于外部资源的联系。最常见的用途是<strong>链接样式表</strong>。</p>\n<p>如：</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css/style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text/css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><code>link</code>只能写在头部。属性和<code>&lt;a&gt;</code>差不多</p>\n<h2 id=\"5-ltimggt\"><a href=\"#5-lt-img-gt\" class=\"headerlink\" title=\"5. &lt;img&gt;\"></a>5. <code>&lt;img&gt;</code></h2><p>引入图片的标签</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">loading</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>lazy<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>smiley-2.gif<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Smiley face<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>42<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">height</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>42<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>主要属性如下</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctbG9hZGluZy5odG1s\">loading</span></td>\n<td align=\"left\">eager：立即加载 lazy：延迟加载</td>\n<td align=\"left\">指定浏览器是应立即加载图像还是延迟加载图像。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctYWx0Lmh0bWw=\">alt</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">如果加载不出，规定图像的替代文本。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctc3JjLmh0bWw=\">src</span></td>\n<td align=\"left\"><em>URL</em></td>\n<td align=\"left\">规定显示图像的 URL。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctaGVpZ2h0Lmh0bWw=\">height</span></td>\n<td align=\"left\"><em>pixels</em></td>\n<td align=\"left\">规定图像的高度。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbWctd2lkdGguaHRtbA==\">width</span></td>\n<td align=\"left\"><em>pixels</em></td>\n<td align=\"left\">规定图像的宽度。</td>\n</tr>\n</tbody></table>\n<p>其实<code>heigth</code>和<code>width</code>均可在CSS中设置，真正重要的也就<code>src</code>和<code>alt</code>属性。</p>\n<p>java项目的默认路径一般是<code>src</code>同名文件夹</p>\n<h2 id=\"6-列表标签\"><a href=\"#6-列表标签\" class=\"headerlink\" title=\"6. 列表标签\"></a>6. 列表标签</h2><p>一般使用<code>&lt;li&gt;</code>标签做列表项，用<code>&lt;ol&gt;</code>或<code>&lt;ul&gt;</code>包裹<code>&lt;li&gt;</code></p>\n<h3 id=\"61-ltolgt有序列表\"><a href=\"#6-1-lt-ol-gt-有序列表\" class=\"headerlink\" title=\"6.1 &lt;ol&gt;有序列表\"></a>6.1 <code>&lt;ol&gt;</code>有序列表</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ol</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">start</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>吃饭<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>打游戏<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>学习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ol</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>主要属性如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vbC1yZXZlcnNlZC5odG1s\">reversed</span></td>\n<td align=\"left\">reversed</td>\n<td align=\"left\">指定列表倒序(9,8,7…)</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vbC1zdGFydC5odG1s\">start</span></td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">一个整数值属性，指定了列表编号的起始值。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vbC10eXBlLmh0bWw=\">type</span></td>\n<td align=\"left\"><code>a</code> 小写字母编号<br><code>A</code> 大写字母<br><code>i</code> 小写罗马数字<br><code>I</code> 大写罗马数字<br><code>1</code> 表示数字编号（默认）</td>\n<td align=\"left\">规定列表的类型。<strong>但一般在CSS中设置</strong></td>\n</tr>\n</tbody></table>\n<h3 id=\"62-ltulgt无序列表\"><a href=\"#6-2-lt-ul-gt-无序列表\" class=\"headerlink\" title=\"6.2 &lt;ul&gt;无序列表\"></a>6.2 <code>&lt;ul&gt;</code>无序列表</h3><pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>吃饭<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>打游戏<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>学习<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<h2 id=\"7-ltdivgtltspangt无样式标签\"><a href=\"#7-lt-div-gt-lt-span-gt-无样式标签\" class=\"headerlink\" title=\"7. &lt;div&gt;/&lt;span&gt;无样式标签\"></a>7. <code>&lt;div&gt;/&lt;span&gt;</code>无样式标签</h2><p><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>没有特殊定义。</p>\n<p><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>是最常用到的两个标签，因为<code>html</code>大部分时候仅仅写个文本就够了，排版、样式都是由CSS完成的。</p>\n<p><code>&lt;div&gt;</code>和<code>&lt;span&gt;</code>的唯一区别是</p>\n<ul>\n<li><code>&lt;div&gt;</code>是块级元素，单独成一行（也就是会自动换行）。适合做盒子或者对网页布局。</li>\n<li><code>&lt;span&gt;</code>是内联元素，不会自动换行。可以做文本容器.</li>\n</ul>\n<p>一般用法是以<code>&lt;div&gt;</code>包裹<code>&lt;span&gt;</code></p>\n<h2 id=\"8-ltformgt表单接收用户输入\"><a href=\"#8-lt-form-gt-表单（接收用户输入）\" class=\"headerlink\" title=\"8. &lt;form&gt;表单（接收用户输入）\"></a>8. <code>&lt;form&gt;</code>表单（接收用户输入）</h2><p>HTML 表单用于收集不同类型的用户输入。以<code>&lt;form&gt;</code>标签包裹，里面设置如：文本域、下拉列表、单选框、复选框等。</p>\n<form> 元素包含一个或多个如下的表单元素：\n\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1pbnB1dC5odG1s\">input</span>：规定了用户可以在其中输入数据的输入字段。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy10ZXh0YXJlYS5odG1s\">textarea</span>：定义一个多行的文本输入控件。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1idXR0b24uaHRtbA==\">button</span>：按钮</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1zZWxlY3QuaHRtbA==\">select</span>：下拉框</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1vcHRpb24uaHRtbA==\">option</span>：下拉列表的选项，类似<code>&lt;ul&gt;</code>和<code>&lt;li&gt;</code>的关系</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1vcHRncm91cC5odG1s\">optgroup</span>：把相关的选项组合在一起。如图<img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210520204100133.png\" alt=\"image-20210520204100133\"></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1maWVsZHNldC5odG1s\">fieldset</span>：</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL3RhZy1sYWJlbC5odG1s\">label</span>：为<code>input</code>元素标注，如图<img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210520204504945.png\" alt=\"image-20210520204504945\">Male和Female就是`label</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\">action</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>#<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">method</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>get<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    用户名：&lt;input name = \"username\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>        \n    密码：<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>            <span class=\"token comment\" spellcheck=\"true\">&lt;!--请求参数--></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>登录<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p>主要属性如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLWFjY2VwdC5odG1s\">accept</span></td>\n<td align=\"left\"><em>MIME_type</em></td>\n<td align=\"left\">HTML5 不支持。规定服务器接收到的文件的类型。（文件是通过文件上传提交的）</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLWFjdGlvbi5odG1s\">action</span></td>\n<td align=\"left\"><em>URL</em></td>\n<td align=\"left\">规定当提交表单时向何处发送表单数据。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLW1ldGhvZC5odG1s\">method</span></td>\n<td align=\"left\">get/post</td>\n<td align=\"left\">规定用于发送表单数据的 HTTP 方法。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLW5hbWUuaHRtbA==\">name</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">规定表单的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1mb3JtLXRhcmdldC5odG1s\">target</span></td>\n<td align=\"left\">_blank/ _self /_parent /_top</td>\n<td align=\"left\">规定在何处打开 action URL。</td>\n</tr>\n</tbody></table>\n<h3 id=\"81-ltinputgt\"><a href=\"#8-1-lt-input-gt\" class=\"headerlink\" title=\"8.1 &lt;input&gt;\"></a>8.1 <code>&lt;input&gt;</code></h3><p><code>&lt;input&gt;</code> 标签规定了用户可以在其中输入数据的输入字段。</p>\n<p><code>&lt;input&gt; </code>元素在<code> &lt;form&gt;</code> 元素中使用，用来声明允许用户输入数据的 input 控件。</p>\n<p>主要属性如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC1uYW1lLmh0bWw=\">name</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">name 属性规定 <input> 元素的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC1yZWFkb25seS5odG1s\">readonly</span></td>\n<td align=\"left\">readonly</td>\n<td align=\"left\">readonly 属性规定输入字段是只读的。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC1zaXplLmh0bWw=\">size</span></td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">size 属性规定以字符数计的 <input> 元素的可见宽度。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC12YWx1ZS5odG1s\">value</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">指定 <input> 元素 value 的值。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1pbnB1dC10eXBlLmh0bWw=\">type</span></td>\n<td align=\"left\">button checkbox  image text 等</td>\n<td align=\"left\">type 属性规定要显示的 <input> 元素的类型。</td>\n</tr>\n</tbody></table>\n<p>输入字段可通过多种方式改变，取决于 <code>type</code> 属性。<code>type</code>主要属性如下</p>\n<ul>\n<li><p><code>button</code>：定义可点击的按钮（通常与 JavaScript 一起使用来启动脚本）。</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>点我<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onclick</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg()<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><code>value</code> - 按钮上显示的文字。<code>onclick</code> - 点击按钮事件执行的<code>JavaScript</code>代码<img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521141334312.png\" alt=\"image-20210521141334312\"></p>\n</li>\n<li><p><code>submit</code>：定义提交按钮。**<code>input</code>除了<code>button</code>，任何需要提交的都需要用到<code>submit</code>**</p>\n</li>\n<li><p><code>checkbox</code>：定义复选框。</p>\n<ul>\n<li>name：name属性相同的单/复选框为一组</li>\n<li>value：指定被选中后提交的值</li>\n<li>checked：一开始默认选中的项</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vehicle[]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Bike<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 自行车<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vehicle[]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Car<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 小轿车<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>checkbox<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>vehicle[]<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Boat<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 船<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>提交<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><code>name</code>相同的复选框为一组。<img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521141823540.png\" alt=\"image-20210521141823540\"></p>\n</li>\n<li><p><code>radio</code>：定义单选按钮。</p>\n<pre class=\" language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>女<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> 女<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>提交<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521141852425.png\" alt=\"image-20210521141852425\"></p>\n</li>\n<li><p><code>file</code>：定义文件选择字段和 “浏览…” 按钮，供文件上传。</p>\n<pre class=\" language-html\"><code class=\"language-html\">  选择一个文件: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>file<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>img<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521143325111.png\" alt=\"image-20210521143325111\"></p>\n</li>\n<li><p><code>password</code>：定义密码字段（字段中的字符会被遮蔽）。</p>\n<ul>\n<li>placeholder：指定输入框的提示信息，输入时会自动消失</li>\n<li>value：提示信息，不会自动消失</li>\n</ul>\n</li>\n<li><p><code>text</code>：默认。定义一个单行的文本字段（默认宽度为 20 个字符）。</p>\n<pre class=\" language-html\"><code class=\"language-html\">  Email: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>text<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>email<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>输入邮箱<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n  Password: <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>password<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>pwd<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">maxlength</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>8<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>输入密码<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521143529935.png\" alt=\"image-20210521143529935\"></p>\n</li>\n</ul>\n<h3 id=\"82-ltlabelgt标签文本绑定\"><a href=\"#8-2-lt-label-gt-标签文本绑定\" class=\"headerlink\" title=\"8.2 &lt;label&gt;标签文本绑定\"></a>8.2 <code>&lt;label&gt;</code>标签文本绑定</h3><p>label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。如果您在 label 元素内点击文本，就会触发此控件。</p>\n<p><code>&lt;label&gt;</code> 标签的 for 属性应当与相关元素的 id 属性相同。</p>\n<pre class=\" language-html\"><code class=\"language-html\">  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>male<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Male<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>male<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>male<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span> <span class=\"token attr-name\">for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>female<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Female<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>radio<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sex<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>female<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>female<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>br</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521143934294.png\" alt=\"image-20210521143934294\">如图，点击Male文本即可选中</p>\n<h3 id=\"83-ltselectgt下拉框\"><a href=\"#8-3-lt-select-gt-下拉框\" class=\"headerlink\" title=\"8.3 &lt;select&gt;下拉框\"></a>8.3 <code>&lt;select&gt;</code>下拉框</h3><p><code>&lt;select&gt;</code> 元素用来创建下拉列表。<strong>不需要被<code>&lt;form&gt;</code>包裹</strong></p>\n<p><code>&lt;select&gt;</code> 元素中的<code>&lt;option&gt;</code>标签定义了列表中的可用选项。</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>select</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>volvo<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Volvo<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>saab<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Saab<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>opel<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Opel<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">value</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>audi<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Audi<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>select</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521144307414.png\" alt=\"image-20210521144307414\"></p>\n<p>主要属性如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3QtZGlzYWJsZWQuaHRtbA==\">disabled</span></td>\n<td align=\"left\">disabled</td>\n<td align=\"left\">当该属性为 true 时，会禁用下拉列表。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3QtbmFtZS5odG1s\">name</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">定义下拉列表的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3QtcmVxdWlyZWQuaHRtbA==\">required</span><strong>New</strong></td>\n<td align=\"left\">required</td>\n<td align=\"left\">规定用户在提交表单前必须选择一个下拉列表中的选项。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1zZWxlY3Qtc2l6ZS5odG1s\">size</span></td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定下拉列表中可见选项的数目。</td>\n</tr>\n</tbody></table>\n<h4 id=\"ltoptiongt主要属性如下\"><a href=\"#lt-option-gt-主要属性如下\" class=\"headerlink\" title=\"&lt;option&gt;主要属性如下\"></a><code>&lt;option&gt;</code>主要属性如下</h4><table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vcHRpb24tZGlzYWJsZWQuaHRtbA==\">disabled</span></td>\n<td align=\"left\">disabled</td>\n<td align=\"left\">规定此选项应在首次加载时被禁用。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vcHRpb24tc2VsZWN0ZWQuaHRtbA==\">selected</span></td>\n<td align=\"left\">selected</td>\n<td align=\"left\">规定选项（在首次显示在列表中时）表现为选中状态。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC1vcHRpb24tdmFsdWUuaHRtbA==\">value</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">定义送往服务器的选项值。</td>\n</tr>\n</tbody></table>\n<h3 id=\"84-lttextareagt\"><a href=\"#8-4-lt-textarea-gt\" class=\"headerlink\" title=\"8.4 &lt;textarea&gt;\"></a>8.4 <code>&lt;textarea&gt;</code></h3><p><code>&lt;textarea&gt;</code> 标签定义一个<strong>多行</strong>的文本输入控件。</p>\n<p>和<code>&lt;input type=&quot;text&quot;&gt;</code>不同，<code>textarea</code>一般用来接收整段的文字</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>textarea</span> <span class=\"token attr-name\">rows</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>10<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">cols</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>30<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n我是一个文本框。\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>textarea</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521145011381.png\" alt=\"image-20210521145011381\"></p>\n<p>其主要属性如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性</th>\n<th align=\"left\">值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1hdXRvZm9jdXMuaHRtbA==\">autofocus</span><strong>New</strong></td>\n<td align=\"left\">autofocus</td>\n<td align=\"left\">规定当页面加载时，文本区域自动获得焦点。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1yb3dzLmh0bWw=\">rows</span></td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定文本区域内可见的行数。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1jb2xzLmh0bWw=\">cols</span></td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定文本区域内可见的宽度。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1kaXNhYmxlZC5odG1s\">disabled</span></td>\n<td align=\"left\">disabled</td>\n<td align=\"left\">规定禁用文本区域。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1tYXhsZW5ndGguaHRtbA==\">maxlength</span><strong>New</strong></td>\n<td align=\"left\"><em>number</em></td>\n<td align=\"left\">规定文本区域允许的最大字符数。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1uYW1lLmh0bWw=\">name</span></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">规定文本区域的名称。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1wbGFjZWhvbGRlci5odG1s\">placeholder</span><strong>New</strong></td>\n<td align=\"left\"><em>text</em></td>\n<td align=\"left\">规定一个简短的提示，描述文本区域期望的输入值。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1yZWFkb25seS5odG1s\">readonly</span></td>\n<td align=\"left\">readonly</td>\n<td align=\"left\">规定文本区域为只读。</td>\n</tr>\n<tr>\n<td align=\"left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS90YWdzL2F0dC10ZXh0YXJlYS1yZXF1aXJlZC5odG1s\">required</span><strong>New</strong></td>\n<td align=\"left\">required</td>\n<td align=\"left\">规定文本区域是必需的/必填的。</td>\n</tr>\n</tbody></table>\n<p>可在CSS中设置文本框不可拉伸</p>\n<pre class=\" language-css\"><code class=\"language-css\">textarea&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">resize</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*设置文本框不可拉伸*/</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"9-lttablegt表格\"><a href=\"#9-lt-table-gt-表格\" class=\"headerlink\" title=\"9. &lt;table&gt;表格\"></a>9. <code>&lt;table&gt;</code>表格</h2><p>表格也可以用来页面布局</p>\n<p>表格由<code> &lt;table&gt;</code> 标签来定义。每个表格均有若干行（由<code>&lt;tr&gt;</code>标签定义），每行被分割为若干单元格（由 <code>&lt;td&gt;</code> 标签定义）。字母 td 指表格数据（table data），即数据单元格的内容。数据单元格可以包含文本、图片、列表、段落、表单、水平线、表格等等。</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>table</span> <span class=\"token attr-name\">border</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 1, cell 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 1, cell 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>tr</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 2, cell 1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>td</span><span class=\"token punctuation\">></span></span>row 2, cell 2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>td</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>tr</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>table</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<p><img data-src=\"/2021/05/26/note/%E5%89%8D%E7%AB%AF/html/image-20210521145541432.png\" alt=\"image-20210521145541432\"></p>\n</form>",
            "tags": [
                "笔记",
                "前端",
                "前端",
                "html"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/23/note/%E5%89%8D%E7%AB%AF/CSS/",
            "url": "https://nitgod1996.com/2021/05/23/note/%E5%89%8D%E7%AB%AF/CSS/",
            "title": "CSS笔记及参考手册",
            "date_published": "2021-05-23T07:26:38.000Z",
            "content_html": "<h1 id=\"一-基本信息\"><a href=\"#一、-基本信息\" class=\"headerlink\" title=\"一、 基本信息\"></a>一、 基本信息</h1><h2 id=\"1-语法\"><a href=\"#1-语法\" class=\"headerlink\" title=\"1. 语法\"></a>1. 语法</h2><pre class=\" language-css\"><code class=\"language-css\">选择器&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    属性名<span class=\"token punctuation\">:</span>属性值<span class=\"token punctuation\">;</span>\n    属性名<span class=\"token property\">2</span><span class=\"token punctuation\">:</span>属性值<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">/*注释*/</span>\n</code></pre>\n<h2 id=\"2-定义\"><a href=\"#2-定义\" class=\"headerlink\" title=\"2. 定义\"></a>2. 定义</h2><ul>\n<li>在<code>html</code>中以<code>style</code>标签定义</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style language-css\">\n        div&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n            <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>blue<span class=\"token punctuation\">;</span>\n        &amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>在标签体内通过属性<code>style</code>对单个标签定义</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sty<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>px<span class=\"token punctuation\">;</span><span class=\"token property\">height</span><span class=\"token punctuation\">:</span> <span class=\"token number\">30</span>px<span class=\"token punctuation\">;</span><span class=\"token property\">background</span><span class=\"token punctuation\">:</span> red</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>CSS<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<ul>\n<li>在外部.CSS文件定义，在<code>html</code>中通过<code>link</code>标签引入</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>css/data.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span>\n</code></pre>\n<h1 id=\"二-选择器\"><a href=\"#二、-选择器\" class=\"headerlink\" title=\"二、 选择器\"></a>二、 选择器</h1><table>\n<thead>\n<tr>\n<th>选择器</th>\n<th>示例</th>\n<th>示例说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><a href=\"https://www.runoob.com/cssref/sel-class.html\">.<em>class</em></a></td>\n<td>.intro</td>\n<td>选择所有class=”intro”的元素</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/cssref/sel-id.html\">#<em>id</em></a></td>\n<td>#firstname</td>\n<td>选择所有id=”firstname”的元素</td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWFsbC5odG1s\">*</span></td>\n<td>*</td>\n<td>选择所有元素</td>\n</tr>\n<tr>\n<td><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWVsZW1lbnQuaHRtbA==\">element</span></em></td>\n<td>p</td>\n<td>选择所有<p>元素</p></td>\n</tr>\n<tr>\n<td><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWVsZW1lbnQtY29tbWEuaHRtbA==\">element,element</span></em></td>\n<td>div,p</td>\n<td>选择所有<div>元素和<p>元素</p></div></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/cssref/sel-element-element.html\"><em>element</em> <em>element</em></a></td>\n<td>div p</td>\n<td>选择<div>元素内的所有<p>元素</p></div></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/cssref/sel-element-gt.html\"><em>element</em>&gt;<em>element</em></a></td>\n<td>div&gt;p</td>\n<td>选择所有父级是 <div> 元素的 <p> 元素</p></div></td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/cssref/sel-element-pluss.html\"><em>element</em>+<em>element</em></a></td>\n<td>div+p</td>\n<td>选择所有紧接着<div>元素之后的<p>元素</p></div></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWJlZm9yZS5odG1s\">:before</span></td>\n<td>p:before</td>\n<td>在每个<p>元素之前插入内容</p></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWFmdGVyLmh0bWw=\">:after</span></td>\n<td>p:after</td>\n<td>在每个<p>元素之后插入内容</p></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWZpcnN0Y2hpbGQuaHRtbA==\">:first-child</span></td>\n<td>p:first-child</td>\n<td>指定只有当<p>元素是其父级的第一个子级的样式。</p></td>\n</tr>\n<tr>\n<td><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWxhc3QtY2hpbGQuaHRtbA==\">:last-child</span></td>\n<td>p:last-child</td>\n<td>选择每个p元素是其父级的最后一个子级。</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/cssref/sel-nth-child.html\">:nth-child(<em>n</em>)</a></td>\n<td>p:nth-child(2)</td>\n<td>选择每个p元素是其父级的第二个子元素</td>\n</tr>\n<tr>\n<td><a href=\"https://www.runoob.com/cssref/sel-nth-last-child.html\">:nth-last-child(<em>n</em>)</a></td>\n<td>p:nth-last-child(2)</td>\n<td>选择每个p元素的是其父级的第二个子元素，从最后一个子项计数</td>\n</tr>\n</tbody></table>\n<ul>\n<li>id选择器  ：通过id属性定位容器。语法是#idName</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>id1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>id选择器1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>      \n</code></pre>\n<pre class=\" language-css\"><code class=\"language-css\">#id<span class=\"token number\">1</span>&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> deepskyblue<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<ul>\n<li>类选择器：通过class属性定位容器。语法是.className</li>\n</ul>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>center<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>标题居中<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<pre class=\" language-css\"><code class=\"language-css\"><span class=\"token number\">.</span>center\n&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span>center<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*定位说有class=\"center\"的标签*/</span>\n</code></pre>\n<p><font color=\"red\">注：类选择器以</font><font size=\"20\" color=\"red\"><strong>空格</strong></font><font color=\"red\">为结束符，即第一个单词匹配成功即可。</font></p>\n<p>如<code>class=&quot;intro demo&quot;</code>亦可被<code>.intro</code>选择到。但<code>class=&quot;intro-demo&quot;</code>就不行</p>\n<ul>\n<li>element选择器：通过标签定位容器。语法是直接label{}</li>\n</ul>\n<pre class=\" language-css\"><code class=\"language-css\">div&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*所有div*/</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>red<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\np&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">/*所有p标签*/</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span>white<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li><p>*选择器：对所有容器进行<code>CSS</code>设置，通常用于初始化</p>\n</li>\n<li><p><code>:before/:after</code>选择器：在容器前/后插入内容，相当于在该位置创建一个新的容器并插入</p>\n</li>\n<li><p>并列选择器：同时选中多个选择器，用<code>,</code>隔开</p>\n</li>\n<li><p>子选择器：选择指定<strong>父标签</strong>的指定<strong>子标签</strong>，用<code>空格</code>隔开。</p>\n<ul>\n<li>父子选择器可以不同，如<code>div .center #id1</code>，表示<code>div</code>子元素中<code>class=center</code>的子元素中<code>id=id1</code>的元素</li>\n</ul>\n</li>\n<li><p>位数选择器：匹配所有的指定特征的第n个标签。选择器:位数选择器</p>\n<pre class=\" language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>p1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>p2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>p3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>section</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>box<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>p1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>p2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>p3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>section</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\" spellcheck=\"true\">&lt;!--如上，同一个父标签下相同类型标识（同一标签、id、class都可）的元素，称为一个组。此例中有2个p组--></span>\n</code></pre>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWZpcnN0Y2hpbGQuaHRtbA==\">:first-child</span>：各组下的第1个标签。如<code>.box:first-child</code>表示每个<code>class=&#39;box&#39;</code>组下的第一个标签</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvc2VsLWxhc3QtY2hpbGQuaHRtbA==\">:last-child</span>：最后一个标签</li>\n<li><a href=\"https://www.runoob.com/cssref/sel-nth-child.html\">:nth-child(<em>n</em>)</a>：各组第n个标签</li>\n<li><a href=\"https://www.runoob.com/cssref/sel-nth-last-child.html\">:nth-last-child(<em>n</em>)</a>：各组倒数第n个标签</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"三-属性\"><a href=\"#三、-属性\" class=\"headerlink\" title=\"三、 属性\"></a>三、 属性</h1><p>在选择器内通过属性定义样式</p>\n<pre class=\" language-css\"><code class=\"language-css\">#id<span class=\"token number\">1</span>&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> deepskyblue<span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">/*color便是属性*/</span>\n</code></pre>\n<h2 id=\"1-常见属性\"><a href=\"#1-常见属性\" class=\"headerlink\" title=\"1. 常见属性\"></a>1. 常见属性</h2><h3 id=\"11-background背景\"><a href=\"#1-1-background背景：\" class=\"headerlink\" title=\"1.1 background背景：\"></a>1.1 background背景：</h3><p>设置容器背景（简写模式），直接在后面填写各类型参数。也可分别设置每个背景值。一般都是简写</p>\n<p><code>background:bg-color bg-image position/bg-size bg-repeat bg-origin bg-clip bg-attachment initial|inherit;</code></p>\n<ul>\n<li>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1jb2xvci5odG1s\">background-color</span>*：背景颜色。<ul>\n<li><code>yellow</code></li>\n<li><code>#00ff00</code></li>\n<li><code>rgb(255,0,255)</code></li>\n</ul>\n</li>\n<li>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1wb3NpdGlvbi5odG1s\">background-position</span>*：背景图像的位置。以左上点定位，横轴/纵轴分别定位。<ul>\n<li><code>left top</code>：第一个是水平位置，<code>left</code> <code>right</code> <code>center</code>。第二个是垂直位置<code>top</code> <code>bottom</code> <code>center</code></li>\n<li><code>x% y%</code>：水平百分比，垂直百分比。<em><strong>相对于父容器的尺寸百分比</strong></em></li>\n<li><code>xpos ypos</code>：<code>pos</code>是单位，可以是<code>px</code>像素，也可以是<code>rem</code>等其他单位</li>\n<li><code>inherit</code>：继承自父元素</li>\n</ul>\n</li>\n<li>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1iYWNrZ3JvdW5kLXNpemUuaHRtbA==\">background-size</span>*：背景图片的大小。也是可以<code>像素值</code>或<code>百分比</code></li>\n<li>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1yZXBlYXQuaHRtbA==\">background-repeat</span>*：当背景图较小时如何重复，一般设<code>no-repeat</code>不重复</li>\n<li><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1pbWFnZS5odG1s\">background-image</span></em>    指定要使用的<strong>一个或多个</strong>背景图像。<code>url(图片的路径)</code></li>\n<li>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1iYWNrZ3JvdW5kLW9yaWdpbi5odG1s\">background-origin</span>*：</li>\n<li><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1iYWNrZ3JvdW5kLWNsaXAuaHRtbA==\">background-clip</span></em></li>\n<li><em><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYmFja2dyb3VuZC1hdHRhY2htZW50Lmh0bWw=\">background-attachment</span></em> 设置背景图像是否固定或者随着页面的其余部分滚动。</li>\n</ul>\n<h3 id=\"12-text文本\"><a href=\"#1-2-text文本：\" class=\"headerlink\" title=\"1.2 text文本：\"></a>1.2 text文本：</h3><p>文本属性，主要用于设置段落信息。如对齐方式、行高等</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC1kaXJlY3Rpb24uaHRtbA==\">direction</span>：文本方向<ul>\n<li><code>ltr</code>    默认。文本方向从左到右。</li>\n<li><code>rtl</code>    文本方向从右到左。</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC1jb2xvci5odG1s\">color</span>：文本颜色</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZGltLWxpbmUtaGVpZ2h0Lmh0bWw=\">line-height</span>：行高<ul>\n<li><code>number</code>：设置数字，此数字会与当前的字体尺寸相乘来设置行间距。</li>\n<li><code>length</code>：设置固定的行间距。</li>\n<li><code>%</code>：基于当前字体尺寸的百分比行间距。</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC10ZXh0LWFsaWduLmh0bWw=\">text-align</span>：对齐方式。<code>left</code>、<code>right</code>、<code>center</code>、<code>justify</code>（两端对齐）</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItcG9zLXZlcnRpY2FsLWFsaWduLmh0bWw=\">vertical-align</span>：垂直对齐方式</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItdGV4dC13b3JkLXNwYWNpbmcuaHRtbA==\">word-spacing</span>：字间距</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXRleHQuaHRtbA==\">其他</span></li>\n</ul>\n<h3 id=\"13-font字体\"><a href=\"#1-3-font字体：\" class=\"headerlink\" title=\"1.3 font字体：\"></a>1.3 font字体：</h3><p>设置字体。字体样式、大小、颜色等。简写如<code> font:15px arial,sans-serif;</code>，亦可单独设置</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC1mb250LXNpemUuaHRtbA==\">font-size</span>：字体大小</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC1mb250LXN0eWxlLmh0bWw=\">font-style</span>：字体样式。<ul>\n<li><code>italic</code>    斜体，表示使用文字的斜体。</li>\n<li><code>oblique</code>    倾斜，表示让没有斜体属性的文字倾斜。</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC13ZWlnaHQuaHRtbA==\">font-weight</span>：字体粗细<ul>\n<li><code>bold</code>    定义粗体字符。</li>\n<li><code>bolder</code>    定义更粗的字符。</li>\n<li><code>lighter</code>    定义更细的字符。</li>\n<li>直接数字定义</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItZm9udC1mb250LWZhbWlseS5odG1s\">font-family</span>：字体类型，如<code>Times New Roman</code>，也可导入外部字体，需要先用<code>@font-face </code>定义</li>\n</ul>\n<blockquote>\n<p>自定义字体，一般在网上下载好字体文件，引入即可。如下：</p>\n</blockquote>\n<pre class=\" language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@font-face</span> &amp;#123<span class=\"token punctuation\">;</span></span>\n    <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> electronicFont<span class=\"token punctuation\">;</span>\n    <span class=\"token property\">src</span><span class=\"token punctuation\">:</span> <span class=\"token url\">url(/font/DS-DIGIT.TTF)</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"14-列表ul-lo-li属性\"><a href=\"#1-4-列表ul、lo、li属性：\" class=\"headerlink\" title=\"1.4 列表ul、lo、li属性：\"></a>1.4 列表<code>ul</code>、<code>lo</code>、<code>li</code>属性：</h3><p>用于设置列表的属性，一般是列表项标志<code>● 1.</code>这种</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS5odG1s\">list-style</span>：简写</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS10eXBlLmh0bWw=\">list-style-type</span>：列表项标志类型<ul>\n<li><code>none</code>：没有标志</li>\n<li><code>disc</code>    默认。标记是实心圆</li>\n<li><code>circle</code>    标记是空心圆。</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS10eXBlLmh0bWw=\">更多</span></li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS1pbWFnZS5odG1s\">list-style-image</span>：用图像作列表项标志<code>url(&#39;sqpurple.gif&#39;)</code></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbGlzdC1zdHlsZS1wb3NpdGlvbi5odG1s\">list-style-position</span>：列表项标志的位置<ul>\n<li><code>inside</code>    列表项目标记放在文本内。</li>\n<li><code>outside</code>    默认值。位于文本外（左侧）。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"15-border边框\"><a href=\"#1-5-border边框：\" class=\"headerlink\" title=\"1.5 border边框：\"></a>1.5 border边框：</h3><p>用于设置容器的边框线</p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLmh0bWw=\">border</span>：简写属性，用于把针对四个边的属性设置在一个声明。如<code>border:5px solid red;</code></li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLXN0eWxlLmh0bWw=\">border-style</span>：设置线的样式，此属性可以有一到四个值。分别按↑、→、↓、←的顺序<ul>\n<li><code>dotted</code>    定义点状</li>\n<li><code>dashed</code>    定义虚线</li>\n<li><code>solid</code>    定义实线。</li>\n<li><code>double</code>    定义双线<ul>\n<li><strong>border-style:dotted solid double dashed;</strong><ul>\n<li>上边框是点状</li>\n<li>右边框是实线</li>\n<li>下边框是双线</li>\n<li>左边框是虚线</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLXdpZHRoLmh0bWw=\">border-width</span>：边框线宽</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLWNvbG9yLmh0bWw=\">border-color</span>：颜色</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLWJvdHRvbS5odG1s\">border-bottom</span>：单独设置下边框的简写</li>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItYm9yZGVyLWJvdHRvbS1jb2xvci5odG1s\">border-bottom-color</span>：下边框颜色…</li>\n<li>各边框都可各自定义</li>\n</ul>\n<h3 id=\"16-margin外边距padding内边距\"><a href=\"#1-6-margin外边距-padding内边距：\" class=\"headerlink\" title=\"1.6 margin外边距/padding内边距：\"></a>1.6 margin外边距/padding内边距：</h3><p>​    margin也称页边距，与父元素的间距。padding是与子元素的间距</p>\n<p><img data-src=\"https://www.runoob.com/wp-content/uploads/2013/08/VlwVi.png\" alt=\"img\"></p>\n<ul>\n<li><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItbWFyZ2luLmh0bWw=\">margin</span>：同时设置四个间距<ul>\n<li><code>auto</code>    浏览器计算下外边距。</li>\n<li><code>length</code>    比如像素、厘米等。默认值是 0px。</li>\n<li><code>%</code>    基于父元素的宽度的百分比</li>\n<li><code>inherit</code>    继承父元素</li>\n</ul>\n</li>\n<li>margin-bottom    设置元素的下外边距。</li>\n<li>margin-left    设置元素的左外边距。</li>\n<li>margin-right    设置元素的右外边距。</li>\n<li>margin-top    设置元素的上外边距。</li>\n<li>padding：同上</li>\n</ul>\n<h3 id=\"17-display显示\"><a href=\"#1-7-display显示：\" class=\"headerlink\" title=\"1.7 display显示：\"></a>1.7 display显示：</h3><ul>\n<li><code>display</code>通常用于隐藏/按行显示/按列显示<ul>\n<li><code>none</code>：隐藏所有组件。</li>\n<li><code>inline</code>：显示为内联元素，元素前后没有换行符。<strong>不识别宽高设置</strong></li>\n<li><code>block</code>：显示为块级元素，此元素前后会带有换行符。</li>\n<li><code>inline-block</code>：显示为行内块元素</li>\n</ul>\n</li>\n</ul>\n<blockquote>\n<p>注意：当把父元素设置为<code>inline</code>，不会对子元素产生影响。所以如果父元素是<code>inline</code>而子元素是<code>block</code>，那么仍会换行。</p>\n</blockquote>\n<ul>\n<li><code>visibility</code>也有隐藏功能<ul>\n<li><code>hidden</code>：隐藏组件，但该隐藏仅仅隐藏显示，空间布局是不变的（即隐藏后仍有一块空白）</li>\n</ul>\n</li>\n</ul>\n<p>此处首先先明确一下内联元素（inline element）和块元素（block element）的概念。（一条标签如<div>即是一个元素）</div></p>\n<h4 id=\"171-内联元素\"><a href=\"#1-7-1-内联元素\" class=\"headerlink\" title=\"1.7.1 内联元素\"></a>1.7.1 内联元素</h4><p>​        内联元素又名行内元素，和其对应的是块元素(block element)，都是html规范中的概念。内联元素的显示，为了帮助理解，可以形象的称为“文本模式”，即<strong>一个挨着一个，都在同一行按从左至右的顺序显示，不单独占一行</strong>。</p>\n<blockquote>\n<p>任何不是块级元素的可见元素都是内联元素。其表现的特性是“行布局”形式，这里的“行布局”的意思就是说其表现形式始终以行进行显示。</p>\n</blockquote>\n<p>内联元素有以下特点：</p>\n<ol>\n<li>和其他元素都在一行上，遇到父级元素边界会自动换行</li>\n<li>高、行高以及内外边距都<strong>不可以改变</strong></li>\n<li>宽度与内容一样宽，且<strong>不可改变</strong></li>\n<li>行内元素只能容纳文本或者其他行内元素</li>\n<li>对于行内元素，需要注意的是：设置宽度width无效，设置高度无效，可以通过设置line-height来设置，设置margin只有左右有效，上下无效，设置padding只有左右有效，上下无效</li>\n</ol>\n<p>常见的内联元素有：</p>\n<ul>\n<li>a – 锚点</li>\n<li>abbr – 缩写</li>\n<li>acronym – 首字</li>\n<li>b – 粗体(不推荐)</li>\n<li>bdo – bidi override</li>\n<li>big – 大字体</li>\n<li>br – 换行</li>\n<li>cite – 引用</li>\n<li>code – 计算机代码(在引用源码的时候需要)</li>\n<li>dfn – 定义字段</li>\n<li>em – 强调</li>\n<li>font – 字体设定(不推荐)</li>\n<li>i – 斜体</li>\n<li>img – 图片</li>\n<li>input – 输入框</li>\n<li>kbd – 定义键盘文本</li>\n<li>label – 表格标签</li>\n<li>q – 短引用</li>\n<li>s – 中划线(不推荐)</li>\n<li>samp – 定义范例计算机代码</li>\n<li>select – 项目选择</li>\n<li>small – 小字体文本</li>\n<li>span – 常用内联容器，定义文本内区块</li>\n<li>strike – 中划线</li>\n<li>strong – 粗体强调</li>\n<li>sub – 下标</li>\n<li>sup – 上标</li>\n<li>textarea – 多行文本输入框</li>\n<li>tt – 电传文本</li>\n<li>u – 下划线</li>\n</ul>\n<h4 id=\"172-块元素\"><a href=\"#1-7-2-块元素\" class=\"headerlink\" title=\"1.7.2 块元素\"></a>1.7.2 块元素</h4><p>块元素和内联元素的基本差异是块元素一般都从新行开始，相邻的块级元素将会在不同行显示。</p>\n<p>块级元素的特点：</p>\n<ol>\n<li>独霸一行，总是在新行上开始</li>\n<li>宽度缺省是它父级元素的100%，除非设定一个宽度</li>\n<li>高度、行高、外边距、内边距都可以设置</li>\n<li>可以容纳其他内联元素或者其他块元素</li>\n</ol>\n<p>以下是常见的块级元素：</p>\n<ul>\n<li>address – 地址</li>\n<li>blockquote – 块引用</li>\n<li>center – 举中对齐块</li>\n<li>dir – 目录列表</li>\n<li>div – 常用块级容易，也是CSS layout的主要标签</li>\n<li>dl – 定义列表</li>\n<li>fieldset – form控制组</li>\n<li>form – 交互表单</li>\n<li>h1~h6 – 标题</li>\n<li>hr – 水平分隔线</li>\n<li>isindex – input prompt</li>\n<li>menu – 菜单列表</li>\n<li>noframes – frames可选内容，（对于不支持frame的浏览器显示此区块内容</li>\n<li>noscript – 可选脚本内容（对于不支持script的浏览器显示此内容）</li>\n<li>ol – 有序表单</li>\n<li>p – 段落</li>\n<li>pre – 格式化文本</li>\n<li>table – 表格</li>\n<li>ul – 无序列表</li>\n</ul>\n<h4 id=\"173-行内块元素\"><a href=\"#1-7-3-行内块元素\" class=\"headerlink\" title=\"1.7.3 行内块元素\"></a>1.7.3 行内块元素</h4><p>inline-block。整合了块元素和内联元素的优点，有以下特点：</p>\n<ol>\n<li>元素排列在一行</li>\n<li>宽度默认由内容决定</li>\n<li>元素间默认有间距</li>\n<li>支持宽高、外边距、内边距的所有样式的设置</li>\n</ol>\n<h3 id=\"18-position定位\"><a href=\"#1-8-position定位：\" class=\"headerlink\" title=\"1.8 position定位：\"></a>1.8 position定位：</h3><p>​        指定了元素的定位类型。通常与<code>left</code>等定位属性配合使用</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItY2xhc3MtcG9zaXRpb24uaHRtbA==\">position</span></p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tc3RhdGlj\">static</span>：无特殊定位，遵循正常文档流，<strong>忽略left、top、right、bottom和z-index属性</strong></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tcmVsYXRpdmU=\">relative</span>：相对于正常位置(static)移动，<code>left</code>等属性设置的是<strong>移动值</strong>。</p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tZml4ZWQ=\">fixed</span>：相对浏览器窗口固定，即使窗口滚动也不会动。<strong>适用于做浮窗</strong></p>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tYWJzb2x1dGU=\">absolute</span>：绝对定位，其实是相对于<strong>父元素</strong>的坐标，<code>left</code>等属性设置的是<strong>坐标值</strong>。</p>\n<ol>\n<li><p>设置了absolute的元素如果存在有祖先元素设置了position属性为relative或者absolute，则这时元素的定位对象为此已设置position属性的祖先元素。</p>\n</li>\n<li><p>如果并没有设置了position属性的祖先元素，则此时相对于body进行定位。</p>\n</li>\n</ol>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tc3RpY2t5\">sticky</span>：粘性定位，设置一个阈值，相对于浏览器窗口不会超出此阈值。可见<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3MvY3NzLXBvc2l0aW9uaW5nLmh0bWwjcG9zaXRpb24tc3RpY2t5\">示例</span></p>\n</li>\n</ul>\n</li>\n<li><p><code>left</code>、<code>right</code>、<code>bottom</code>、<code>top</code>：设置距左、右、下、上的距离</p>\n<ul>\n<li><code>auto</code></li>\n<li><code>length</code>：<code>px</code>或<code>rem</code>或其他</li>\n<li><code>%</code></li>\n<li><code>inherit</code></li>\n</ul>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvcHItcG9zLXotaW5kZXguaHRtbA==\">z-index</span>：堆叠顺序。最大的在最上面</p>\n</li>\n</ul>\n<h3 id=\"19-overflow溢出设置\"><a href=\"#1-9-overflow溢出设置：\" class=\"headerlink\" title=\"1.9 overflow溢出设置：\"></a>1.9 overflow溢出设置：</h3><p>​    定义了当元素溢出容器时如何显示，如</p>\n<p><img data-src=\"/2021/05/23/note/%E5%89%8D%E7%AB%AF/CSS/Users\\Administrator.DESKTOP-R00PN9V\\AppData\\Roaming\\Typora\\typora-user-images\\image-20210429162249569.png\" alt=\"image-20210429162249569\"></p>\n<ul>\n<li><code>overflow</code><ul>\n<li><code>visible</code>    默认值。内容不会被修剪，会呈现在<strong>元素框之外</strong>。</li>\n<li><code>hidden</code>    内容会被修剪，并且其余内容是<strong>不可见</strong>的。</li>\n<li><code>scroll</code>    内容会被修剪，但是浏览器会显示<strong>滚动条</strong>以便查看其余的内容。</li>\n<li><code>auto</code>    如果内容被修剪，则浏览器会显示<strong>滚动条</strong>以便查看其余的内容。</li>\n<li><code>inherit</code>    继承</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-不常见属性\"><a href=\"#2-不常见属性\" class=\"headerlink\" title=\"2. 不常见属性\"></a>2. 不常见属性</h2><h5 id=\"动画\"><a href=\"#动画：\" class=\"headerlink\" title=\"动画：\"></a>动画：</h5><p>​    用于设置元素动画。需要先定义动画规则<code>@keyframes</code>（关键帧）</p>\n<ul>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24uaHRtbA==\">animation</span>：简写，语法如下</p>\n<blockquote>\n<p>animation: name duration timing-function delay iteration-count direction fill-mode play-state;。</p>\n</blockquote>\n<p>示例：<code>animation:mymove 5s infinite;</code></p>\n</li>\n<li><p>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tbmFtZS5odG1s\">animation-name</span>*：指定要绑定到选择器的动画名称</p>\n</li>\n<li><p>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tZHVyYXRpb24uaHRtbA==\">animation-duration</span>*：动画指定需要多少秒或毫秒完成。即一轮动画多少秒，0表示不执行动画</p>\n</li>\n<li><p>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uLmh0bWw=\">animation-timing-function</span>*：设置动画将如何完成一个周期</p>\n<ul>\n<li><code>linear</code>    动画从头到尾的速度是相同的。</li>\n<li><code>ease</code>    默认。动画以低速开始，然后加快，在结束前变慢。</li>\n<li><code>ease-in</code>    动画以低速开始。</li>\n<li><code>ease-out</code>    动画以低速结束。    </li>\n<li><code>ease-in-out</code>    动画以低速开始和结束。    </li>\n<li><code>cubic-bezier(n,n,n,n)</code>    自定义。在 cubic-bezier 函数中自己的值。可能的值是从 0 到 1 的数值。</li>\n</ul>\n</li>\n<li><p>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24tZGVsYXkuaHRtbA==\">animation-delay</span>*：设置动画在启动前的延迟间隔。</p>\n</li>\n<li><p>*<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24taXRlcmF0aW9uLWNvdW50Lmh0bWw=\">animation-iteration-count</span>*：播放次数</p>\n<ul>\n<li><code>n</code>    一个数字，定义应该播放多少次动画</li>\n<li><code>infinite</code>    无限循环</li>\n</ul>\n</li>\n<li><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9jc3NyZWYvY3NzMy1wci1hbmltYXRpb24uaHRtbA==\">更多</span></p>\n</li>\n</ul>\n<blockquote>\n<p>定义动画规则<code>@keyframes</code>（关键帧）</p>\n</blockquote>\n<p>如下</p>\n<pre class=\" language-css\"><code class=\"language-css\">@keyframes mymove\n&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\nfrom &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\nto &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span><span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n\n@-webkit-keyframes mymove <span class=\"token comment\" spellcheck=\"true\">/* Safari and Chrome */</span>\n&amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span>\nfrom &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span><span class=\"token number\">0</span>px<span class=\"token punctuation\">;</span>&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\nto &amp;<span class=\"token hexcode\">#123</span><span class=\"token punctuation\">;</span><span class=\"token property\">top</span><span class=\"token punctuation\">:</span><span class=\"token number\">200</span>px<span class=\"token punctuation\">;</span>&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n&amp;<span class=\"token hexcode\">#125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n",
            "tags": [
                "笔记",
                "前端",
                "前端",
                "CSS"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/20/note/%E9%9A%8F%E7%AC%94/%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0docker/",
            "url": "https://nitgod1996.com/2021/05/20/note/%E9%9A%8F%E7%AC%94/%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0docker/",
            "title": "docker随手记",
            "date_published": "2021-05-20T07:32:23.000Z",
            "content_html": "<ul>\n<li><p>docker的构想是要实现build，ship and run any app，anywhere，即通过对应用的<strong>封装、分发、部署、运行</strong>生命周期进行<strong>管理</strong>，达到应用组件级别的<strong>“一次封装，到处运行”</strong></p>\n<ul>\n<li>应用组件：web应用、一个编译环境、数据库平台服务、操作系统、集群</li>\n</ul>\n</li>\n<li><p>容器：装载应用组件和运行环境</p>\n</li>\n<li><p>镜像：相当于文件系统。镜像和容器的关系就像面向对象中类和实例一样。容器是镜像运行时的实体。</p>\n<ul>\n<li>镜像指的其实一般就是下载下来的软件镜像。如Ubuntu镜像、Redis镜像等</li>\n</ul>\n</li>\n<li><p>仓库：docker集中存放镜像文件的场所</p>\n<ul>\n<li>仓库注册服务器：存放仓库的地方</li>\n</ul>\n</li>\n<li><p>Docker 使用客户端-服务器 (C/S) 架构模式，使用<strong>远程API</strong>来管理和创建Docker容器。</p>\n</li>\n<li><table>\n<thead>\n<tr>\n<th align=\"left\">概念</th>\n<th align=\"left\">说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">Docker 镜像(Images)</td>\n<td align=\"left\">Docker 镜像是用于创建 Docker 容器的模板，比如 Ubuntu 系统。</td>\n</tr>\n<tr>\n<td align=\"left\">Docker 容器(Container)</td>\n<td align=\"left\">容器是独立运行的一个或一组应用，是镜像运行时的实体。</td>\n</tr>\n<tr>\n<td align=\"left\">Docker 客户端(Client)</td>\n<td align=\"left\">Docker 客户端通过命令行或者其他工具使用 Docker SDK (<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vZGV2ZWxvcC9zZGsv\">https://docs.docker.com/develop/sdk/</span>) 与 Docker 的守护进程通信。</td>\n</tr>\n<tr>\n<td align=\"left\">Docker 主机(Host)</td>\n<td align=\"left\">一个物理或者虚拟的机器用于执行 Docker 守护进程和容器。</td>\n</tr>\n<tr>\n<td align=\"left\">Docker Registry</td>\n<td align=\"left\">Docker 仓库用来保存镜像，可以理解为代码控制中的代码仓库。Docker Hub(<span class=\"exturl\" data-url=\"aHR0cHM6Ly9odWIuZG9ja2VyLmNvbS8=\">https://hub.docker.com</span>) 提供了庞大的镜像集合供使用。一个 Docker Registry 中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。通常，一个仓库会包含同一个软件不同版本的镜像，而标签就常用于对应该软件的各个版本。我们可以通过 <strong>&lt;仓库名&gt;:&lt;标签&gt;</strong> 的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 <strong>latest</strong> 作为默认标签。</td>\n</tr>\n<tr>\n<td align=\"left\">Docker Machine</td>\n<td align=\"left\">Docker Machine是一个简化Docker安装的命令行工具，通过一个简单的命令行即可在相应的平台上安装Docker，比如VirtualBox、 Digital Ocean、Microsoft Azure。</td>\n</tr>\n</tbody></table>\n</li>\n</ul>\n<p><img data-src=\"/2021/05/20/note/%E9%9A%8F%E7%AC%94/%E5%87%86%E5%A4%87%E5%AD%A6%E4%B9%A0docker/%E6%97%A0%E6%A0%87%E9%A2%98.png\" alt=\"无标题\"></p>\n<ul>\n<li><p>当运行容器时，使用的镜像如果在本地中不存在，docker 就会自动从 docker 镜像仓库中下载，默认是从 Docker Hub 公共镜像源下载。</p>\n</li>\n<li><p>容器是完全使用沙箱机制，相互之间不会有任何接口</p>\n<ul>\n<li><strong>沙箱</strong>就是一个限制应用程序对系统资源的访问的运行环境。</li>\n<li><strong>沙盒</strong>（英语：sandbox，又译为<strong>沙箱</strong>），计算机专业术语，在计算机安全领域中是一种<strong>安全机制</strong>，为运行中的程序提供的隔离环境。通常是作为一些来源不可信、具破坏力或无法判定程序意图的程序提供实验之用。</li>\n</ul>\n</li>\n<li><p>Docker支持将应用打包进一个可以移植的容器中，重新定义了应用开发，测试，部署上线的过程，核心理念就是 Build once, Run anywhere。</p>\n</li>\n<li><p>传统部署方式：安装指定版本的linux系统（ubuntu、centos、debian）-&gt; 安装服务器程序（安装所需的各种依赖包）-&gt; 修改配置 -&gt; 运行</p>\n</li>\n<li><p>Docker部署方式：安装任何linux系统 -&gt; 复制已有镜像（或者自动构建编译）-&gt; 运行</p>\n</li>\n<li><p>docker目前只能运行于<strong>linux</strong>的64位系统之上（能运行32位系统也是做过处理的，降低效率），官方提供了运行于windows上的工具，但是这个工具其实是集成一个微型的virtubox虚拟机，说白了还是得需要linux系统。</p>\n</li>\n<li><p>直接用docker pull redis-server就可以拉下来一个redis服务器的镜像，放到自己的docker里就能用了，不用自己解决依赖、安装redis。</p>\n</li>\n<li><p>好多开源工具都有docker镜像，这就使得用户只需要下载使用就行，完全省去了处理软件依赖、缺少库文件、安装部署等环节。</p>\n</li>\n<li><p>Docker适合微服务，一般一个docker容器只跑一个进程，连ssh服务都不要开启；像数据库这种大且重要的服务最好别用docker来跑，快慢放一边，万一有个bug就麻烦了。</p>\n</li>\n<li><p>镜像自身是只读的。容器从镜像启动的时候，会在镜像的最上层创建一个可写层</p>\n</li>\n<li><p>数据卷：数据卷是一个可供容器使用的特殊目录，它将主机操作系统目录直接映射进容器</p>\n<p>作用：</p>\n<pre><code> 1. 容器数据持久化\n 2. 外部机器和容器间接通信\n 3. 容器之间数据交换\n</code></pre>\n</li>\n</ul>\n<h2 id=\"1-镜像\"><a href=\"#1-镜像\" class=\"headerlink\" title=\"1. 镜像\"></a>1. 镜像</h2><h1 id=\"二-自己的理解\"><a href=\"#二、自己的理解\" class=\"headerlink\" title=\"二、自己的理解\"></a>二、自己的理解</h1><ul>\n<li>docker就是把软件和运行环境一起打包</li>\n<li></li>\n</ul>\n",
            "tags": [
                "笔记",
                "随笔"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/18/note/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "url": "https://nitgod1996.com/2021/05/18/note/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/",
            "title": "java基础语法及特性",
            "date_published": "2021-05-18T11:43:42.000Z",
            "content_html": "<h1 id=\"一-java基础知识\"><a href=\"#一、-Java基础知识\" class=\"headerlink\" title=\"一、 Java基础知识\"></a>一、 Java基础知识</h1><h2 id=\"1-java与c异同\"><a href=\"#1-Java与C-异同\" class=\"headerlink\" title=\"1. Java与C++异同\"></a>1. Java与C++异同</h2><table>\n<thead>\n<tr>\n<th></th>\n<th>Java</th>\n<th>C++</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>常  量</td>\n<td>final</td>\n<td>const</td>\n<td></td>\n</tr>\n<tr>\n<td>布尔值</td>\n<td>boolean：不与0/1或者指针联系</td>\n<td>bool：0/null表示false</td>\n<td></td>\n</tr>\n<tr>\n<td>判断相等</td>\n<td>.equals()</td>\n<td>==</td>\n<td>C++大多类重载了==  而Java中则是重载.equals()方法</td>\n</tr>\n<tr>\n<td>数组</td>\n<td>长度可以是变量  int[]a=new int [n];</td>\n<td>长度只能是常数  int a[100];</td>\n<td>实际上Java类似C++中用指针创建    int* a; a=new int [n];</td>\n</tr>\n<tr>\n<td>整型最值</td>\n<td>Integer.<em>MAX_VALUE</em></td>\n<td>INT_MAX</td>\n<td></td>\n</tr>\n<tr>\n<td>泛型</td>\n<td>集合要用Integer装箱</td>\n<td>直接vector<int></int></td>\n<td></td>\n</tr>\n</tbody></table>\n<h2 id=\"2-java编程前置知识\"><a href=\"#2-Java编程前置知识\" class=\"headerlink\" title=\"2. Java编程前置知识\"></a>2. Java编程前置知识</h2><h3 id=\"21-jdkjava-development-kitjava开发工具包\"><a href=\"#2-1-jdk–java-development-kit：Java开发工具包\" class=\"headerlink\" title=\"2.1 jdk–java development kit：Java开发工具包\"></a>2.1 jdk–java development kit：Java开发工具包</h3><p>Java开发工具包，定义了Java各版本语法及功能，以及Java的编译运行环境（javac、jvm、jre等）。</p>\n<p>建立项目前需要导入/选择要使用的jdk</p>\n<p>运行Java时，jdk真正起作用的主要是以下4个文件夹：</p>\n<ol>\n<li>bin：最主要的是编译器(javac.exe)</li>\n<li>include：java和JVM交互用的头文件</li>\n<li>lib：类库</li>\n<li>jre：java运行环境</li>\n</ol>\n<h3 id=\"22-jvmjava-virtual-machinejava虚拟机\"><a href=\"#2-2-jvm–java-virtual-machine：Java虚拟机\" class=\"headerlink\" title=\"2.2 jvm–java virtual machine：Java虚拟机\"></a>2.2 jvm–java virtual machine：Java虚拟机</h3><p>用于运行Java程序，Java文件运行的步骤如下：</p>\n<ol>\n<li>写好的.java文件经过javac编译器编译后生成.class类文件（也叫字节码文件）</li>\n<li>再通过jvm运行.class文件启动程序</li>\n<li>jvm通过分析.class的字节码对操作系统传达命令</li>\n</ol>\n<blockquote>\n<p>class并不直接与机器的操作系统相对应，而是经过虚拟机间接与操作系统交互，由虚拟机将程序解释给本地系统执行。</p>\n</blockquote>\n<h3 id=\"23-jrejava-runtime-environmentjava运行环境\"><a href=\"#2-3-jre–java-runtime-environment：Java运行环境\" class=\"headerlink\" title=\"2.3 jre–java runtime environment：Java运行环境\"></a>2.3 jre–java runtime environment：Java运行环境</h3><p>​        光有JVM还不能成class的执行，因为在解释class的时候JVM需要调用解释所需要的<strong>类库lib（library）</strong>。</p>\n<p>​        在JDK的安装目录里你可以找到jre目录，里面有两个文件夹bin和lib，在这里可以认为bin里的就是jvm，lib中则是jvm工作所需要的类库，而jvm和 lib和起来就称为jre。</p>\n<p>​        所以，在你写完java程序编译成.class之后，你可以把这个.class文件和jre一起打包发给朋友，这样你的朋友就可以运行你写程序了。（jre里有运行.class的java.exe）</p>\n<blockquote>\n<p>此处环境主要是运行所需的jar等各种条件</p>\n</blockquote>\n<h2 id=\"3-java运行时内存\"><a href=\"#3-Java运行时内存\" class=\"headerlink\" title=\"3. Java运行时内存\"></a>3. Java运行时内存</h2><ol>\n<li><p>方法区：存放各种类的方法信息，主要是存.class文件</p>\n</li>\n<li><p>堆（长时存放）：用于存放程序运行时产生的各种临时变量信息（主要是成员变量本身，和成员方法在方法区中的地址）。在new对象时建立，在set时写入，get时读出。</p>\n</li>\n<li><p>栈（临时存放）：存放局部变量信息。</p>\n<p>堆–背包    方法区–口袋    栈–操作台</p>\n</li>\n</ol>\n<h2 id=\"4-基础知识\"><a href=\"#4-基础知识\" class=\"headerlink\" title=\"4. 基础知识\"></a>4. 基础知识</h2><h3 id=\"41-基础类型与引用类型\"><a href=\"#4-1-基础类型与引用类型\" class=\"headerlink\" title=\"4.1 基础类型与引用类型\"></a>4.1 基础类型与引用类型</h3><table>\n<thead>\n<tr>\n<th>基础类型</th>\n<th>引用类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>byte</td>\n<td>Byte</td>\n</tr>\n<tr>\n<td>short</td>\n<td>Short</td>\n</tr>\n<tr>\n<td>int</td>\n<td>Integer</td>\n</tr>\n<tr>\n<td>double</td>\n<td>Double</td>\n</tr>\n<tr>\n<td>long</td>\n<td>Long</td>\n</tr>\n<tr>\n<td>float</td>\n<td>Float</td>\n</tr>\n<tr>\n<td>boolean</td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td>char</td>\n<td>Character</td>\n</tr>\n<tr>\n<td>不能为null</td>\n<td>可以是null</td>\n</tr>\n</tbody></table>\n<p>以及所有new出来的对象都是引用类型。（附：以上列举的其实是基础类型对应的<strong>包装类</strong>）</p>\n<p>其他注意事项：</p>\n<ol>\n<li>小数默认double，如果要float需要注明3.14F或3.14f</li>\n<li>整数默认int，long需要注明10L或10l</li>\n<li>数学运算时任何类型均转为int和double</li>\n</ol>\n<h3 id=\"42-转义字符及其unicode\"><a href=\"#4-2-转义字符及其Unicode\" class=\"headerlink\" title=\"4.2 转义字符及其Unicode\"></a>4.2 转义字符及其Unicode</h3><p>Unicode即utf-8编码， 特殊字符需要用转义符’\\‘+其他字符得出，常见操作如下表：</p>\n<table>\n<thead>\n<tr>\n<th>转义序列</th>\n<th>名称</th>\n<th>Unicode值</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>\\b</td>\n<td>退格</td>\n<td>\\u0008</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>制表</td>\n<td>\\u0009</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>换行</td>\n<td>\\u000a</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>回车</td>\n<td>\\u000d</td>\n</tr>\n<tr>\n<td>\\”</td>\n<td>双引号</td>\n<td>\\u0022</td>\n</tr>\n<tr>\n<td>\\’</td>\n<td>单引号</td>\n<td>\\u0027</td>\n</tr>\n<tr>\n<td>\\</td>\n<td>反斜杠</td>\n<td>\\u005c</td>\n</tr>\n</tbody></table>\n<h3 id=\"43-数组创建\"><a href=\"#4-3-数组创建\" class=\"headerlink\" title=\"4.3 数组创建\"></a>4.3 数组创建</h3><ol>\n<li><p>动态创建：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span> <span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//创建初始值为0长度为10的数组</span>\n</code></pre>\n</li>\n<li><p>静态创建：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//或者直接</span>\n<span class=\"token keyword\">int</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"44-不确定参数数量的函数构建方法\"><a href=\"#4-4-不确定参数数量的函数构建方法\" class=\"headerlink\" title=\"4.4 不确定参数数量的函数构建方法\"></a>4.4 不确定参数数量的函数构建方法</h3><p>当不明确函数需要几个参数时，可以按如下方法创建</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//arr实际上是个数组</span>\n    <span class=\"token keyword\">int</span> sum1<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">:</span>arr<span class=\"token punctuation\">)</span> sum1<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> sum1<span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//调用</span>\n<span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>可变参数只能有一个数组，下面的方法是**<font color=\"red\">错误</font>**的</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>arr，String<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span><span class=\"token comment\" spellcheck=\"true\">//Error</span>\n</code></pre>\n<h2 id=\"5-java类的三大基本方法\"><a href=\"#5-java类的三大基本方法\" class=\"headerlink\" title=\"5. java类的三大基本方法\"></a>5. java类的三大基本方法</h2><p>java所有类均继承自Object类，这个类有几个方法常常需要重载</p>\n<h3 id=\"51-tostring方法\"><a href=\"#5-1-toString（）方法\" class=\"headerlink\" title=\"5.1 toString（）方法\"></a>5.1 <code>toString（）</code>方法</h3><pre class=\" language-java\"><code class=\"language-java\">String <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\" spellcheck=\"true\">//返回该对象的字符串表示。</span>\n</code></pre>\n<p>​        这个方法用于将该类转换成字符形式，<code>System.out.println</code>也是自动识别对象的<code>.toString</code>方法将其输出</p>\n<h3 id=\"52-equals方法\"><a href=\"#5-2-equals-方法\" class=\"headerlink\" title=\"5.2 equals()方法\"></a>5.2 <code>equals()</code>方法</h3><pre class=\" language-java\"><code class=\"language-java\"> <span class=\"token keyword\">boolean</span> <span class=\"token function\">equals</span><span class=\"token punctuation\">(</span>Object obj<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//指示其他某个对象是否与此对象“相等”。</span>\n</code></pre>\n<p>​        java对象的判断一般不用<code>==</code>，而是用<code>.equals()</code>判断两个对象的<strong>值</strong>是否相等。</p>\n<blockquote>\n<p>因为<code>==</code>会比较对象的地址，只有同一个对象才可能返回<code>true</code>，但这并没有什么意义</p>\n</blockquote>\n<p><font color=\"red\" size=\"5\">此外，也可使用<code>Objects.equals(a,b)</code>判断，这样即使是<code>null</code>也不会空指针异常</font></p>\n<h3 id=\"53-hashcode方法\"><a href=\"#5-3-hashCode-方法\" class=\"headerlink\" title=\"5.3 hashCode()方法\"></a>5.3 <code>hashCode()</code>方法</h3><p>返回该对象的哈希码，<strong>相当于是标记该对象的唯一的ID值</strong></p>\n<h2 id=\"6-类型互相转换\"><a href=\"#6-类型互相转换\" class=\"headerlink\" title=\"6. 类型互相转换\"></a>6. 类型互相转换</h2><p>类型互相转换一般有2种情况：</p>\n<ol>\n<li>有<strong>基础类型</strong>的转换</li>\n<li>各种<strong>对象</strong>的转换</li>\n</ol>\n<p>对象之间的转换一般直接在对象前添加<code>(想要转换的类型)</code>即可，如下</p>\n<pre class=\" language-java\"><code class=\"language-java\">User usr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>UserDemo<span class=\"token punctuation\">)</span>usr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>这种方法需要两个类之间有<strong>继承</strong>关系。</p>\n<p>而有基础类型的转换一般用通过包装类进行，最常见/常用的便是<code>int</code>和<code>String</code>的转换了</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//以下为Integer静态方法</span>\n<span class=\"token keyword\">static</span> Integer <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//int转Integer</span>\n<span class=\"token keyword\">static</span> Integer <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//String转Integer</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>    <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span> <span class=\"token comment\" spellcheck=\"true\">//把String转换成int</span>\n</code></pre>\n<p>详细的包装类方法在之后介绍</p>\n<h2 id=\"7-命名规范及代码风格\"><a href=\"#7-命名规范及代码风格\" class=\"headerlink\" title=\"7. 命名规范及代码风格\"></a>7. 命名规范及代码风格</h2><ol>\n<li>类名：以大写字母开头，每个单词第一个字母大写</li>\n<li>方法名/变量名：以小写字母开头，每个单词第一个字母大写</li>\n<li>常量：全用大写，每个单词之间以’_’分隔</li>\n<li>当参数名重复或找不到合适的时，可以以aName、aSalary之类</li>\n</ol>\n<h2 id=\"8-idea相关\"><a href=\"#8-IDEA相关\" class=\"headerlink\" title=\"8. IDEA相关\"></a>8. IDEA相关</h2><h3 id=\"81-快捷键\"><a href=\"#8-1-快捷键\" class=\"headerlink\" title=\"8.1 快捷键\"></a>8.1 快捷键</h3><ol>\n<li><p>System.out.println(); //sout</p>\n</li>\n<li><p>public static void main(String[] args) {//psvm</p>\n</li>\n<li><p>Alt+Enter：自动修复代码</p>\n</li>\n<li><p>Alt+Insert：自动生成成员函数</p>\n</li>\n<li><p>Ctrl+Y：删除光标所在行</p>\n</li>\n<li><p>Ctrl+D：复制光标所在行内容，插入光标位置下面</p>\n</li>\n<li><p>Ctrl+Alt+L：格式化代码</p>\n</li>\n<li><p>Ctrl+/：单行注释，再按取消注释</p>\n</li>\n<li><p>Ctrl+Shift+/：选中代码注释。多行注释，再按取消</p>\n</li>\n<li><p>Alt+Shift+上下箭头：移动当前代码行</p>\n</li>\n<li><p>Ctrl+Alt+Shift+S：打开工程配置Project Settings</p>\n</li>\n</ol>\n<h3 id=\"82-debug调试\"><a href=\"#8-2-debug调试\" class=\"headerlink\" title=\"8.2 debug调试\"></a>8.2 debug调试</h3><ol>\n<li><p>设置断点</p>\n</li>\n<li><p>右键debug调试</p>\n</li>\n<li><p><strong>快捷键：</strong></p>\n<p>f8：逐行执行</p>\n<p>f7：进入方法</p>\n<p>shift+f8：跳出方法</p>\n<p>f9：跳到下一个断点</p>\n<p>Ctrl+f2：退出debug模式</p>\n<p>左下角console：切换到控制台</p>\n</li>\n</ol>\n<h3 id=\"83-idea配置\"><a href=\"#8-3-IDEA配置\" class=\"headerlink\" title=\"8.3 IDEA配置\"></a>8.3 IDEA配置</h3><ul>\n<li><p>字体</p>\n<p>File-Setting-Editor-Font</p>\n<p>Font:consoles </p>\n<p>Size:16 </p>\n</li>\n<li><p>自动补全</p>\n<p>File-Setting-Keymap-Main menu-Code-Complication-Basic</p>\n<p>设置快捷键为Alt+/</p>\n</li>\n<li><p>配置jsp模板</p>\n<p>File-Setting-Editor-File and Code Templates</p>\n</li>\n</ul>\n<h1 id=\"二-面向对象\"><a href=\"#二、-面向对象\" class=\"headerlink\" title=\"二、 面向对象\"></a>二、 面向对象</h1><h2 id=\"1-基础知识\"><a href=\"#1-基础知识\" class=\"headerlink\" title=\"1. 基础知识\"></a>1. 基础知识</h2><ol>\n<li>new操作符的返回值是一个引用（对new出来的对象的引用，new其实就是构造函数调用方法）</li>\n<li>在类的内部用<code>this</code>调用其方法（包括构造方法），用<code>super</code>调用父类方法</li>\n</ol>\n<h2 id=\"2-初始化块静态代码块\"><a href=\"#2-初始化块-静态代码块\" class=\"headerlink\" title=\"2. 初始化块/静态代码块\"></a>2. 初始化块/静态代码块</h2><ol>\n<li>初始化块</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">demo01</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//可以操作静态字段用于计数等</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//初始化块</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在类内创建一个<code>&#123;&#125;</code>，块内的代码<strong>该类new一个对象执行一次</strong>，常用来计数</p>\n<ol start=\"2\">\n<li>静态代码块</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">demo01</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//典型用途，用来一次性对静态变量进行赋值</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//静态初始化块</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>在类内创建一个<code>static&#123;&#125;</code>，块内代码<strong>进在第一次使用该类时执行一次</strong>，常用于对静态变量赋值</p>\n<h2 id=\"3-静态static\"><a href=\"#3-静态static\" class=\"headerlink\" title=\"3. 静态static\"></a>3. 静态static</h2><p><code>static</code>关键字表示<strong>即使不创建对象也可以调用</strong></p>\n<p>静态static是属于类的，所有对象共享的，不随对象动态变化的。</p>\n<p><code>static</code>位于内存的方法区</p>\n<h3 id=\"31-静态字段\"><a href=\"#3-1-静态字段\" class=\"headerlink\" title=\"3.1 静态字段\"></a>3.1 静态字段</h3><p>类的专有成员变量，是该类所有对象共享的变量，可以被任意对象的成员函数修改。</p>\n<h3 id=\"32-静态方法\"><a href=\"#3-2-静态方法\" class=\"headerlink\" title=\"3.2 静态方法\"></a>3.2 静态方法</h3><p>可以直接由类名调用的，不需要先创建对象。<em>静态方法指定访问静态字段</em></p>\n<h3 id=\"33-静态代码块\"><a href=\"#3-3-静态代码块\" class=\"headerlink\" title=\"3.3 静态代码块\"></a>3.3 静态代码块</h3><p>如上所讲</p>\n<h2 id=\"4-设计类的注意事项\"><a href=\"#4-设计类的注意事项\" class=\"headerlink\" title=\"4. 设计类的注意事项\"></a>4. 设计类的注意事项</h2><ol>\n<li>一定要保证数据私有</li>\n<li>一定要对数据进行初始化（主要是静态数据吧）</li>\n<li>不要在类中使用过多的基本类型</li>\n<li>不是所有字段都需要单独的get/set方法</li>\n<li>分解具有过多职责的类（<strong>解耦</strong>）</li>\n<li>类名和方法名要能够体现他们的职责</li>\n<li>优先使用不可变的类（即不能修改对象的类）</li>\n</ol>\n<h1 id=\"三-继承与多态\"><a href=\"#三、-继承与多态\" class=\"headerlink\" title=\"三、 继承与多态\"></a>三、 继承与多态</h1><h2 id=\"1-基础知识\"><a href=\"#1-基础知识-1\" class=\"headerlink\" title=\"1. 基础知识\"></a>1. 基础知识</h2><ol>\n<li><p>私有变量可以<strong>被继承</strong>但不能被访问。<em>其实可通过父类方法访问。<code>super</code>调用</em></p>\n</li>\n<li><p>构造函数不被继承，可在子类通过<code>super()</code>引用父类构造器</p>\n</li>\n<li><p>静态字段和方法可以<strong>被继承</strong>，但<strong>不能被重写</strong>。</p>\n</li>\n<li><p><code>final</code>关键字标记的类<strong>不能被继承</strong>，<code>final</code>标记的方法/字段<strong>不能被重写</strong></p>\n</li>\n<li><p>成员方法引用时，成员方法在哪个类定义，就引用哪个类的成员变量。如下</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span>  <span class=\"token keyword\">int</span> <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Father</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">demo01</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        Father demo<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">.</span><span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>demo<span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">//输出结果：1</span>\n        <span class=\"token comment\" spellcheck=\"true\">//class com.example.demo.Child</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>但如果<code>Child</code>中重写了<code>getA()</code>，那么输出结果即为<strong>2</strong></p>\n</li>\n</ol>\n<h2 id=\"2-覆盖重写override\"><a href=\"#2-覆盖重写override\" class=\"headerlink\" title=\"2. 覆盖重写override\"></a>2. 覆盖重写override</h2><h3 id=\"21-重写成员变量不建议\"><a href=\"#2-1-重写成员变量（不建议）\" class=\"headerlink\" title=\"2.1 重写成员变量（不建议）\"></a>2.1 重写成员变量（不建议）</h3><p>成员方法在哪个类定义，引用的就是哪个类的成员变量。</p>\n<p>所以重定义子类字段不会对继承的方法产生影响。</p>\n<p>一般来说，<strong>字段只用于定义它的那个类。</strong></p>\n<p>子类的字段和父类的字段即使名字一样，也相当于两个字段了</p>\n<p>所以，<strong>除了静态字段，一般不在类中直接定义成员变量的值，也不在子类重写成员变量。</strong></p>\n<h3 id=\"22-重写成员方法\"><a href=\"#2-2-重写成员方法\" class=\"headerlink\" title=\"2.2 重写成员方法\"></a>2.2 重写成员方法</h3><p>重新定义一个与父类函数相同返回类型、方法名、参数类型、参数名、参数数量的函数，即为重写。</p>\n<p>可用<code>@Override</code>检测是否成功覆盖该方法</p>\n<p>重写时如果仅仅是添加功能，可以利用<code>super</code>调用父类方法，如下</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">thisMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">thisMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\" spellcheck=\"true\">//新功能1;</span>\n   <span class=\"token comment\" spellcheck=\"true\">//新功能2;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"3-多态\"><a href=\"#3-多态\" class=\"headerlink\" title=\"3. 多态\"></a>3. 多态</h2><blockquote>\n<p>一个对象变量可以指示多种实际类型的现象即成为多态</p>\n</blockquote>\n<p>实际操作上是：以父类声明，以父类/子类a/子类b构造，如下</p>\n<pre class=\" language-java\"><code class=\"language-java\">Father demo<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>此时的<code>demo</code>是Child类型的对象，可调用Child重写/增加的方法和Father类自带的方法。</p>\n<ol>\n<li>继承/多态是为了类型解耦，不要把过多功能写在一个类</li>\n<li>一般父类需要被重写的方法以抽象函数<code>abstract</code>定义</li>\n<li>有时候父类直接写成接口<code>interface</code>，子类作为实现类<code>implement</code></li>\n</ol>\n<p>程序中，可以通过<code>instanceof</code>来判别对象属于哪个类，如下</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>demo <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h2 id=\"4-抽象abstract\"><a href=\"#4-抽象abstract\" class=\"headerlink\" title=\"4. 抽象abstract\"></a>4. 抽象abstract</h2><blockquote>\n<p>抽象是接口的核心，也是多态的一种应用</p>\n</blockquote>\n<p>在定义父类时暂时不想定义该方法（可能是还没想好怎么定义，或者各子类的实现方法不一样），但该类必须要有这个方法时，就设置为<code>abstract</code>，在特定的子类实现。（同时父类也要定义成<code>abstract</code>类或者接口）</p>\n<p>如下</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Father</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">int</span> <span class=\"token function\">abstractmethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果定义了抽象方法，那么子类<strong>必须实现所有抽象方法，否则子类也要定义成抽象类</strong></p>\n<h1 id=\"四-接口\"><a href=\"#四、-接口\" class=\"headerlink\" title=\"四、 接口\"></a>四、 接口</h1><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InterDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//接口的所有成员默认是public</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//接口可以定义静态字段，static可省略</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//接口可以定义静态方法</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">default</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getDoubleA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//接口可以定义非抽象方法，需要用default标记</span>\n        <span class=\"token keyword\">return</span> a<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">interfaceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"1-接口的性质\"><a href=\"#1-接口的性质\" class=\"headerlink\" title=\"1. 接口的性质\"></a>1. 接口的性质</h2><ol>\n<li>接口不是类，不能new一个接口，只能new一个接口的实现类。但可以以接口定义对象</li>\n<li>可以用<code>instanceof</code>检查对象是否实现某个接口</li>\n<li>接口可以继承别的接口</li>\n<li>一个类可以实现多个接口</li>\n<li>接口中的方法默认是<code>public abstract</code></li>\n<li>接口的实现类必须实现所有抽象方法</li>\n<li>接口没有静态代码块<code>static&#123;&#125;</code>和构造方法</li>\n<li>接口可以定义非抽象方法，如静态方法和普通方法（需要以<code>default</code>标记），非抽象方法一般被继承不被重写。</li>\n</ol>\n<h2 id=\"2-接口的定义和实现\"><a href=\"#2-接口的定义和实现\" class=\"headerlink\" title=\"2. 接口的定义和实现\"></a>2. 接口的定义和实现</h2><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//接口定义</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">InterDemo</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">interfaceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//实现类</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ImplDemo</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">InterDemo</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ImplDemo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ImplDemo</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> id<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">interfaceMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"this is a implement Class\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//调用</span>\nInterDemo demo1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ImplDemo</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol>\n<li>实现类除了必须实现接口抽象方法，其他和普通类并无二致</li>\n<li>可以以抽象类/新接口实现接口，这样不需要实现所有抽象类</li>\n<li>调用方法一般是<code>接口 对象名=new 实现类构造器();</code></li>\n</ol>\n<h2 id=\"4-lambda表达式\"><a href=\"#4-lambda表达式\" class=\"headerlink\" title=\"4. lambda表达式\"></a>4. lambda表达式</h2><p>lambda表达式极大的方便了接口的使用，它省略实现类的定义，直接在调用接口的过程中实现接口。</p>\n<p>lambda表达式不会生成单独的.class文件，因此效率比匿名内部类高</p>\n<h3 id=\"41-使用场景\"><a href=\"#4-1-使用场景\" class=\"headerlink\" title=\"4.1 使用场景\"></a>4.1 使用场景</h3><pre><code>      1. 有些方法需要调用接口**（传参是接口/方法）**，如`Array.sort()`函数，其第二个参数需要调用`Comparator`比较器，而非普通的变量/对象\n      2. 接口**仅有一个**抽象方法，且该方法有**返回值**\n</code></pre>\n<h3 id=\"42-使用规则\"><a href=\"#4-2-使用规则\" class=\"headerlink\" title=\"4.2 使用规则\"></a>4.2 使用规则</h3><ol>\n<li><p>一些参数：多个参数用逗号分隔</p>\n</li>\n<li><p>一个箭头：把参数传递给方法体</p>\n</li>\n<li><p>一段代码：重写接口的抽象方法</p>\n</li>\n</ol>\n<p>(参数列表)-&gt; {一些代码}</p>\n<p><code>method(参数1,(接口参数1,接口参数2)-&gt;&#123;方法实现代码;&#125;);</code></p>\n<p>如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\">Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>string s<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>String s1<span class=\"token punctuation\">,</span>String s2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"43-简化lambda表达式\"><a href=\"#4-3-简化lambda表达式\" class=\"headerlink\" title=\"4.3 简化lambda表达式\"></a>4.3 简化lambda表达式</h3><ol>\n<li><p>如果参数类型可以推断出，可以不写</p>\n<pre class=\" language-java\"><code class=\"language-java\">Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//此例就可根据strings判断出s1和s2是String类型变量</span>\n</code></pre>\n</li>\n<li><p>如果只有一行代码，可省略<code>&#123;&#125;</code>和<code>return</code></p>\n<pre class=\" language-java\"><code class=\"language-java\">Arrays<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>strings<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token operator\">></span> s1<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>如果只有一个参数，且可推断出类型，<code>()</code>可省略</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"44-方法引用比lambda更简\"><a href=\"#4-4-方法引用（比lambda更简）\" class=\"headerlink\" title=\"4.4 方法引用（比lambda更简）\"></a>4.4 方法引用（比lambda更简）</h3><p>使用前提：</p>\n<pre><code> 1. 能用`lambda`表达式，且抽象方法只有一个参数。即在4.3.3的前提下\n 2. 方法体内仅调用一个方法，且参数为抽象方法的参数。（相当于是用其他方法描述了抽象方法，或者说抽象方法引用该方法）\n</code></pre>\n<p>使用方法：已存在的对象名::方法名代替接口实现</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//lambda表达式：如4.3.3</span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//方法引用：     </span>\n<span class=\"token keyword\">new</span> <span class=\"token class-name\">JButton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">addActionListener</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token operator\">:</span><span class=\"token operator\">:</span>println<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//即</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//可用</span>\n<span class=\"token function\">method</span><span class=\"token punctuation\">(</span>System<span class=\"token punctuation\">.</span>out<span class=\"token operator\">:</span><span class=\"token operator\">:</span>println<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//替代</span>\n</code></pre>\n<p> 示例：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>event<span class=\"token operator\">-</span><span class=\"token operator\">></span> System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">,</span>System<span class=\"token punctuation\">.</span>out<span class=\"token operator\">:</span><span class=\"token operator\">:</span>println<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">memthod</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">,</span>Consumer p<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    p<span class=\"token punctuation\">.</span><span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//传入hello</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>输出：</p>\n<p>​        hello</p>\n<p>​        hello</p>\n<h3 id=\"45-构造器引用这个用到不多没什么印象了\"><a href=\"#4-5-构造器引用（这个用到不多，没什么印象了）\" class=\"headerlink\" title=\"4.5 构造器引用（这个用到不多，没什么印象了）\"></a>4.5 构造器引用（这个用到不多，没什么印象了）</h3><p>类名::new</p>\n<p>lambda表达式：x-&gt;new int[x]</p>\n<p>构造器引用：int[]::new</p>\n<p>对于使用哪个构造器，取决于上下文。（其实对应传递式lambda表达式的参数数量）</p>\n<p>创建一个Person类</p>\n<p>(a,b)-&gt;new Person(a,b)</p>\n<p>等价于</p>\n<p>Person::new</p>\n<h2 id=\"5-内部类\"><a href=\"#5-内部类\" class=\"headerlink\" title=\"5. 内部类\"></a>5. 内部类</h2><p>即在类的内部再次定义一个类</p>\n<ol>\n<li>可以为<code>private</code>，则该类对同一个包内的其他类隐藏</li>\n<li>内部类可以<strong>直接</strong>访问外部类的所有成员</li>\n<li>在外部类使用内部类方法需要先new一个内部类对象</li>\n</ol>\n<h3 id=\"51-内部类的引用\"><a href=\"#5-1-内部类的引用\" class=\"headerlink\" title=\"5.1 内部类的引用\"></a>5.1 内部类的引用</h3><ol>\n<li><p>在内部类引用外部类：<code>外部类.this</code></p>\n<pre class=\" language-java\"><code class=\"language-java\">Demo01<span class=\"token punctuation\">.</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>在外部类<strong>内</strong>引用内部类：直接new一个内部类对象即可</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>在外部类<strong>外</strong>引用内部类：<code>外部类.内部类</code>（前提是内部类是public，否则无法引用）</p>\n<pre class=\" language-java\"><code class=\"language-java\">System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Demo01<span class=\"token punctuation\">.</span>Inner1<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>在外部类<strong>外</strong>构造内部类：<code>外部类对象.new 内部类()</code>（前提是内部类是public）</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Inner1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"52-当内部类中出现重名变量时\"><a href=\"#5-2-当内部类中出现重名变量时\" class=\"headerlink\" title=\"5.2 当内部类中出现重名变量时\"></a>5.2 当内部类中出现重名变量时</h3><ul>\n<li>局部变量<strong>直接用</strong></li>\n<li>内部类变量用<strong>this关键字</strong></li>\n<li>外部类变量用<strong>外部类.this.变量名</strong></li>\n</ul>\n<h3 id=\"53-局部内部类\"><a href=\"#5-3-局部内部类\" class=\"headerlink\" title=\"5.3 局部内部类\"></a>5.3 局部内部类</h3><p>在方法体内定义的类，为局部内部类。该类仅在方法内部有效</p>\n<ul>\n<li><p>外部类修饰符：public/（default）</p>\n</li>\n<li><p>内部类修饰符：public/protected/（default）/private</p>\n</li>\n<li><p>局部内部类：什么都不能写</p>\n</li>\n</ul>\n<p>局部内部类仅能访问方法内部的局部变量。</p>\n<h3 id=\"54-匿名内部类\"><a href=\"#5-4-匿名内部类\" class=\"headerlink\" title=\"5.4 匿名内部类\"></a>5.4 匿名内部类</h3><p>前提：当该类仅需使用一次</p>\n<p>含义：不定义实现类，直接在使用接口时重写抽象类。</p>\n<p>​        <strong>一般有多个抽象方法的接口使用匿名类，仅有一个方法的使用lambda表达式更简便</strong></p>\n<p>好处：省掉一个类的单独定义，使项目更加轻便</p>\n<p>匿名类的对象则可用多次使用，如下</p>\n<pre class=\" language-java\"><code class=\"language-java\">Runnable runnable<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//runnable可用多次使用</span>\n</code></pre>\n<h3 id=\"55-匿名对象\"><a href=\"#5-5-匿名对象\" class=\"headerlink\" title=\"5.5 匿名对象\"></a>5.5 匿名对象</h3><p>即new一个对象时不给他命名，该对象就仅能使用一次。</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//匿名线程对象(匿名实现类).start()</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h1 id=\"五-异常-断言-日志\"><a href=\"#五、-异常、断言、日志\" class=\"headerlink\" title=\"五、 异常、断言、日志\"></a>五、 异常、断言、日志</h1><h2 id=\"1-异常\"><a href=\"#1-异常\" class=\"headerlink\" title=\"1. 异常\"></a>1. 异常</h2><p>即处理程序运行过程中出现的各种bug，避免不必要的程序中断。</p>\n<p><strong>目的</strong>：程序产生异常会中断，造成数据丢失，因此需要对可能出现的异常进行处理</p>\n<p><strong>做法</strong>：编写程序时声明可能产生的异常，抛出给jvm处理或者自行处理。避免不必要的中断</p>\n<h3 id=\"11-检查性异常和非检查性异常\"><a href=\"#1-1-检查性异常和非检查性异常\" class=\"headerlink\" title=\"1.1 检查性异常和非检查性异常\"></a>1.1 检查性异常和非检查性异常</h3><p><strong>非检查性异常</strong>：</p>\n<p>编译器不会检查的异常，如下：</p>\n<ol>\n<li><p>错误的强制类型转换</p>\n</li>\n<li><p>数组访问越界     <code>ArrayIndexOutOfBoundsException</code></p>\n</li>\n<li><p>访问null指针     <code>NullPointerException</code></p>\n</li>\n</ol>\n<p> 这些异常往往是编写的<strong>逻辑错误</strong>导致，应尽量避免，<strong>不需要声明抛出</strong></p>\n<p><strong>检查性异常</strong>：</p>\n<p>编译器会检查的异常，主要是用户错误操作导致，所以需要程序有处理该异常的机制</p>\n<p>如：</p>\n<ol>\n<li>文件路径访问错误</li>\n<li>参数类型错误</li>\n<li>…</li>\n</ol>\n<p><strong>我们需要处理的异常主要是检查性异常</strong></p>\n<h3 id=\"12-处理异常的方法\"><a href=\"#1-2-处理异常的方法\" class=\"headerlink\" title=\"1.2 处理异常的方法\"></a>1.2 处理异常的方法</h3><ol>\n<li>直接<code>throw</code>抛出异常，交给调用该方法的地方处理或者由jvm处理</li>\n<li>用<code>try-catch</code>捕获异常，进行处理。如下</li>\n</ol>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    var in<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//创建一个输入流</span>\n    <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c://name.tx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可能抛出异常的代码</span>\ncode<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可能的异常类型</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//处理字段</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>一般来说最常见的处理方法就是输出异常信息</p>\n<h4 id=\"13-释放资源\"><a href=\"#1-3-释放资源\" class=\"headerlink\" title=\"1.3 释放资源\"></a>1.3 释放资源</h4><h4 id=\"131-关键字finally\"><a href=\"#1-3-1-关键字finally\" class=\"headerlink\" title=\"1.3.1 关键字finally\"></a>1.3.1 关键字finally</h4><p>使用finally表示<strong>无论是否发生异常执行</strong>。适用于必须执行的代码，如输入输入流的关闭<code>close</code></p>\n<p>如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    var in<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//创建一个输入流</span>\n    <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"c://name.tx\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可能抛出异常的代码</span>\ncode<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可能的异常类型</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//处理字段</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">finally</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//关闭输入流</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h4 id=\"132-自动释放资源\"><a href=\"#1-3-2-自动释放资源\" class=\"headerlink\" title=\"1.3.2 自动释放资源\"></a>1.3.2 自动释放资源</h4><p>在try后的()中声明资源，在try块退出时会自动释放该资源</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">try</span><span class=\"token punctuation\">(</span>var in<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FileInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可以创建多个</span>\n        \n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//可能的异常类型</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//处理字段</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"14-自定义异常很少用不太记得了\"><a href=\"#1-4-自定义异常（很少用，不太记得了）\" class=\"headerlink\" title=\"1.4 自定义异常（很少用，不太记得了）\"></a>1.4 自定义异常（很少用，不太记得了）</h3><p>如果遇到了标准异常类无法描述清楚的问题，则需要自己定义异常类</p>\n<p>格式：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ExceptionCustom</span> <span class=\"token keyword\">extends</span> 父类异常<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//就和最简单的子类继承父类一样</span>\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ExceptionCustom</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//一个无参构造函数</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token function\">ExceptionCustom</span><span class=\"token punctuation\">(</span>String message<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//一个一参构造函数</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//message是自定义的异常描述</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>用法和Java自带异常对象一样</p>\n<h2 id=\"2-断言缺省\"><a href=\"#2-断言（缺省）\" class=\"headerlink\" title=\"2. 断言（缺省）\"></a>2. 断言（缺省）</h2><ul>\n<li>编写代码时,我们总是会做出一些假设,断言就是用于在代码中捕捉这些假设。 </li>\n<li>可以将断言看作是异常处理的一种高级形式。</li>\n<li>断言表示为一些布尔表达式,程序员相信在程序中的某个特定点该表达式值为真。 </li>\n<li>单元测试必须使用断言(Junit/JunitX)。</li>\n</ul>\n<h2 id=\"3-日志缺省\"><a href=\"#3-日志（缺省）\" class=\"headerlink\" title=\"3. 日志（缺省）\"></a>3. 日志（缺省）</h2><h1 id=\"六-反射不是很清楚\"><a href=\"#六、-反射（不是很清楚）\" class=\"headerlink\" title=\"六、 反射（不是很清楚）\"></a>六、 反射（不是很清楚）</h1><p>将类的各个组成部分（成员变量、成员函数、构造函数等）封装为对象。也可以被称之为专用于分析类的程序。</p>\n<p>简单点说就是把方法之类的当做变量处理。</p>\n<blockquote>\n<p>反射是框架的核心技术</p>\n</blockquote>\n<h2 id=\"1-获取类的信息\"><a href=\"#1-获取类的信息\" class=\"headerlink\" title=\"1. 获取类的信息\"></a>1. 获取类的信息</h2><p>类在创建好后有3个阶段：</p>\n<ul>\n<li><p>source源码阶段：以<code>.java</code>和<code>.class</code>字节码字段的形式存储与硬盘</p>\n<ul>\n<li><p>通过<code>Class.forName(&quot;全类名&quot;)</code>获取</p>\n</li>\n<li><pre class=\" language-java\"><code class=\"language-java\">Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"全类名\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//全类名：包名+.类名。</span>\n    <span class=\"token comment\" spellcheck=\"true\">//返回与带有给定字符串名的类或接口相关联的 Class 对象。</span>\n    <span class=\"token comment\" spellcheck=\"true\">//加载源代码阶段的.class字节码</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>Class类对象阶段：在java程序中<code>import</code>导包，导入该类时</p>\n<ul>\n<li><p>通过<code>类名.class</code>获取</p>\n</li>\n<li><pre class=\" language-java\"><code class=\"language-java\">Person<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//此处Person是自定义的一个类</span>\n    <span class=\"token comment\" spellcheck=\"true\">//加载于Class类对象阶段，即导包后</span>\n</code></pre>\n</li>\n</ul>\n</li>\n<li><p>runtime运行时阶段：创建该类的对象参与运行时</p>\n<ul>\n<li><p>通过<code>类对象.getClass()</code>获取</p>\n</li>\n<li><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClass</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//加载与runtime阶段，即创建类对象时加载</span>\n</code></pre>\n</li>\n</ul>\n</li>\n</ul>\n<p><img data-src=\"/2021/05/18/note/Java/java%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%E5%8F%8A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/image-20210519140330233.png\" alt=\"image-20210519140330233\"></p>\n<p>同一.class字节码在一次程序运行过程中只会<strong>加载一次</strong>。所以以上123获取的Class对象==，即内存地址值是同一个</p>\n<h2 id=\"2-获取成员变量\"><a href=\"#2-获取成员变量\" class=\"headerlink\" title=\"2. 获取成员变量\"></a>2. 获取成员变量</h2><pre class=\" language-java\"><code class=\"language-java\">java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>Object\n  java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>AccessibleObject\n      java<span class=\"token punctuation\">.</span>lang<span class=\"token punctuation\">.</span>reflect<span class=\"token punctuation\">.</span>Field\n</code></pre>\n<p>java中通过<code>Field类</code> 提供有关类或接口的单个字段的信息，以及对它的动态访问权限。</p>\n<p><strong>通过Class类获取Field对象</strong></p>\n<table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数（Class对象的函数）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> </code>[Field](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)</td>\n<td>[**getField**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getField(java.lang.String))<code>(</code>[String](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/String.html)<code> name)</code> 返回指定公共成员字段。（Java中不同数据类型的变量也不可重名）</td>\n</tr>\n<tr>\n<td><code> </code>[Field](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)<code>[]</code></td>\n<td>[**getFields**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getFields())<code>()</code> 返回所有可访问公共字段。</td>\n</tr>\n<tr>\n<td><code> </code>[Field](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)</td>\n<td>[<em><em>getDeclaredField*</em>](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredField(java.lang.String))<code>(</code>[String](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/String.html)<code> name)</code>返回指定已声明字段。（所有修饰符）  *//declared**：v.公布;宣布;宣告;表明;宣称;断言;申报(收益)</em></td>\n</tr>\n<tr>\n<td><code> </code>[Field](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html)<code>[]</code></td>\n<td>[**getDeclaredFields**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredFields())<code>()</code> 返回所有字段。</td>\n</tr>\n</tbody></table>\n<p><strong>通过Field对象操作成员变量</strong></p>\n<table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数（Field对象的函数）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> </code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)</td>\n<td>[**get**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html#get(java.lang.Object))<code>(</code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)<code> obj)</code> 返回指定对象上该字段的值。</td>\n</tr>\n<tr>\n<td><code> </code>[String](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/String.html)</td>\n<td>[**getName**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html#getName())<code>()</code> 返回此字段的名称。</td>\n</tr>\n<tr>\n<td><code> void</code></td>\n<td>[**set**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Field.html#set(java.lang.Object, java.lang.Object))<code>(</code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)<code>obj,</code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)<code> value)</code>将指定对象变量设置为指定的新值。</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td>[**setAccessible**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/AccessibleObject.html#setAccessible(boolean))<code>(boolean flag)</code>设置字段的<code>accessible</code>。 <br> <em>accessible：暴力反射。<code>true</code>表示可访问（包括private）</em></td>\n</tr>\n</tbody></table>\n<p>用法如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\">Class <span class=\"token class-name\">personClass</span><span class=\"token operator\">=</span> Person<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//获取一个Class对象，表示的是Person类</span>\nField field<span class=\"token operator\">=</span>personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//value1是Person类的字段名</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>field<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//输出：public java.lang.String Person.value1</span>\nfield<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//获取new Person的value1的值</span>\nfield<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"字段新值\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//将new Person的value1设为新的值</span>\n</code></pre>\n<pre class=\" language-java\"><code class=\"language-java\">Field field1<span class=\"token operator\">=</span>personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getDeclaredField</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfield1<span class=\"token punctuation\">.</span><span class=\"token function\">setAccessible</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//value2是私有变量，加上此句后可get/set访问</span>\nfield1<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//合法</span>\nfield1<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//合法</span>\n</code></pre>\n<h2 id=\"3-获取构造器\"><a href=\"#3-获取构造器\" class=\"headerlink\" title=\"3. 获取构造器\"></a>3. 获取构造器</h2><p>java通过<code>Constructor类</code>来捕获类的构造器。</p>\n<p><strong>以Class类获取Constructor</strong></p>\n<p>以下<code>T</code>表示类名</p>\n<table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数（Class对象的函数）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> </code>[Constructor](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)<code>&lt;</code>[T](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)<code>&gt;</code></td>\n<td>[**getConstructor**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getConstructor(java.lang.Class…))<code>(</code>[Class](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)<code>&lt;?&gt;... parameterTypes)</code>返回指定公共构造方法。</td>\n</tr>\n<tr>\n<td><code> </code>[Constructor](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)<code>&lt;?&gt;[]</code></td>\n<td>[**getConstructors**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getConstructors())<code>()</code> 返回所有公共构造方法。</td>\n</tr>\n<tr>\n<td><code> </code>[Constructor](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)<code>&lt;</code>[T](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)<code>&gt;</code></td>\n<td>[**getDeclaredConstructor**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredConstructor(java.lang.Class…))<code>(</code>[Class](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)<code>&lt;?&gt;... parameterTypes)</code>返回指定构造方法。</td>\n</tr>\n<tr>\n<td><code> </code>[Constructor](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)<code>&lt;?&gt;[]</code></td>\n<td>[**getDeclaredConstructors**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredConstructors())<code>()</code> 返回所有构造方法。</td>\n</tr>\n</tbody></table>\n<p><strong>用Constructor的方法使用构造器</strong></p>\n<table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数（Constructor对象的函数）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> </code>[T](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html)</td>\n<td>[**newInstance**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Constructor.html#newInstance(java.lang.Object…))<code>(</code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)<code>... initargs)</code>使用此构造器构造对象</td>\n</tr>\n</tbody></table>\n<p>如下</p>\n<pre class=\" language-java\"><code class=\"language-java\">Constructor constructor<span class=\"token operator\">=</span>\npersonClass<span class=\"token punctuation\">.</span><span class=\"token function\">getConstructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//获取person类的指定参数的构造器</span>\nObject p<span class=\"token operator\">=</span>constructor<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"新值\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//根据构造器构造一个Person类对象</span>\n输出：\n    Person<span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>value<span class=\"token operator\">=</span><span class=\"token number\">56</span><span class=\"token punctuation\">,</span> value1<span class=\"token operator\">=</span><span class=\"token string\">'新值'</span><span class=\"token punctuation\">,</span> value2<span class=\"token operator\">=</span>c<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//空参构造可以直接用Class的newInstance方法</span>\nObject p1<span class=\"token operator\">=</span>personClass<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//已过时</span>\n</code></pre>\n<h2 id=\"4-获取成员函数\"><a href=\"#4-获取成员函数\" class=\"headerlink\" title=\"4. 获取成员函数\"></a>4. 获取成员函数</h2><p>java通过<code>Method类</code>来捕获操作成员函数</p>\n<p><strong>以Class对象获取Method</strong></p>\n<table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数（Class对象的函数）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> </code>[Method](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)</td>\n<td>[<strong>getMethod**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getMethod(java.lang.String, java.lang.Class…))<code>(</code>[String](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/String.html)<code>name,</code>[Class](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)<code>&lt;?&gt;... parameterTypes)</code><br>根据指定</strong>方法名<strong>和</strong>参数类型**返回指定公共方法（空参可不写参数类型）<br>如<code>personClass.getMethod(&quot;myMethod&quot;);//myMethod是个空参方法</code></td>\n</tr>\n<tr>\n<td><code> </code>[Method](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)<code>[]</code></td>\n<td>[**getMethods**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getMethods())<code>()</code> 返回所有（包括接口、从超类和超接口继承）的公共 方法。</td>\n</tr>\n<tr>\n<td><code> </code>[Method](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)</td>\n<td>[**getDeclaredMethod**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredMethod(java.lang.String, java.lang.Class…))<code>(</code>[String](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/String.html)<code>name,</code>[Class](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)<code>&lt;?&gt;... parameterTypes)</code>返回指定已声明方法。</td>\n</tr>\n<tr>\n<td><code> </code>[Method](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html)<code>[]</code></td>\n<td>[**getDeclaredMethods**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html#getDeclaredMethods())<code>()</code>返回所有方法，包括公共、保护、默认（包）访问和私有方法，但不包括继承的方法。</td>\n</tr>\n</tbody></table>\n<p><strong>以Method对象操作方法</strong></p>\n<table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数（Method对象的函数）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> </code>[String](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/String.html)</td>\n<td>[**getName**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html#getName())<code>()</code> 返回此 <code>Method</code> 对象表示的方法名称。</td>\n</tr>\n<tr>\n<td><code> </code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)</td>\n<td>[**invoke**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/Method.html#invoke(java.lang.Object, java.lang.Object…))<code>(</code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)<code>obj,</code>[Object](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Object.html)<code>... args)</code>根据指定对象和指定参数调用此方法。</td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td>[**isAnnotationPresent**](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/reflect/AccessibleObject.html#isAnnotationPresent(java.lang.Class))<code>(</code>[Class](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/Class.html)<code>&lt;? extends </code>[Annotation](mk:@MSITStore:C:\\Users\\nitgod\\Desktop\\JDK API 1.6.0 中文版.chm::/java/lang/annotation/Annotation.html)<code>&gt; annotationClass)</code>如果指定类型的注释存在于此元素上，则返回 true，否则返回 false。</td>\n</tr>\n</tbody></table>\n<p>如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\">Method method<span class=\"token operator\">=</span>personClass<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"myMethod1\"</span><span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmethod<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"这是一个方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n输出：\n    这是一个方法\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">myMethod1</span><span class=\"token punctuation\">(</span>String s<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"5-反射的意义\"><a href=\"#5-反射的意义\" class=\"headerlink\" title=\"5. 反射的意义\"></a>5. 反射的意义</h2><p>反射是写框架的核心技术，而框架则需要不改动代码的情况下使用任意的对象和方法</p>\n<p>∴ 反射-将改动代码-&gt;改动配置文件</p>\n<p>通过可IO集合的<strong>类</strong> <strong>Properties</strong>读取配置文件，利用反射调用任意类对象的方法</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">//1.加载配置文件</span>\n<span class=\"token comment\" spellcheck=\"true\">//1.1创建properties对象</span>\nProperties pro<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Properties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//1.2获取class目录下的配置文件</span>\nClassLoader classLoader<span class=\"token operator\">=</span>Reflect<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token function\">getClassLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">//获取配置文件的输入流</span>\nInputStream is<span class=\"token operator\">=</span>classLoader<span class=\"token punctuation\">.</span><span class=\"token function\">getResourceAsStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pro.properties\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npro<span class=\"token punctuation\">.</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//加载</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//2.获取配置文件中的数据</span>\nString className<span class=\"token operator\">=</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"className\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nString methodName<span class=\"token operator\">=</span>pro<span class=\"token punctuation\">.</span><span class=\"token function\">getProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"methodName\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//3.加载该类进内存</span>\nClass <span class=\"token class-name\">cls</span><span class=\"token operator\">=</span>Class<span class=\"token punctuation\">.</span><span class=\"token function\">forName</span><span class=\"token punctuation\">(</span>className<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//4.创建对象</span>\nObject obj<span class=\"token operator\">=</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">newInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//5.获取方法对象</span>\nMethod method1<span class=\"token operator\">=</span>cls<span class=\"token punctuation\">.</span><span class=\"token function\">getMethod</span><span class=\"token punctuation\">(</span>methodName<span class=\"token punctuation\">,</span>String<span class=\"token punctuation\">.</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//6.调用方法</span>\nmethod1<span class=\"token punctuation\">.</span><span class=\"token function\">invoke</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">,</span><span class=\"token string\">\"调用方法\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//5、6两处，需要知道方法的参数类型才可</span>\n</code></pre>\n<h1 id=\"七-测试test\"><a href=\"#七、-测试Test\" class=\"headerlink\" title=\"七、 测试Test\"></a>七、 测试Test</h1><h2 id=\"1-测试一般步骤\"><a href=\"#1-测试一般步骤\" class=\"headerlink\" title=\"1. 测试一般步骤\"></a>1. 测试一般步骤</h2><ol>\n<li>定义一个测试类<ol>\n<li>测试类名：被测试的类名+Test</li>\n<li>包名：xxx.xxx.xx.test。一般在Test总包下</li>\n</ol>\n</li>\n<li>定义测试函数<ol>\n<li>方法名：test+测试的方法名。或者方法名+Test</li>\n<li>返回值：一般为void</li>\n<li>参数列表：空参。实际上是当做main函数测试</li>\n<li>在方法上加上<code>@Test</code>注解</li>\n</ol>\n</li>\n<li>导入<code>Junit</code>依赖，即<code>@Test</code>所需的依赖包</li>\n</ol>\n<h2 id=\"2-测试技巧用断言assert判定结果\"><a href=\"#2-测试技巧：用断言assert判定结果\" class=\"headerlink\" title=\"2. 测试技巧：用断言assert判定结果\"></a>2. 测试技巧：用断言assert判定结果</h2><p>一般来说，测试结果</p>\n<pre><code>1. 红色：失败\n 2. 绿色：成功\n</code></pre>\n<p>用断言assert来处理判定结果Assert.assertEquals(期望值,实际值);</p>\n<p>如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Test</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">testAdd</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> res<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">demo01</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Assert<span class=\"token punctuation\">.</span><span class=\"token function\">assertEquals</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>如果res和期望值不同，则会显示</p>\n<p>java.lang.AssertionError:</p>\n<p>Expected :3</p>\n<p>Actual  :2</p>\n<h2 id=\"3-测试技巧注解after和before\"><a href=\"#3-测试技巧：注解-after和-before\" class=\"headerlink\" title=\"3. 测试技巧：注解@after和@before\"></a>3. 测试技巧：注解<code>@after</code>和<code>@before</code></h2><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@Before</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">before</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该方法会在所有测试方法执行之前执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token annotation punctuation\">@After</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">after</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"该方法会在所有测试方法执行之后执行\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><code>@Before</code>一般用来申请资源</p>\n<p><code>@After</code>一般用来释放资源</p>\n<h1 id=\"七-集合\"><a href=\"#七、-集合\" class=\"headerlink\" title=\"七、 集合\"></a>七、 集合</h1><p>相当于C++中的容器，jdk定义好各种数据结构，提供相应接口，程序员只需使用特定接口而不用管底层原理</p>\n<p>集合采用接口与实现分离的方式。</p>\n<p><strong>接口</strong>是指一个数据结构的大类（栈、队列、散列表等）</p>\n<p><strong>实现类</strong>是细化功能（如用数组还是链表）</p>\n<p>即使用多态</p>\n<pre class=\" language-java\"><code class=\"language-java\">List<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span>list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"1-collection接口\"><a href=\"#1-Collection接口\" class=\"headerlink\" title=\"1. Collection接口\"></a>1. Collection接口</h2><p>除了<code>map</code>，其他所有的集合都继承了<code>collection</code>接口</p>\n<p><code>list</code>接口（有序）：<code>ArrayList</code>、<code>LinkedList</code>、<code>Vector</code>实现类</p>\n<p><code>set</code>接口（无序）：<code>HashSet</code>-&gt;<code>LinkedHashSet</code>、<code>TreeSet</code>实现类</p>\n<p><code>queue</code>接口：<code>deque</code></p>\n<h3 id=\"11-collection接口通用方法\"><a href=\"#1-1-Collection接口通用方法\" class=\"headerlink\" title=\"1.1 Collection接口通用方法\"></a>1.1 Collection接口通用方法</h3><table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> boolean</code></td>\n<td><code>add(E e)</code> 将元素添加到集合尾，成功返回true</td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td><code>addAll(Collection&lt;? extends E&gt; c)</code> 将指定 collection 中的所有元素都添加到此 collection 中（可选操作）。</td>\n</tr>\n<tr>\n<td><code> void</code></td>\n<td><code>clear()</code> 清空</td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td><code>contains(Object o)</code> 查找</td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td><code>containsAll(Collection&lt;?&gt; c) 是否包含c的所有元素</code></td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td><code>equals(Object o) 元素是否对应相等（set中重载）</code></td>\n</tr>\n<tr>\n<td><code> int</code></td>\n<td><code>hashCode()</code> 返回此 collection 的哈希码值。</td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td><code>isEmpty()</code> 是否为空</td>\n</tr>\n<tr>\n<td><code> Iterator&lt;E&gt;</code></td>\n<td><code>iterator()</code> 返回迭代器。*//*<em>默认从第一个元素之前开始</em></td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td><code>remove(Object o)</code> 按元素移除</td>\n</tr>\n<tr>\n<td><code> boolean</code></td>\n<td><code>removeAll(Collection&lt;?&gt; c) 移除c在此集合中的元素</code></td>\n</tr>\n<tr>\n<td><code> int</code></td>\n<td><code>size()</code> 返回长度</td>\n</tr>\n<tr>\n<td><code> Object[]</code></td>\n<td><code>toArray()</code> 返回数组。</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-迭代器iterator\"><a href=\"#2-迭代器iterator\" class=\"headerlink\" title=\"2. 迭代器iterator\"></a>2. 迭代器iterator</h2><p>类似指针的用法</p>\n<p>获取：</p>\n<pre class=\" language-java\"><code class=\"language-java\">Iterator<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span>iterator<span class=\"token operator\">=</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//迭代器的泛型和集合一致</span>\n</code></pre>\n<table>\n<thead>\n<tr>\n<th>返回类型</th>\n<th>函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code> boolean</code></td>\n<td><code>hasNext()</code> 如果仍有元素可以迭代，则返回 <code>true</code>。</td>\n</tr>\n<tr>\n<td><code> E</code></td>\n<td><code>next()</code> 返回迭代的下一个元素，并且迭代到下一个元素。</td>\n</tr>\n<tr>\n<td><code> void</code></td>\n<td><code>remove()</code> 移除迭代器指向的元素</td>\n</tr>\n</tbody></table>\n<p>示例：用迭代器遍历集合</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>iterator<span class=\"token punctuation\">.</span><span class=\"token function\">hasNext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    iterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"3-集合概览\"><a href=\"#3-集合概览\" class=\"headerlink\" title=\"3. 集合概览\"></a>3. 集合概览</h2><p>详细的集合使用在之后的文档中列出，也可参考jdk文档</p>\n<table>\n<thead>\n<tr>\n<th>集合名</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ArrayList</td>\n<td>可以动态增长和缩减的一个索引序列</td>\n</tr>\n<tr>\n<td>LinkedList</td>\n<td>可以在任何位置高效插入和删除的有序序列</td>\n</tr>\n<tr>\n<td>HashSet</td>\n<td>没有重复元素的无序集合</td>\n</tr>\n<tr>\n<td>HashMap</td>\n<td>哈希表</td>\n</tr>\n<tr>\n<td><strong>以上4个较为常用</strong></td>\n<td></td>\n</tr>\n<tr>\n<td>ArrayDeque</td>\n<td>实现为循环数组的一个双端队列</td>\n</tr>\n<tr>\n<td>TreeSet</td>\n<td>一个有序集</td>\n</tr>\n<tr>\n<td>EnumSet</td>\n<td>包含枚举类型的集</td>\n</tr>\n<tr>\n<td>LinkedHashSet</td>\n<td>可记住元素插入次序的集</td>\n</tr>\n<tr>\n<td>PriorityQueue</td>\n<td>允许高效删除最小元素的集合</td>\n</tr>\n<tr>\n<td>TreeMap</td>\n<td>键有序的映射</td>\n</tr>\n<tr>\n<td>EnumMap</td>\n<td>键属于枚举类型的映射</td>\n</tr>\n<tr>\n<td>LinkedHashMap</td>\n<td>可以记住键/值对添加次序的映射</td>\n</tr>\n<tr>\n<td>WeakHashMap</td>\n<td>值不会在别处使用时就可以被垃圾回收的映射</td>\n</tr>\n<tr>\n<td>IdentityHashMap</td>\n<td>用==而不是用equals比较键的映射</td>\n</tr>\n</tbody></table>\n<h2 id=\"4-泛型\"><a href=\"#4-泛型\" class=\"headerlink\" title=\"4. 泛型\"></a>4. 泛型</h2><p>当创建集合时不知道用什么类型定义，则可以用泛型</p>\n<p>Java泛型中的标记符含义：</p>\n<ul>\n<li><p>E - Element (在集合中使用，因为集合中存放的是元素)</p>\n</li>\n<li><p>T - Type（Java 类）</p>\n</li>\n<li><p>K - Key（键）</p>\n</li>\n<li><p>V - Value（值）</p>\n</li>\n<li><p>N - Number（数值类型）</p>\n</li>\n<li><p>？ - 表示不确定的java类型</p>\n</li>\n</ul>\n<p>如<code>ArrayList&lt;E&gt;、Collection&lt;E&gt;</code>……</p>\n<p>泛型在创建对象时确定，如下：</p>\n<pre class=\" language-java\"><code class=\"language-java\">List<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span>list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//此时E为Integer</span>\n</code></pre>\n<p>把数据类型作为参数传递，复制给泛型E</p>\n<h3 id=\"41-不适用泛型创建集合\"><a href=\"#4-1-不适用泛型创建集合\" class=\"headerlink\" title=\"4.1 不适用泛型创建集合\"></a>4.1 不适用泛型创建集合</h3><pre class=\" language-java\"><code class=\"language-java\">ArrayList array<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\narray<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ssss\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>好处：可以添加任意类型元素</p>\n<p>坏处：不安全，容易引起异常（如类型转换等）</p>\n<p>对应的迭代器也不适用泛型。</p>\n<pre class=\" language-java\"><code class=\"language-java\">Iterator iterator<span class=\"token operator\">=</span>array<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//对应的迭代器也不使用泛型</span>\n</code></pre>\n<h3 id=\"42-使用泛型创建集合对象\"><a href=\"#4-2-使用泛型创建集合对象\" class=\"headerlink\" title=\"4.2 使用泛型创建集合对象\"></a>4.2 使用泛型创建集合对象</h3><p>好处：</p>\n<ol>\n<li><p>简单，避免了类型转换的异常</p>\n</li>\n<li><p>把运行期异常提前到了编译器（运行时才发现的错误编译的时候就给你报错）</p>\n</li>\n</ol>\n<p>坏处：只能存单一类型的元素</p>\n<pre class=\" language-java\"><code class=\"language-java\">ArrayList<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> array2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//而对应的迭代器也要用泛型</span>\nIterator<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> iterator<span class=\"token operator\">=</span>array2<span class=\"token punctuation\">.</span><span class=\"token function\">iterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"5-自定义泛型类\"><a href=\"#5-自定义泛型类\" class=\"headerlink\" title=\"5. 自定义泛型类\"></a>5. 自定义泛型类</h2><h3 id=\"51-创建类\"><a href=\"#5-1-创建类\" class=\"headerlink\" title=\"5.1 创建类\"></a>5.1 创建类</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericClass</span><span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> String name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> E id<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> E classId<span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\" spellcheck=\"true\">//各种方法</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"52-新建对象并使用\"><a href=\"#5-2-新建对象并使用\" class=\"headerlink\" title=\"5.2 新建对象并使用\"></a>5.2 新建对象并使用</h3><pre class=\" language-java\"><code class=\"language-java\">GenericClass<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span>student<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericClass</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"小明\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">65</span><span class=\"token punctuation\">,</span><span class=\"token number\">152</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//该对象的泛型E就变成了Integer类型</span>\nstudent<span class=\"token punctuation\">.</span><span class=\"token function\">setId</span><span class=\"token punctuation\">(</span><span class=\"token number\">73</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getClassId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\" \"</span><span class=\"token operator\">+</span>student<span class=\"token punctuation\">.</span><span class=\"token function\">getId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//152 73</span>\n</code></pre>\n<h3 id=\"53-创建普通类中的泛型方法\"><a href=\"#5-3-创建普通类中的泛型方法\" class=\"headerlink\" title=\"5.3 创建普通类中的泛型方法\"></a>5.3 创建普通类中的泛型方法</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericMethod</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>M<span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>M m<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//泛型M在调用方法时传入的参数是什么类型就变为什么类型</span>\nGenericMethod demo<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericMethod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ndemo<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hahaha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//M可以是任何字符，甚至可以是中文</span>\n<span class=\"token keyword\">public</span> <span class=\"token operator\">&lt;</span>泛型<span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method1</span><span class=\"token punctuation\">(</span>泛型 泛型<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>泛型<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">//静态方法也可以用泛型</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token operator\">&lt;</span>泛型<span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token function\">method2</span><span class=\"token punctuation\">(</span>泛型 泛型<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>泛型<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//调用</span>\nGenericMethod<span class=\"token punctuation\">.</span><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"泛型\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//输出：泛型</span>\n</code></pre>\n<h3 id=\"54-创建有泛型的接口\"><a href=\"#5-4-创建有泛型的接口\" class=\"headerlink\" title=\"5.4 创建有泛型的接口\"></a>5.4 创建有泛型的接口</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">GenericInterface</span> <span class=\"token operator\">&lt;</span>E<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">abstract</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>E e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ol>\n<li><p>泛型在实现类中确定类型，如<code>Iterator</code>接口</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericInterfaceImp</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GenericInterface</span> <span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>Integer integer<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nGenericInterface pp<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericInterfaceImp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npp<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token number\">4456</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//4456</span>\n</code></pre>\n</li>\n<li><p>在创建对象时确定泛型，如<code>ArrayList</code></p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">GenericInterfaceImp2</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">GenericInterface</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token annotation punctuation\">@Override</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span>Object o<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\nGenericInterface<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span>pq<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">GenericInterfaceImp2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\npq<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token number\">4567</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">//4567</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"55-泛型通配符\"><a href=\"#5-5-泛型通配符：\" class=\"headerlink\" title=\"5.5 泛型通配符：?\"></a>5.5 泛型通配符：?</h3><p>？：代表任意数据类型。不能创建对象使用，只能作为方法的参数使用</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">pra</span><span class=\"token punctuation\">(</span>ArrayList<span class=\"token operator\">&lt;</span><span class=\"token operator\">?</span><span class=\"token operator\">></span> list<span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">//主函数：</span>\n    ArrayList<span class=\"token operator\">&lt;</span>String<span class=\"token operator\">></span> str<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    str<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"122\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    ArrayList<span class=\"token operator\">&lt;</span>Integer<span class=\"token operator\">></span> in<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ArrayList</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    in<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pra</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">pra</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n",
            "tags": [
                "笔记",
                "Java",
                "Java",
                "面向对象"
            ]
        },
        {
            "id": "https://nitgod1996.com/2021/05/17/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-Java%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC/",
            "url": "https://nitgod1996.com/2021/05/17/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-Java%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC/",
            "title": "随笔-Java调用Python脚本",
            "date_published": "2021-05-17T04:24:00.000Z",
            "content_html": "<h1 id=\"一-rest\"><a href=\"#一、-REST\" class=\"headerlink\" title=\"一、 REST\"></a>一、 REST</h1><h2 id=\"1-什么是rest以及restful\"><a href=\"#1-什么是REST以及RESTful\" class=\"headerlink\" title=\"1. 什么是REST以及RESTful\"></a>1. 什么是REST以及RESTful</h2><blockquote>\n<p>REST指的是一组架构约束条件和原则。” 如果一个架构符合REST的约束条件和原则，我们就称它为RESTful架构。</p>\n</blockquote>\n<p>​        相当于是编写API的一套规则，像高德地图提供的API。</p>\n<table>\n<thead>\n<tr>\n<th>URL</th>\n<th><span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXN0YXBpLmFtYXAuY29tL3YzL3BsYWNlL3RleHQ/cGFyYW1ldGVycw==\">https://restapi.amap.com/v3/place/text?parameters</span></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>请求方式</td>\n<td>GET</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>上面是高德地图提供的API，返回的是json格式的数据信息。</p>\n</blockquote>\n<p> 以下介绍REST的几大概念：</p>\n<ul>\n<li>资源与URI</li>\n<li>统一资源接口</li>\n<li>资源的表述</li>\n<li>资源的链接</li>\n<li>状态的转移</li>\n</ul>\n<h3 id=\"11-资源与uri\"><a href=\"#1-1-资源与URI\" class=\"headerlink\" title=\"1.1 资源与URI\"></a>1.1 资源与URI</h3><p>URI是用于标记网络上的资源的<em>唯一标识</em></p>\n<blockquote>\n<p> 要让一个资源可以被识别，需要有个唯一标识，在Web中这个唯一标识就是URI(Uniform Resource Identifier)。</p>\n</blockquote>\n<p>URI既可以看成是资源的地址，也可以看成是资源的名称。</p>\n<p>以下是URI的编写技巧：</p>\n<ul>\n<li>使用_或-分隔单词。如<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5vc2NoaW5hLm5ldC9uZXdzLzM4MTE5L29zY2hpbmEtdHJhbnNsYXRlLXJld2FyZC1wbGFuJUUzJTgwJTgy\">http://www.oschina.net/news/38119/oschina-translate-reward-plan。</span></li>\n<li>使用/来表示资源的层级关系</li>\n<li>使用?用来参数传递，&amp;分隔参数<ul>\n<li>如<span class=\"exturl\" data-url=\"aHR0cHM6Ly9yZXN0YXBpLmFtYXAuY29tL3YzL3BsYWNlL3RleHQ/a2V5d29yZHM9JUU1JThDJTk3JUU0JUJBJUFDJUU1JUE0JUE3JUU1JUFEJUE2JmFtcDtjaXR5PWJlaWppbmcmYW1wO291dHB1dD14bWwmYW1wO29mZnNldD0yMCZhbXA7cGFnZT0xJmFtcDtrZXk9\">https://restapi.amap.com/v3/place/text?keywords=北京大学&amp;city=beijing&amp;output=xml&amp;offset=20&amp;page=1&amp;key=</span>&lt;用户的key&gt;&amp;extensions=all</li>\n</ul>\n</li>\n<li>,或;可以用来表示同级资源的关系</li>\n</ul>\n<h3 id=\"12-统一资源接口\"><a href=\"#1-2-统一资源接口\" class=\"headerlink\" title=\"1.2 统一资源接口\"></a>1.2 统一资源接口</h3><blockquote>\n<p>RESTful架构应该遵循统一接口原则，接口应该使用标准的HTTP方法如GET，PUT和POST，并遵循这些方法的语义。</p>\n</blockquote>\n<h3 id=\"13-资源的表述\"><a href=\"#1-3-资源的表述\" class=\"headerlink\" title=\"1.3 资源的表述\"></a>1.3 资源的表述</h3><blockquote>\n<p>客户端通过HTTP方法可以获取资源。确切的说，客户端获取的只是资源的表述而已。</p>\n</blockquote>\n<p>​        资源在外界的具体呈现，可以有多种形式。在客户端和服务端之间传送的也是资源的表述，而不是资源本身。</p>\n<p>​         例如文本资源可以采用html、xml、json等格式，图片可以使用PNG或JPG展现出来。</p>\n<blockquote>\n<p> 资源的表述包括数据和元数据（描述数据的数据），例如，HTTP头”Content-Type” 就是这样一个元数据属性。</p>\n</blockquote>\n<p>​        客户端需要在<code>Request</code>头通过<code>Accept</code>说明自己需要的格式，而服务端在<code>Content-Type</code>返回该格式。如果不支持返回该格式，则报<strong>406错误</strong></p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS93M2Nub3RlL3Jlc3RmdWwtYXJjaGl0ZWN0dXJlLmh0bWw=\">参考菜鸟教程</span></p>\n<h2 id=\"2-python编写简单的restful-api\"><a href=\"#2-python编写简单的RESTful-API\" class=\"headerlink\" title=\"2. python编写简单的RESTful API\"></a>2. python编写简单的RESTful API</h2><p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3UwMTIyMTIxNTcvYXJ0aWNsZS9kZXRhaWxzLzc4MjE2MjY3\">参考博客</span></p>\n<h3 id=\"21-安装flask库\"><a href=\"#2-1-安装flask库\" class=\"headerlink\" title=\"2.1 安装flask库\"></a>2.1 安装flask库</h3><p>使用豆瓣源</p>\n<pre class=\" language-bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> flask -i http://pypi.douban.com/simple/ --trusted-host pypi.douban.com\n</code></pre>\n<h3 id=\"22-编写简单代码测试一下\"><a href=\"#2-2-编写简单代码测试一下\" class=\"headerlink\" title=\"2.2 编写简单代码测试一下\"></a>2.2 编写简单代码测试一下</h3><pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>  \n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"hello world\"</span>\n<span class=\"token keyword\">if</span> __name__<span class=\"token operator\">==</span><span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    app<span class=\"token punctuation\">.</span>run<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"23-访问localhost5000\"><a href=\"#2-3-访问localho​st-50​00\" class=\"headerlink\" title=\"2.3 访问localho​st:50​00\"></a>2.3 访问localho​st:50​00</h3><p><img data-src=\"/2021/05/17/note/%E9%9A%8F%E7%AC%94/%E9%9A%8F%E7%AC%94-Java%E8%B0%83%E7%94%A8Python%E8%84%9A%E6%9C%AC/image-20210516142311629.png\" alt=\"image-20210516142311629\"></p>\n<h3 id=\"24-flask介绍\"><a href=\"#2-4-Flask介绍\" class=\"headerlink\" title=\"2.4 Flask介绍\"></a>2.4 Flask介绍</h3><blockquote>\n<p>Flask是一个使用 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9QeXRob24=\">Python</span> 编写的轻量级 Web 应用框架。它可以很好地结合<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9NVkMlRTYlQTglQTElRTUlQkMlOEYvNzEzMTQ3\">MVC模式</span>进行开发，开发人员分工合作，小型团队在短时间内就可以完成功能丰富的中小型网站或<span class=\"exturl\" data-url=\"aHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS9XZWIlRTYlOUMlOEQlRTUlOEElQTEvMjgzNzU5Mw==\">Web服务</span>的实现。</p>\n</blockquote>\n<h3 id=\"25-总结\"><a href=\"#2-5-总结\" class=\"headerlink\" title=\"2.5 总结\"></a>2.5 总结</h3><p>​        此方法是通过调用flask部署到线上的API实现的Java-Python交互。</p>\n<ol>\n<li><p>优点：</p>\n<ol>\n<li>调用方便，直接调取API即可获取数据。</li>\n<li>减少耦合度</li>\n</ol>\n</li>\n<li><p>缺点是需要提前部署，且不能断开</p>\n</li>\n</ol>\n<h1 id=\"二-rpc\"><a href=\"#二、-RPC\" class=\"headerlink\" title=\"二、 RPC\"></a>二、 RPC</h1><h2 id=\"1-什么是rpc\"><a href=\"#1-什么是RPC\" class=\"headerlink\" title=\"1. 什么是RPC\"></a>1. 什么是RPC</h2><p>RPC：Remote Procedure Call 远程过程调用</p>\n<blockquote>\n<p>RPC就是要像调用本地的函数一样去调远程函数。</p>\n</blockquote>\n<p>在远程调用时，我们需要执行的函数体是在远程的机器上的。以下是一些RPC的概念</p>\n<h3 id=\"11-call-id映射\"><a href=\"#1-1-Call-ID映射\" class=\"headerlink\" title=\"1.1 Call ID映射\"></a>1.1 Call ID映射</h3><p>​    我们如何告诉远程机器我们要调用哪个函数？</p>\n<ul>\n<li><p>在本地调用中：函数体是直接通过函数指针来指定的。</p>\n</li>\n<li><p>在RPC中：每个函数都有自己的一个ID，这个ID是所有进程中都是唯一确定的。<strong>客户端在做远程过程调用时，必须附上这个ID。</strong></p>\n</li>\n</ul>\n<h3 id=\"12-序列化和反序列化\"><a href=\"#1-2-序列化和反序列化\" class=\"headerlink\" title=\"1.2 序列化和反序列化\"></a>1.2 序列化和反序列化</h3><p>​        客户端怎么把参数值传给远程的函数呢？</p>\n<ul>\n<li>本地调用中：我们只需要把参数压到栈里，然后让函数自己去栈里读就行。</li>\n<li>RPC中：需要客户端把<strong>参数</strong>先转成一个字节流，传给服务端后，再把字节流转成自己能读取的格式。这个过程叫序列化和反序列化。</li>\n</ul>\n<h3 id=\"13-网络传输\"><a href=\"#1-3-网络传输\" class=\"headerlink\" title=\"1.3 网络传输\"></a>1.3 网络传输</h3><p>​        客户端和服务端是通过网络连接的。所有的数据都需要通过网络传输，因此就需要有一个网络传输层。</p>\n<p>​        尽管大部分RPC框架都使用TCP协议，但其实UDP也可以。</p>\n<h2 id=\"2-rpc与rest的区别\"><a href=\"#2-RPC与REST的区别\" class=\"headerlink\" title=\"2. RPC与REST的区别\"></a>2. RPC与REST的区别</h2><blockquote>\n<p>REST是一种架构风格，指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful。</p>\n</blockquote>\n<p>大部分的REST的实现中使用了RPC的机制，大致与有三部分组成：</p>\n<ol>\n<li><p>method：访问方式，<code>get</code>，<code>post</code>之类的</p>\n</li>\n<li><p>Host/post：URI(统一资源标识)、服务器，端口</p>\n</li>\n<li><p>Path：路径</p>\n</li>\n</ol>\n<blockquote>\n<p>RPC是远程过程调用，就是像调用本地方法一样调用远程方法</p>\n</blockquote>\n<p>通常的调用过程，把函数序列化，远端收到后，再把函数反序列化，完成函数调用。</p>\n<table>\n<thead>\n<tr>\n<th>比较项</th>\n<th>REST</th>\n<th>RPC</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>通信协议</td>\n<td>HTTP</td>\n<td>一般使用TCP</td>\n</tr>\n<tr>\n<td>性能</td>\n<td>低</td>\n<td>高</td>\n</tr>\n<tr>\n<td>灵活度</td>\n<td>高</td>\n<td>低</td>\n</tr>\n</tbody></table>\n<h2 id=\"2-实现java调用python函数\"><a href=\"#2-实现Java调用Python函数\" class=\"headerlink\" title=\"2. 实现Java调用Python函数\"></a>2. 实现Java调用Python函数</h2><p>主要RPC适用C/S模式的项目，还需要搭配Netty，所以暂时放弃此方法。</p>\n<h1 id=\"三-直接使用runtime推荐\"><a href=\"#三、-直接使用Runtime-推荐\" class=\"headerlink\" title=\"三、 直接使用Runtime(推荐)\"></a>三、 直接使用Runtime(推荐)</h1><p>​        在Java中如果需要调用第三方程序/脚本，可以直接通过Runtime实现，这也是最直接最粗暴的做法。</p>\n<h2 id=\"1-无参调用\"><a href=\"#1-无参调用\" class=\"headerlink\" title=\"1. 无参调用\"></a>1. 无参调用</h2><h3 id=\"11-python代码\"><a href=\"#1-1-Python代码\" class=\"headerlink\" title=\"1.1 Python代码\"></a>1.1 Python代码</h3><p><code>runtimeDemo2.py</code></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 新加入的</span>\n<span class=\"token keyword\">from</span> Java_connect_Python<span class=\"token punctuation\">.</span>funDemo <span class=\"token keyword\">import</span> hello\n<span class=\"token keyword\">import</span> numpy <span class=\"token keyword\">as</span> np\na<span class=\"token operator\">=</span>np<span class=\"token punctuation\">.</span>array<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span>\n    hello<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<p><code>funDemo.py</code></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello,Python'</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"12-java代码\"><a href=\"#1-2-java代码\" class=\"headerlink\" title=\"1.2 java代码\"></a>1.2 java代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>simpleDemo<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>BufferedReader<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>File<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStreamReader<span class=\"token punctuation\">;</span>\n\n \n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RuntimeDemo02</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        String executer <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\" spellcheck=\"true\">// python绝对路径</span>\n        String file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\\\\runtimeDemo2.py\"</span><span class=\"token punctuation\">;</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> command_line <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>executer<span class=\"token punctuation\">,</span> file_path<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n          <span class=\"token comment\" spellcheck=\"true\">//  Process process = Runtime.getRuntime().exec(command_line);</span>\n            Process process <span class=\"token operator\">=</span> Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command_line<span class=\"token punctuation\">,</span>null<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            BufferedReader in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            String line<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n                System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n            in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\" spellcheck=\"true\">// java代码中的 process.waitFor() 返回值（和我们通常意义上见到的0与1定义正好相反）</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 返回值为0 - 表示调用python脚本成功；</span>\n            <span class=\"token comment\" spellcheck=\"true\">// 返回值为1 - 表示调用python脚本失败。</span>\n            <span class=\"token keyword\">int</span> re <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用 python 脚本是否成功：\"</span> <span class=\"token operator\">+</span> re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            e1<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n            e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"2-传参调用\"><a href=\"#2-传参调用\" class=\"headerlink\" title=\"2. 传参调用\"></a>2. 传参调用</h2><h3 id=\"21-python代码\"><a href=\"#2-1-Python代码\" class=\"headerlink\" title=\"2.1 Python代码\"></a>2.1 Python代码</h3><p><code>add.py</code></p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token comment\" spellcheck=\"true\"># coding=utf-8</span>\n<span class=\"token keyword\">from</span> sys <span class=\"token keyword\">import</span> argv\n \na <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span>\nb <span class=\"token operator\">=</span> argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span>\nres <span class=\"token operator\">=</span> int<span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> int<span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span>\n</code></pre>\n<h3 id=\"22-java代码\"><a href=\"#2-2-Java代码\" class=\"headerlink\" title=\"2.2 Java代码\"></a>2.2 Java代码</h3><pre class=\" language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> com<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>simpleDemo<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>DataInputStream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>IOException<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> java<span class=\"token punctuation\">.</span>io<span class=\"token punctuation\">.</span>InputStream<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RuntimeDemo01</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> IOException<span class=\"token punctuation\">,</span> InterruptedException <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        String exe <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">;</span>\n        String command <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\\\\add.py\"</span><span class=\"token punctuation\">;</span>\n        String num1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\n        String num2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\n        String<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> cmdArr <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>exe<span class=\"token punctuation\">,</span> command<span class=\"token punctuation\">,</span> num1<span class=\"token punctuation\">,</span> num2<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n        Process process <span class=\"token operator\">=</span> Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>cmdArr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        InputStream is <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        DataInputStream dis <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">DataInputStream</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        String str <span class=\"token operator\">=</span> dis<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        process<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"3-解析\"><a href=\"#3-解析\" class=\"headerlink\" title=\"3. 解析\"></a>3. 解析</h2><h3 id=\"31-当py调用其他py函数时\"><a href=\"#3-1-当py调用其他py函数时\" class=\"headerlink\" title=\"3.1 当py调用其他py函数时\"></a>3.1 当py调用其他py函数时</h3><p>​        当Java需要调用的py脚本，其内部引用了其他py脚本定义的函数时，需要指定其包的路径，否则找不到模块。</p>\n<ol>\n<li><p>在py文件添加</p>\n<pre class=\" language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> sys\nsys<span class=\"token punctuation\">.</span>path<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'../'</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\" spellcheck=\"true\"># 新加入的</span>\n</code></pre>\n</li>\n<li><p>Java调用时，使用<code>Runtime.getRuntime().exec(cmd,null,new File(path));</code>方法</p>\n<pre class=\" language-java\"><code class=\"language-java\">String executer <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\" spellcheck=\"true\">// python绝对路径</span>\nString file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\\\\runtimeDemo2.py\"</span><span class=\"token punctuation\">;</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> command_line <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>executer<span class=\"token punctuation\">,</span> file_path<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\nProcess process <span class=\"token operator\">=</span> Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command_line<span class=\"token punctuation\">,</span>null<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<h3 id=\"32-步骤解析\"><a href=\"#3-2-步骤解析\" class=\"headerlink\" title=\"3.2 步骤解析\"></a>3.2 步骤解析</h3><ol>\n<li><p>通过<code>Runtime.getRuntime().exec()</code>创建进程类<code>Process</code>。</p>\n<ol>\n<li><p>定义命令行执行脚本的语句<code>command_line</code></p>\n<pre class=\" language-java\"><code class=\"language-java\">String executer <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// python绝对路径</span>\nString file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\\\\runtimeDemo2.py\"</span><span class=\"token punctuation\">;</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> command_line <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>executer<span class=\"token punctuation\">,</span> file_path<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p><strong>如果是需要传参的，那么在<code>command_line</code>中添加，如下</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\">String num1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\nString num2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> command_line <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>executer<span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>定义模块路径（py的项目路径）<code>module_path</code></p>\n<pre class=\" language-java\"><code class=\"language-java\">String module_path<span class=\"token operator\">=</span><span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\"</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>创建进程类<code>process</code></p>\n<pre class=\" language-java\"><code class=\"language-java\">Process process <span class=\"token operator\">=</span> Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command_line<span class=\"token punctuation\">,</span>null<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>module_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>捕获<code>process</code>的输出流，读取输出内容</p>\n<ol>\n<li><p>创建<code>process</code>的输入流，此处选择<code>reader</code>，可以识别汉语字码</p>\n<pre class=\" language-java\"><code class=\"language-java\">InputStreamReader is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>捕获输出流</p>\n<pre class=\" language-java\"><code class=\"language-java\">BufferedReader in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>读取输出内容</p>\n<pre class=\" language-java\"><code class=\"language-java\">String line<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n<li><p>关闭输出流</p>\n<pre class=\" language-java\"><code class=\"language-java\">in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n</li>\n<li><p>打印状态信息</p>\n<pre class=\" language-java\"><code class=\"language-java\"><span class=\"token comment\" spellcheck=\"true\">// java代码中的 process.waitFor() 返回值（和我们通常意义上见到的0与1定义正好相反）</span>\n<span class=\"token comment\" spellcheck=\"true\">// 返回值为0 - 表示调用python脚本成功；</span>\n<span class=\"token comment\" spellcheck=\"true\">// 返回值为1 - 表示调用python脚本失败。</span>\n<span class=\"token keyword\">int</span> re <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nSystem<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用 python 脚本是否成功：\"</span> <span class=\"token operator\">+</span> re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n</li>\n</ol>\n<p><strong>完整代码如下</strong></p>\n<pre class=\" language-java\"><code class=\"language-java\">String executer <span class=\"token operator\">=</span> <span class=\"token string\">\"python\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\" spellcheck=\"true\">// python绝对路径</span>\nString file_path <span class=\"token operator\">=</span> <span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\\\\runtimeDemo2.py\"</span><span class=\"token punctuation\">;</span>\nString num1 <span class=\"token operator\">=</span> <span class=\"token string\">\"1\"</span><span class=\"token punctuation\">;</span>\nString num2 <span class=\"token operator\">=</span> <span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span>\nString<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> command_line <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>executer<span class=\"token punctuation\">,</span> file_path<span class=\"token punctuation\">,</span>num1<span class=\"token punctuation\">,</span>num2<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span>\nString module_path<span class=\"token operator\">=</span><span class=\"token string\">\"F:\\\\project\\\\demo01\\\\Java_connect_Python\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">try</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    Process process <span class=\"token operator\">=</span> Runtime<span class=\"token punctuation\">.</span><span class=\"token function\">getRuntime</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">exec</span><span class=\"token punctuation\">(</span>command_line<span class=\"token punctuation\">,</span>null<span class=\"token punctuation\">,</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">File</span><span class=\"token punctuation\">(</span>module_path<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    InputStreamReader is <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span>process<span class=\"token punctuation\">.</span><span class=\"token function\">getInputStream</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"GBK\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    BufferedReader in <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    String line<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>line <span class=\"token operator\">=</span> in<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> null<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n        System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n    in<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\" spellcheck=\"true\">// java代码中的 process.waitFor() 返回值（和我们通常意义上见到的0与1定义正好相反）</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 返回值为0 - 表示调用python脚本成功；</span>\n    <span class=\"token comment\" spellcheck=\"true\">// 返回值为1 - 表示调用python脚本失败。</span>\n    <span class=\"token keyword\">int</span> re <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span><span class=\"token function\">waitFor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    System<span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"调用 python 脚本是否成功：\"</span> <span class=\"token operator\">+</span> re<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">IOException</span> e1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    e1<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span>#<span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\n    e<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token operator\">&amp;</span>#<span class=\"token number\">125</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"33-函数解析\"><a href=\"#3-3-函数解析\" class=\"headerlink\" title=\"3.3 函数解析\"></a>3.3 函数解析</h3><h4 id=\"331-类runtime\"><a href=\"#3-3-1-类Runtime\" class=\"headerlink\" title=\"3.3.1 类Runtime\"></a>3.3.1 类<code>Runtime</code></h4><p>每个 Java 应用程序都有一个 <code>Runtime</code> 类实例，使应用程序能够与其运行的环境相连接。可以通过  <code>getRuntime</code> 方法获取当前运行时。 </p>\n<table>\n<thead>\n<tr>\n<th>返回值类型</th>\n<th>函数</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>static Runtime</code></td>\n<td><code>Runtime.getRuntime()</code> <br>        返回与当前 Java 应用程序相关的运行时对象。</td>\n</tr>\n<tr>\n<td><code>Process</code></td>\n<td><code>Runtime.getRuntime().exec(String[] cmdarray, String[] envp, File dir) </code>         <br>        在指定环境和工作目录的独立进程中执行指定的命令和变量。</td>\n</tr>\n</tbody></table>\n<h4 id=\"332-类process\"><a href=\"#3-3-2-类Process\" class=\"headerlink\" title=\"3.3.2 类Process\"></a>3.3.2 类<code>Process</code></h4><p>可通过<code>ProcessBuilder.start()</code> 和 <code>Runtime.exec </code>方法创建一个本机进程，并返回 <code>Process</code> 子类的一个实例，该实例可用来控制进程并获得相关信息。</p>\n<p><code>Process </code>类提供了执行从<strong>进程输入、执行输出到进程、等待进程完成、检查进程的退出状态以及销毁（杀掉）进程</strong>的方法。</p>\n<table>\n<thead>\n<tr>\n<th>返回值类型</th>\n<th>函数（以下process是Process的对象）</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>abstract  InputStream</code></td>\n<td><code>process.getInputStream() </code> <br>        获取子进程的输入流。</td>\n</tr>\n<tr>\n<td><code>abstract  OutputStream</code></td>\n<td><code>process.getOutputStream() </code>         <br>        获取子进程的输出流。</td>\n</tr>\n<tr>\n<td><code>abstract  int</code><br>返回：进程的出口值。<br>0 表示正常终止，1表示有错误</td>\n<td><code>process.waitFor()</code> <br>        导致当前线程等待，如有必要，一直要等到由该 Process 对象表示的进程已经终止。</td>\n</tr>\n</tbody></table>\n<h3 id=\"34-总结\"><a href=\"#3-4-总结\" class=\"headerlink\" title=\"3.4 总结\"></a>3.4 总结</h3><p>比起前面的，显然Java自带的Runtime更加方便、简单粗暴。此方法适用于离线项目。</p>\n<ol>\n<li>优点：<ol>\n<li>简单、方便</li>\n<li>不需要部署，相当于直接内嵌在Java项目</li>\n<li>jdk自带功能，不需要其他外部依赖支持</li>\n</ol>\n</li>\n<li>缺点：<ol>\n<li>耦合度过大，每次调用Python脚本都需要重写一次</li>\n</ol>\n</li>\n</ol>\n",
            "tags": [
                "笔记",
                "随笔",
                "Python",
                "Java",
                "Java",
                "Python"
            ]
        }
    ]
}