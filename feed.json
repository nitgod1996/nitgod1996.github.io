{
    "version": "https://jsonfeed.org/version/1",
    "title": "宁理大神1996",
    "subtitle": "",
    "icon": "https://nitgod1996.com/images/favicon.ico",
    "description": "宁理大神的个人博客",
    "home_page_url": "https://nitgod1996.com",
    "items": [
        {
            "id": "https://nitgod1996.com/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/",
            "url": "https://nitgod1996.com/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/",
            "title": "flex布局（弹性布局）",
            "date_published": "2022-09-08T14:36:24.801Z",
            "content_html": "<h3 id=\"12-flex-布局弹性盒子\"><a class=\"anchor\" href=\"#12-flex布局弹性盒子\">#</a> 1.2 flex 布局（弹性盒子）</h3>\n<p>flex 意味弹性布局，用来给盒子模型提供最大的灵活性。</p>\n<blockquote>\n<p>设置 flex 布局后，子元素的 <code>float</code> 、 <code>clear</code> 、 <code>vertical-align</code>  属性将失效</p>\n</blockquote>\n<h4 id=\"121-flex-简介\"><a class=\"anchor\" href=\"#121-flex简介\">#</a> 1.2.1 flex 简介</h4>\n<p>采用 flex 布局的元素，称为 flex 容器，简称 “容器”。他的所有<strong>子元素</strong>自动成为容器成员，成为 flex 项目，简称 “项目”。&lt;font color=red &gt; 需要在容器（父元素）通过 <code>display</code>  属性设置 <code>flex</code>  布局，然后在项目（子元素）设置 <code>flex</code>  属性。webkit 内核浏览器要用 <code>-webkit-flex</code> &lt;/font&gt;</p>\n<p>之前做的 echarts 项目的布局就是采用 flex 布局</p>\n<p><img data-src=\"/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/DFJ41J6_W3_@X1R%7B6FG26ZC.png\" alt=\"img\"></p>\n<p>容器默认存在 2 根轴：<strong>水平主轴</strong>和<strong>垂直交叉轴</strong>。主轴的开始位置（与边框的交叉点）叫 <code>main start</code> ，结束位置叫 <code>main end</code> ；交叉轴开始位置叫 <code>cross start</code> ，结束位置叫 <code>cross end</code> 。</p>\n<p>项目默认<strong>沿主轴排列</strong>。单个项目占据的主轴空间叫 <code>main size</code> ，占据的交叉轴空间叫 <code>cross size</code></p>\n<p>例：之前的 echarts 布局</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.mainbox .column</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.mainbox .column:nth-child(2)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token property\">flex</span><span class=\"token punctuation\">:</span> 5<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> 0 0.125rem 0.1875rem<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token property\">overflow</span><span class=\"token punctuation\">:</span> hidden<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/image-20220301173923974.png\" alt=\"image-20220301173923974\"></p>\n<h4 id=\"122-容器父元素属性\"><a class=\"anchor\" href=\"#122-容器父元素属性\">#</a> 1.2.2 容器（父元素）属性</h4>\n<blockquote>\n<p>需要先在容器（父元素）通过 <code>display</code>  属性设置 <code>flex</code>  布局，然后在项目（子元素）设置 <code>flex</code>  属性。webkit 内核浏览器要用 <code>-webkit-flex</code></p>\n</blockquote>\n<p>主要以下 6 个属性：<strong>定义在容器的 style 上</strong></p>\n<ul>\n<li>\n<p><code>flex-direction</code> ：决定主轴的方向（即项目排列方向）</p>\n<ul>\n<li>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-direction</span><span class=\"token punctuation\">:</span> row | row-reverse | column | column-reverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><img data-src=\"/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/image-20220301174246470.png\" alt=\"image-20220301174246470\"></p>\n</li>\n<li>\n<p><code>row</code> ：<strong>默认</strong>。水平向右</p>\n</li>\n<li>\n<p>其他的就不一一介绍了</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>flex-wrap</code> ：当一条轴线排不下时的<strong>换行方式</strong></p>\n<ul>\n<li>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-wrap</span><span class=\"token punctuation\">:</span> nowrap | wrap | wrap-reverse<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>nowrap</code> ：默认。不换行</p>\n</li>\n<li>\n<p><code>wrap</code> ：换行，第一行在上方</p>\n</li>\n<li>\n<p><code>wrap-reverse</code> ：换行，第一行在下方</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>flex-flow</code> ： <code>flex-direction</code>  属性和 <code>flex-wrap</code>  属性的简写形式，默认值为 <code>row nowrap</code> 。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-flow</span><span class=\"token punctuation\">:</span> &lt;flex-direction> || &lt;flex-wrap><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>justify-content</code> ：沿<strong>轴线方向</strong>的<strong>对齐方式</strong></p>\n<p><strong>主轴</strong>：水平对齐方式</p>\n<p><strong>交叉轴</strong>：垂直对齐方式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">justify-content</span><span class=\"token punctuation\">:</span> flex-start | flex-end | center | space-between | space-around<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>flex-start</code> （默认值）：按轴线头对齐。即左对齐（主轴）或上对齐（交叉轴）</li>\n<li><code>flex-end</code> ：</li>\n<li><code>center</code> ： 居中</li>\n<li><code>space-between</code> ：两端对齐，项目之间的间隔都相等。</li>\n<li><code>space-around</code> ：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。</li>\n</ul>\n</li>\n<li>\n<p><code>align-items</code> ：<strong>垂直轴线</strong>方向的<strong>对齐方式</strong></p>\n<p><strong>主轴</strong>：垂直对齐方式</p>\n<p><strong>交叉轴</strong>：水平对齐方式</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">align-items</span><span class=\"token punctuation\">:</span> flex-start | flex-end | center | baseline | stretch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>stretch</code> （默认值）：如果项目未设置高度或设为 auto，将占满整个容器的高度。</li>\n<li><code>flex-start</code> ：上对齐（主轴），左对齐（交叉轴）</li>\n<li><code>flex-end</code> ：</li>\n<li><code>center</code> ：居中</li>\n<li><code>baseline</code> : 项目的第一行文字的基线对齐。</li>\n</ul>\n</li>\n<li>\n<p><code>align-content</code> ：多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">align-content</span><span class=\"token punctuation\">:</span> flex-start | flex-end | center | space-between | space-around | stretch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>flex-start</code> ：与交叉轴的起点对齐。</li>\n<li><code>flex-end</code> ：与交叉轴的终点对齐。</li>\n<li><code>center</code> ：与交叉轴的中点对齐。</li>\n<li><code>space-between</code> ：与交叉轴两端对齐，轴线之间的间隔平均分布。</li>\n<li><code>space-around</code> ：每根轴线两侧的间隔都相等。所以，轴线之间的间隔比轴线与边框的间隔大一倍。</li>\n<li><code>stretch</code> （默认值）：轴线占满整个交叉轴。</li>\n<li><img data-src=\"/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/image-20220301192713487.png\" alt=\"image-20220301192713487\"></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"123-项目子元素属性\"><a class=\"anchor\" href=\"#123-项目子元素属性\">#</a> 1.2.3 项目（子元素）属性</h4>\n<p>写在子项目（被排列）的元素属性</p>\n<p>也是主要 6 个属性：</p>\n<ul>\n<li>\n<p><code>order</code> ：项目排列顺序。数值越小，排列越前</p>\n</li>\n<li>\n<p><code>flex-grow</code> ：项目放大比例（按轴的方向），默认为 0。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-grow</span><span class=\"token punctuation\">:</span> &lt;number><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* default 0 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/image-20220301193324063.png\" alt=\"image-20220301193324063\"></p>\n<p>echarts 项目上的 <code>flex:5</code>  就是这个属性</p>\n<p><img data-src=\"/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/image-20220301173923974.png\" alt=\"image-20220301173923974\"></p>\n</li>\n<li>\n<p><code>flex-shrink</code> ：项目缩小比例，默认为 1</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-shrink</span><span class=\"token punctuation\">:</span> &lt;number><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* default 1 */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>flex-basis</code> ：分配多余空间之前，项目占据的主轴空间。类似 width（主轴）和 height（交叉轴）</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">flex-basis</span><span class=\"token punctuation\">:</span> &lt;length> | auto<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* default auto */</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>flex</code> ： <code>flex-grow</code> ,  <code>flex-shrink</code>  和  <code>flex-basis</code>  的简写，默认值为 <code>0 1 auto</code> 。</p>\n</li>\n<li>\n<p><code>align-self</code> ：允许<strong>单个项目</strong>有不一样的<strong>对齐方式</strong>，可覆盖 <code>align-items</code>  属性。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.item</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token property\">align-self</span><span class=\"token punctuation\">:</span> auto | flex-start | flex-end | center | baseline | stretch<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/09/08/note/CSS/flex%E5%B8%83%E5%B1%80/image-20220301194838568.png\" alt=\"image-20220301194838568\"></p>\n</li>\n</ul>\n<h4 id=\"124-flex-布局实例\"><a class=\"anchor\" href=\"#124-flex布局实例\">#</a> 1.2.4 flex 布局实例</h4>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVhbnlpZmVuZy5jb20vYmxvZy8yMDE1LzA3L2ZsZXgtZXhhbXBsZXMuaHRtbA==\">https://www.ruanyifeng.com/blog/2015/07/flex-examples.html</span></p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/",
            "url": "https://nitgod1996.com/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/",
            "title": "异步与事件循环",
            "date_published": "2022-09-08T14:36:09.397Z",
            "content_html": "<h1 id=\"1-异步编程\"><a class=\"anchor\" href=\"#1-异步编程\">#</a> 1. 异步编程</h1>\n<p>众所周知， <code>JavaScript</code>  是<strong>单线程</strong>事件循环模型，同步和异步操作是代码所要依赖的核心机制。</p>\n<ul>\n<li><strong>同步</strong>：顺序执行的处理器指令，一条条指令<strong>相继执行</strong></li>\n<li><strong>异步</strong>：多条指令同时进行，互不干扰。</li>\n</ul>\n<p>当你不想等待某个操作而阻塞线程时，可以执行<strong>异步</strong>操作。（同步代码则必须要等）</p>\n<h2 id=\"11-settimeout-异步\"><a class=\"anchor\" href=\"#11-settimeout异步\">#</a> 1.1 setTimeout 异步</h2>\n<p>如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1000 毫秒后执行函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20220321212349317.png\" alt=\"image-20220321212349317\"></p>\n<p>此处， <code>console.log(1)</code>  和 <code>console.log(3)</code>  是顺序（同步）执行， <code>setTimeout</code>  是异步执行</p>\n<hr>\n<blockquote>\n<p>下面的我感觉没什么好看的，P324 吧，主要是以往的异步编程及缺点</p>\n<p>如：嵌套异步回调很复杂</p>\n</blockquote>\n<h2 id=\"12-settimeout-语法\"><a class=\"anchor\" href=\"#12-settimeout语法\">#</a> 1.2 setTimeout 语法</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">code/function</td>\n<td style=\"text-align:left\">必需。要调用一个代码串，也可以是一个函数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">milliseconds</td>\n<td style=\"text-align:left\">可选。执行或调用 code/function 需要等待的时间，以毫秒计。默认为 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">param1, param2, ...</td>\n<td style=\"text-align:left\">可选。 传给执行函数的参数</td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1s 后控制台打印 hello</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"13-promise-异步\"><a class=\"anchor\" href=\"#13-promise异步\">#</a> 1.3 Promise 异步</h2>\n<p><code>Promise</code>  出现后，极大的方便了异步编程。当一个异步返回值又依赖于另一个异步返回值（嵌套异步回调），这在 <code>setTimeout</code>  中非常复杂，而在 <code>Promise</code>  中则很方便，也是常考的<strong>期约连锁</strong>。</p>\n<p>而且 <code>setTimeout</code>  需要显示地设置时间，而很多时候（向服务器请求数据）我们往往无法预知什么时候会返回结果供我们执行下一步操作，而 <code>Promise</code>  则解决了这个问题。</p>\n<h1 id=\"2-期约promise\"><a class=\"anchor\" href=\"#2-期约promise\">#</a> 2. 期约（Promise）</h1>\n<blockquote>\n<p>期约是对尚不存在的结果的一个替身。同一时期的计算机科学家还是用了 “终局”、“期许”、“延迟” 和 “迟付”，所有这些概念描述的都是一种<strong>异步</strong>程序执行的机制</p>\n</blockquote>\n<h2 id=\"21-期约基础\"><a class=\"anchor\" href=\"#21-期约基础\">#</a> 2.1 期约基础</h2>\n<blockquote>\n<p><code>Promise</code>  是 ES6 新增的引用类型（可以理解为新增的类），可以通过 <code>new</code>  操作符来实例化，创建时需要传入<strong>执行器函数</strong>作为参数。</p>\n</blockquote>\n<p>什么是<strong>执行器函数</strong>？</p>\n<p>就是需要异步执行的函数。通过 <code>resolve()</code>  和 <code>reject()</code>  转换 <code>promise</code>  的状态。执行函数的内容会在创建 <code>promise</code>  实例时<strong>立即执行</strong></p>\n<hr>\n<p>创建一个 <code>Promise</code>  实例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"211-期约的三种状态\"><a class=\"anchor\" href=\"#211-期约的三种状态\">#</a> 2.1.1 期约的三种状态</h3>\n<ul>\n<li><strong>待定（pending）</strong>： <code>promise</code>  初始态，<strong>等待</strong>接受任务或者任务<strong>进行中</strong>。如发出一个 <code>axios</code>  请求，还在等待响应</li>\n<li><strong>解决（resolve）</strong>：调用 <code>resolve()</code>  进入，任务<strong>解决</strong>。如接到了一个 <code>success</code>  的响应</li>\n<li><strong>拒绝（reject）</strong>：调用 <code>reject()</code>  进入，一般是当拒绝时（比如出错了）调用。如接到了一个 <code>error</code>  的响应</li>\n</ul>\n<p>期约的状态改变<strong>不可逆</strong>，并且其状态是<strong>私有</strong>的，不能被外界读取（为了不被同步方式处理）。</p>\n<blockquote>\n<p>期约故意将异步行为封装起来，从而隔离外部的同步代码</p>\n</blockquote>\n<h3 id=\"212-resolve\"><a class=\"anchor\" href=\"#212-resolve\">#</a> 2.1.2  <code>resolve()</code></h3>\n<p>上面说过，执行函数通过 <code>resolve()</code>  和 <code>reject()</code>  转换 <code>promise</code>  的状态。 <code>resolve(res)</code>  返回一个<strong>解决</strong>的状态，参数 <code>res</code>  则作用解决的<strong>值</strong></p>\n<ul>\n<li>\n<p><code>resolve(res)</code> ：</p>\n<ul>\n<li>\n<p><code>res</code> ：解决值。（如请求得到一个 <code>success</code>  的响应，并返回了一串数据，这个 “数据” 一般就是解决值）</p>\n</li>\n<li>\n<p><code>return</code> ： <code>resolved</code>  状态</p>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p>也可以通过 <code>Promise.resolve()</code>  直接创建一个<strong>解决状态</strong>的期约，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 以上 2 种等价</span></pre></td></tr></table></figure><p><code>Promise.resolve()</code>  可以直接传入<strong>解决值</strong>，如 <code>Promise.resolve(res)</code></p>\n<p>如果参数是个<strong>期约</strong>，那么 <code>p=Promise.resolve(p)</code> ，相当于没变，这个称作<strong>幂等性</strong></p>\n<h3 id=\"213-reject\"><a class=\"anchor\" href=\"#213-reject\">#</a> 2.1.3   <code>reject()</code></h3>\n<p><code>reject(rej)</code> ：</p>\n<ul>\n<li>\n<p><code>rej</code> ：拒绝值。（一般是<strong>错误原因</strong>）</p>\n</li>\n<li>\n<p><code>return</code> ： <code>rejected</code>  状态</p>\n</li>\n</ul>\n<hr>\n<p><code>Promise.reject()</code>  也和 <code>resolve</code>  类似。但是 <code>reject</code>  没有<strong>幂等性</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Promise &#123;rejected&#125;: Promise &#123;resolve&#125;</span></pre></td></tr></table></figure><p>也就是说，p 会成为新的期约的<strong>拒绝理由</strong></p>\n<h2 id=\"22-new-promise-详解\"><a class=\"anchor\" href=\"#22-new-promise详解\">#</a> 2.2  <code>new Promise()</code>  详解</h2>\n<p>通过 <code>new Promise()</code>  创建期约一般如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 代码块 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>代码块中的代码会被<strong>立即执行</strong>，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 控制台打印 hello promise</span></pre></td></tr></table></figure><p>应该是在构造函数中调用了 <code>apply</code>  函数，向下面这样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 控制台打印 123</span></pre></td></tr></table></figure><p><strong>此时 p 的状态为 pending</strong></p>\n</li>\n<li>\n<p>通过 <code>resolve()</code>  和 <code>reject()</code>  函数<strong>设置状态</strong>，同时两者都写只有前面的有效（状态<strong>不可逆</strong>）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;undefined&#125;：就是 resolve 状态，resolve 的参数为 undefined</span></pre></td></tr></table></figure><p><strong>此时 p 的状态为 resolve</strong></p>\n<p>或者如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr></table></figure><p><strong>此时 p 的状态为 reject</strong></p>\n</li>\n<li>\n<p>不过因为 <code>resolve</code>  和 <code>reject</code>  是异步代码，且是类似回调函数的待重写函数，因此其只会在 <code>then</code>  或 <code>catch</code>  调用并重写 <code>resolve</code>  和 <code>reject</code>  时才会在同步代码执行完后执行。</p>\n</li>\n</ul>\n<h2 id=\"23-期约实例方法\"><a class=\"anchor\" href=\"#23-期约实例方法\">#</a> 2.3 期约实例方法</h2>\n<blockquote>\n<p>期约的实例方法是连接外部同步代码与内部异步代码之间的桥梁。</p>\n</blockquote>\n<p>这些代码可以：</p>\n<ul>\n<li>访问异步操作返回的数据</li>\n<li>处理期约成功和失败的输出</li>\n<li>连续对期约求值</li>\n<li>添加只有期约进入终止状态时才会执行的代码</li>\n</ul>\n<p>期约的实例方法均是定义在<strong>原型</strong>上的，因为是所有实例通用的</p>\n<h3 id=\"异步的错误处理\"><a class=\"anchor\" href=\"#异步的错误处理\">#</a> 异步的错误处理</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Error: foo</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里，第 2 个错误<strong>没有被捕获</strong>，而是中断了进程，控制台报错。</p>\n<p>因为：同步代码只能通过<strong>异步模式</strong>捕获期约抛出的错误，<strong>异步模式一旦开始执行，则唯一与之交互的方式就是使用异步结构 ---- 也就是期约的方法</strong></p>\n<p>因此：期约一般<strong>不用</strong> <code>try-catch</code>  进行错误处理，<strong>而是用</strong> <code>then</code>  和 <code>catch</code></p>\n<h3 id=\"then\"><a class=\"anchor\" href=\"#then\">#</a>  <code>then()</code></h3>\n<blockquote>\n<p><code>then()</code>  函数是为期约实例<strong>添加处理程序</strong>的主要方法</p>\n</blockquote>\n<p><code>then</code>  会在 <code>promise</code> <strong> 转变状态</strong>后执行，但<strong>不会阻断</strong>执行函数内接下来的代码。其接收 2 个参数：<strong>响应解决</strong>状态的执行函数和<strong>响应拒绝</strong>状态的执行函数</p>\n<ul>\n<li><code>Promise.prototype.then((res) =&gt; &#123;&#125;, (rej) =&gt; &#123;&#125;)</code> ：\n<ul>\n<li><code>(res) =&gt; &#123;&#125;</code> ：（必写）<strong>响应解决</strong>状态的执行函数。在 <code>promise</code>  实例状态转为<strong>解决</strong>时调用。 <code>res</code>  为解决值</li>\n<li><code>(rej) =&gt; &#123;&#125;</code> ：（可写）<strong>拒绝解决</strong>状态的执行函数。在 <code>promise</code>  实例状态转为<strong>拒绝</strong>时调用。 <code>rej</code>  为拒绝理由</li>\n<li><code>return</code> ：一个新的 <code>promise</code>  实例。下面细说</li>\n</ul>\n</li>\n</ul>\n<p>例 1：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 到这一步 p2 已经是 rejected 了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为 promise 状态只能改变一次，所以还是 rejected</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// reject</span></pre></td></tr></table></figure><p>例 2： <code>then</code>  会在 <code>promise</code> <strong> 转变状态</strong>后执行，但<strong>不会阻断</strong>执行函数内接下来的代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// before resolve</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// after resolve</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// （3 秒后）resolved</span></pre></td></tr></table></figure><hr>\n<p><strong>返回 <code>promise</code>  实例</strong></p>\n<p>下面主要讲一下 <code>then</code>  返回的 <code>promise</code>  的情况：默认以<strong>返回值</strong>作为<strong>解决值</strong>创建<strong>解决状态</strong>的 <code>promise</code>  实例返回</p>\n<p>调用 <code>then</code>  的实例 <code>p1</code>  是 <code>resolve</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>默认 <code>resolve</code>  状态，并根据 <code>then</code>  的<strong>返回值</strong>确定状态</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; undefined &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; undefined &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'resolve' &#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 上面几种新实例都是 resolve 状态，根据返回值赋予 resolve 参数</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果返回 <code>promise</code>  实例，按返回的实例算</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p5<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'bar' &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p6<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p7<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>抛出<strong>异常</strong>，按 <code>reject</code>  状态</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p8<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> 'baz' &#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>返回<strong>错误</strong>，也按 <code>resolve</code> 。（其实就是第一条）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p9<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Promise &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Error: err</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      at F:\\JavaProject\\jsdemo\\practice\\ 期约.js:32:20</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      at processTicksAndRejections (internal/process/task_queues.js:93:5)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</pre></td></tr></table></figure></li>\n<li>\n<p>只有 <code>then()</code> ，和调用 <code>then</code>  的实例一致。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">////Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 但是 p2!==p1</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 这里注意下，不写解决执行函数，返回结果和 p2 一样，那么可以得到，如果 p2 是拒绝，不写拒绝执行函数返回结果也是一样 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123; &lt;rejected> 'rejected' &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 同样的，p 也不是原来的 p，已经换了一个对象实例，仅仅是拒绝理由一样</span></pre></td></tr></table></figure></li>\n</ul>\n<p>实例 <code>p1</code>  为 <code>reject</code>  或 <code>pending</code> ：和调用 <code>then</code>  的实例一致，<strong>也是创建解决状态的 <code>promise</code>  实例返回</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123;undefined&#125; 以 undefined 为解决值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"catch\"><a class=\"anchor\" href=\"#catch\">#</a>  <code>catch()</code></h3>\n<p>和 <code>then</code>  差不多， <code>catch</code>  就是当 <code>promise</code>  实例<strong>转为拒绝状态</strong>后调用的函数。</p>\n<blockquote>\n<p>用于给期约添加<strong>拒绝处理程序</strong>。调用他就相当于调用 <code>Promise.prototype.then(null,代码块)</code></p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onRejected</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//rejected</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//rejected</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 以上 2 者等价</span></pre></td></tr></table></figure><p><code>then</code>  和 <code>catch</code>  基本类似异步的 <code>try-catch</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onResolved</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onRejected</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//resolved</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//rejected</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 因为 p1 的状态是 resolve, 而 p2 的状态是 reject</span></pre></td></tr></table></figure><p>此外， <code>catch</code>  返回的期约实例状态规则和 <code>then</code>  差不多（&lt;font color=red&gt; 也是默认 <code>resolve</code> &lt;/font&gt;）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;&lt;rejected> 'foo' &#125;，因为没有写执行函数，所以和原实例一致</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;undefined&#125;, 包括一些 void 类型的函数调用，如 console.log</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'resolve' &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> p5<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'bar' &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> p6<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> p7<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> p8<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> 'baz' &#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> p9<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Promise &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Error: err</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      at F:\\JavaProject\\jsdemo\\demo\\ 期约 \\catch.js:23:21</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</pre></td></tr></table></figure><p>不过有几点需要注意</p>\n<ul>\n<li>\n<p><code>p.then(()=&gt;&#123;&#125;).catch(()=&gt;&#123;&#125;)</code>  并不完全等于 <code>p.then(()=&gt;&#123;&#125;,()=&gt;&#123;&#125;)</code></p>\n<p>前者会受 <code>.then()</code>  的返回值的影响，后者不会</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p1 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">rej</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> rej<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123; undefined &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123; &lt;rejected> 'reject' &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>p1</code>  中是走了 2 步，先到 <code>.then</code>  再到 <code>.catch</code></p>\n</li>\n<li>\n<p>而 <code>p2</code>  中只走了 1 步，判断是个<strong> resolved</strong> 就直接选择 <code>then</code></p>\n</li>\n</ul>\n<p>&lt;font color=red&gt; 不过一般来说<strong>不会在 then 里返回一个 reject</strong>，因此，把 2 者等价使用基本上也没什么问题 &lt;/font&gt;（只要 <code>then</code>  不刻意返回 <code>reject</code> ，调用 <code>catch</code>  就是 <code>resolve</code>  期约，就会直接跳过。<strong>除非代码报错</strong>）</p>\n</li>\n</ul>\n<h3 id=\"finally\"><a class=\"anchor\" href=\"#finally\">#</a>  <code>finally()</code></h3>\n<blockquote>\n<p>在转换为 <code>resolve</code>  或 <code>reject</code>  状态时都会执行。</p>\n</blockquote>\n<p><strong>用处</strong>：和 <code>try-catch</code>  中的 <code>finally</code>  类似，用来<strong>避免</strong> <code>then</code>  和 <code>catch</code>  的代码<strong>冗余</strong></p>\n<p><strong>返回实例</strong>：原样往后传，即新实例和调用实例<strong>保持一致</strong>，除了 3 种情况</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对于 Promise.reject 也是一样的情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> p5<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> p9<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> p6<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> p7<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> p8<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> 'baz' &#125;</span></pre></td></tr></table></figure><ul>\n<li>当返回的是拒绝 <code>reject</code>  或待定 <code>pending</code> ，则新实例按照返回的算</li>\n<li>当抛出异常时，新实例为 <code>reject</code></li>\n</ul>\n<p><strong>使用场景</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onResolved</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'resolve'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onRejected</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'reject'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onFinally</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'finally'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>onFinally<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>onFinally<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后输出是这样的<img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20220330212934061.png\" alt=\"image-20220330212934061\">，原因很简单，因为 <code>finally</code>  也是异步，并不会像同步那样按顺序来。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'resolve' &#125; Promise &#123; 'reject' &#125;</span></pre></td></tr></table></figure><h2 id=\"24-期约静态方法\"><a class=\"anchor\" href=\"#24-期约静态方法\">#</a> 2.4 期约静态方法</h2>\n<p>除了 <code>Promise.resolve()</code>  和 <code>Promise.reject()</code> ， <code>Promise</code>  还有 2 个静态方法 <code>Promise.race()</code>  和 <code>Promise.all()</code></p>\n<h3 id=\"期约连锁\"><a class=\"anchor\" href=\"#期约连锁\">#</a> 期约连锁</h3>\n<p>因为每个期约实例方法（then、catch、finally）都会返回一个新实例，然后新实例又可以调用实例方法，实现<strong>串联</strong>，如下</p>\n<p><code>p.then().then()....</code></p>\n<p><strong>使用场景</strong>：主要用来串行化异步任务，让一串异步任务<strong>有序进行</strong>，看下面例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印：</p>\n<pre><code>p1 executor\t （立即）\np2 executor  （1秒后）\np3 executor\t （2秒后）\np4 executor\t （3秒后）\n</code></pre>\n<p><strong>每个后续的期约都会等待前一个期约解决，然后实例化一个新期约并返回</strong>。也就是说，这是严格按顺序执行的异步任务</p>\n<p>用个工厂函数简化一下以上代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token string\">' executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr>\n<p>再看如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token string\">'executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印</p>\n<pre><code>p1 executor\t \t\t （立即）\np1 another executor\t （立即）\np2 executor  \t\t （1秒后）\np2 another executor  （1秒后）\np3 executor  \t\t （2秒后）\np3 another executor  （2秒后）\np4 executor \t\t （3秒后）\np4 another executor  （3秒后）\n</code></pre>\n<p>可以看出，多个串行期约之间是<strong>并行</strong>的。</p>\n<h3 id=\"promiseall\"><a class=\"anchor\" href=\"#promiseall\">#</a>  <code>Promise.all()</code></h3>\n<p><strong> <code>Promise.all()</code> </strong>：创建一个期约，这个期约会在一组期约<strong>全部解决之后</strong>再解决。</p>\n<ul>\n<li>\n<p>解释下： <code>Promise.all</code>  创建一个期约 <code>p</code> ，参数是一组期约。并且这组期约相继执行，执行完毕后 <code>p</code>  状态改变（待定→解决 / 拒绝）</p>\n</li>\n<li>\n<p><code>p</code>  的状态：</p>\n<ul>\n<li>如果这组期约全部解决， 则为 <code>resolve</code> ，解决值是所有期约的解决值的<strong>数组</strong>；</li>\n<li>如果有一个是待定，则为 <code>pending</code> ；</li>\n<li>如果有一个拒绝的，则为 <code>reject</code> ，且拒绝原因和第一个拒绝期约一致。此外，只需要在 <code>p</code>  后面加 <code>catch</code> ，所有拒绝都会被处理</li>\n</ul>\n</li>\n<li>\n<p><code>arguments</code> ：元素为期约的<strong>数组</strong></p>\n</li>\n<li>\n<p><code>return</code> ：一个新期约</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 永远为待定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝理由'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;&lt;rejected> ' 拒绝理由 ' &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; [ 1, undefined, 3, 5 ] &#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>p</code>  只有<strong>第一个</strong>拒绝理由会进入 <code>catch</code> ，但所有拒绝都会别 <code>catch</code> <strong> 静默处理</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拒绝 5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 虽然原因只有拒绝 5，但拒绝 6 也被捕获处理了，不会出现未处理的错误（不会有报错）</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"promiserace\"><a class=\"anchor\" href=\"#promiserace\">#</a>  <code>Promise.race()</code></h3>\n<p><strong> <code>Promise.race()</code> </strong>：返回一组集合中<strong>最先解决或拒绝</strong>的期约的<strong>镜像</strong></p>\n<ul>\n<li>参数：可以是一组期约，也可以是一组数据（数据成为期约的解决值，通过 <code>Promise.resolve()</code>  转换）</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;&lt;rejected> ' 拒绝 1' &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 有红字警告</span></pre></td></tr></table></figure><p>组数据按照<strong>迭代顺序</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 1 &#125;</span></pre></td></tr></table></figure><p><strong>空数组</strong>返回待定期约</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>拒绝处理</strong>：和 <code>all</code>  一样，第一个拒绝理由成为 <code>all</code>  的拒绝理由，别的拒绝会被<strong>静默处理</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拒绝 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 无红字警告，错误都已被处理</span></pre></td></tr></table></figure><h1 id=\"3-异步函数async\"><a class=\"anchor\" href=\"#3-异步函数async\">#</a> 3. 异步函数（async）</h1>\n<p>在期约中的解决值必须在同个异步队列中处理，这样很不方便，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里后续处理解决值 3 只能通过 then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure><p>而异步函数可以通过<strong>等待</strong>其执行完获得其返回值</p>\n<h2 id=\"31-异步函数\"><a class=\"anchor\" href=\"#31-异步函数\">#</a> 3.1 异步函数</h2>\n<h3 id=\"311-async\"><a class=\"anchor\" href=\"#311-async\">#</a> 3.1.1 async</h3>\n<p>async 关键字表示这是一个异步函数（类似 java 的 @注解）。其可以让函数具有异步特征，但总体上其代码仍是同步求值的。</p>\n<ul>\n<li>async 异步函数的代码仍是<strong>同步代码</strong></li>\n<li>其返回值会包装成期约对象（ <code>Promise.resolve(返回值)</code> ）</li>\n<li>如果没有返回值则是 <code>Promise.resolve(undefined)</code></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 等效于 return Promise.resolve (3);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20220401173943661.png\" alt=\"image-20220401173943661\"></p>\n<ul>\n<li>&lt;font color=red&gt; 没有 <code>return</code>  其实相当于 <code>return undefined</code> &lt;/font&gt;</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印：<img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20220401174228330.png\" alt=\"image-20220401174228330\"></p>\n<ul>\n<li>\n<p>抛出错误相当于 <code>return reject</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20220401173943661.png\" alt=\"image-20220401173943661\"></p>\n</li>\n</ul>\n<h3 id=\"312-await等待\"><a class=\"anchor\" href=\"#312-await等待\">#</a> 3.1.2 await（等待）</h3>\n<ul>\n<li>\n<p><code>await</code>  关键字<strong>只能用在 async 函数内</strong>。可以暂停后面的代码执行，等待期约或异步函数解决。返回一个解决值</p>\n<ul>\n<li>\n<p>只能等待<strong>期约或异步函数</strong>（不能等待 <code>setTimeout</code> ）。（其实还是期约，因为异步函数返回一个期约实例）</p>\n<p>但只要 <code>await</code>  了，就算进入异步（向该函数域内的消息队列添加一个任务（ <code>await</code>  以及之后所有代码））</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// await null;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 打印 412356</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// -----------------------------------------------</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 打印 415623</span></pre></td></tr></table></figure></li>\n<li>\n<p>一定是等到<strong>解决</strong>。如果是<strong>拒绝或待定</strong>，后面的代码<strong>不会执行</strong>，直接 <code>return</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123;&lt;pending> &#125; （不打印 2）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 或</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123;&lt;rejected> 1 &#125; （也不打印 2）</span></pre></td></tr></table></figure></li>\n<li>\n<p>返回一个<strong>解决值</strong>。如果是<strong>拒绝或待定</strong>，就没有返回（也可能是因为不执行 <code>console.log</code>  了）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 8</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//---</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// undefined</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//----</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 8</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// ---</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不打印</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">//---</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 啥也没有</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>await</code>  仅在作用域内有效，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 仍是最优先输出</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/image-20220401201033691.png\" alt=\"image-20220401201033691\"></p>\n</li>\n</ul>\n<h1 id=\"4-事件循环\"><a class=\"anchor\" href=\"#4-事件循环\">#</a> 4. 事件循环</h1>\n<p>我们知道  <code>JS</code>  执行是<strong>单线程</strong>的，它是基于事件循环的。事件循环大致分为以下几个步骤：</p>\n<ol>\n<li>所有同步任务都在主线程上执行，形成一个执行栈（ <code>execution context stack</code> ）。</li>\n<li>主线程之外，还存在一个 &quot;任务队列&quot;（ <code>task queue</code> ）。只要异步任务有了运行结果，就在 &quot;任务队列&quot; 之中放置一个事件。</li>\n<li>一旦 &quot;执行栈&quot; 中的所有同步任务执行完毕，系统就会读取 &quot;任务队列&quot;，看看里面有哪些事件。那些对应的异步任务，于是结束等待状态，进入执行栈，开始执行。</li>\n<li>主线程不断重复上面的第三步。</li>\n</ol>\n<p>当我们打开网站时，网页的<strong>渲染过程</strong>就是一大堆<strong>同步任务</strong>，比如页面骨架和页面元素的渲染。而像<strong>加载</strong>图片音乐之类占用资源大耗时久的任务，就是<strong>异步任务</strong>。</p>\n<p><img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/164974fb89da87c5tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp\" alt=\"cmd-markdown-logo\"></p>\n<p>解读：</p>\n<ul>\n<li>同步和异步任务分别进入不同的执行 &quot;场所&quot;，同步的进入主线程，异步的进入 Event Table 并注册函数</li>\n<li>当指定的事情完成时，Event Table 会将这个函数移入 Event Queue。</li>\n<li>主线程内的任务执行完毕为空，会去 Event Queue 读取对应的函数，进入主线程执行。</li>\n<li>上述过程会不断重复，也就是常说的 Event Loop (事件循环)。</li>\n</ul>\n<h2 id=\"宏任务-微任务\"><a class=\"anchor\" href=\"#宏任务-微任务\">#</a> 宏任务、微任务</h2>\n<p>一个线程中，事件循环是唯一的，但是任务队列可以拥有多个。任务队列又分为 <code>macro-task</code> （宏任务）与 <code>micro-task</code> （微任务）。</p>\n<p>每执行完一个个宏任务 ( <code>macro task</code> ) 后，都要去清空该宏任务所对应的微任务队列中所有的微任务 ( <code>micro task</code> ）。宏任务耗费的时间是大于微任务的，所以在浏览器支持的情况下，<strong>优先使用微任务</strong>。</p>\n<ul>\n<li><strong>宏任务</strong>：\n<ul>\n<li>script (整体代码)（即 <code>&lt;script&gt;</code>  中的代码）</li>\n<li>setTimeout</li>\n<li>setInterval</li>\n<li>setImmediate</li>\n<li>I/O</li>\n<li>UI render</li>\n</ul>\n</li>\n<li><strong>微任务</strong>：\n<ul>\n<li>process.nextTick</li>\n<li>Promise</li>\n<li>Async/Await (实际就是 promise)</li>\n<li>MutationObserver (html5 新特性)</li>\n</ul>\n</li>\n</ul>\n<p>主线程的执行过程就是一个  <code>tick</code> ，而所有的异步结果都是通过 “任务队列” 来调度。 任务队列中存放的是一个个的任务（ <code>task</code> ）。 规范中规定  <code>task</code>  分为两大类，分别是宏任务 ( <code>macro task</code> ) 和微任务 ( <code>micro task</code> ），并且每执行完一个个宏任务 ( <code>macro task</code> ) 后，都要去清空该宏任务所对应的微任务队列中所有的微任务 ( <code>micro task</code> ），他们的执行顺序如下所示：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>macroTask <span class=\"token keyword\">of</span> macroTaskQueue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 1. 处理当前的宏任务</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">handleMacroTask</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 2. 处理对应的所有微任务</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>microTask <span class=\"token keyword\">of</span> microTaskQueue<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token function\">handleMicroTask</span><span class=\"token punctuation\">(</span>microTask<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/09/08/note/JavaScript/%E6%9C%9F%E7%BA%A6%E3%80%81%E4%BA%8B%E4%BB%B6%E5%BE%AA%E7%8E%AF/164974fa4b42e4aftplv-t2oaga2asx-zoom-in-crop-mark3024000.webp\" alt=\"cmd-markdown-logo\"></p>\n<p>总的结论就是：执行宏任务，然后执行该宏任务产生的微任务，若微任务在执行过程中产生了新的微任务，则继续执行微任务，微任务执行完毕后，再回到宏任务中进行下一轮循环。</p>\n<p>结合例子看一下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\t<span class=\"token comment\">// 同步</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'start1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token comment\">// 异步宏</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'timer1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t\t<span class=\"token comment\">// 同步</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\t<span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\t<span class=\"token comment\">// 异步微</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token comment\">// 异步微 2</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'then2'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token comment\">// 同步</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'end1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><ol>\n<li>先执行完宏任务 <code>script</code>  中所有代码： <code>console.log('start1')</code> 、 <code>console.log('end1')</code> 、 <code>console.log('p1')</code> 、``。\n<ol>\n<li>期间，将宏任务 <code>setTimeout→console.log('timer1')</code>  放入宏任务队列</li>\n<li>将微任务 <code>then→console.log('then1')</code>  放入该微任务队列</li>\n</ol>\n</li>\n<li>宏任务 <code>script</code>  执行完毕，清空对应微任务队列中的微任务\n<ol>\n<li>期间，将微任务 <code>console.log('then1')</code>  产生的新的微任务放入微任务队列</li>\n</ol>\n</li>\n<li>一直将这些微任务清空</li>\n<li>拿出宏任务队列的 <code>setTimeout→console.log('timer1')</code>  执行</li>\n</ol>\n<h2 id=\"打印顺序题必考\"><a class=\"anchor\" href=\"#打印顺序题必考\">#</a> 打印顺序题（必考）</h2>\n<p>属于是笔试面试必考了，算各种异步的打印顺序</p>\n<p>记住几点：</p>\n<ol>\n<li>\n<p>同步代码 &gt; <code>Promise</code> &gt; <code>setTimeout</code> ：同一级下，一定是所有同步代码执行完了，执行所有 <code>Promise</code> ，最后执行 <code>setTimeout</code></p>\n</li>\n<li>\n<p>以主函数（全局作用域）开始执行<strong>同步代码</strong>，遇到 <code>await</code>  或 <code>then/catch/finally</code> ，执行完其同步代码，将<strong>返回 / 解决结果</strong>放入<strong>任务队列</strong>，直到执行完（<strong>执行栈</strong>中）所有的同步代码。</p>\n<ul>\n<li>\n<p><code>await</code>  是把该函数域内 ** <code>await</code>  的返回值以及之后所有的代码 ** 作为一个任务放入队列</p>\n<p>&lt;font color=red&gt; 注： <code>await</code>  跟着的同步代码（ <code>return</code>  之前的）还是同步执行，不会被放入队列 &lt;/font&gt;</p>\n</li>\n<li>\n<p><code>then</code>  则是把后面的一连串作为一个任务放入</p>\n</li>\n</ul>\n</li>\n<li>\n<p>取出消息队列最前面的任务，放入<strong>执行栈</strong>开始执行<strong>同步代码</strong>，遇到 <code>await</code>  或 <code>then</code> ，执行完其同步代码，将<strong>返回 / 解决结果</strong>放入<strong>队列尾</strong>，直到执行完所有的同步代码。</p>\n</li>\n<li>\n<p>如此<strong>循环</strong>，直到执行完所有 <code>Promise</code>  代码</p>\n</li>\n<li>\n<p>依次执行相应的 <code>setTimeout</code>  代码</p>\n</li>\n</ol>\n<p>总结：</p>\n<ul>\n<li>\n<p>以 <code>await</code>  或 <code>then/catch/finally</code>  作为分隔符</p>\n</li>\n<li>\n<p>这是立即执行（ <code>setTimeout</code>  也为 0）的情况，如果是需要等待的就主要看时间了</p>\n</li>\n<li>\n<p>&lt;font color=red&gt; 注意， <code>await</code>  和 <code>then</code>  有些情况后面的代码是<strong>不执行</strong>的。&lt;/font&gt;</p>\n<ul>\n<li>比如 <code>await</code>  为 <code>reject</code>  或 <code>pending</code>  时</li>\n<li><code>promise</code>  为 <code>reject</code>  后面却跟了个 <code>then</code>  时（只写了第一个参数）</li>\n</ul>\n</li>\n<li>\n<p><code>setTimeout</code>  和  <code>setInterval</code>  的运行机制，其实就是将指定的代码移出本次执行，等到下一轮 Event Loop 时，再检查是否到了指定时间。如果到了，就执行对应的代码；如果不到，就等到再下一轮 Event Loop 时重新判断。</p>\n<p>这意味着，setTimeout 指定的代码，必须等到<strong>本次执行</strong>的所有同步代码都执行完，才会执行。</p>\n</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  <span class=\"token keyword\">const</span> data <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"async2的结果\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"6\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"7\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>  <span class=\"token comment\">//   resolve()</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"8\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出结果：&lt;font color=white&gt;247536 async2 的结果 1&lt;/font&gt;</p>\n<p>例 2：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">async1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'7'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出结果：&lt;font color=white&gt;2461753&lt;/font&gt;</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/",
            "url": "https://nitgod1996.com/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/",
            "title": "",
            "date_published": "2022-09-08T14:33:15.124Z",
            "content_html": "<h1 id=\"十大排序\"><a class=\"anchor\" href=\"#十大排序\">#</a> 十大排序</h1>\n<h2 id=\"冒泡排序\"><a class=\"anchor\" href=\"#冒泡排序\">#</a> 冒泡排序</h2>\n<ol>\n<li>两重循环</li>\n<li>每次循环比较 <code>i</code>  和 <code>i-1</code> ，把更大的换到后面，遍历结束后最大的在最后。</li>\n<li>第二次循环长度 - 1，以此类推</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/a0250d86fac644ea82f323a990e1aed5tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"bubblesort.gif\"></p>\n<p>复杂度： <code>n^2</code> ，空间 <code>1</code></p>\n<h2 id=\"选择排序\"><a class=\"anchor\" href=\"#选择排序\">#</a> 选择排序</h2>\n<ol>\n<li>两重循环</li>\n<li>每次循环找出当前最小值，遍历一轮结束，与 “最前” 元素互换</li>\n<li>第二次循环长度 - 1（j=i），以此类推</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/7a287f44039844f694bbf67069ee3d66tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"selectionsort.gif\"></p>\n<p>复杂度： <code>n^2</code> ，空间 <code>1</code></p>\n<h2 id=\"插入排序\"><a class=\"anchor\" href=\"#插入排序\">#</a> 插入排序</h2>\n<ol>\n<li>两重循环</li>\n<li>每次循环将当前元素与前面元素比较，如果小于前者则前者后移，继续和新的前者比较。</li>\n<li>直到到达合适位置插入（每轮结束前面 <code>i</code>  个元素都是有序的）</li>\n<li>第二次循环长度 - 1（j=i），以此类推</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/dfa7615ee39246ea9dc9c9be37aa2b7ctplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"insertionsort.gif\"></p>\n<p>复杂度： <code>n^2</code> ，空间 <code>1</code></p>\n<h2 id=\"快速排序\"><a class=\"anchor\" href=\"#快速排序\">#</a> 快速排序</h2>\n<ol>\n<li>分治法</li>\n<li>取最前面的元素，暂存为 temp，把数组中所有小于该元素的放在左边，大于该元素的放在右边，该元素插在中间</li>\n<li>分别对左右两部分执行相同操作</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/9bbcf3482cec45b894ce9383f9cd9bd6tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"image.png\"></p>\n<p>复杂度：双 <code>nlogn</code></p>\n<p>核心代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 从数组尾部，找出比 x 小的数字</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">>=</span> x <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 将空出的位置，填入当前值， 下标 j 位置空出</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//ps：比较值已经缓存在变量 x 中</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token comment\">// 从数组头部，找出比 x 大的数字</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> x <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\">// 将数字填入下标 j 中，下标 i 位置突出</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        j<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token comment\">// 一直循环到左右指针 i、j 相遇，</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    <span class=\"token comment\">// 相遇时，i==j, 所以下标 i 位置是空出的</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"归并排序\"><a class=\"anchor\" href=\"#归并排序\">#</a> 归并排序</h2>\n<ol>\n<li>分治思想</li>\n<li>自顶向下→对于每个数组，将其均分成两个小数组，直到不能分</li>\n<li>自底向上→将小数组两两合并（合并 2 个有序数组）</li>\n<li>最终合成一个大数组</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/78029fcda4ef48f58de7a0fe05e1d75btplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"image.png\"></p>\n<p>复杂度 <code>nlogn</code></p>\n<h2 id=\"堆排序\"><a class=\"anchor\" href=\"#堆排序\">#</a> 堆排序</h2>\n<ol>\n<li>将数组构建成堆，以大顶堆举例\n<ol>\n<li>自底向上遍历，对于每个元素，进行 “下沉” 操作，</li>\n<li>即和左右孩子节点比较，如果小于任何一个孩子节点，与更大的那个孩子节点互换</li>\n<li>直到大于任意孩子节点</li>\n</ol>\n</li>\n<li>维护堆：每次取出堆顶，将堆底元素插入堆顶，进行 “下沉”</li>\n<li>方法 1：建立一个新数组，依次取出堆顶元素放入新数组，实现排序</li>\n<li>方法 2：依次将堆顶元素放到 “新的” 最后，实现原地排序（每次循环最后节点往前挪 1）</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/c383bc04a8734e63ab654475e3d1946dtplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"image.png\"></p>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/05e01042ba344a1e98f553412a1a5702tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"image.png\"></p>\n<p>复杂度 <code>nlogn</code></p>\n<h2 id=\"计数排序\"><a class=\"anchor\" href=\"#计数排序\">#</a> 计数排序</h2>\n<ol>\n<li>是开辟一块连续格子组成的空间，给数据进行存储。</li>\n<li>将数组中的数字，依次读取，存入其值对应的下标中。</li>\n<li>储存完成后，再按照空间的顺序，依次读取每个格子的数据，输出即可。</li>\n</ol>\n<p>所以，<strong>计数排序要求排序的数据，必须是有范围的整数</strong>。</p>\n<p>时间复杂度： <code>max(nums)</code> ，空间复杂度： <code>max(nums)</code></p>\n<p>（其实就是，新建个数组，把元素当数组下标）</p>\n<h2 id=\"桶排序\"><a class=\"anchor\" href=\"#桶排序\">#</a> 桶排序</h2>\n<p>优化的计数排序</p>\n<ol>\n<li>创建 m 个桶（数组），每个桶定义该桶的数据范围</li>\n<li>遍历数组，进入对应的桶中</li>\n<li>每个桶中的数据单独排序</li>\n<li>依次取出桶中的数据</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/cbf5187af82a40349141d93d847d853btplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"image.png\"></p>\n<p>时间复杂度： <code>nlog(n/m)</code> （前提是桶内排序用快排）</p>\n<p>桶排序的应用场景十分严苛，首先，<strong>数据应该分布比较均匀</strong>。</p>\n<h2 id=\"基数排序\"><a class=\"anchor\" href=\"#基数排序\">#</a> 基数排序</h2>\n<ol>\n<li>建立 10 个桶，分别表示 0-9</li>\n<li>第一次循环，把数字放到个位数的对应桶中，然后依次取出排序</li>\n<li>第二次循环，放到百位数桶中，取出排序</li>\n<li>依次循环，直到最大位数排完（可以先遍历一次得出最大数）</li>\n</ol>\n<p><img data-src=\"/2022/09/08/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E5%85%AB%E8%82%A1/cc29dad910124e218d4545c26a86f5adtplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"image.png\"></p>\n<p>复杂度 <code>n</code></p>\n<h2 id=\"希尔排序实在看不懂\"><a class=\"anchor\" href=\"#希尔排序实在看不懂\">#</a> 希尔排序实在看不懂</h2>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/28/note/JavaScript/JavaScript%E5%85%AB%E8%82%A1/",
            "url": "https://nitgod1996.com/2022/08/28/note/JavaScript/JavaScript%E5%85%AB%E8%82%A1/",
            "title": "JavaScript八股文",
            "date_published": "2022-08-28T13:27:31.000Z",
            "content_html": "<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"基本数据类型\"><a class=\"anchor\" href=\"#基本数据类型\">#</a> 基本数据类型</h2>\n<p>6 大基本数据类型</p>\n<ul>\n<li>\n<p><code>number</code> ：数值。</p>\n<ul>\n<li>\n<p><code>isNaN</code>  判断任何参数是否是<strong>数值</strong>或者是否<strong>可以转换成数值</strong>。例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false, 可以转为 10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false, 可以转为 1</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>string</code> ：字符串，可以用<strong>双引号</strong>、<strong>单引号</strong>和 ** 反引号 ``** 表示</p>\n</li>\n<li>\n<p><code>boolean</code> ：布尔值</p>\n</li>\n<li>\n<p><code>undefined</code> ：</p>\n</li>\n<li>\n<p><code>null</code> ：一个空对象指针， <code>typeof</code>  返回 <code>&quot;object&quot;</code></p>\n</li>\n<li>\n<p><code>symbol</code> ：符号。符号的用途是确保对象属性使用唯一标识符，不会发生属性冲突的危险</p>\n</li>\n</ul>\n<h2 id=\"基本数据类型和引用类型有什么区别\"><a class=\"anchor\" href=\"#基本数据类型和引用类型有什么区别\">#</a> 基本数据类型和引用类型有什么区别？</h2>\n<ul>\n<li>基本数据类型存储在<strong>栈</strong>中</li>\n<li>引用类型的对象存储于<strong>堆</strong>中</li>\n</ul>\n<p>当我们把变量赋值给一个变量时，解析器首先要确认的就是这个值是基本类型值还是引用类型值</p>\n<p>再说得详细一点：基本数据类型其变量保存的直接就是数据的值，而引用类型的变量保存的是<strong>引用地址</strong>（也就是说，引用类型把引用地址放在了栈中），引用地址指向堆中的数据，如下图</p>\n<p><img data-src=\"/2022/08/28/note/JavaScript/JavaScript%E5%85%AB%E8%82%A1/1cfdd34ff73d4d5a80e22f6a0f6a185c-16616944430735.png\" alt=\"img\"></p>\n<p>因此，复制基础变量直接就是复制了其值；而复制引用类型可能只是复制了其引用地址，这种情况，2 个变量指向的对象还是同一个。如果要完全复制，需要<strong>深拷贝</strong></p>\n<h2 id=\"解释一下什么是浅拷贝什么是深拷贝\"><a class=\"anchor\" href=\"#解释一下什么是浅拷贝什么是深拷贝\">#</a> 解释一下什么是浅拷贝，什么是深拷贝</h2>\n<ul>\n<li><strong>浅拷贝</strong>：就是复制的是引用类型的地址（该地址仍指向同一内存）。比如直接复制一个数组，或者用 <code>slice</code>  复制一个二维数组</li>\n<li><strong>深拷贝</strong>：完全拷贝引用类型的值（值不是同一内存的），产生相同大小的额外空间.</li>\n</ul>\n<p>深拷贝的实现：</p>\n<ol>\n<li>\n<p><code>JSON.parse(JSON.stringify())</code> ：这是一种比较简单的方法，但缺点是 <code>undefined</code>  不能被转换并抛出异常</p>\n</li>\n<li>\n<p><strong>递归拷贝</strong>：这种方法比较可靠</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token operator\">===</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 如果是 null 或者 undefined 我就不进行拷贝操作</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 可能是对象或者普通的值  如果是函数的话是不需要深拷贝</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> obj <span class=\"token operator\">!==</span> <span class=\"token string\">\"object\"</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 是对象的话就要进行深拷贝</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 创建一个和 obj 一样构造函数的对象</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> cloneObj <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">obj<span class=\"token punctuation\">.</span>constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> key <span class=\"token keyword\">in</span> obj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token comment\">// 实现一个递归拷贝</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>            cloneObj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">deepClone</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> cloneObj<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ol>\n<h1 id=\"判断数据类型方法typeof-instanceof-constructor-newtarget-的区别\"><a class=\"anchor\" href=\"#判断数据类型方法typeof-instanceof-constructor-newtarget的区别\">#</a> 判断数据类型方法：typeof、instanceof、constructor、new.target 的区别</h1>\n<p><strong>typeof</strong>： <code>typeof</code>  主要用于<strong>基本数据类型</strong>以及<strong>函数</strong>的判别，对引用数据类型<strong> object</strong> 就无法细分其类别了。其以<strong>字符串</strong>形式返回结果</p>\n<ul>\n<li><code>undefined</code> ：表示值未定义</li>\n<li><code>boolean</code> ：布尔值</li>\n<li><code>string</code> ：字符串</li>\n<li><code>number</code> ：数值</li>\n<li><code>object</code> ：对象或 <code>null</code></li>\n<li><code>function</code> ：函数和 <code>class</code></li>\n<li><code>symbol</code> ：符号</li>\n</ul>\n<hr>\n<p><strong>instanceof</strong>： <code>instanceof</code>  主要是判断后者是否处于前者的<strong>原型链</strong>上游。</p>\n<p>可以用来判断：</p>\n<ol>\n<li>对象实例是否属于该对象（伪类）</li>\n<li>对象（伪类）是否继承于另一个对象（伪类）</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; <code>instanceof</code>  不适用于简单类型 &lt;/font&gt;</p>\n<hr>\n<p><strong>constructor</strong>： <code>constructor</code> ：对象<strong>原型上</strong>属性，是一个<strong>指针</strong>，指向创建该对象的<strong>构造函数</strong>。可以用来判断 2 个对象是不是<strong>同一个类</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Person]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Object]</span></pre></td></tr></table></figure><p><code>constructor</code>  是指向<strong>对象实例</strong>的构造函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Function]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这里就把 Person 看成是个函数实例了，而不是类</span></pre></td></tr></table></figure><p>但可以通过原型 <code>prototype.constructor</code>  获取构造函数（因为每个类的原型就是一个原型实例对象）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Person]</span></pre></td></tr></table></figure><hr>\n<p><strong>new.target</strong>：独属于<strong>函数</strong>的属性，返回对象实例的构造函数。</p>\n<ul>\n<li>如果函数正常调用（没有用 <code>new</code>  实例化）： <code>new.target</code>  返回 <code>undefined</code></li>\n<li>如果 <code>new</code>  实例化了对象： <code>new.target</code>  返回该构造函数</li>\n</ul>\n<p>因为 <code>new.target</code>  是函数的专有属性，和 <code>arguments</code>  一样，因此 &lt;font color=red&gt; 只能在函数体内调用 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: King]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure><h1 id=\"为什么-010203\"><a class=\"anchor\" href=\"#为什么010203\">#</a> 为什么 0.1+0.2!==0.3</h1>\n<p>浮点数的精度远不如整数。如 0.1+0.2 !== 0.3，而是 0.30000000000000004</p>\n<p>JavaScript 无法完全表示 0.1 和 0.2，而 js 则是对二进制进行截取，此时 0.1 就不再是 0.1 , 而是 0.100000000001， 而 0.2 则是 0.2000000002，那么两者相加时则大于了 0.3</p>\n<ul>\n<li>\n<p>十进制整数转二进制方法：除 2 取余；</p>\n</li>\n<li>\n<p>十进制小数转二进制方法：乘 2 除整</p>\n</li>\n</ul>\n<p>十进制 0.1 转换成二进制，乘 2 取整过程：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0.1</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.2</span> # <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token number\">0.2</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.4</span> # <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token number\">0.4</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.8</span> # <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token number\">0.8</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.6</span> # <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token number\">0.6</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.2</span> # <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token number\">0.2</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">0.4</span> # <span class=\"token number\">0</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">...</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></pre></td></tr></table></figure><p>从上面可以看出，0.1 的二进制格式是：0.0001100011....。这是一个二进制无限循环小数</p>\n<p>十进制 0.5 转换二进制：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token number\">0.5</span> <span class=\"token operator\">*</span> <span class=\"token number\">2</span> <span class=\"token operator\">=</span> <span class=\"token number\">1.0</span> # <span class=\"token number\">1</span></pre></td></tr></table></figure><p>0.5 的二进制格式：0.1</p>\n<h1 id=\"javascript-预编译\"><a class=\"anchor\" href=\"#javascript预编译\">#</a> JavaScript 预编译</h1>\n<p>总体来看， <code>JavaScript</code>  编译过程只有下面三个步骤： <strong>1. 语法分析 2. 预编译 3. 解释执行</strong>。而 <code>JavaScript</code>  预编译发生在代码片段执行前的<strong>几微秒</strong>（甚至更短！），预编译分为两种，一种是函数预编译，另一种是全局预编译</p>\n<h2 id=\"函数预编译四部曲\"><a class=\"anchor\" href=\"#函数预编译四部曲\">#</a> 函数预编译四部曲</h2>\n<ol>\n<li>创建<strong>活动对象</strong> <code>Activation Object</code> （以下简写为 AO 对象）；（作用域那章有说到过，就是保存函数内所有变量以及参数的对象）</li>\n<li>找<strong>形参</strong>和<strong>变量声明</strong>，将变量声明和形参作为 AO 的属性名，值为 <code>underfined</code> ；</li>\n<li>将<strong>实参</strong>和<strong>形参</strong>值统一；</li>\n<li>在函数体里找函数声明，将函数名作为 AO 对象的属性名，值赋予函数体。</li>\n</ol>\n<blockquote>\n<ul>\n<li>形参：函数声明时的参数，可以认为是个参数名，没有实际的值。或者说可以看成是保存实参的变量名</li>\n<li>实参：函数调用时的传参，是一个确切的值，当传参是引用类型是，实参是其地址。在函数内部，由形参（代表变量名）保存实参</li>\n</ul>\n</blockquote>\n<p><strong>也就是说，先将变量声明和形参提升，再形参赋值，然后对函数声明整体提升。而对 <code>var</code>  变量赋值则不在预编译阶段进行</strong></p>\n<h2 id=\"全局预编译三部曲\"><a class=\"anchor\" href=\"#全局预编译三部曲\">#</a> 全局预编译三部曲</h2>\n<ol>\n<li>创建<strong>全局对象</strong> <code>Global Object</code> （以下简写为 GO 对象）；</li>\n<li>找<strong>变量声明</strong>，将变量声明作为 GO 的属性名，值为 <code>undefined</code> ；</li>\n<li>找<strong>函数声明</strong>，将函数名作为 GO 对象的属性名，值赋予函数体。</li>\n</ol>\n<p>总的来说和函数预编译差不多，就是少了个<strong>形参</strong></p>\n<h1 id=\"和-的区别\"><a class=\"anchor\" href=\"#和-的区别\">#</a> == 和 === 的区别</h1>\n<ul>\n<li>\n<p><code>==</code> ：等于操作符，会做<strong>类型转换</strong>进行比较（一般是转为数值）</p>\n<ul>\n<li>两个都为<strong>简单类型</strong>，字符串和布尔值都会<strong>转换成数值</strong>，再比较</li>\n<li><strong>简单类型</strong>与<strong>引用类型</strong>比较，对象转化成其原始类型的值（调用对象的  <code>valueOf()</code> ），再比较</li>\n<li>两个都为<strong>引用类型</strong>，则比较它们是否<strong>指向同一个对象</strong></li>\n<li><code>null </code> 和  <code>undefined</code>  相等</li>\n<li>存在  <code>NaN </code> 则返回 <code> false</code></li>\n</ul>\n<blockquote>\n<p><code>valueOf()</code>  ：返回对象，通常与 toString 返回一致。</p>\n</blockquote>\n</li>\n<li>\n<p><code>===</code> ：全等操作符。需要<strong>类型相同，值也相同</strong></p>\n<ul>\n<li>'55' !== 55</li>\n<li><code>null === null</code> ， <code>undefined === undefined</code> 。但 <code>null !== undefined</code></li>\n</ul>\n</li>\n</ul>\n<h1 id=\"说一下对闭包的理解以及闭包的使用场景\"><a class=\"anchor\" href=\"#说一下对闭包的理解以及闭包的使用场景\">#</a> 说一下对闭包的理解，以及闭包的使用场景</h1>\n<blockquote>\n<p><strong>闭包</strong>指的是那些<strong>引用</strong>了另一个函数作用域中变量的函数</p>\n</blockquote>\n<p>解析一下上面这句话：</p>\n<ol>\n<li>\n<p><strong>引用</strong>：这个引用很关键，闭包不仅仅是函数内的函数，还有个重要条件是<strong>引用</strong>了另一个函数作用域的变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'jack'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这是一个闭包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这不是</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>另一个函数域：指的一般是外部域。因为只有外层的作用域的变量是可以被引用的（变量对象在<strong>作用域链</strong>后端可以被找到）</p>\n</li>\n<li>\n<p>的函数：指的是里面那层函数，上面例子中被 <code>return</code>  的函数是闭包，而不是外层的 <code>outer</code></p>\n</li>\n</ol>\n<hr>\n<p><strong>使用场景</strong></p>\n<ul>\n<li>创建私有变量</li>\n<li><strong>延长变量的生命周期</strong>：这点尤为重要。因为垃圾回收机制，但函数域内的代码执行完毕，所有变量都会被销毁。但是如果闭包引用了该变量，其就不会被销毁。</li>\n</ul>\n<p>典型的如<strong>防抖节流</strong></p>\n<h2 id=\"防抖-节流\"><a class=\"anchor\" href=\"#防抖-节流\">#</a> 防抖、节流</h2>\n<p>防抖和节流是闭包的一个很经典的例子，</p>\n<ul>\n<li>防抖：一定时间内连续触发，只执行最后一次</li>\n<li>节流：一定时间内最多触发一次</li>\n</ul>\n<p>防抖和节流都通过闭包引用了计时器，使其不会被垃圾回收程序销毁。</p>\n<p><strong>节流</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 节流函数（计时器版）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> timeout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这是一个闭包</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token comment\">// 这里要用箭头函数，因为箭头函数没有 this 和 arguments，其引用的是 return 的 function ()</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> arguments<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>为了阻止 <code>timeout</code>  被<strong>自动释放</strong>，使用闭包来对其引用。</li>\n</ul>\n<hr>\n<p>计时器版也是如此</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> previous <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> previous <span class=\"token operator\">></span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            previous <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>防抖</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> timer<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token comment\">// 一旦再次触发，立马重置计时器</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 新计时器</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>argument<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>wait<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"闭包的内存泄漏\"><a class=\"anchor\" href=\"#闭包的内存泄漏\">#</a> 闭包的内存泄漏</h2>\n<p>看以下例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> temp<span class=\"token operator\">=</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里闭包引用了 <code>obj.a</code> ，从而使得 <code>obj</code>  无法释放。当 <code>obj</code>  大到一定程度的时候，会严重影响性能，而我们仅仅是需要 <code>obj.a</code>  的属性，得不偿失。</p>\n<p>可以改成下面这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> temp<span class=\"token operator\">=</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样一来，当执行到 <code>obj = null</code>  时， <code>obj</code>  会被<strong>解除引用</strong>（本质上是解除了 <code>obj</code>  对其他变量的引用，而 <code>obj.a</code>  由于还存在被 <code>a</code>  的引用，不会被释放），在下一次垃圾回收时会被释放。而 <code>a</code>  则会一直存在在内存中，但大大降低了内存的泄漏。</p>\n<h2 id=\"闭包的-this-指向\"><a class=\"anchor\" href=\"#闭包的this指向\">#</a> 闭包的 this 指向</h2>\n<p>&lt;font color=red&gt; 闭包的 <code>this</code>  指向调用该闭包函数的对象 &lt;/font&gt;。</p>\n<p>如下例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// red</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 相当于</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// let c = obj.getColor(); // c = function () &#123;return this.color;&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// window.c();</span></pre></td></tr></table></figure><p>那么该如何通过闭包调用到 <code>obj.color</code>  呢？</p>\n<p>每个函数在<strong>被调用时</strong>会自动创建 2 个变量： <code>this</code>  和 <code>arguments</code> ，&lt;font color=red&gt; 但内部函数永远无法直接访问外部函数的这 2 个变量。&lt;/font &gt; 因此我们只能通过创建一个临时变量引用来保存这 2 个变量的值，如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// blue</span></pre></td></tr></table></figure><h1 id=\"说说对内存回收的理解\"><a class=\"anchor\" href=\"#说说对内存回收的理解\">#</a> 说说对内存回收的理解</h1>\n<p><code>JavaScript</code>  会自动释放内存，其基本思路是：</p>\n<ul>\n<li>确定哪些变量不会再被使用，然后释放他的内存</li>\n<li><strong>周期性</strong>：垃圾回收程序是每隔一段时间运行一次的</li>\n</ul>\n<p>如何标记未使用的变量主要有以下两种方式：<strong>标记清理</strong>和<strong>引用计数</strong></p>\n<h2 id=\"标记清理常用针对变量\"><a class=\"anchor\" href=\"#标记清理常用针对变量\">#</a> 标记清理（常用，针对变量）</h2>\n<p>标记清理是针对<strong>变量</strong>（变量名）的</p>\n<ol>\n<li>\n<p>当变量进入作用域时（如函数内声明一个变量），这个变量会被加上一个<strong>存在于作用域</strong>的标记。</p>\n</li>\n<li>\n<p>当变量离开作用域时（作用域内的代码执行完，离开执行栈），也会被加上一个<strong>离开作用域</strong>的标记。</p>\n</li>\n<li>\n<p>垃圾回收程序运行时，会标记（<strong>待删除</strong>）内存中存储的所有变量。然后将</p>\n<ul>\n<li>所有作用域中的变量</li>\n<li>被在作用域中的变量<strong>引用</strong>的变量</li>\n</ul>\n<p>的标记去掉，剩下的还带着（待删除）标记的变量就是待删除的了。（因为不会再被访问了）</p>\n</li>\n<li>\n<p>到了回收周期进行清理待删除标记的变量，并回收他们的内存。</p>\n</li>\n</ol>\n<h2 id=\"引用计数针对值\"><a class=\"anchor\" href=\"#引用计数针对值\">#</a> 引用计数（针对值）</h2>\n<p>引用计数是针对<strong>值</strong>（变量值）的</p>\n<ul>\n<li>\n<p>当声明一个变量并为它赋予一个<strong>引用值</strong>时，这个<strong>值</strong>的引用数为 1</p>\n<ul>\n<li>\n<p>如果这个<strong>值</strong>又被赋给了另一个变量，那么引用数 + 1</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [1, 2, 3] 的引用数为 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3] 的引用数为 2</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>如果保存该<strong>值</strong>的变量被覆盖了，则引用数 - 1</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3] 的引用数为 1</span></pre></td></tr></table></figure><ul>\n<li>或者对该值引用的每个变量离开作用域（作用域内的代码执行完，离开执行栈），都 -1</li>\n</ul>\n</li>\n<li>\n<p>当引用数为 0 时，在下次回收时被销毁</p>\n</li>\n</ul>\n<hr>\n<p>引用计数有一个<strong>严重</strong>的缺陷，就是当 a 引用 b，而 b 又引用 a 时，会造成<strong>循环引用</strong>，导致这两个值一直不被释放</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<ul>\n<li><strong>标记清理</strong>是针对<strong>变量</strong>（变量名）的</li>\n<li><strong>引用计数</strong>是针对<strong>值</strong>（变量值）的</li>\n<li><strong>标记清理</strong>比引用计数更常用，也更好</li>\n</ul>\n<h2 id=\"回收周期\"><a class=\"anchor\" href=\"#回收周期\">#</a> 回收周期</h2>\n<p>回收频率太低会导致<strong>垃圾积压</strong>，频率太高会到处<strong>小内存片泛滥</strong>。</p>\n<p>IE7 后，JavaScript 引擎的垃圾回收程序为<strong>动态</strong>改变分配变量、字面量或数组槽位等阈值。</p>\n<ul>\n<li>\n<p>设一个初始阈值。</p>\n</li>\n<li>\n<p>如果有一次回收内存不到已分配的 15%，则阈值会翻倍。</p>\n</li>\n<li>\n<p>如果有一次回收内存达到 85%，则阈值重置为默认值。</p>\n</li>\n</ul>\n<p>（有点像网络拥塞控制的慢开始和快重传）</p>\n<h1 id=\"说说你对作用域及作用域链的理解\"><a class=\"anchor\" href=\"#说说你对作用域及作用域链的理解\">#</a> 说说你对作用域及作用域链的理解</h1>\n<blockquote>\n<p>任何变量（不管包含的是原始值还是引用值）都存在于某个执行上下文中（也称作用域）。</p>\n</blockquote>\n<p>作用域决定了变量的<strong>生命周期</strong>，以及他们可以访问代码的哪些部分。</p>\n<p><code>JavaScript</code>  有 3 种作用域：</p>\n<ul>\n<li><strong>全局作用域</strong>：最外层作用域，即 <code>window</code>  对象的作用域</li>\n<li><strong>函数作用域</strong>：函数内的作用域，也是最复杂的一个作用域。\n<ul>\n<li><code>var</code>  的声明范围即为函数作用域</li>\n</ul>\n</li>\n<li><strong>块级作用域</strong>： <code>&#123;&#125;</code>  包裹的作用域，如 <code>for</code> 、 <code>while</code> 、 <code>if</code>  等块。单独的 <code>&#123;&#125;</code>  块也算\n<ul>\n<li>函数作用域也算块级作用域</li>\n<li><code>let</code>  和 <code>const</code>  的声明范围是块级作用域</li>\n</ul>\n</li>\n</ul>\n<p>每个作用域都有一个关联的<strong>变量对象</strong>，保存该作用域下<strong>定义</strong>的所有变量和函数。</p>\n<p>如果是<strong>函数作用域</strong>，其一开始就有个定义对象 <code>arguments</code>  作为<strong>变量对象</strong></p>\n<h2 id=\"函数作用域\"><a class=\"anchor\" href=\"#函数作用域\">#</a> 函数作用域</h2>\n<p>每个函数<strong>调用</strong>都有一个专属的函数作用域，其所有代码都<strong>执行完毕</strong>后会销毁。</p>\n<p>当代码执行流进入函数，函数的作用域被推到一个作用域栈（上下文栈）上（此时原本的作用域比如全局作用域就被压在了下面），执行完毕后弹出，继续执行原来的作用域的代码。</p>\n<p>如下代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">changeColor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">changeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>一开始代码执行流在全局作用域，<strong>作用域栈</strong>内只有一个全局作用域（既是堆顶，也是堆底）\n<ol>\n<li>在第 1 行创建了一个 <code>color</code>  变量并赋值 <code>blue</code></li>\n<li>在第 3 行定义了一个 <code>changeColor</code>  的 <code>Function</code>  对象</li>\n</ol>\n</li>\n<li>在第 7 行执行 <code>changeColor()</code> ，代码执行流进入<strong>函数 <code>changeColor()</code>  的作用域</strong>\n<ol>\n<li>将 ** <code>changeColor</code>  作用域 ** 压入作用域栈，成为堆顶</li>\n<li><strong>全局作用域</strong>被压在 <code>changeColor</code>  作用域下</li>\n</ol>\n</li>\n<li><code>changeColor()</code>  的代码执行完毕，弹出栈顶，所有都被销毁（如临时创建的 <code>a</code>  以及 <code>arguments</code> ）</li>\n<li>代码执行流重新进入<strong>全局作用域</strong>，继续往下执行</li>\n</ol>\n<h2 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链</h2>\n<p><strong>作用域链</strong>：说白了就是一个作用域的嵌套关系，决定了变量取值的查找顺序，类似原型链。</p>\n<blockquote>\n<p><code>JavaScript</code>  引擎在查找变量时<strong>顺着作用域链</strong>找的，先找最前端的正在执行的作用域的变量对象，没找到再一层层往下找，直到全局作用域。因此，&lt;font color=red&gt; 访问局部变量比访问全局变量要快得多。&lt;/font&gt;</p>\n</blockquote>\n<p>比如一段代码，里面有一个函数 1，函数 1 里面定义了一个函数 2。执行的时候，函数 2 里面的变量首先看一下函数 2 作用域里有没有对其赋值，没有的话看函数 1 里面有没有对这个变量赋值，再没有就看全局作用域有没有对这个变量赋值。当前作用域（函数 2）→上一层作用域（函数 1）→...→全局作用域，这就是一个作用域链，也是变量取值的一条查询链。</p>\n<p>从结构上来看，所有的作用域链组成一个类似树的结构，全局作用域为根节点，定义来全局作用域的作用域（函数域、块域）为孩子节点（同级），各自作用域内定义的新的作用域又为其孩子节点，以此类推。每个节点的变量到根节点的链路均是其作用域链。</p>\n<h1 id=\"说说对原型及原型链的理解\"><a class=\"anchor\" href=\"#说说对原型及原型链的理解\">#</a> 说说对原型及原型链的理解</h1>\n<p><strong>原型链</strong>：说白了就是<strong>继承链</strong>，其体现了一个继承关系。决定了变量取值的查找顺序，类似作用域链</p>\n<p>当要找一个对象的属性值时，</p>\n<ol>\n<li>\n<p>首先看这个<strong>对象作用域</strong>的属性值（比如构造函数内有没有对其赋值、 <code>new</code>  的时候有没有对其赋值，创建后有没有对这个属性进行赋值。这些都会影响其作用域的属性值）；</p>\n</li>\n<li>\n<p>如果没有，则去其<strong>原型对象</strong>上找，看一下原型对象上有没有默认的值（原型对象是该类所有对象共享的）。（如果有父类，原型对象一般是父类的对应属性值）；</p>\n</li>\n<li>\n<p>如果没有，再去其<strong>原型的原型对象</strong>（父类的原型对象 / 父类的父类）找；</p>\n</li>\n<li>\n<p>还是没有，依次往上找，直到 <code>Object</code></p>\n</li>\n</ol>\n<h2 id=\"原型的-2-大属性constructor-和_proto_\"><a class=\"anchor\" href=\"#原型的2大属性constructor和_proto_\">#</a> 原型的 2 大属性：constructor 和_<em>proto</em>_</h2>\n<ul>\n<li><code>prototype.constructor</code> ：隶属于 <code>prototype</code>  的属性，指向<strong>构造函数</strong>。（也可以理解为指向<strong>类</strong>）</li>\n<li><code>prototype.__proto__</code> ：隶属于 <code>prototype</code>  的属性，指向构造函数的<strong>原型对象</strong>。即<strong>对象的原型</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//prototype 是 Object 的对象实例</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// Person 是 Function 的实例</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; <code>__proto__</code> 也可以说是指向<strong>原型链中的上一级原型</strong>。因此 <code>__proto__</code> 是原型链上至关重要的属性，原型链的往上遍历就是通过 <code>__proto__</code> 实现的。&lt;/font&gt;</p>\n<p>所以<strong>顺着原型链</strong>找就是通过 <code>__proto__</code> 实现的</p>\n<h1 id=\"说一说继承吧\"><a class=\"anchor\" href=\"#说一说继承吧\">#</a> 说一说继承吧</h1>\n<ul>\n<li>原型链继承</li>\n<li>构造函数继承（借助 call）</li>\n<li>组合继承</li>\n<li>原型式继承</li>\n<li>寄生式继承</li>\n<li>寄生组合式继承</li>\n</ul>\n<h2 id=\"原型链继承\"><a class=\"anchor\" href=\"#原型链继承\">#</a> 原型链继承</h2>\n<blockquote>\n<p>原型继承父类实例（构造函数）。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'parent1'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'child2'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Child1</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>存在问题：</p>\n<p>原型不应当为构造函数，因为构造函数一般写实例特有的参数，而原型一般写类共有的函数，这样子继承会使得子类的属性共享。</p>\n<p>&lt;font color=red&gt; 这种方法可以继承父类方法，因为父类实例可以调用父类方法 &lt;/font&gt;</p>\n<h2 id=\"盗用构造函数继承\"><a class=\"anchor\" href=\"#盗用构造函数继承\">#</a> 盗用构造函数继承</h2>\n<blockquote>\n<p>子类构造函数中调用父类构造函数（类似 Python 的 super）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 继承 Father</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Father</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> c1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> c2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>c1<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2]</span></pre></td></tr></table></figure><p>缺点：</p>\n<p>只继承了参数，没继承方法</p>\n<h2 id=\"组合式继承\"><a class=\"anchor\" href=\"#组合式继承\">#</a> 组合式继承</h2>\n<blockquote>\n<p>上述两种组合。原型继承父类实例，构造函数继承构造函数</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Parent3</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'parent3'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token class-name\">Parent3</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 第二次调用 Parent3 ()</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">Parent3</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'child3'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">// 第一次调用 Parent3 ()</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token class-name\">Child3</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Parent3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token comment\">// 手动挂上构造器，指向自己的构造函数</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token class-name\">Child3</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> Child3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">var</span> s3 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token keyword\">var</span> s4 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>s3<span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">,</span> s4<span class=\"token punctuation\">.</span>play<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 不互相影响</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常输出 'parent3'</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s4<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 正常输出 'parent3'</span></pre></td></tr></table></figure><p>缺点：要 <code>new</code> 2 次父类实例</p>\n<h2 id=\"原型式继承\"><a class=\"anchor\" href=\"#原型式继承\">#</a> 原型式继承</h2>\n<blockquote>\n<p>对传入对象进行拷贝（一般通过 <code>Object.create()</code> ）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> parent4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"parent4\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"p1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> person4 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>person4<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>person4<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jerry\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> person5 <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>person5<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"lucy\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person4<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tom</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person4<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> person4<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person5<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// parent4</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person4<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person5<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"p1\", \"p2\", \"p3\",\"jerry\",\"lucy\"]</span></pre></td></tr></table></figure><p>缺点：原型是对传入对象的<strong>浅拷贝</strong>，多个实例的引用类型属性指向相同的内存，存在篡改的可能</p>\n<h2 id=\"寄生式继承\"><a class=\"anchor\" href=\"#寄生式继承\">#</a> 寄生式继承</h2>\n<blockquote>\n<p>对原型式继承的增强（感觉好像就是多加了个 <code>get</code>  函数啊）</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> parent5 <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">\"parent5\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"p1\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p2\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"p3\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">getName</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">original</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> clone <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>original<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFriends</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> clone<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> person5 <span class=\"token operator\">=</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>parent5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person5<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// parent5</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person5<span class=\"token punctuation\">.</span><span class=\"token function\">getFriends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [\"p1\", \"p2\", \"p3\"]</span></pre></td></tr></table></figure><p>缺点：和原型式继承一样，浅拷贝属性会串</p>\n<h2 id=\"寄生式组合继承\"><a class=\"anchor\" href=\"#寄生式组合继承\">#</a> 寄生式组合继承</h2>\n<blockquote>\n<ul>\n<li>寄生式继承：子类原型继承父类原型</li>\n<li>构造函数继承：子类构造函数继承父类构造函数</li>\n</ul>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">clone</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> child</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 拷贝一下原型，不能直接 Child.prototype=Father.prototype, 因为 prototype 是对象，是引用值，如果子类重写方法，那么父类的方法也会变化。所以方法不能重写.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 但浅拷贝一下足够，因为方法可以共用，重写方法的时候会新建堆内存，地址不和父类的一样就行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    child<span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>parent<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    child<span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 定义父类</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Parent6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'parent6'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>play <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token class-name\">Parent6</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 子类构造式继承，继承参数</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token function\">Parent6</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friends <span class=\"token operator\">=</span> <span class=\"token string\">'child5'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre><span class=\"token comment\">// 子类原型式继承，继承原型</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span>Parent6<span class=\"token punctuation\">,</span> Child6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token comment\">// 增强原型式（寄生式继承）</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre><span class=\"token class-name\">Child6</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getFriends</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token keyword\">let</span> person6 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Child6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person6<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123;friends:\"child5\",name:\"child5\",play:[1,2,3],__proto__:Parent6&#125;</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person6<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// parent6</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person6<span class=\"token punctuation\">.</span><span class=\"token function\">getFriends</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// child5</span></pre></td></tr></table></figure><p><strong>拷贝一下原型，不能直接 Child.prototype=Father.prototype, 因为 prototype 是对象，是引用值，如果子类重写方法，那么父类的方法也会变化。所以方法不能重写.<br>\n 但浅拷贝一下足够，因为方法可以共用，重写方法的时候会新建堆内存，地址不和父类的一样就行</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/18/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1/",
            "url": "https://nitgod1996.com/2022/08/18/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%85%AB%E8%82%A1/",
            "title": "操作系统八股",
            "date_published": "2022-08-18T03:09:36.000Z",
            "content_html": "<h1 id=\"线程和进程的区别\"><a class=\"anchor\" href=\"#线程和进程的区别\">#</a> 线程和进程的区别</h1>\n<h2 id=\"什么是进程\"><a class=\"anchor\" href=\"#什么是进程\">#</a> 什么是进程？</h2>\n<p>操作系统中最核心的概念就是进程，进程是对<strong>正在运行中的程序</strong>的一个抽象，是系统进行<strong>资源分配和调度</strong>的基本单位</p>\n<p>操作系统的其他所有内容都是围绕着进程展开的，负责执行这些任务的是 <code>CPU</code></p>\n<p>进程是一种抽象的概念，从来没有统一的标准定义看，一般由<strong>程序</strong>、<strong>数据集合</strong>和<strong>进程控制块</strong>三部分组成：</p>\n<ul>\n<li><strong>程序</strong>：用于描述进程要完成的功能，是控制进程执行的指令集</li>\n<li><strong>数据集合</strong>：程序在执行时所需要的数据和工作区</li>\n<li><strong>程序控制块</strong>：包含进程的描述信息和控制信息，是进程存在的唯一标志</li>\n</ul>\n<h2 id=\"什么是线程\"><a class=\"anchor\" href=\"#什么是线程\">#</a> 什么是线程？</h2>\n<p><strong>线程</strong>（thread）是操作系统能够进行<strong>运算调度</strong>的最小单位，其是进程中的一个<strong>执行任务（控制单元）</strong>，负责当前进程中程序的执行</p>\n<p>一个进程至少有一个线程，一个进程可以运行多个线程，这些线程<strong>共享同一块内存</strong>，线程之间可以<strong>共享对象、资源</strong>，如果有冲突或需要协同，还可以随时沟通以解决冲突或保持同步</p>\n<p>多线程在宏观上是并行的，在微观上则是分时切换串行（每个线程运行一个时间片）的，多线程编程无法充分发挥多核计算资源的优势</p>\n<h2 id=\"区别\"><a class=\"anchor\" href=\"#区别\">#</a> 区别</h2>\n<ul>\n<li><strong>本质区别</strong>：进程是操作系统<strong>资源分配</strong>的基本单位，而线程是<strong>任务调度</strong>和执行的基本单位</li>\n<li><strong>在开销方面</strong>：\n<ul>\n<li>每个进程都有独立的代码和数据空间（程序上下文），程序之间的切换会有较大的开销；</li>\n<li>线程可以看做轻量级的进程，同一类线程共享代码和数据空间，每个线程都有自己独立的运行栈和程序计数器（PC），线程之间切换的开销小</li>\n</ul>\n</li>\n<li><strong>所处环境</strong>：\n<ul>\n<li>在操作系统中能同时运行多个进程（程序）；</li>\n<li>而在同一个进程（程序）中有多个线程同时执行（通过 CPU 调度，在每个时间片中只有一个线程执行）</li>\n</ul>\n</li>\n<li><strong>内存分配方面</strong>：\n<ul>\n<li>系统在运行的时候会为每个进程分配不同的内存空间；</li>\n<li>而对线程而言，除了 CPU 外，系统不会为线程分配内存（线程所使用的资源<strong>来自其所属进程</strong>的资源），线程组之间只能共享资源</li>\n</ul>\n</li>\n<li><strong>包含关系</strong>：\n<ul>\n<li>没有线程的进程可以看做是单线程的，如果一个进程内有多个线程，则执行过程不是一条线的，而是多条线（线程）共同完成的；</li>\n<li>线程是进程的一部分，所以线程也被称为轻权进程或者轻量级进程</li>\n</ul>\n</li>\n</ul>\n<p>举个例子：进程 = 火车，线程 = 车厢</p>\n<h1 id=\"什么是死锁\"><a class=\"anchor\" href=\"#什么是死锁\">#</a> 什么是死锁</h1>\n<blockquote>\n<p>死锁本质上是多个线程<strong>争夺资源</strong>而互相等待造成的</p>\n</blockquote>\n<p>当一个线程在执行任务的时候会对所占用的资源 “上锁”，以免资源被别的线程调度而产生干扰。当资源 1 被线程 1 所占用了，资源 2 被线程 2 占用，这时候线程 1 要用到资源 2，线程 2 要用到资源 1，然后 2 个线程都在等对面释放，在没有外力的作用下，这些线程会一直相互等待，就没办法继续运行，这种情况就是发生了<strong>死锁</strong>。</p>\n<p><strong>如何避免</strong></p>\n<p>那么避免死锁问题就只需要破环其中一个条件就可以，最常见的并且可行的就是使用<strong>资源有序分配</strong>法，来破环环路等待条件。</p>\n<p><strong>资源有序分配</strong>：</p>\n<p>线程 A 和 线程 B 获取资源的顺序要一样，当线程 A 是先尝试获取资源 A，然后尝试获取资源 B 的时候，线程 B 同样也是先尝试获取资源 A，然后尝试获取资源 B。</p>\n<p>比如说：线程 A 和线程 B 都需要用到资源 A 和资源 B。线程 A 先获取了资源 A，然后线程 B 这时候要执行，也要先获取资源 A，那么他就先等线程 A 释放了资源 A（线程 A 用完 A 和 B 就会释放），再进行获取。</p>\n<h1 id=\"什么是中断\"><a class=\"anchor\" href=\"#什么是中断\">#</a> 什么是中断？</h1>\n<p>中断分成<strong>硬中断</strong>和<strong>软中断</strong></p>\n<p><strong>硬中断</strong>：（一般执行时间都很短）</p>\n<ul>\n<li><strong>内部中断</strong>：指因硬件出错（如突然掉电、奇偶校验错等）、运算出错（除数为零、运算溢出、单步中断等）所引起的中断。</li>\n<li><strong>外部中断</strong>：一般是指由计算机外设发出的中断请求，如：键盘中断、打印机中断、定时器中断等。&lt;font color=red&gt; 如果硬件需要 CPU 去做一些事情，那么这个硬件会使 CPU 中断当前正在运行的代码。而后 CPU 会将当前正在运行进程的<strong>当前状态放到堆栈（stack）中</strong>，以至于之后可以返回继续运行。&lt;/font&gt;</li>\n</ul>\n<p><strong>软中断</strong>：为了解决中断处理程序执行过长和中断丢失的问题，将中断过程分成了两个阶段，分别是「上半部和下半部分」。</p>\n<ul>\n<li><strong>上半部用来快速处理中断</strong>（硬中断），一般会暂时关闭中断请求，主要负责处理跟硬件紧密相关或者时间敏感的事情。</li>\n<li><strong>下半部用来延迟处理上半部未完成的工作</strong>（软中断），一般以「内核线程」的方式运行。</li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/",
            "url": "https://nitgod1996.com/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/",
            "title": "计算机网络八股文",
            "date_published": "2022-08-15T13:28:35.000Z",
            "content_html": "<h1 id=\"http\"><a class=\"anchor\" href=\"#http\">#</a> HTTP</h1>\n<h2 id=\"http-状态码\"><a class=\"anchor\" href=\"#http状态码\">#</a> HTTP 状态码</h2>\n<ul>\n<li><strong>1XX（临时响应）</strong>：协议处于<strong>中间状态</strong>，还需要后序操作\n<ul>\n<li>100（继续）：请求者应该继续提出请求（表示服务器已经收到请求的一部分，正在等待其余部分）（如 post，先传 header，服务器响应 100，再发 body，响应 200）</li>\n<li>101（切换协议）：客户端请求服务器切换协议，服务器已确认并准备切换协议（如 http 升级 ws）</li>\n</ul>\n</li>\n<li><strong>2XX（成功）</strong>：成功处理了请求\n<ul>\n<li><strong>200（成功）</strong>：就是成功</li>\n<li>201（已创建）：请求成功并创建了新的资源</li>\n<li>202（已接受）：服务器已接受请求，但尚未处理</li>\n<li>203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自<strong>另一来源</strong></li>\n<li><strong>204（无内容）</strong>：服务器成功处理请求，但<strong>没有返回任何内容</strong></li>\n<li>205（重置内容）：...，但没有返回任何内容。并要求请求者重置文档视图（如清楚表单内容）</li>\n<li><strong>206（部分内容）</strong>：服务器成功处理部分请求</li>\n</ul>\n</li>\n<li><strong>3XX（重定向）</strong>\n<ul>\n<li><strong>301（永久移动）</strong>：请求的网页已经移到新的位置，服务器返回响应时，会自动将请求移动到新的位置</li>\n<li><strong>302（临时移动）</strong>：服务器目前从不同位置的网页响应请求，但请求者继续使用原有位置</li>\n<li>303（查看其他位置）：表示由于请求对应的资源存在另一个 <code>URI</code> ，应定向使用<strong> get 方法</strong>获取请求（302 没这个 get 限制）</li>\n<li><strong>304（未修改）</strong>：自上次请求后，请求的网页未修改过，服务器返回这个响应不会重复返回网页内容（重定向缓存文件）</li>\n<li>305（使用代理）：请求者只能使用代理访问请求的网页。（提示请求者使用代理）</li>\n<li>307（临时重定向）</li>\n</ul>\n</li>\n<li><strong>4XX（请求错误）</strong>\n<ul>\n<li><strong>400（错误请求）</strong>：请求的报文中存在<strong>语法错误</strong></li>\n<li>401（未授权）：需要<strong>身份验证</strong></li>\n<li><strong>403（禁止）</strong>：服务器<strong>拒绝请求</strong></li>\n<li><strong>404（未找到）</strong>：服务器找不到请求的网页。一般是 url 错了或者已经取消了这个地址的网页</li>\n<li>405（方法禁用）：禁用请求中指定的方法（如限制 post，但却用了 get）</li>\n<li>406（不接受）：</li>\n<li>407（需要代理授权）</li>\n<li>408（请求超时）：服务器等候请求时发生超时</li>\n</ul>\n</li>\n<li><strong>5XX（服务器错误）</strong>：一般是后台出异常之类\n<ul>\n<li><strong>500（服务器内部错误）</strong></li>\n<li><strong>501（尚未实施）</strong>：服务器不具备完成请求的功能，如服务器无法识别请求方法</li>\n<li><strong>502（网关错误）</strong>：服务器作为网关或代理，从上游服务器收到无效响应</li>\n<li><strong>503（服务不可用）</strong>：服务器目前无法使用（超载或停机）</li>\n<li>504（网关超时）：服务器作为网关或代理，没有及时从上游服务器收到请求</li>\n<li>505（HTTP 版本不受支持）：服务器不支持请求中的 HTTP 协议版本</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"get-和-post-有哪些区别\"><a class=\"anchor\" href=\"#get和post有哪些区别\">#</a> get 和 post 有哪些区别</h2>\n<ol>\n<li>\n<p><strong>写参数的位置</strong></p>\n<ul>\n<li><code>get</code>  的参数写在 <code>url</code>  中，以 <code>?</code>  拼接，以 <code>&amp;</code>  分隔</li>\n<li><code>post</code>  的参数写在请求体中</li>\n</ul>\n</li>\n<li>\n<p><strong>参数长度</strong></p>\n<ul>\n<li><code>get</code>  在 <code>url</code>  传送的参数长度有限制；</li>\n<li><code>post</code>  的参数长度无限制</li>\n</ul>\n</li>\n<li>\n<p><strong>回退再请求</strong></p>\n<ul>\n<li><code>get</code>  在浏览器回退时是无害的；</li>\n<li><code>post</code>  会再次提交请求</li>\n</ul>\n</li>\n<li>\n<p><strong>缓存</strong></p>\n<ul>\n<li><code>get</code>  会被浏览器主动 <code>cache</code> ；</li>\n<li>而 <code>post</code>  不会，除非手动设置</li>\n</ul>\n</li>\n<li>\n<p><strong>历史记录</strong></p>\n<ul>\n<li><code>get</code>  的请求<strong>参数</strong>会被完整保存在浏览器<strong>历史记录</strong>中；</li>\n<li><code>post</code>  的参数不会</li>\n</ul>\n</li>\n<li>\n<p><strong>编码方式</strong></p>\n<ul>\n<li><code>get</code>  只能进行 <code>url</code>  编码；</li>\n<li><code>post</code>  有多种编码方式</li>\n</ul>\n</li>\n<li>\n<p><strong>字符限制</strong></p>\n<ul>\n<li><code>get</code>  只接受 <code>ASCII</code>  字符；</li>\n<li><code>post</code>  没有限制</li>\n</ul>\n</li>\n<li>\n<p><strong>安全性</strong></p>\n<ul>\n<li><code>get</code>  因为参数暴露在 <code>url</code>  中，不能传递敏感信息；</li>\n<li>所以 <code>post</code>  比 <code>get</code>  安全</li>\n</ul>\n</li>\n<li>\n<p><strong>数据包</strong></p>\n<ul>\n<li><code>get</code> ：浏览器把 <code>header</code>  和 <code>data</code>  一并发送出去，服务器直接响应 200</li>\n<li><code>post</code> ：浏览器先发送 <code>header</code> ，服务器响应 100 <code>continue</code> ，浏览器再发送 <code>data</code> ，服务器响应 200</li>\n</ul>\n<p>不过 <code>Firefox</code>  中 <code>post</code>  只发一次包</p>\n</li>\n</ol>\n<h2 id=\"什么时候发送-option-请求\"><a class=\"anchor\" href=\"#什么时候发送option请求\">#</a> 什么时候发送 option 请求</h2>\n<p><code>OPTIONS</code>  请求即<strong>预检请求</strong>，可用于检测服务器允许的 <code>http</code>  方法。当发起<strong>跨域</strong>请求时，由于安全原因，浏览器会在正式请求之前自动先发起 <code>OPTIONS</code>  请求，即 <code>CORS</code>  预检请求，服务器若接受该跨域请求，浏览器才继续发起正式请求。</p>\n<p>预检请求报文中有两个需要关注的首部字段：</p>\n<p>（1）Access-Control-Request-Method：告知服务器实际请求所使用的 HTTP 方法；</p>\n<p>（2）Access-Control-Request-Headers：告知服务器实际请求所携带的自定义首部字段。</p>\n<h2 id=\"http10http11http20-的区别\"><a class=\"anchor\" href=\"#http10http11http20的区别\">#</a> HTTP1.0/HTTP1.1/HTTP2.0 的区别</h2>\n<h3 id=\"http10\"><a class=\"anchor\" href=\"#http10\">#</a> HTTP1.0</h3>\n<p>http1.0 存在的时间很短，出现不久就被 http1.1 代替了</p>\n<ul>\n<li><strong>短连接</strong>：浏览器与服务器建立连接后只能进行一次请求</li>\n<li><strong>缓存处理</strong>：用 <code>expires</code>  控制强缓存，用 <code>last-modified</code>  控制协商缓存</li>\n</ul>\n<h3 id=\"http11\"><a class=\"anchor\" href=\"#http11\">#</a> HTTP1.1</h3>\n<ul>\n<li><strong>长连接</strong>：浏览器与服务器建立连接后可以持续发送请求，不会立即关闭\n<ul>\n<li>但是一条连接只能处理一个请求，多个请求需要另外开辟连接。同个域名最多 6 条</li>\n<li>其实有个<strong>管道机制</strong>（但一般不开）</li>\n</ul>\n</li>\n<li><strong>缓存处理</strong>：用 <code>cache-control</code>  控制强缓存，用 <code>Etag</code>  控制协商缓存。更成熟的控制策略</li>\n</ul>\n<h3 id=\"http20\"><a class=\"anchor\" href=\"#http20\">#</a> HTTP2.0</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTk1MTA5NDA3NTQ1NjIyNTQyI2hlYWRpbmctOQ==\">https://juejin.cn/post/6995109407545622542#heading-9</span></p>\n<ul>\n<li><strong>二进制分帧</strong>：HTTP/2 将请求和响应数据分割为更小的帧，并且它们采用二进制编码。它把 TCP 协议的部分特性挪到了应用层，HTTP/2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的<strong>双向数据流</strong>。每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。<strong>多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装</strong>。</li>\n<li><strong>header 压缩</strong>：在客户端和服务器两端建立 “字典”，用索引号表示重复的字符串，还采用<strong>哈夫曼编码</strong>来压缩整数和字符串，可以达到 50%~90% 的高压缩率。\n<ul>\n<li>字典：建立 “首部表” 来跟踪和存储之前发送的键 - 值对。两个请求， 请求一发送了所有的头部字段，第二个请求则只需要发送差异数据，这样可以减少冗余数据，降低开销</li>\n<li>哈夫曼编码</li>\n</ul>\n</li>\n<li><strong>多路复用</strong>：基于二进制分帧\n<ul>\n<li>同域名下所有通信都在<strong>单个连接</strong>上完成。</li>\n<li>单个连接可以承载任意数量的<strong>双向</strong>数据流。</li>\n<li>数据流以消息的形式发送，而消息又由一个或多个帧组成，多个帧之间可以<strong>乱序发送</strong>，因为根据帧首部的流标识可以重新组装。</li>\n</ul>\n</li>\n<li><strong>服务器推送</strong>：</li>\n<li><strong>安全性</strong>：由于主流的浏览器 <code>Chrome</code> 、 <code>Firefox</code>  等都公开宣布只支持加密的 <code>HTTP/2</code> ，<strong>所以 “事实上” 的 HTTP/2 是加密的</strong></li>\n</ul>\n<h2 id=\"https\"><a class=\"anchor\" href=\"#https\">#</a> HTTPS</h2>\n<p><code>https</code>  是在 <code>http</code>  的基础上加上安全协议加密传输。主要通过<strong>数字证书</strong>、<strong>加密算法</strong>、<strong>非对称密钥</strong>等技术实现加密。s 表示的是 <code>TLS/SSL</code></p>\n<h3 id=\"和-http-的区别\"><a class=\"anchor\" href=\"#和http的区别\">#</a> <strong>和 HTTP 的区别</strong></h3>\n<ol>\n<li>\n<p>比 http 协议<strong>安全</strong>，https 是 http 套了一层具有安全性的 ssl 加密传输协议，可防止数据在传输过程中被窃取、改变，确保数据的完整性</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/8cc2f58599204ebfb1d04ac541ac47a5tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"在这里插入图片描述\"></p>\n</li>\n<li>\n<p>http 协议的<strong>默认端口</strong>为 80，https 的默认端口为 443。</p>\n</li>\n<li>\n<p>http 的<strong>连接</strong>很简单，是无状态的。https 握手阶段（TLS/SSL 握手）比较<strong>费时</strong>，会使页面加载时间延长 50%，增加 10%~20% 的耗电。</p>\n</li>\n<li>\n<p>Https 协议需要 <strong>ca 证书</strong>，费用较高，功能越强大的证书费用越高。</p>\n</li>\n<li>\n<p>SSL 证书需要绑定  <code>IP</code> ，不能再同一个 IP 上绑定多个域名，IPV4 资源支持不了这种消耗。</p>\n</li>\n</ol>\n<h3 id=\"https-加密过程tls-四次握手\"><a class=\"anchor\" href=\"#https加密过程tls四次握手\">#</a> <strong>HTTPS 加密过程</strong>：（TLS 四次握手）</h3>\n<ol>\n<li>客户端发送请求到服务端（TCP 第三次握手，TLS 第一次握手，客户端发送请求）\n<ul>\n<li><code>ClientHello</code> ：包含客户端支持的 SSL 的指定版本、加密组件（Cipher Suite）列表（所使用的加密算法及密钥长度等）。</li>\n</ul>\n</li>\n<li>服务端发送<strong>数字证书</strong>以及确认客户端的请求（TLS 第二次握手）</li>\n<li>客户端解析并利用证书机构的公钥从证书中取出服务端的<strong>公钥</strong></li>\n<li>客户端生成<strong>随机对称密钥</strong>（随机数），并利用<strong>公钥加密</strong>发送给服务端（TLS 第三次握手）</li>\n<li>服务端用（服务端的）<strong>私钥</strong>解密取出<strong>对称密钥</strong>。</li>\n<li>双方采用<strong>对称加密</strong>的方式进行加密传输的 http 数据，收到后利用<strong>对称密钥</strong>解密（TLS 第四次握手后）</li>\n</ol>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/12a89b50546346f89c52365114998151tplv-k3u1fbpfcp-zoom-in-crop-mark3024000-166063557113617.webp\" alt=\"12a89b50546346f89c52365114998151tplv-k3u1fbpfcp-zoom-in-crop-mark3024000\"></p>\n<h3 id=\"加密方法\"><a class=\"anchor\" href=\"#加密方法\">#</a> 加密方法</h3>\n<p><strong>对称加密</strong>：也叫共享秘钥加密，加密和解密同用一个密钥。服务端将秘钥发送给客户端的过程中，容易被劫持，失去安全效果。（上面最后通信就是对称加密）</p>\n<p><strong>非对称加密</strong>：也叫公开秘钥加密，非对称加密有两把秘钥，一把叫做私有密钥，另一把叫做公开密钥。（上面传送对称密钥用的就是非对称加密，一般是客户端给服务器发数据）</p>\n<p><strong>认证机构</strong>（数据签名）：客户端如何知道收到的公开密钥确实是服务端的公开秘钥，传输中没有被攻击者替换掉？这时候就需要数字证书认证机构（CA）和颁发的公开密钥证书。</p>\n<h2 id=\"http-轮询-长轮询\"><a class=\"anchor\" href=\"#http轮询-长轮询\">#</a> HTTP 轮询、长轮询</h2>\n<h3 id=\"轮询\"><a class=\"anchor\" href=\"#轮询\">#</a> 轮询</h3>\n<p>由客户端发送请求，服务器接收请求的过程，通过客户端不断请求，使得客户端能够模拟达到类似实时收到服务器的效果。客户端定时向服务器发送 Ajax 请求，服务器接到请求后马上返回响应信息，并关闭连接。</p>\n<p><strong>优点</strong>：逻辑简单，易于理解，快速开发。（直接用 <code>setInterval</code>  就可实现）</p>\n<p><strong>缺点</strong>：每次发请求需要重复建立 HTTP 连接，而且如果没更新就白发了。</p>\n<p>适用于用户量小，不太注重性能的项目。</p>\n<h3 id=\"长轮询\"><a class=\"anchor\" href=\"#长轮询\">#</a> 长轮询</h3>\n<p>长轮询是<strong>长连接</strong>的一种，当服务器收到客户端发来的请求后，服务器端不会直接进行响应，而是先将这个请求<strong>挂起</strong>，然后判断服务器端数据<strong>是否有更新</strong>。如果有更新，则进行响应，如果一直没有数据，则会 hold 住请求，直到服务端的数据发生变化，或者等待一定时间<strong>超时</strong>才会返回。</p>\n<p><strong>优点</strong>：消息即时到达，和短轮询比起来，明显减少了很多不必要的 HTTP 请求次数，在无消息的情况下不会频繁的请求，相比之下节约了资源，在无消息的情况下不会频繁的请求。</p>\n<p><strong>缺点</strong>：连接挂起会导致资源的浪费，长轮询会造出非常多的请求，不断的请求可能会造成的影响是数据顺序无法得到保证。</p>\n<h2 id=\"wireshark-抓包测试\"><a class=\"anchor\" href=\"#wireshark抓包测试\">#</a> wireshark 抓包测试</h2>\n<p>http1.1 中，谷歌浏览器对同一个 host（同一个域名，<span class=\"exturl\" data-url=\"aHR0cDovL3huLS13d3ctZW84ZXIyMmYucm9vdG9wLm9yZw==\">比如 www.rootop.org</span>）可以最多建立 6 个 tcp 连接。</p>\n<p>这 6 条 tcp 连接的端口号一样吗？</p>\n<p>答案是：<strong>源端口不一样，终端口一样（80 或 443）</strong></p>\n<p>一个 http 连接由 <code>协议+域名+端口</code> 组成，任意不同都算是不同的 http</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/20200722153224.png\" alt=\"img\"></p>\n<p>而 http2.0 则是自始至终只有一条连接</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/20200722153453.png\" alt=\"img\"></p>\n<h1 id=\"websocket\"><a class=\"anchor\" href=\"#websocket\">#</a> WebSocket</h1>\n<p><code>WebSocket</code>  是 <code>HTML5</code>  提供的一种浏览器与服务器进行<strong>全双工</strong>通讯的网络技术，属于应用层协议。它基于 <code>TCP</code>  传输协议，并复用 <code>HTTP</code>  的握手通道。 <code>WebSocket</code>  的建立依赖于 <code>HTTP</code>  协议进行一次握手，握手成功之后，数据就直接从 <code>TCP</code>  传输，与 <code>HTTP</code>  无关了。</p>\n<p><strong>特点</strong>：</p>\n<ul>\n<li>支持<strong>双向通信</strong>，<strong>实时性</strong>更强。</li>\n<li><strong>较少的控制开销</strong>。连接创建后，ws 客户端、服务端进行数据交换时，协议控制的数据包<strong>头部较小</strong>。在不包含头部的情况下，服务端到客户端的包头只有 2~10 字节（取决于数据包长度），客户端到服务端的的话，需要加上额外的 4 字节的掩码。而 HTTP 协议每次通信都需要携带完整的头部。</li>\n<li><strong>支持扩展</strong>。ws 协议定义了扩展，用户可以扩展协议，或者实现自定义的子协议。（比如支持自定义压缩算法等）</li>\n</ul>\n<p><strong>连接建立步骤</strong>：</p>\n<ol>\n<li>建立 <code>HTTP</code>  连接</li>\n<li>客户端发起<strong>协议升级</strong>请求</li>\n<li>服务端返回<strong> 101</strong> 表示响应协议升级</li>\n</ol>\n<p><strong>和 HTTP 的异同</strong></p>\n<ul>\n<li>都是应用层的协议，都是基于 <code>TCP</code>  连接</li>\n<li>建立通过 <code>HTTP</code>  升级</li>\n<li>数据格式比 <code>HTTP</code>  轻量，性能开销小，通信高效</li>\n<li>支持全双工通信，有服务器推送功能（不过 <code>HTTP2.0</code>  之后开始也有了）</li>\n<li>没有同源限制</li>\n<li>协议标识符是 <code>ws/wss</code> ， <code>http</code>  是 <code>http/https</code></li>\n</ul>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/376549b16d9944b38f4d3ea7c207e18atplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"image\"> <img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/75dc384fd007453c8408f103b807ee09tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n<h2 id=\"其他内容\"><a class=\"anchor\" href=\"#其他内容\">#</a> 其他内容</h2>\n<ol>\n<li>组件切换时，组件会销毁，但 websocket 并不会断开（除非在 beforeDestroy 中主动关闭），而在每次切换到那个组件时都会重新建立新的 websocket 连接</li>\n<li>websocket 也是通过<strong>帧</strong>来传输的（和 http2.0 一样）</li>\n</ol>\n<h1 id=\"浏览器\"><a class=\"anchor\" href=\"#浏览器\">#</a> 浏览器</h1>\n<h2 id=\"浏览器缓存\"><a class=\"anchor\" href=\"#浏览器缓存\">#</a> 浏览器缓存</h2>\n<p><strong>Web 缓存种类：</strong> 数据库缓存，CDN 缓存，代理服务器缓存，浏览器缓存。</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/70f599db34fa42068ccfa4e04748a078tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n<p><strong>浏览器缓存</strong>：本地使用的计算机中开辟一个<strong>内存区</strong>，同时也开辟一个<strong>硬盘区</strong>作为数据传输的缓冲区，然后用这个缓冲区来暂时保存用户以前访问过的信息。</p>\n<h3 id=\"强缓存\"><a class=\"anchor\" href=\"#强缓存\">#</a> 强缓存</h3>\n<p>强缓存是当我们访问 URL 的时候，不会向服务器发送请求，直接从缓存中读取资源，但是会返回 200 的状态码。即<strong>只与服务器通信一次</strong></p>\n<p><strong>缓存方法</strong>：</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/ca00bff3081e4cfd993a8f252f4fa23atplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n<ol>\n<li>\n<p>我们第一次进入页面，请求服务器，然后服务器进行应答，浏览器会根据 <code>response Header</code>  来判断是否对资源进行缓存。如果响应头中有</p>\n<ul>\n<li><code>expires</code></li>\n<li><code>cache-control</code></li>\n</ul>\n<p>这几个字段，代表这是强缓存，浏览器就会把资源缓存在 <code>memory cache</code>  或  <code>disk cache</code>  中。</p>\n</li>\n<li>\n<p>第二次请求时，浏览器判断请求参数，</p>\n<ul>\n<li>\n<p>如果符合强缓存条件就直接返回 200，从本地缓存拿数据</p>\n</li>\n<li>\n<p>否则，把响应参数存在 <code>请求头</code> 中，看是否符合协商缓存，</p>\n<ul>\n<li>符合则返回状态码 304</li>\n<li>不符合则服务器会返回全新资源。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ol>\n<h3 id=\"expires-cache-control\"><a class=\"anchor\" href=\"#expires-cache-control\">#</a> expires、Cache-Control</h3>\n<ul>\n<li>\n<p><strong>expires</strong>： <code>HTTP1.0</code>  控制网页缓存的字段，服务器返回该请求结果缓存的<strong>到期时间</strong>。意思是，再次发送请求时，如果未超过过期时间，直接使用该缓存，如果过期了则重新请求。</p>\n<ul>\n<li><strong>缺点</strong>：它判断是否过期是用本地时间来判断的，本地时间是可以自己修改的。</li>\n</ul>\n</li>\n<li>\n<p><strong>Cache-Control</strong>： <code>HTTP1.1</code>  中控制网页缓存的字段，当 Cache-Control 都存在时，Cache-Control 优先级更高，主要取值为：</p>\n<ul>\n<li>\n<p><code>privite</code> ：只有客户端可以缓存。</p>\n</li>\n<li>\n<p><code>public</code> ：客户端和服务器都可以缓存。</p>\n</li>\n<li>\n<p><code>no-cache</code> ：客户端缓存资源，但是是否缓存需要经过<strong>协商缓存</strong>来验证。</p>\n</li>\n<li>\n<p><code>no-store</code> ：不可缓存。</p>\n</li>\n<li>\n<p><code>max-age</code> ：缓存保质期。</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"协商缓存\"><a class=\"anchor\" href=\"#协商缓存\">#</a> 协商缓存</h3>\n<p>协商缓存：强缓存失效（超出缓存期限或 <code>no-cache</code> ）后，浏览器携带<strong>缓存标识</strong>向服务器发送请求，由服务器根据缓存标识来决定是否使用缓存的过程。</p>\n<ul>\n<li>\n<p>协商缓存成功（页面没变或没过期限），返回 304</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/9f26ab979fcd4df6906a2e9d5e28f56atplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n</li>\n<li>\n<p>协商缓存失败（页面变了），返回 200 和请求结果，更新缓存区</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/449a56554c1e4f0c949e139081a9db4ctplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n</li>\n</ul>\n<h3 id=\"last-modified-etag\"><a class=\"anchor\" href=\"#last-modified-etag\">#</a> Last-Modified、Etag</h3>\n<p>Etag 是 HTTP1.1 的缓存规则，Last-Modified 是 HTTP1.0 的，Etag 优先级更高</p>\n<ul>\n<li>\n<p><strong>Last-Modified</strong>：在 <code>http1.0</code>  中，通过 <code>Last-Modified</code>  和 <code>If-Modified-Since</code>  判断页面是否修改。</p>\n<ol>\n<li>\n<p><code>Last-Modified</code>  是该资源在服务器最后被修改的时间。服务器把它放在<strong>响应头</strong>中发给浏览器</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/c6c3aabbfd9a43ab81c97dd519da3b9ftplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n</li>\n<li>\n<p>浏览器把该值（最后被修改的时间）作为 <code>If-Modified-Since</code>  的值放在<strong>请求头</strong>中发送给服务器</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/fa2eae3bc57d48e39a871c8e659bf97dtplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n</li>\n<li>\n<p>服务器通过判断 <code>If-Modified-Since</code>  的值是否小于该资源<strong>新的</strong>最后被修改时间</p>\n<ul>\n<li>是：说明页面变化了，返回 200 和响应结果</li>\n<li>否：说明页面没变，返回 304</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>\n<p><strong>Etag</strong>： <code>HTTP1.1</code>  中的协商缓存字段。</p>\n<ol>\n<li>\n<p><code>Etag</code>  是服务器返回的当前资源<strong>唯一标识</strong>（资源每次修改标识都会变）</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/0da637ef7fa64aef8b1f932c3dd0297btplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n</li>\n<li>\n<p>浏览器把该值作为 <code>If-None-Match</code>  的值发给服务器</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/2e9d32690cdf45b498e5dcabd4c12f71tplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n</li>\n<li>\n<p>服务器对比 <code>If-None-Match</code>  的值和当前资源最新的标识</p>\n<ul>\n<li>相同：说明没变，返回 304</li>\n<li>不同：说明变了，返回 200 和响应结果</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"缓存方案\"><a class=\"anchor\" href=\"#缓存方案\">#</a> 缓存方案</h3>\n<p>目前的项目大多使用这种缓存方案的：</p>\n<ul>\n<li>HTML: 协商缓存；</li>\n<li>css、js、图片：强缓存，文件名带上 hash。</li>\n</ul>\n<h3 id=\"刷新对于强缓存和协商缓存的影响\"><a class=\"anchor\" href=\"#刷新对于强缓存和协商缓存的影响\">#</a> 刷新对于强缓存和协商缓存的影响</h3>\n<p>\\1. 当 ctrl+f5 强制刷新网页时，直接从服务器加载，跳过强缓存和协商缓存。</p>\n<p>\\2. 当 f5 刷新网页时，跳过强缓存，但是会检查协商缓存。</p>\n<p>\\3. 浏览器地址栏中写入 URL，回车 浏览器发现缓存中有这个文件了，不用继续请求了，直接去缓存拿。（最快）</p>\n<h2 id=\"cookie-session-token-jwt\"><a class=\"anchor\" href=\"#cookie-session-token-jwt\">#</a> cookie、session、Token、JWT</h2>\n<h3 id=\"cookie-和-session\"><a class=\"anchor\" href=\"#cookie和session\">#</a> cookie 和 session</h3>\n<p><strong>什么是 cookie？</strong></p>\n<p>cookie 是服务器发送到用户浏览器并保存在本地的<strong>一小块数据</strong>，在下次向同一服务器发送请求时会被携带并发送过去。他用来告知服务端 2 个请求是否来自同一浏览器。</p>\n<p>cookie 主要保存以下信息：</p>\n<ul>\n<li>（用户的登录状态、购物车、游戏分数）</li>\n<li>个性化设置（自定义设置、主题等）</li>\n</ul>\n<p><strong>什么是 session？</strong></p>\n<p>session 是存储在服务器中，用于记录和某个浏览器会话状态的一段数据。session 存储特定用户会话所需的属性及配置信息。</p>\n<p><strong>cookie 和 session 有什么区别？</strong></p>\n<ul>\n<li>存储位置不同\n<ul>\n<li><code>cookie</code>  存储在客户端</li>\n<li><code>session</code>  存储在服务端</li>\n</ul>\n</li>\n<li>字符类型不同\n<ul>\n<li><code>Cookie</code>  只能保存 ASCII</li>\n<li><code>Session</code>  可以存任意数据类型</li>\n</ul>\n</li>\n<li>存活时间不同\n<ul>\n<li><code>Cookie</code>  可设置为长时间保持，比如我们经常使用的默认登录功能</li>\n<li><code>Session </code> 一般失效时间较短，客户端关闭或者 Session 超时都会失效。</li>\n</ul>\n</li>\n<li>安全性\n<ul>\n<li><code>cookie</code>  存放在客户端，容易被 <code>XSS</code>  攻击劫持</li>\n<li><code>session</code>  在服务端安全性相对较好</li>\n</ul>\n</li>\n<li>存储大小不同\n<ul>\n<li><code>cookie</code>  不能超过 4K</li>\n<li><code>session</code>  可存储数据远高于 <code>cookie</code></li>\n</ul>\n</li>\n</ul>\n<p><strong>cookie 和 session 有什么关联？</strong></p>\n<p>看这张图</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/16aafb5d90f398e2tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n<ol>\n<li>浏览器在第一次向服务器发起请求时，服务器会创建一个 <code>sesson</code>  来标记该浏览器（和别的浏览器区分）。然后把 <code>session</code>  的唯一标识 <code>sessionID</code>  发送给浏览器</li>\n<li>浏览器收到 <code>sessionID</code>  后，将其存入 <code>cookie</code> ，同时  <code>Cookie</code>  记录此  <code>SessionID</code>  属于哪个域名</li>\n<li>当用户第二次访问服务器时，请求会自动判断该域下是否存在对应的 <code>cookie</code>  信息（通过 <code>sessionID</code> ），如果存在则把 <code>cookie</code>  一起发送过去。</li>\n<li>服务端会从 <code>cookie</code>  中获取 <code>sessionID</code> ，再根据 <code>sessionID</code>  找到对应的 <code>session</code>  信息。如果没找到说明用户登录失效，会让用户重新登录。如果找到就说明已登录，可以执行后续操作</li>\n</ol>\n<p>&lt;font color=red&gt;SessionID 是连接 Cookie 和 Session 的一道桥梁 &lt;/font&gt;</p>\n<p><strong>如果浏览器禁用 cookie 怎么办</strong></p>\n<blockquote>\n<p>苹果公司前不久对  <code>Safari</code>  浏览器进行一次重大更新，这次更新完全禁用了第三方   <code>Cookie</code> ，这意味着，默认情况下，各大广告商或网站将无法对你的个人隐私进行追踪。而微软和  <code>Mozilla</code>  等也纷纷采取了措施禁用第三方  <code>Cookie</code></p>\n<p>从  <code>2017</code>  年截至  <code>2019</code>  年底，  <code>Google</code>  面临的罚款总额已经超过 93 亿欧元，其中一大原因便是侵犯用户数据隐私。迫于巨大压力， <code>Google Chrome</code>  官方团队前不久也宣布，为了提升用户隐私和安全，未来两年将完全禁用第三方  <code>Cookie</code> 。</p>\n</blockquote>\n<ol>\n<li>每次请求都携带一个 <code>sessionID</code></li>\n<li>使用 <code>Token</code>  令牌</li>\n</ol>\n<p><strong>如何考虑分布式 session？</strong>（算了，这个先暂时不记吧）</p>\n<p>在互联网公司为了可以支撑更大的流量，后端往往需要多台服务器共同来支撑前端用户请求，那如果用户在 A 服务器登录了，第二次请求跑到服务 B 就会出现登录失效问题。</p>\n<p>分布式 Session 一般会有以下几种解决方案：</p>\n<ul>\n<li>Nginx ip_hash 策略，服务端使用 Nginx 代理，每个请求按访问 IP 的 hash 分配，这样来自同一 IP 固定访问一个后台服务器，避免了在服务器 A 创建 Session，第二次分发到服务器 B 的现象。</li>\n<li>Session 复制，任何一个服务器上的 Session 发生改变（增删改），该节点会把这个 Session 的所有内容序列化，然后<strong>广播</strong>给所有其它节点。</li>\n<li>共享 Session，服务端无状态话，将用户的 Session 等信息使用<strong>缓存中间件</strong>来统一管理，保障分发到每一个服务器的响应结果都一致。</li>\n</ul>\n<p>建议采用第三种方案。</p>\n<p><strong>跨域如何携带 cookie？</strong></p>\n<p>Vue 的话可以在 <code>vue.config.js</code>  中配置代理。</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3N1bW1lcjczMTA=,size_16,color_FFFFFF,t_70.png\" alt=\"在这里插入图片描述\"></p>\n<p>或者：</p>\n<ol>\n<li>\n<p>前端请求时在 <code>request</code>  对象中配置 <code>&quot;withCredentials&quot;: true</code> ；（redentials，即用户凭证）</p>\n</li>\n<li>\n<p>服务端在 <code>response</code>  的 <code>header</code>  中配置 <code>&quot;Access-Control-Allow-Origin&quot;, &quot;http://xxx:$&#123;port&#125;&quot;</code> ;</p>\n</li>\n<li>\n<p>服务端在 <code>response</code>  的 <code>header</code>  中配置 <code>&quot;Access-Control-Allow-Credentials&quot;, &quot;true&quot;</code></p>\n</li>\n</ol>\n<h3 id=\"token暂缓\"><a class=\"anchor\" href=\"#token暂缓\">#</a> Token（暂缓）</h3>\n<h2 id=\"点击-url-到浏览器页面渲染的全过程\"><a class=\"anchor\" href=\"#点击url到浏览器页面渲染的全过程\">#</a> 点击 url 到浏览器页面渲染的全过程</h2>\n<ol>\n<li>\n<p>域名解析；（根据域名找到对应的 <code>IP</code>  地址）</p>\n</li>\n<li>\n<p>浏览器搜索自己的 <code>DNS</code>  缓存，</p>\n</li>\n<li>\n<p>若没有，则搜索操作系统的 <code>DNS</code>  缓存；</p>\n</li>\n<li>\n<p>若没有，则操作系统通过 <code>DNS</code>  协议查找域名对应 <code>IP</code> 。</p>\n</li>\n<li>\n<p>建立 <code>TCP</code>  连接 (三次握手)；</p>\n</li>\n<li>\n<p>浏览器发送 <code>HTTP</code>  请求；</p>\n</li>\n<li>\n<p>服务器处理 <code>http</code>  请求，并返回请求的资源 <code>(html, js, css)</code></p>\n</li>\n<li>\n<p>浏览器解析并渲染页面</p>\n<ol>\n<li>\n<p>解析 <code>html</code> 、构建 <code>DOM</code>  树；</p>\n</li>\n<li>\n<p>解析 <code>CSS</code> ，生成 <code>CSS</code>  规则树；</p>\n</li>\n<li>\n<p>合并 <code>DOM</code>  树和 <code>CSS</code>  规则，生成 <code>render</code>  树；</p>\n</li>\n<li>\n<p>布局 <code>render</code>  树，计算各元素尺寸和位置，进行<strong>回流 (重排)<strong> 和</strong>重绘</strong>；</p>\n</li>\n<li>\n<p>绘制 <code>render</code>  树 (paint)，绘制页面像素信息</p>\n</li>\n</ol>\n</li>\n<li>\n<p>断开 TCP 连接 (4 次挥手)。</p>\n</li>\n</ol>\n<h1 id=\"xss-攻击和-csrf-攻击\"><a class=\"anchor\" href=\"#xss攻击和csrf攻击\">#</a> XSS 攻击和 CSRF 攻击</h1>\n<h2 id=\"xss\"><a class=\"anchor\" href=\"#xss\">#</a> XSS</h2>\n<p><strong>XSS（Cross-site scripting）</strong>：指的是跨站脚本攻击，攻击者通过向页面 A 注入代码，达到窃取信息等目的，本质是<strong>数据被当作程序执行</strong>。</p>\n<p><strong>XSS 能做的事</strong>：</p>\n<ol>\n<li>\n<p>窃取网页浏览中的 cookie 值</p>\n</li>\n<li>\n<p>劫持流量实现恶意跳转</p>\n</li>\n<li>\n<p>配合 csrf 攻击完成恶意请求</p>\n</li>\n</ol>\n<p><strong>XSS 类型</strong>：</p>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82ODQ0OTAzNjM4NTMyMzU4MTUx\">https://juejin.cn/post/6844903638532358151</span></p>\n<ul>\n<li>\n<p><strong>反射型（非持久）</strong>：通过 URL 参数直接注入。</p>\n<p>如攻击者伪造一个恶意链接，链接的 url 中有恶意代码如 <code>?input=&lt;script&gt;alert('XSS攻击')&lt;/script&gt; </code> ，网站将页面（页面里面可能会有写入的恶意代码）返回给浏览器，然后用户浏览器就会解析恶意代码并执行。</p>\n<p>攻击者就可以获取用户通过请求发送的隐私信息如 cookie 等（如恶意代码写上 <code>document.cookie</code> ）</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3FxXzM2MTE5MTky,size_16,color_FFFFFF,t_70.png\" alt=\"img\"></p>\n</li>\n<li>\n<p><strong>存储型（持久）</strong>：存储到数据库后读取时注入</p>\n<p>如攻击者在社区或论坛上写下一篇包含恶意 JavaScript 代码的文章或评论，文章或评论发表后，所有访问该文章或评论的用户，都会在他们的浏览器中执行这段恶意的 JavaScript 代码。</p>\n<p>比如输入了 <code>&lt;script&gt;alert(&quot;攻击&quot;)&lt;/script&gt;</code> ，保存到服务器。然后服务器会将这段字符串添加到页面，但由于 <code>&lt;script&gt;</code>  会被浏览器解析为执行 <code>JavaScript</code>  代码，这个页面就是执行该代码</p>\n</li>\n<li>\n<p><strong>基于 DOM</strong>：被执行的恶意脚本会修改页面脚本结构</p>\n</li>\n</ul>\n<h2 id=\"xss-防御\"><a class=\"anchor\" href=\"#xss防御\">#</a> XSS 防御</h2>\n<h4 id=\"httponly-防止劫取-cookie\"><a class=\"anchor\" href=\"#httponly-防止劫取-cookie\">#</a> HttpOnly 防止劫取 Cookie</h4>\n<p>HttpOnly 最早由微软提出，至今已经成为一个标准。设置 cookie 时，加上 httpOnly 参数，浏览器将<strong>禁止</strong>页面的 Javascript 访问带有 HttpOnly 属性的 Cookie。</p>\n<h4 id=\"输入检查\"><a class=\"anchor\" href=\"#输入检查\">#</a> 输入检查</h4>\n<p><strong>不要相信用户的任何输入。<strong>对于用户的任何输入要进行</strong>检查</strong>、<strong>过滤</strong>和<strong>转义</strong>。建立可信任的字符和 HTML 标签白名单，对于不在白名单之列的字符或者标签进行过滤或编码。</p>\n<p>如</p>\n<ul>\n<li>输入字符限制</li>\n<li>过滤：过滤 <code>&lt;script&gt;</code>  的内容或者 <code>&lt;</code> 、 <code>&gt;</code></li>\n<li>转义：用转义符转义 <code>&lt;</code> 、 <code>&gt;</code></li>\n</ul>\n<h4 id=\"输出检查\"><a class=\"anchor\" href=\"#输出检查\">#</a> 输出检查</h4>\n<p>服务端的输出也会存在问题。</p>\n<p>除富文本的输出外，在变量输出到 HTML 页面时，可以使用编码或转义的方式来防御 XSS 攻击。</p>\n<h2 id=\"csrf-攻击\"><a class=\"anchor\" href=\"#csrf攻击\">#</a> CSRF 攻击</h2>\n<p><strong>CSRF（ Cross Site Request Forgery）</strong>，跨站请求伪造，是一种<strong>劫持受信任用户</strong>向服务器发送非预期请求的攻击方式。</p>\n<p>CSRF 攻击是攻击者借助受害者的<strong> Cookie <strong>骗取服务器的信任，可以在受害者毫不知情的情况下以受害者名义</strong>伪造请求</strong>发送给受攻击服务器，从而在并未授权的情况下执行在权限保护之下的操作。</p>\n<p>攻击者借助受害者的 Cookie 骗取服务器的信任，但并不能拿到 Cookie，也<strong>看不到</strong> Cookie 的内容。而对于服务器返回的结果，由于浏览器<strong>同源策略</strong>的限制，攻击者也无法进行解析。因此，攻击者<strong>无法</strong>从返回的结果中<strong>得到任何东西</strong>，他所能做的就是给服务器发送请求，以执行请求中所描述的命令，在服务器端直接改变数据的值，而非窃取服务器中的数据。</p>\n<h2 id=\"csrf-防御\"><a class=\"anchor\" href=\"#csrf防御\">#</a> CSRF 防御</h2>\n<h4 id=\"验证码\"><a class=\"anchor\" href=\"#验证码\">#</a> 验证码</h4>\n<p>验证码被认为是对抗 CSRF 攻击最简洁而有效的防御方法。（不仅手机发送验证码，还有图片验证码等）</p>\n<p>从上述示例中可以看出，CSRF 攻击往往是在用户不知情的情况下构造了网络请求。而验证码会强制用户必须与应用进行交互，才能完成最终请求。因为通常情况下，验证码能够很好地遏制 CSRF 攻击。</p>\n<h4 id=\"referer-check\"><a class=\"anchor\" href=\"#referer-check\">#</a> Referer Check</h4>\n<p>根据 HTTP 协议，在 HTTP <strong>请求头</strong>中有一个字段叫  <code>Referer</code> ，它记录了该 HTTP 请求的<strong>来源地址</strong>。通过 Referer Check，可以检查请求是否来自合法的 &quot;源&quot;。</p>\n<h4 id=\"添加-token-验证\"><a class=\"anchor\" href=\"#添加-token-验证\">#</a> 添加 token 验证</h4>\n<p>CSRF 攻击之所以能够成功，是因为攻击者可以完全伪造用户的请求，该请求中所有的用户验证信息都是存在于 Cookie 中，因此攻击者可以在不知道这些验证信息的情况下直接利用用户自己的 Cookie 来通过安全验证。要抵御 CSRF，<strong>关键在于</strong>在请求中放入攻击者所不能伪造的信息，并且该信息不存在于 Cookie 之中。可以在 HTTP 请求中以参数的形式加入一个随机产生的 token，并在服务器端建立一个拦截器来验证这个 token，<strong>如果请求中没有 token 或者 token 内容不正确</strong>，则认为可能是    CSRF 攻击而拒绝该请求。</p>\n<h1 id=\"跨域\"><a class=\"anchor\" href=\"#跨域\">#</a> 跨域</h1>\n<h2 id=\"同源策略\"><a class=\"anchor\" href=\"#同源策略\">#</a> 同源策略</h2>\n<p>同源策略是一个重要的安全策略，它用于限制一个 origin 的文档或它加载的脚本如何能与另一个源的资源进行交互。能够减少恶意文档，减少可能被攻击媒介。 <strong>如果两个 URL 的协议、域名、端口号都相同，就称这两个 URL 同源。</strong></p>\n<p>浏览器从一个域名的网页去请求另一个域名的资源时，<strong>域名、端口、协议</strong>任一不同，都是跨域。在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问问题。</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/1638b3579d9eeb32tplv-t2oaga2asx-zoom-in-crop-mark3024000.webp\" alt=\"url的组成\"></p>\n<h2 id=\"没有同源策略的危害\"><a class=\"anchor\" href=\"#没有同源策略的危害\">#</a> 没有同源策略的危害</h2>\n<ol>\n<li>\n<p><strong>接口请求</strong>： 浏览 A 站后，继续浏览 B 站时，B 站偷偷请求可以带着 A 站的 cookie 窃取用户信息 (CSRF 攻击)</p>\n</li>\n<li>\n<p><strong>DOM 查询</strong>： 打开 B 站可以通过 iframes 再打开 A 站进行操作。iframe 是 HTML 标签，一般用来包含别的页面，例如我们可以在我们自己的网站页面加载别人网站或者本站其他页面的内容。</p>\n</li>\n</ol>\n<p>总之为了避免被恶意窃取信息</p>\n<h2 id=\"如何解决跨域\"><a class=\"anchor\" href=\"#如何解决跨域\">#</a> 如何解决跨域？</h2>\n<h3 id=\"jsop\"><a class=\"anchor\" href=\"#jsop\">#</a> JSOP</h3>\n<p>当需要跨域请求时，<strong>不使用 AJAX</strong>，转而生成一个 <code>script</code>  元素去请求服务器，通过 <code>script</code>  的 <code>src</code>  属性填写 <code>url</code> ，由于浏览器并不阻止 <code>script</code>  元素的请求，这样请求可以到达服务器。服务器拿到请求后，响应一段 JS 代码，这段代码实际上是一个函数调用，调用的是客户端预先生成好的函数，并把浏览器需要的数据作为参数传递到函数中，从而间接的把数据传递给客户端</p>\n<blockquote>\n<p>其实设置了 dataType: 'jsonp' 后，$.ajax 方法就和 ajax XmlHttpRequest 没什么关系了，取而代之的则是 JSONP 协议。</p>\n</blockquote>\n<p><strong>缺点</strong>：</p>\n<ul>\n<li>只能支持 <code>get</code>  请求</li>\n</ul>\n<h2 id=\"cors\"><a class=\"anchor\" href=\"#cors\">#</a> CORS</h2>\n<p>**CORS （Cross-Origin Resource Sharing，跨域资源共享）** 是一个系统，它由一系列传输的 <code>HTTP</code>  头组成，这些 <code>HTTP</code>  头决定浏览器是否阻止前端 <code>JavaScript</code>  代码获取跨域请求的响应</p>\n<p>让后端将响应头的 <code>Access-Control-Allow-Origin</code>  值设为我们目标 <code>host</code>  如 <code>http://www.nczonline.net</code></p>\n<h2 id=\"proxy\"><a class=\"anchor\" href=\"#proxy\">#</a> Proxy</h2>\n<p>代理（Proxy）也称网络代理，是一种特殊的网络服务，允许一个（一般为客户端）通过这个服务与另一个网络终端（一般为服务器）进行非直接的连接。一些网关、路由器等网络设备具备网络代理功能。一般认为代理服务有利于保障网络终端的隐私或安全，防止攻击。</p>\n<p>如果是通过 <code>vue-cli</code>  脚手架工具搭建项目，我们可以通过 <code>webpack</code>  为我们起一个<strong>本地服务器</strong>作为请求的代理对象，通过该服务器转发请求至目标服务器，得到结果再转发给前端，但是最终发布上线时如果 web 应用和接口服务器不在一起仍会跨域</p>\n<p>在 <code>vue.config.js</code>  文件设置目标地址等信息</p>\n<h3 id=\"webpack-proxy-的原理\"><a class=\"anchor\" href=\"#webpack-proxy的原理\">#</a> webpack proxy 的原理</h3>\n<p><code>webpack proxy</code> ，即 <code>webpack</code>  提供的代理服务</p>\n<p>基本行为就是接收客户端发送的请求后<strong>转发</strong>给其他服务器</p>\n<p>其目的是为了便于开发者在<strong>开发模式</strong>下解决跨域问题（浏览器安全策略限制）</p>\n<p>想要实现代理首先需要一个中间服务器， <code>webpack</code>  中提供服务器的工具为 <code>webpack-dev-server</code> ，目的是为了提高开发者日常的开发效率，<strong>只适用在开发阶段</strong></p>\n<p><strong>原理</strong>：</p>\n<p><code>proxy</code>  工作原理实质上是利用 <code>http-proxy-middleware</code>  这个 ** <code>http</code>  代理中间件 **，实现请求转发给其他服务器</p>\n<p>举个例子：</p>\n<p>在开发阶段，本地地址为 <code>http://localhost:3000</code> ，该浏览器发送一个前缀带有 <code>/api</code>  标识的请求到服务端获取数据，但响应这个请求的服务器只是将请求<strong>转发到另一台服务器</strong>中，而<strong>服务器和服务器的通信是没有跨域限制的。<strong>在代理服务器传递数据给本地浏览器的过程中，两者</strong>同源</strong>，并不存在跨域行为，这时候浏览器就能正常接收数据</p>\n<h1 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> AJAX</h1>\n<h2 id=\"什么是-ajax\"><a class=\"anchor\" href=\"#什么是ajax\">#</a> 什么是 ajax？</h2>\n<p><strong>AJAX (Asynchronous JavaScript And XML)“异步的 Javascript 和 XML”</strong>：其最大的功能就是<strong>局部刷新页面</strong>，无需重载整个页面。</p>\n<p><code>ajax</code>  通常使用 <code>XHR(XMLHttpRequest)</code>  对象发送请求实现和服务端的通信。也可以使用 <code>Fecth</code>  进行请求</p>\n<p><code>Jquery</code>  和 <code>axios</code>  都对 <code>ajax</code> （实际上是 XHR）进行了封装，可以非常方便地进行异步请求。</p>\n<h2 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> axios</h2>\n<blockquote>\n<p>Axios 是一个基于 promise 封装的网络请求库，它是基于 XHR 进行二次封装。</p>\n</blockquote>\n<p><strong>特性</strong>：</p>\n<ul>\n<li>从浏览器中创建 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0\">XMLHttpRequests</span></li>\n<li>从 node.js 创建 <span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbA==\">http</span> 请求</li>\n<li>支持 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZQ==\">Promise</span> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 <span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeQ==\">XSRF</span></li>\n</ul>\n<h2 id=\"fetch\"><a class=\"anchor\" href=\"#fetch\">#</a> Fetch</h2>\n<p>Fetch 是在 ES6 出现的，它使用了 ES6 提出的 promise 对象。它是 XMLHttpRequest 的替代品。</p>\n<blockquote>\n<p><strong>Fetch 是一个 API，它是真实存在的，它是基于 promise 的。</strong></p>\n</blockquote>\n<p><strong>特点：</strong></p>\n<ul>\n<li>使用  <code>promise</code> ，不使用回调函数。</li>\n<li>采用模块化设计，比如 <code> rep</code> 、 <code>res</code>  等对象分散开来，比较友好。</li>\n<li>通过<strong>数据流</strong>对象处理数据，可以提高网站性能。</li>\n</ul>\n<h2 id=\"ajax-axios-fetch-的关系\"><a class=\"anchor\" href=\"#ajax-axios-fetch的关系\">#</a> ajax、axios、Fetch 的关系</h2>\n<ul>\n<li>ajax 是 js 异步技术的术语，早起相关的 api 是 xhr，它是一个术语。</li>\n<li>fetch 是 es6 新增的用于网络请求标准 api，它是一个 api。</li>\n<li>axios 是用于网络请求的第三方库，它是一个库。</li>\n</ul>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/22da43184f0d4d4c84c8e12747fbcdfftplv-k3u1fbpfcp-zoom-in-crop-mark3024000.webp\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>网络请求</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Ajax</td>\n<td>一种技术统称，主要利用 XHR 实现网络请求</td>\n</tr>\n<tr>\n<td>Fetch</td>\n<td>具体 API，基于 promise，实现网络请求</td>\n</tr>\n<tr>\n<td>Axios</td>\n<td>一个封装库，基于 XHR 封装，较为推荐使用</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"ios-七层模型\"><a class=\"anchor\" href=\"#ios七层模型\">#</a> IOS 七层模型</h1>\n<p>物联网输会示用</p>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/eb1b2170-b61e-11eb-ab90-d9ae814b240d.png\" alt=\"img\"></p>\n<ul>\n<li><strong>应用层</strong>：通过应用<strong>程序间的交互</strong>来完成特定的网络应用。如 DNS、HTTP 等协议</li>\n<li><strong>表示层</strong>：主要包括<strong>数据压缩</strong>，<strong>数据加密</strong>以及<strong>数据描述</strong>，使应用程序不必担心在各台计算机中表示和存储的内部格式差异</li>\n<li><strong>会话层</strong>：管理<strong>实体之间的通信</strong>会话。该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法</li>\n<li><strong>传输层</strong>：为两台主机<strong>进程之间的通信</strong>提供服务，处理数据包错误、数据包次序，以及其他一些关键传输问题。 <code>TCP</code> 、 <code>UDP</code></li>\n<li><strong>网络层</strong>：将传输层的数据报封装成分组和包，进行转发和寻址。包括一些路由转发、IP 地址→MAC 地址等。 <code>IP</code> 、 <code>ARP</code></li>\n<li><strong>数据链路层</strong>：将 IP 数据包包封装成帧在数据链路进行传播。</li>\n<li><strong>物理层</strong>：物理通信。如数据以比特的形式在物理媒介上传播</li>\n</ul>\n<h2 id=\"tpc\"><a class=\"anchor\" href=\"#tpc\">#</a> TPC</h2>\n<h3 id=\"三次握手\"><a class=\"anchor\" href=\"#三次握手\">#</a> 三次握手</h3>\n<p>先复习一下标识位</p>\n<ul>\n<li>SYN：同步，表示建立链接</li>\n<li>ACK：确认，表示响应</li>\n<li>FIN：终止，表示关闭链接</li>\n<li>seq：序列号码（TCP 连接中传送的字节流中的每个字节都按顺序编号）</li>\n<li>ack：确认号码，是期望收到对方下一个报文的第一个数据字节的序号</li>\n</ul>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/TCP%E6%8F%A1%E6%89%8B.png\" alt=\"img\"></p>\n<p>描述：</p>\n<ol>\n<li>\n<p>客户端先发送请求建立连接的消息（SYN=1）</p>\n</li>\n<li>\n<p>服务端收到请求，向客户端发送确认，并同意接受连接（SYN，ACK=1）</p>\n</li>\n<li>\n<p>客户端收到确认消息，然后对确认消息进行确认（ACK=1），并进入连接状态</p>\n</li>\n<li>\n<p>服务端收到客户端的消息，进入连接状态</p>\n</li>\n</ol>\n<p>Q：为什么还要第三次确认？</p>\n<p>R：因为客户端第一条请求建立连接的报文可能<strong>延时到达</strong>，到达后可能客户端和服务器已经通信完并释放连接了，这时候服务器收到滞后消息，误以为客户端又要请求连接，如果没有第三次确认，那么服务器就是直接进入连接状态，浪费通信资源。</p>\n<h3 id=\"四次挥手\"><a class=\"anchor\" href=\"#四次挥手\">#</a> 四次挥手</h3>\n<p><img data-src=\"/2022/08/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%85%AB%E8%82%A1%E6%96%87/TCP%E6%8C%A5%E6%89%8B.png\" alt=\"img\"></p>\n<p>描述：</p>\n<ol>\n<li>客户端发送消息，请求终止连接（FIN=1）</li>\n<li>服务器收到请求消息，向客户端发送确认（ACK=1），并发送完剩下的数据</li>\n<li>发送完数据后，服务端再发送一条确认终止的消息（FIN=1，ACK=1）</li>\n<li>客户端收到确认消息，像服务端发送一条确认消息的确认（ACK=1），等待 2 个 MSL（报文的最大生存时间）后关闭</li>\n<li>服务端收到客户端的确认后，关闭</li>\n</ol>\n<p>Q：为什么要等待 2MSL 后再关闭</p>\n<p>R：最后一条确认可能没成功到达服务端，这时候需要超时重传，否则服务端一直等待下去浪费通信资源。</p>\n<p>Q：客户端出现故障怎么办</p>\n<p>R：服务端有<strong>计时</strong>机制，在一定时间内没有收到客户端的消息就会发送<strong>探测报文</strong>，如果一直没有响应就会自动关闭</p>\n<h3 id=\"tcp-和-udp-的区别\"><a class=\"anchor\" href=\"#tcp和udp的区别\">#</a> TCP 和 UDP 的区别</h3>\n<p><strong>TCP</strong>：面向连接、可靠、面向字节流、点对点每条 TCP 只有 2 个端点、全双工通信</p>\n<p><strong>UDP</strong>：无连接、不可靠、面向报文、没有拥塞控制、支持多对多、开销小</p>\n<h3 id=\"滑动窗口\"><a class=\"anchor\" href=\"#滑动窗口\">#</a> 滑动窗口</h3>\n<p>TCP 的可靠连接要保证每个字节都要被对方接收到，所以要对其进行接受确认。但一个字节一个字节确认太慢了，所以就设定一个窗口，一串字节一起发送，这样对面只需要对连续的最后一个字节确认就行。发送方就可以把窗口往前挪 n 个单位，n 是接收方接收到连续的字节数，然后发送方再发送新的没发送过的字节，一直到窗口全是发送后没接到确认的字节后，全部重新发送。</p>\n<p>Q：为什么不每次都发送一个窗口的字节</p>\n<p>R：因为有可能在发送新的字节的时候接收方接受到了之前发送的字节，这样就不需要重新发送，滑窗也往前走了。每次都整个窗口发送会很浪费，还可能阻塞网络</p>\n<h3 id=\"流量控制\"><a class=\"anchor\" href=\"#流量控制\">#</a> 流量控制</h3>\n<p>通过滑窗进行流量控制，只要是<strong>避免接收方来不及接受数据</strong></p>\n<p>通过接收方的反馈刷新滑窗的大小</p>\n<h3 id=\"拥塞控制\"><a class=\"anchor\" href=\"#拥塞控制\">#</a> 拥塞控制</h3>\n<p>拥塞控制是为了避免网络堵塞</p>\n<p>主要是慢开始、拥塞避免（加法增大）、快重传、快恢复（乘法减小）</p>\n<p><strong>慢开始</strong>：一开始不知道网络环境怎么样，先设置一个比较小的拥塞窗口（发送窗口），同时设置一个慢开始门限，然后指数级增大（拥塞窗口每次变大一倍）</p>\n<p><strong>拥塞避免</strong>：当拥塞窗口到达门限值时，不在指数增长，而是线性增长，每次增加一个最长报文段的长度，直到出现 ** 超时（拥塞）** 后，门限值变为拥塞窗口的一半，拥塞窗口重新从最小开始，然后继续慢开始</p>\n<p><strong>快重传 / 快恢复</strong>：当某次连续收到 3 个确认字段（可能是因为拥塞，也可能是就是转发错误），拥塞窗口和门限值都变为当前拥塞窗口的一半，然后进入拥塞避免阶段（线性增大）</p>\n<h2 id=\"dns-协议\"><a class=\"anchor\" href=\"#dns协议\">#</a> DNS 协议</h2>\n<p>找域名的协议，根据域名找 IP 地址</p>\n<p>域名等级大致分为：</p>\n<ul>\n<li>根域名服务器</li>\n<li>顶级域名服务器</li>\n<li>权限域名服务器</li>\n<li>本地域名服务器</li>\n<li>主机</li>\n</ul>\n<p><strong>DNS 迭代查询</strong>：</p>\n<ol>\n<li>主机向本地域名服务器查找域名对应的 IP</li>\n<li>本地向根域名查找，根域名告诉本地应该找哪个顶级域名</li>\n<li>本地向顶级域名查找，顶级域名告诉本地应该找哪个权限域名</li>\n<li>本地向权限域名查找，权限域名告诉本地 IP 地址</li>\n<li>本地返回主机 IP 地址</li>\n</ol>\n<p>共消耗 8 个 UDP 报</p>\n<p><strong>DNS 递归查询</strong>：（比较常见）</p>\n<ol>\n<li>主机向本地域名服务器查找域名对应的 IP</li>\n<li>本地向根域名查找</li>\n<li>根域名向对应顶级域名查找</li>\n<li>顶级域名向权限域名查找</li>\n<li>权限域名告诉顶级、顶级告诉根、根告诉本地、本地告诉主机</li>\n</ol>\n<p>共消耗 8 个 UDP 报</p>\n<h1 id=\"代理服务器\"><a class=\"anchor\" href=\"#代理服务器\">#</a> 代理服务器</h1>\n<ul>\n<li><strong>正向代理</strong>：如 webpack 代理，在客户端创建一个本地服务器，通过创建的本地服务器向服务器请求数据，可以绕开同源策略，然后本地服务器和浏览器是同源的，这样浏览器就可以通过本地服务器获取到服务器的数据了</li>\n<li><strong>反向代理</strong>：如 Nginx 反向代理。现在服务器通常是<strong>分布式</strong>的，而反向代理就是浏览器发送请求给反向代理，反向代理接着把请求转给对应的服务器（由反向代理决定，对客户端透明），然后服务器响应给代理，代理再给浏览器。也就是浏览器和服务器通过反向代理服务器通信。\n<ul>\n<li>反向代理还可以为后端的多台服务器提供<strong>负载均衡</strong>，或者为后端较慢的服务器提供缓冲服务。</li>\n<li>虚拟主机。可以实现在一台服务器虚拟出多个网站。例如个人网站使用的虚拟主机。</li>\n</ul>\n</li>\n</ul>\n<p>即：正向代理是代理的<strong>客户端</strong>，反向代理是代理的<strong>服务端</strong></p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/15/note/CSS/CSS%E5%85%AB%E8%82%A1/",
            "url": "https://nitgod1996.com/2022/08/15/note/CSS/CSS%E5%85%AB%E8%82%A1/",
            "title": "CSS八股",
            "date_published": "2022-08-15T13:22:23.000Z",
            "content_html": "<h1 id=\"说说你对盒子模型的理解\"><a class=\"anchor\" href=\"#说说你对盒子模型的理解\">#</a> 说说你对盒子模型的理解</h1>\n<p>浏览器的渲染引擎会将所有元素表示为一个个矩形的盒子，盒子主要由四部分组成。</p>\n<ul>\n<li><code>content</code> ：元素内容，显示文本或图像</li>\n<li><code>padding</code> ：元素内边距，这是元素内容和元素边框之间的距离</li>\n<li><code>border</code> ：元素边框，这个边框可以设置宽度</li>\n<li><code>margin</code> ：元素外边距，这是元素边框和另一个元素之间的距离。</li>\n</ul>\n<p>标准盒子模型中， <code>width</code>  定义的就是 <code>content-box</code>  的尺寸，怪异盒子模型是 <code>border-box</code>  的尺寸，也就是 content+padding+border 的宽度。通过 <code>box-sizing</code>  设置选用哪种模型。</p>\n<h2 id=\"外边距重叠\"><a class=\"anchor\" href=\"#外边距重叠\">#</a> 外边距重叠</h2>\n<p>另外 <code>margin</code>  左右方向是元素边框与另一个元素外边距之间的距离，上下方向的话因为会产生外边距重叠，所以是两个元素边框之间的距离。两个元素的 <code>margin</code>  取更大的那个。还有一种情况，元素没有 <code>border</code>  和 <code>padding</code>  的情况下，其子元素会和垂直方向的元素参与外边距重叠。</p>\n<p><strong>避免外边距重叠</strong>，有以下避免方法：</p>\n<ul>\n<li><strong>父元素</strong> <code>overflow: auto</code> （或者非 <code> visible</code>  的值），防止和<strong>子元素</strong>折叠。这种方式<strong>副作用最小</strong>。</li>\n<li><strong>父元素</strong>加上 <code>border</code>  或者 <code>padding</code> ，防止和<strong>子元素</strong>折叠</li>\n<li>设置为<strong>浮动元素 float</strong>、<strong>内联块 inline</strong>、<strong>绝对定位 absolute</strong> 或<strong>固定定位 fixed</strong> 时，外边距不会在它外面折叠</li>\n<li>使用  <code>Flexbox </code> 布局时，<strong>弹性布局</strong>内的元素之间不会发生外边距折叠。<strong>网格布局</strong>同理</li>\n<li>当元素显示为  <code>table-cell</code>  时不具备外边距属性，因此它们不会折叠</li>\n</ul>\n<h1 id=\"css-选择器有哪些优先级哪些属性可以继承\"><a class=\"anchor\" href=\"#css选择器有哪些优先级哪些属性可以继承\">#</a> css 选择器有哪些？优先级？哪些属性可以继承？</h1>\n<p>选择器主要是 <code>id</code>  选择器，类（ <code>class</code> ）选择器，伪类（ <code>:</code> ）选择器，属性选择器，元素（标签）选择器，伪元素（ <code>::</code> ）选择器，通用（ <code>*</code> ）选择器，其中</p>\n<ul>\n<li>id 选择器最大</li>\n<li>类选择器、伪类选择器、属性选择器次之</li>\n<li>元素选择器、伪元素选择器再次之</li>\n<li>通用选择器最小</li>\n</ul>\n<p>还有一些组合器，比如 <code>+、 、&gt;</code>  组合器没有优先级。</p>\n<p>有多个选择器组合的时候，对应优先级的相加，先比较优先级最大的选择器的数量，然后再比第二大的...</p>\n<p>这些是选择器的优先级。另外，行内样式优先级大于选择器，样式后面有些 <code>!important</code>  的优先级最大</p>\n<h2 id=\"哪些可以继承\"><a class=\"anchor\" href=\"#哪些可以继承\">#</a> 哪些可以继承</h2>\n<p>主要和文本相关的大部分可以继承，比如行高、字体大小、颜色、对其方式这些。</p>\n<p>继承的优先级很低，只要样式被重定义了，优先级就被该选择器覆盖</p>\n<h1 id=\"说说-empxremvhvw-区别\"><a class=\"anchor\" href=\"#说说empxremvhvw区别\">#</a> 说说 em/px/rem/vh/vw 区别？</h1>\n<p>这些除了 px 都是相对单位。px 是绝对单位，表示的是像素点的大小，这就造成了在不同屏幕上显示出来的元素大小可能会大相径庭。</p>\n<p>em = 当前元素的 font-size，rem 是根元素也就是 body 的 font-size。vh/vw 是视口的高度和宽度。</p>\n<p>一般来说 rem 用的比较多，em 用起来有一定隐患，需要对每个元素的 font-size 了如指掌，有时候如果用 em 定义了 font-size 可能会造成尺寸的嵌套指数级变大或变小，比如设置 font-size: 0.9em，表示字体变为父辈的 90%</p>\n<h1 id=\"水平垂直居中\"><a class=\"anchor\" href=\"#水平垂直居中\">#</a> 水平垂直居中</h1>\n<p>垂直居中：</p>\n<ul>\n<li>\n<p>元素定高宽：先将父子元素定宽高</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 公共代码 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">.wp</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">background</span><span class=\"token punctuation\">:</span> green<span class=\"token punctuation\">;</span>    </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token selector\">.box.size</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token comment\">/* 公共代码 */</span></pre></td></tr></table></figure><ul>\n<li>\n<p>使用 absolute</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 50%<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">margin-left</span><span class=\"token punctuation\">:</span> -50px<span class=\"token punctuation\">;</span><span class=\"token comment\">/*50px 是子元素的宽高 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">margin-top</span><span class=\"token punctuation\">:</span> -50px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 absolute+calc</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50% - 50px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>50% - 50px<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>以上 2 中<strong>缺点是需要知道子元素的宽高</strong></p>\n<ul>\n<li>\n<p>使用 absolute+margin</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.box</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">position</span><span class=\"token punctuation\">:</span> absolute<span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">top</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">left</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">right</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">bottom</span><span class=\"token punctuation\">:</span> 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">margin</span><span class=\"token punctuation\">:</span> auto<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong>行内元素</strong>：</p>\n<ul>\n<li>lineheight 设为和 height 一样实现垂直居中</li>\n<li>使用 <code>vertical-align</code>  垂直居中</li>\n<li>使用 <code>text-align</code>  水平居中</li>\n</ul>\n</li>\n<li>\n<p>table-cell：</p>\n<ul>\n<li>display 设为 table-cell，然后使用 <code>vertical-align</code>  垂直居中。使用 <code>text-align</code>  水平居中</li>\n</ul>\n</li>\n<li>\n<p>flex：使用 flex 水平垂直居中</p>\n<ul>\n<li>justify-content：center 沿着轴的方向居中</li>\n<li>align-item：center 垂直轴的方向居中</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"bfc\"><a class=\"anchor\" href=\"#bfc\">#</a> BFC</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9qdWVqaW4uY24vcG9zdC82OTUwMDgyMTkzNjMyNzg4NDkz\">https://juejin.cn/post/6950082193632788493</span></p>\n<ul>\n<li><code>BFC</code>  就是页面中的一个隔离的独立容器，容器里的标签不会影响到外部标签</li>\n</ul>\n<ul>\n<li>计算 <code>BFC</code>  的高度时，浮动元素也参与计算</li>\n</ul>\n<h2 id=\"怎样触发-bfc\"><a class=\"anchor\" href=\"#怎样触发bfc\">#</a> 怎样触发 BFC</h2>\n<p>这里简单列举几个触发 <code>BFC</code>  使用的 <code>CSS</code>  属性</p>\n<ul>\n<li>根元素、即 HTML 元素</li>\n<li>浮动元素：float</li>\n<li>position：absolute 或 fixed</li>\n<li>overflow: hidden、visible</li>\n<li>dispaly：inline-block、table、flex、grid 等</li>\n</ul>\n<h2 id=\"bfc-解决了什么问题\"><a class=\"anchor\" href=\"#bfc解决了什么问题\">#</a> BFC 解决了什么问题</h2>\n<ol>\n<li>\n<p>使用 Float 脱离文档流，高度塌陷：让父元素变成 BFC</p>\n</li>\n<li>\n<p>Margin 边距重叠</p>\n</li>\n<li>\n<p>两栏布局：float 会占用第一个元素的宽度，使用 BFC 就可以隔开</p>\n</li>\n</ol>\n<h1 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h1>\n<ul>\n<li>\n<p>display：inline-block 是以文本最底层文字的基线对齐的，因此会有高度异常的情况，如下</p>\n<p><img data-src=\"/2022/08/15/note/CSS/CSS%E5%85%AB%E8%82%A1/image-20220907144317316.png\" alt=\"image-20220907144317316\"></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">charset</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>UTF-8<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">http-equiv</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>X-UA-Compatible<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>IE=edge<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>两栏布局<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token selector\">div</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                 <span class=\"token property\">height</span><span class=\"token punctuation\">:</span> 100px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                 <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 200px<span class=\"token punctuation\">;</span><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局两栏布局</pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 300px<span class=\"token punctuation\">;</span><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        我是蛙人，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 400px<span class=\"token punctuation\">;</span><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> inline-block<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        我是蛙人，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭，如有帮助请点个赞叭</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/11/note/CSS/%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem%E5%92%8Cem/",
            "url": "https://nitgod1996.com/2022/08/11/note/CSS/%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem%E5%92%8Cem/",
            "title": "相对单位和自适应",
            "date_published": "2022-08-11T05:57:00.000Z",
            "content_html": "<p>由于显示器的大小、分辨率的差别，同时 100px 在不同的用户页面上可能相差很大，每个用户的体验也可能千差万别。</p>\n<p>不管我们 喜欢与否，都得抛弃以前那种固定宽度的栏目设计，开始考虑<strong>响应式</strong>设计</p>\n<h1 id=\"em\"><a class=\"anchor\" href=\"#em\">#</a> em</h1>\n<p>em 是最常见的<strong>相对长度</strong>单位，适合基于特定的字号进行排版。在 CSS 中，1em 等于<strong>当前元素</strong>的字号，其准确值取决于作用的元素</p>\n<p>如下：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.padded</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">border</span><span class=\"token punctuation\">:</span> 1px solid red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如图：<img data-src=\"/2022/08/11/note/CSS/%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem%E5%92%8Cem/image-20220811140344000.png\" alt=\"image-20220811140344000\">（因为是<strong>块级元素</strong>，因此宽度是父元素的 100%)</p>\n<p>可以看到， <code>padding</code>  是 <code>16px</code> 。这里设置内边距的值为 <code>1em</code> 。浏览器将其乘以字号，最终渲染为 <code>16px</code> 。这一点很重要：浏览器会根据相对单位的值计算出绝对值，称作<strong>计算值</strong>（computed value）。</p>\n<p>由于 <code>font-size</code>  可以<strong>继承</strong>，我们不需要每次使用 <code>em</code>  时都去定义一下字号大小，它将沿用父元素的字号。</p>\n<h2 id=\"使用-em-定义字号\"><a class=\"anchor\" href=\"#使用em定义字号\">#</a> 使用 em 定义字号</h2>\n<p>前面说了， <code>1em</code>  等于元素当前的字号，而当没有显示地定义 <code>font-size</code>  时，字号大小<strong>继承</strong>自父元素。那么我们可以通过 <code>em</code>  定义元素的 <code>font-size</code>  为父元素的 <code>n</code>  倍。</p>\n<p>如定义 <code>font-size: 0.5em</code> ，此时元素的字号即为父元素的二分之一</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.5em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>father<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>父元素</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>child<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        子元素</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"/2022/08/11/note/CSS/%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem%E5%92%8Cem/image-20220811141309359.png\" alt=\"image-20220811141309359\"></p>\n<p>那么问题来了，再声明子元素的 <code>padding: 1em</code> ，<strong>这时候 1em 为多少 px？</strong></p>\n<p><code>css</code>  改成如下</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.father</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 16px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.child</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.5em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/08/11/note/CSS/%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem%E5%92%8Cem/image-20220811141753560.png\" alt=\"image-20220811141753560\"> 打开浏览器控制台，可以看到 <code>padding</code>  变为了 <code>8px</code> ，也就是说， <code>1em</code>  是跟随的<strong>改变后的 font-size</strong> 的</p>\n<h2 id=\"em-字号陷阱嵌套\"><a class=\"anchor\" href=\"#em字号陷阱嵌套\">#</a> em 字号陷阱（嵌套）</h2>\n<p>有时候开发者会使用选择器选中多个元素进行样式定义。当这些同时被选中的元素具有<strong>父子关系</strong>时，就有可能发生<strong>嵌套</strong>，导致 em 不断变大 / 变小</p>\n<p>如下：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">ul</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .8em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Top level</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Second level</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Third level</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Fourth level</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span><span class=\"token punctuation\">></span></span>Fifth level<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>                            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>                        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>                    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>                <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>ul</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"/2022/08/11/note/CSS/%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem%E5%92%8Cem/image-20220811142211032.png\" alt=\"image-20220811142211032\"></p>\n<p>所以：</p>\n<ul>\n<li>要么嵌套的元素字号<strong>和父元素一样</strong></li>\n<li>要么不要同时定义具有<strong>父子关系</strong>的元素</li>\n</ul>\n<h1 id=\"rem\"><a class=\"anchor\" href=\"#rem\">#</a> rem</h1>\n<p><code>rem</code>  是 <code>root em</code>  的缩写。 <code>rem</code>  和 <code>em</code>  差不多，也是跟随字号相对单位，但 <code>rem</code>  不是相对于当前元素，而是相对于<strong>根元素</strong>的单位。也就是 **&lt;html&gt;<strong>（可以通过 <code>:root</code>  选中）。一般浏览器默认根元素的字号是</strong> 16px**</p>\n<p>与 <code> em</code>  相比， <code>rem</code>  降低了复杂性。实际上， <code>rem</code>  结合了 <code>px</code>  和 <code> em</code>  的优点，既保留了相对单位 的优势，又简单易用。但也不意味着抛弃 <code>px</code>  和 <code>em</code></p>\n<blockquote>\n<p>拿不准的时候，用 rem 设置字号，用 px 设置边框，用 em 设置其他大部分属性。</p>\n</blockquote>\n<h2 id=\"重置-html-默认字号\"><a class=\"anchor\" href=\"#重置html默认字号\">#</a> 重置 html 默认字号</h2>\n<blockquote>\n<p>过去几年有一个常见的模式，更准确地说是<strong>反模式</strong>，就是将网页根元素的字号设置为 0.625em 或者 62.5%</p>\n</blockquote>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">html</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> .625em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样会把默认字号缩小为<strong> 10px</strong>，可以极大的简化计算。</p>\n<p>但也有<strong>缺点</strong>：可能会被迫写很多重复的代码，因为 10px 对大部分文字来说<strong>太小了</strong>，而 16px 则差不多刚刚好</p>\n<p>应该摒弃<strong>像素思维</strong>，就把 rem 当做正常单位，不要总想着 1rem 等于多少 px。不要为了 10px 便于计算而设置默认字号为 10px，而是应该以实际情况设置最合适的默认字号如（14px、16px）。而不是将默认字体设置为 10px 然后再覆盖一遍</p>\n<h1 id=\"响应式尺寸\"><a class=\"anchor\" href=\"#响应式尺寸\">#</a> 响应式尺寸</h1>\n<blockquote>\n<p>我们甚至可以根据屏幕尺寸，用<strong>媒体查询</strong>改变根元素的字号。这样就能够基 于不同用户的屏幕尺寸，渲染出不同大小的面板</p>\n</blockquote>\n<p><strong>媒体查询</strong>：即 <code>@media</code>  规则，可以<strong>指定</strong>某种屏幕尺寸或者媒体类型（比如，打印机 或者屏幕）下的样式。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 作用到所有的屏幕 */</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">:root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.75em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 仅作用到宽度 800px 及其以上的屏幕 */</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 800px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token selector\">:root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 0.875em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">/* 仅作用到宽度 1200px 及其以上的屏幕 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token atrule\"><span class=\"token rule\">@media</span> <span class=\"token punctuation\">(</span><span class=\"token property\">min-width</span><span class=\"token punctuation\">:</span> 1200px<span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token selector\">:root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 1em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>（阿里开发的 <code>flexible.js</code>  就用到了这个，此外还同时监听了<strong>视口</strong>的变化。）</p>\n<h1 id=\"视口的相对单位\"><a class=\"anchor\" href=\"#视口的相对单位\">#</a> 视口的相对单位</h1>\n<blockquote>\n<p><strong>视口</strong>：浏览器窗口里网页<strong>可见部分</strong>的边框区域。它<strong>不包括</strong>浏览器的地址栏、工具 栏、状态栏。</p>\n</blockquote>\n<p>视口有以下单位：</p>\n<ul>\n<li><code>vh</code> ：视口高度的 1/100。</li>\n<li><code>vw</code> ：视口宽度的 1/100。</li>\n<li><code>vmin</code> ：视口宽、高中<strong>较小</strong>的一方的 1/100</li>\n<li><code>vmax</code> ：视口宽、高中<strong>较大</strong>的一方的 1/100</li>\n</ul>\n<p>可以通过视口单位设置浏览器窗口变大变小时组件大小<strong>跟着变化</strong>（自适应）的功能。</p>\n<h2 id=\"使用-vw-定义字号\"><a class=\"anchor\" href=\"#使用vw定义字号\">#</a> 使用 vw 定义字号</h2>\n<p>通过相对视口单位设置字号，然后在通过 <code>rem</code> / <code>em</code>  设置组件的尺寸，那么就可以让组件<strong>随着视口大小改动</strong>。</p>\n<p>也可以在一定程度上<strong>适配</strong>不同尺寸的设备，代替媒体查询的功能。同时可以在不同尺寸的设备间<strong>平滑过渡</strong>，而不是在某个断点突然改变。</p>\n<h1 id=\"使用-calc-定义字号\"><a class=\"anchor\" href=\"#使用calc定义字号\">#</a> 使用 <code>calc()</code>  定义字号</h1>\n<p><code>calc()</code>  函数内可以对两个及其以上的值进行<strong>基本运算</strong>。当要结合<strong>不同单位</strong>的值时， <code>calc() </code> 特别实用。它支持的运算包括：加（+）、减（−）、乘（×）、除（÷）。加号和减号两边<strong>必须有空白</strong></p>\n<p>如下：</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">:root</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>0.5em + 1vw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>现在打开网页，慢慢缩放浏览器，字体会平滑地缩放。 <code>0.5em</code>  保证了<strong>最小字号</strong>， <code>1vw </code> 则确保 了字体会<strong>随着视口缩放</strong>。</p>\n<hr>\n<p>(这样<strong>不用媒体查询</strong>就实现了大部分的<strong>响应式</strong>策略。省掉三四个硬编码的断点，网页上的内容 也能根据视口流畅地缩放。)</p>\n<h1 id=\"百分比单位和无单位数值\"><a class=\"anchor\" href=\"#百分比单位和无单位数值\">#</a> 百分比单位和无单位数值</h1>\n<p>除了 em、rem、视口单位，还有个相对单位就是百分比单位。</p>\n<p><strong>百分比</strong>就是<strong>相对父元素</strong>的百分比的大小，这个没什么好说的。</p>\n<p>有些属性允许<strong>无单位</strong>的值（即一个不指定单位的数）。支持这种值的属性包括 line-height、 z-index、font-weight（700 等于 bold，400 等于 normal，等等）。</p>\n<p>其中特别要注意的是<strong>行高 line-height</strong> 的设置</p>\n<h2 id=\"行高-line-height\"><a class=\"anchor\" href=\"#行高line-height\">#</a> 行高 line-height</h2>\n<p>我们常常使用 <code>line-height</code>  来设置字体的<strong>垂直居中</strong>，其实在设置行高时，通常我们应该使用<strong>无单位</strong>的数值</p>\n<p>由于行高是属于会被<strong>继承</strong>的属性，如果使用了别的单位设置行高，那么每次<strong>修改元素字号</strong>时，都可能会发生行高不适配，<strong>字体重叠</strong>的情况。，如下<img data-src=\"/2022/08/11/note/CSS/%E7%9B%B8%E5%AF%B9%E5%8D%95%E4%BD%8Drem%E5%92%8Cem/image-20220811152350993.png\" alt=\"image-20220811152350993\"></p>\n<p>因为用别的单位继承行高的值，继承的都是<strong>计算值</strong>，也就是说，继承后行高是<strong>固定</strong>的</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/* 后代元素继承了计算值（19.2px）*/</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.2em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">/* 字号为 32px*/</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token selector\">.about-us</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>字号 &gt; 行高，那么显然字体就会重叠了</p>\n<p>而如果改成<strong>无单位</strong>的数值定义行高，（行高的无单位是<strong>相对当前字号的比例</strong>），如</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">body</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">line-height</span><span class=\"token punctuation\">:</span> 1.2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">/* 字号为 32px，行高继承为 1.2，算出来是 32*1.2=38.4px*/</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token selector\">.about-us</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 2em<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这时字号 &lt; 行高，就不会产生重叠了</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/10/note/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/",
            "url": "https://nitgod1996.com/2022/08/10/note/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/",
            "title": "选择器与优先级",
            "date_published": "2022-08-10T10:08:26.000Z",
            "content_html": "<h1 id=\"选择器\"><a class=\"anchor\" href=\"#选择器\">#</a> 选择器</h1>\n<h2 id=\"基础选择器\"><a class=\"anchor\" href=\"#基础选择器\">#</a> 基础选择器</h2>\n<ul>\n<li><code>#id</code> -<strong>id 选择器</strong>：通过 <code>id</code>  属性和 <code>#+id值</code> 匹配，优先级为 1,0,0</li>\n<li><code>.class</code> -<strong> 类选择器</strong>：通过 <code>class</code>  属性和 <code>.+class值</code> 匹配，优先级为 0,1,0</li>\n<li><code>tagname</code> -<strong> 标签（元素）选择器</strong>：通过 <code>标签名</code> 匹配（直接写标签名即可），优先级 0,0,1</li>\n<li><code>*</code> -<strong> 通用选择器</strong>：通过 <code>*</code>  匹配，匹配所有元素，优先级 0,0,0</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Arial<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Wombat Coffee Roasters<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">/* 标签选择器 */</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">/*id 选择器 */</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token selector\">#page-title</span> <span class=\"token punctuation\">&#123;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>     <span class=\"token comment\">/* 类选择器 */</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> monospace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">/* 通用选择器 */</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token selector\">*</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> monospace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"属性选择器\"><a class=\"anchor\" href=\"#属性选择器\">#</a> 属性选择器</h2>\n<p>属性选择器用于根据 HTML 属性匹配元素。其优先级与一个类选择器（0,1,0）相等</p>\n<ul>\n<li><code>[attr]</code> ： 匹配拥有<strong>指定属性</strong>的元素，<strong>无论属性值是什么</strong>，例如：  <code>input[disabled]</code> 。</li>\n<li><code>[attr=&quot;value&quot;]</code> ：匹配<strong>特定属性</strong>且<strong>特定属性值</strong>的元素， 例如： <code>input[type=&quot;radio&quot;]</code> 。</li>\n<li><code>[attr^=&quot;value&quot;]</code> -<strong>“开头” 属性选择器</strong>：匹配特定属性以特定字符串<strong>开头</strong>的属性值的元素，例如： <code>a[href^=&quot;https&quot;]</code> 。</li>\n<li><code>[attr$=&quot;value&quot;]</code> -<strong>“结尾” 属性选择器</strong>。同上</li>\n<li><code>[attr*=&quot;value&quot;]</code> -<strong>“包含” 属性选择器</strong>。 且属性值<strong>包含</strong>指定的字符串值</li>\n<li>后面的也主要是一些<strong>字符串匹配规则</strong></li>\n<li><code>[attr~=&quot;value&quot;]</code> ——“空格分隔的列表” 属性选择器。该选择器匹配的元素拥有指定 属性 attr，且属性值是一个空格分隔的值列表，列表中的某个值等于指定的字符串值， 例如：a [rel=&quot;author&quot;]。</li>\n<li><code> [attr|=&quot;value&quot;]</code> —— 匹配的元素拥有指定属性 attr，且属性值要么等于指定的字符 串值，要么以该字符串开头且紧跟着一个连字符（-）。适用于语言属性，因为该属性有 时候会指定一种语言的子集（比如墨西哥西班牙语，es-MX，或者普通的西班牙语，es）， 例如：[lang|=&quot;es&quot;]</li>\n</ul>\n<p><strong>属性选择器不区分大小写</strong></p>\n<h2 id=\"组合器\"><a class=\"anchor\" href=\"#组合器\">#</a> 组合器</h2>\n<p>组合器将多个基础选择器连接起来组成一个复杂选择器，组合器本身<strong>不增加</strong>优先级</p>\n<ul>\n<li><code> </code> （空格）-<strong> 后代组合器</strong>：匹配该元素的<strong>所有子孙元素</strong></li>\n<li><code>&gt;</code> -<strong> 子组合器</strong>：匹配该元素的<strong>直接后代</strong></li>\n<li><code>+</code> -<strong> 相邻兄弟组合器</strong>：匹配该元素<strong>紧随其后</strong>的<strong>一个</strong>兄弟元素</li>\n<li><code>~</code> -<strong> 通用兄弟组合器</strong>：匹配该元素<strong>后面所有</strong>的兄弟元素</li>\n</ul>\n<p>多个组合器可以<strong>复合使用</strong></p>\n<h2 id=\"伪类选择器\"><a class=\"anchor\" href=\"#伪类选择器\">#</a> 伪类选择器 <code>:</code></h2>\n<p>伪类选择器和伪元素选择器是比较难以理解的部分：</p>\n<ul>\n<li><strong>伪类选择器</strong>：处于某个<strong>特定状态</strong>的元素。如<strong>用户交互</strong>，或者相对于<strong>父子兄弟</strong>的位置</li>\n<li><strong>伪元素选择器</strong>：匹配在<strong>文档中</strong>没有直接对应 HTML 元素的<strong>特定部分</strong>。如某个文本前面的位置</li>\n</ul>\n<hr>\n<p>伪类元素器的使用：一般是前面是一个正常的选择器，后面跟上一个伪类选择器，匹配该元素<strong>所有子孙元素</strong>中<strong>满足一定条件</strong>的元素。如</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.cls :first-child</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    color = red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>伪类选择器种类：</p>\n<p><strong>用户交互</strong></p>\n<ul>\n<li><code>:focus</code> ：匹配<strong>获取焦点</strong>的元素</li>\n<li><code>:hover</code> ：匹配鼠标正悬停在其上方的元素</li>\n</ul>\n<p><strong>文档树</strong></p>\n<ul>\n<li>\n<p><code>:root</code> ：匹配文档根元素</p>\n</li>\n<li>\n<p><code>:first-child</code> ：匹配该元素所有子孙中的老大</p>\n</li>\n<li>\n<p><code>:last-child</code> ：匹配该元素所有子孙中的老小</p>\n</li>\n<li>\n<p><code>:only-child</code> ：匹配该元素所有子孙中的独生子女。</p>\n</li>\n<li>\n<p><code>:nth-child(an+b)</code> ：匹配该元素所有子孙中一定位置的子孙。</p>\n</li>\n<li>\n<p><code>:nth-last-child(an+b)</code> ：和上面差不多</p>\n<p><img data-src=\"/2022/08/10/note/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/image-20220810214629552.png\" alt=\"image-20220810214629552\"></p>\n<p>例：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cls<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>老大<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 红 --></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>老二<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>老三<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>老四<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>老五<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>1<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 红 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>2<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>3<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>4<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span>5<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token selector\">.cls :first-child</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>还有一些暂时懒得写了，</p>\n<p>:first-of-type—— 类似于:first-child，但不是根据在全部子元素中的位置查找元 素，而是根据拥有相同标签名的子元素中的数字顺序查找第一个元素。  :last-of-type—— 匹配每种类型的最后一个子元素。  :only-of-type—— 该选择器匹配的元素是满足该类型的唯一一个子元素。  :nth-of-type (an+b)—— 根据目标元素在特定类型下的数字顺序以及特定公式选择元 素，类似于:nth-child。  nth-last-of-type (an+b)—— 根据元素类型以及特定公式选择元素，从其中最后一个 元素往前算，类似于:nth-last-child。  :not ()—— 匹配的元素不匹配括号内的选择器。括号内的选择器必须是基 础选择器，它只能指定元素本身，无法用于排除祖先元素，同时不允许包含另一个排除 选择器。  :empty—— 匹配的元素必须没有子元素。注意，如果元素包含空格就无法由该选择器 匹配，因为空格在 DOM 中属于文本节点。写作本书时，W3C 正在考虑:blank 伪类选择 器，它跟:empty 的行为类似，但是能选中仅包含空格的元素，目前还没有浏览器支 持:blank。</p>\n<p>:disabled—— 匹配已禁用的元素，包括 input、select 以及 button 元素。  :enabled—— 匹配已启用的元素，即那些能够被激活或者接受焦点的元素。  :checked—— 匹配已经针对选定的复选框、单选按钮或选择框选项。  :invalid—— 根据输入类型中的定义，匹配有非法输入值的元素。例如，当的值不是一个合法的邮箱地址时，该元素会被匹配（Level4）。  :valid—— 匹配有合法值的元素（Level4）。  :required—— 匹配设置了 required 属性的元素（Level4）。  :optional—— 匹配没有设置 required 属性的元素（Level4）。以上并未列出全部伪类 选择器。请参阅 MDN 文档 Pseudo-classes，查看 MDN 上的完整清单。</p>\n<h2 id=\"伪元素选择器\"><a class=\"anchor\" href=\"#伪元素选择器\">#</a> 伪元素选择器 <code>::</code></h2>\n<blockquote>\n<p>伪元素类似于伪类，但是它不匹配特定状态的元素，而是<strong>匹配在文档中没有直接对应 HTML 元素的特定部分</strong>。伪元素选择器可能只匹配元素的一部分，甚至向 HTML 标记中未定义的地方 插入内容。</p>\n</blockquote>\n<p>语法：前面是一个正常的选择器，后面跟上一个伪元素选择器</p>\n<ul>\n<li><code>::before</code> ：在该元素前<strong>创建</strong>一个伪元素。该元素默认是行内元素，可用于插入文字、图片或其他形状。必须指定 content 属性才能让元素出现，例 如： <code>.menu::before</code> 。</li>\n<li><code>::after</code> ：在该元素<strong>后</strong>创建一个（伪）元素。</li>\n<li><code>::first-letter</code> ：匹配该元素的<strong>第一个文本字符</strong>的样式，例如： <code>h2::firstletter</code> 。</li>\n<li><code>::first-line</code> ：匹配该元素的<strong>第一行</strong>文本的样式。</li>\n<li><code> ::selection</code> ：匹配指定用户使用<strong>鼠标高亮选择</strong>的任意文本的样式。通常用于改变选 中文本的 background-color。只有少数属性可以使用，包括 color、background-color、 cursor、text-decoration</li>\n</ul>\n<h1 id=\"样式冲突层叠\"><a class=\"anchor\" href=\"#样式冲突层叠\">#</a> 样式冲突（层叠）</h1>\n<blockquote>\n<p>每条规则单独来看很简单，但是当两条规则提 供了冲突的样式时会发生什么呢？如果你发现有一条规则没有按照预期生效，可能是因为另一条 规则跟它冲突了。</p>\n</blockquote>\n<p>比如某个元素（标签），在不同的地方都设置了样式（比如不同的选择器中），这时候可能会造成<strong>样式冲突</strong>。比如都定义了一样的样式如字体颜色，或者复杂点的通过布局等形成冲突。那么我们得知道到底<strong>哪个样式生效</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Arial<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Wombat Coffee Roasters<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token selector\">#page-title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> monospace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>如上例子，我们在 3 个不同的<strong>选择器</strong>中定义了例子中的元素的字体，同时还在标签内通过 <code>style</code>  属性也定义了，那么到底哪个生效呢？</p>\n<p><strong>层叠</strong>指的就是这一系列规则。它决定了如何解决冲突，是 CSS 语言的基础。当声明冲突时，层叠会依据三种条件解决冲突。</p>\n<ol>\n<li>\n<p><strong>样式的来源</strong>：样式是从哪里来的，包括你的样式和浏览器默认样式等。</p>\n</li>\n<li>\n<p><strong>选择器优先级</strong>：哪些选择器比另一些选择器更重要。</p>\n</li>\n<li>\n<p><strong>源码顺序</strong>：样式在样式表里的声明顺序。</p>\n</li>\n</ol>\n<p><img data-src=\"/2022/08/10/note/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/image-20220810194821640.png\" alt=\"深入解析CSS\"></p>\n<h2 id=\"样式的来源\"><a class=\"anchor\" href=\"#样式的来源\">#</a> 样式的来源</h2>\n<p>即 样式来自哪里？你添加到网页里的样式并不是<strong>浏览器</strong>唯一 ** 使用的样式，还有其他类型或来源的样式：</p>\n<ul>\n<li><strong>浏览器默认样式</strong>（用户代理样式）</li>\n<li><strong>作者样式</strong>（你定义的样式）\n<ul>\n<li><strong>行内样式</strong>（内联样式）：即通过 <code>style</code>  属性直接定义在标签内的样式</li>\n<li><strong>选择器</strong></li>\n</ul>\n</li>\n</ul>\n<p><strong>优先级</strong>：作者样式表 &gt; 浏览器默认样式。行内样式 &gt; 选择器</p>\n<p>新建的 HTML 文档一开始在各种浏览器中都会有其默认的样式（如默认字体、边距等），而程序员定义的样式会<strong>覆盖</strong>浏览器默认的样式</p>\n<h2 id=\"优先级\"><a class=\"anchor\" href=\"#优先级\">#</a> 优先级</h2>\n<p>遇到冲突时，浏览器会尝试检查它们的<strong>优先级</strong>，优先级高的享受渲染权</p>\n<p>前面已经说过，<strong>优先级：作者样式表 &gt; 浏览器默认样式。行内样式 &gt; 选择器</strong></p>\n<p>但有个<strong>例外</strong>，就是 <code>!important</code>  声明</p>\n<h3 id=\"行内样式\"><a class=\"anchor\" href=\"#行内样式\">#</a> 行内样式</h3>\n<blockquote>\n<p>即通过 <code>style</code>  属性直接定义在标签内的样式</p>\n</blockquote>\n<p>还是之前那个例子</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span> <span class=\"token style-attr\"><span class=\"token attr-name\">style</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span><span class=\"token style language-css\"><span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> Arial<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span></span><span class=\"token punctuation\">></span></span>Wombat Coffee Roasters<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token selector\">#page-title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token selector\">.title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">font-family</span><span class=\"token punctuation\">:</span> monospace<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>根据<strong>优先级：行内样式 &gt; 选择器</strong>的规则，那么可以得出，最终生效的是 <code>style=&quot;font-family: Arial;&quot;</code></p>\n<p>那么如果没有行内样式呢？下面 3 个选择器的选哪个？</p>\n<h3 id=\"选择器优先级\"><a class=\"anchor\" href=\"#选择器优先级\">#</a> 选择器优先级</h3>\n<p>选择器内部也有<strong>优先级</strong>的划分，一般来说，<strong>id 选择器</strong>的优先级最大</p>\n<p>选择器优先级有<strong> 4 个等级</strong>：从高到低如下</p>\n<ol>\n<li><strong>id 选择器</strong>（ <code>#</code> ）:1,0,0</li>\n<li><strong>class（类）选择器</strong>（ <code>.</code> ）、<strong>属性选择器</strong>（ <code>[]</code> ）、<strong>伪类选择器</strong>（ <code>:</code> ）：0,1,0</li>\n<li><strong>标签（元素）选择器</strong>、<strong>伪元素选择器</strong>（ <code>::</code> ）：0,0,1</li>\n<li><strong>通用选择器</strong>（ <code>*</code> ）：0,0,0</li>\n</ol>\n<p><strong>同一级别</strong>的选择器优先级可以<strong>相加</strong>：因为有<strong>组合器</strong>的存在，因此有时候选择一个元素需要多个选择器搭配，这时候要算优先级就需要比对，比对规则如下：</p>\n<ol>\n<li>先找优先级 100 的（id 选择器），id 选择器多的获胜，如果一样</li>\n<li>找优先级 010 的，多的获胜，如果一样</li>\n<li>以此类推</li>\n</ol>\n<p>如下例</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cls1<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cls2<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id2<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>cls3<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id3<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            你好</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token selector\">#id1 .cls2 .cls3</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 优先级：1,2,0*/</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token selector\">.cls1 #id2 #id3</span><span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">/* 优先级：2,1,0*/</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> blue<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>最终显示：<img data-src=\"/2022/08/10/note/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/image-20220810202151603.png\" alt=\"image-20220810202151603\"></p>\n<h3 id=\"important-声明\"><a class=\"anchor\" href=\"#important声明\">#</a> !important 声明</h3>\n<p>标记为<strong>重要</strong>（important）的声明。如下所示，在声明的后面加上 <code>!important</code> ，该声明就会被标记为重要的声明。</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red <span class=\"token important\">!important</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>标记了 <code>!important</code>  的声明会被当作<strong>最高优先级</strong>的来源。&lt;font color=red&gt; 无论这个声明定义在哪，只要有 <code>!important</code> ，就是最高优先级，就按它渲染（除非和它冲突的也有 <code>!important</code> ）。&lt;/font&gt;</p>\n<h2 id=\"注意点\"><a class=\"anchor\" href=\"#注意点\">#</a> 注意点</h2>\n<p>一般<strong>不建议</strong>使用 <code>!important</code> ，因为如果要覆盖这个样式，又要用个 <code>!important</code> ，导致后面样式优先级越来越大，越来越难改</p>\n<p><strong>id 选择器</strong>同理，优先级也太大。</p>\n<h2 id=\"源码顺序\"><a class=\"anchor\" href=\"#源码顺序\">#</a> 源码顺序</h2>\n<p>顾名思义，<strong>相同优先级</strong>的情况下，写在<strong>越后面</strong>的优先级越高</p>\n<h2 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h2>\n<p>这时候再来看看之前的图</p>\n<p><img data-src=\"/2022/08/10/note/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/image-20220810194821640.png\" alt=\"深入解析CSS\"></p>\n<p>因此浏览器判断渲染哪个样式的流程一般如下：</p>\n<ol>\n<li>\n<p>首先看样式是默认样式还是用户定义的，优先选择<strong>用户定义</strong>的。如果是用户定义的→</p>\n</li>\n<li>\n<p>是<strong>行内样式</strong>还是<strong>选择器</strong>内的，优先选择<strong>行内样式</strong>。如果是选择器→</p>\n</li>\n<li>\n<p>判断选择器的<strong>优先级</strong></p>\n<ol>\n<li>首先看 id 选择器数量，选择<strong>数量多</strong>的，如果一样</li>\n<li>看优先级 010（类选择器）的数量，选择<strong>数量多</strong>的，依次类推</li>\n</ol>\n<p>如果还是一样→</p>\n</li>\n<li>\n<p>看<strong>源码顺序</strong>，哪个定义在<strong>后面</strong>优先选哪个。</p>\n</li>\n<li>\n<p><strong>额外规则</strong>：有 **!important<strong> 选</strong>！important**，如果冲突的样式也有 **!important**，则再按照以上规则择优</p>\n</li>\n</ol>\n<p>如果一个<strong>声明</strong>（针对某个样式的<strong>一行代码</strong>）在层叠中 “胜出”，它就被称作一个<strong>层叠值</strong>。元素的每个属性最多只有一个层叠值。</p>\n<h1 id=\"继承\"><a class=\"anchor\" href=\"#继承\">#</a> 继承</h1>\n<p>子元素会<strong>继承</strong>父元素的<strong>部分样式</strong>，主要是<strong>文本相关</strong>的，如：</p>\n<ul>\n<li>color：字体颜色</li>\n<li>font：字体\n<ul>\n<li>font-family：字体（宋体、黑体...）</li>\n<li>font-size：字体大小</li>\n<li>font-weight：字体宽度（控制粗细）</li>\n<li>font-variant：字母的大小写</li>\n<li>font-style：字体风格（斜体..）</li>\n</ul>\n</li>\n<li>line-height：行高</li>\n<li>text-align：对齐方式（水平）</li>\n<li>text-indent：首行缩进</li>\n<li>text-transform：也是字母大小写</li>\n<li>white-space：是否超出换行（wrap）</li>\n<li>letter-spacing：字体间距（类似行间距）</li>\n<li>word-spacing：单词间距</li>\n</ul>\n<p>还有一些别的特殊属性，如：</p>\n<p><strong>列表属性</strong>：list-style、list-style-type、 list-style-position 以及 list-style-image。</p>\n<p><strong>表格边框属性</strong>： border-collapse 和 border-spacing</p>\n<h2 id=\"继承属性冲突\"><a class=\"anchor\" href=\"#继承属性冲突\">#</a> 继承属性冲突</h2>\n<p>继承属性会顺序传递给后代元素，直到它被层叠值<strong>覆盖</strong>。</p>\n<p>也就是说，继承的<strong>优先级非常低</strong>，只要定义了新的样式，即可被覆盖</p>\n<h2 id=\"继承覆盖层叠-inherit\"><a class=\"anchor\" href=\"#继承覆盖层叠inherit\">#</a> 继承覆盖层叠 <code>inherit</code></h2>\n<p>有时，我们想用继承代替一个层叠值。这时候可以用 <code>inherit</code>  关键字。可以用它来覆盖另 一个值，这样该元素就会继承其父元素的值</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">.footer</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> #666<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token property\">background-color</span><span class=\"token punctuation\">:</span> #ccc<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token property\">padding</span><span class=\"token punctuation\">:</span> 15px 0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">text-align</span><span class=\"token punctuation\">:</span> center<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 14px<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token selector\">.footer a</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token property\">color</span><span class=\"token punctuation\">:</span> inherit<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token property\">text-decoration</span><span class=\"token punctuation\">:</span> underline<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>当然，前提是 <code>inherit</code>  的选择器优先级需要<strong>大于</strong>要覆盖的那个（相当于是生成新的层叠值，只不过<strong>引用</strong>了父元素的属性值）</p>\n<p>这样做的<strong>好处</strong>是：相当于<strong>绑定</strong>了父元素，当父元素发生改变时，它也会跟着改变</p>\n<h2 id=\"重置样式-initial\"><a class=\"anchor\" href=\"#重置样式initial\">#</a> 重置样式 <code>initial</code></h2>\n<p>有时，你需要撤销作用于某个元素的样式。这可以用 <code>initial</code>  关键字来实现。使用 <code>initial</code>  可以将其重置为<strong>默认值</strong>，这么做的好处是不需要思考太多。</p>\n<p>&lt;font color=red&gt; 其实就是<strong>继承</strong>了 <code>body</code>  的样式 &lt;/font&gt;</p>\n<p><code>initial</code> ：初始化</p>\n<h1 id=\"简写属性覆盖层叠值\"><a class=\"anchor\" href=\"#简写属性覆盖层叠值\">#</a> 简写属性覆盖层叠值</h1>\n<p>简写属性是用于同时给多个属性赋值的属性。比如 <code>font</code>  是一个简写属性，可以用于设置多 种字体属性。它指定了 <code> font-style</code> 、 <code>font-weight</code> 、 <code>font-size</code> 、 <code>font-height</code>  以 及 <code> font-family</code></p>\n<p><strong>简写属性会默默覆盖其他样式</strong></p>\n<p>简写属性可以省略一些值，只指定我们关注的值。但是要知道，这样做<strong>仍然会设置</strong>省略的值，即它们会被<strong>隐式</strong>地设置为<strong>初始值</strong></p>\n<p>如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>page-title<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>title<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>Wombat Coffee Roasters<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>style</span><span class=\"token punctuation\">></span></span><span class=\"token style\"><span class=\"token language-css\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token selector\">h1</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token property\">font-weight</span><span class=\"token punctuation\">:</span> bold<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token selector\">#page-title</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token property\">font</span><span class=\"token punctuation\">:</span> 15px Helvetica<span class=\"token punctuation\">,</span> Arial<span class=\"token punctuation\">,</span> sans-serif<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>style</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"/2022/08/10/note/CSS/%E9%80%89%E6%8B%A9%E5%99%A8%E4%B8%8E%E4%BC%98%E5%85%88%E7%BA%A7/image-20220810210402946.png\" alt=\"image-20220810210402946\"> 可以看到，前面设置的<strong>粗体</strong>被覆盖了，变成了默认粗细</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/10/note/CSS/%E7%9B%92%E6%A8%A1%E5%9E%8B/",
            "url": "https://nitgod1996.com/2022/08/10/note/CSS/%E7%9B%92%E6%A8%A1%E5%9E%8B/",
            "title": "CSS盒模型",
            "date_published": "2022-08-10T10:06:22.000Z",
            "content_html": "<blockquote>\n<p>容器从某种程度上来说其实就是父元素</p>\n</blockquote>\n<h1 id=\"css-基础框盒模型盒子模型\"><a class=\"anchor\" href=\"#css基础框盒模型盒子模型\">#</a> css 基础框盒模型（盒子模型）</h1>\n<p>CSS 传统布局基于盒子模型，所有元素都在一个盒子（容器）中</p>\n<p>每个盒子有 4 个边界：</p>\n<ol>\n<li><em>内容边界</em> <em>Content edge</em>（最里面显示内容）</li>\n<li><em>内边距边界</em> <em>Padding Edge</em>（content + 内边距 padding）</li>\n<li><em>边框边界</em> <em>Border Edge</em>（padding edge + 边框宽度 border width）</li>\n<li><em>外边框边界</em> <em>Margin Edge</em>（border edge + 外边距 margin）</li>\n</ol>\n<p><img data-src=\"/2022/08/10/note/CSS/%E7%9B%92%E6%A8%A1%E5%9E%8B/boxmodel-(3).png\" alt=\"CSS Box model\"></p>\n<p><img data-src=\"/2022/08/10/note/CSS/%E7%9B%92%E6%A8%A1%E5%9E%8B/boxmodel.gif\" alt=\"CSS 框模型\"></p>\n<h2 id=\"1-内容边界\"><a class=\"anchor\" href=\"#1-内容边界\">#</a> 1. 内容边界</h2>\n<p>容纳着元素的 “真实内容”，例如文本、图像等，其尺寸为内容宽度和内容高度确定。</p>\n<p>主要 css 属性：</p>\n<ul>\n<li>\n<p><code>width</code> ：内容宽度。% 或 px 或 rem。% 是相对父元素的百分比</p>\n</li>\n<li>\n<p><code>height</code> ：内容高度。% 或 px 或 rem</p>\n</li>\n<li>\n<p><code>min-width</code> ：最小内容宽度。这种一般是针对可以灵活变动的元素</p>\n</li>\n<li>\n<p><code>max-width</code> ：最大内容宽度</p>\n</li>\n<li>\n<p><code>min-height</code> ：最小内容高度</p>\n</li>\n<li>\n<p><code>max-height</code> ：最大内容高度</p>\n</li>\n<li>\n<p><code>box-sizing</code> ：</p>\n<ul>\n<li><code>content-box</code> ：默认。在宽度和高度<strong>之外</strong>绘制元素的内边距和边框。&lt;font color=red&gt;height 和 width 绑定内容边界 &lt;/font&gt;</li>\n<li><code>border-box</code> ：<strong>向内</strong>绘制内边距和边框。换句话说，&lt;font color=red&gt;height 和 width 绑定边框边界 &lt;/font&gt;</li>\n</ul>\n<p><img data-src=\"/2022/08/10/note/CSS/%E7%9B%92%E6%A8%A1%E5%9E%8B/../../%25E5%2589%258D%25E7%25AB%25AF/HTML+CSS/image-20220224221608202.png\" alt=\"image-20220224221608202\"> <img data-src=\"/2022/08/10/note/CSS/%E7%9B%92%E6%A8%A1%E5%9E%8B/image-20220224221629723.png\" alt=\"image-20220224221629723\"></p>\n</li>\n</ul>\n<h2 id=\"2-内边距边界\"><a class=\"anchor\" href=\"#2-内边距边界\">#</a> 2. 内边距边界</h2>\n<p>内容边界 + padding。是边框（border）内的那块空间。<strong>内边距</strong>则是内容和边框之间的那块空白区域</p>\n<p>主要 css 属性：</p>\n<ul>\n<li><code>padding-top</code> ：上内边距。px、%、rem</li>\n<li><code>padding-right</code> ：右内边距。</li>\n<li><code>padding-bottom</code> ：下内边距</li>\n<li><code>padding-left</code> ：左内边距</li>\n<li><code>padding</code> ：内边距，以上的<strong>简写</strong></li>\n</ul>\n<h2 id=\"3-边框边界\"><a class=\"anchor\" href=\"#3-边框边界\">#</a> 3. 边框边界</h2>\n<p>内边距边界 + 边框宽度。边框由 <code>border</code>  属性控制</p>\n<p>主要 css 属性：</p>\n<ul>\n<li><code>border-width</code> ：边框宽度。</li>\n<li><code>border-style</code> ：边框样式：\n<ul>\n<li><code>dotted</code> \t定义点状</li>\n<li><code>dashed</code> \t定义虚线</li>\n<li><code>solid</code> \t定义实线。</li>\n<li><code>double</code> \t定义双线</li>\n</ul>\n</li>\n<li><code>border-color</code> ：边框颜色</li>\n<li><code>border</code> ：以上简写</li>\n<li>可以分别控制各边边框\n<ul>\n<li><code>border-top</code> ：上边框\n<ul>\n<li><code>border-top-width</code> ：上边框宽度</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>box-sizing</code> ：如果 <code>box-sizing</code>  设置 <code>border-box</code> ，则可用 <code>width</code>  和 <code>height</code>  设置边框边界</li>\n</ul>\n<h2 id=\"4-外边距边界\"><a class=\"anchor\" href=\"#4-外边距边界\">#</a> 4. 外边距边界</h2>\n<p>盒子最外围边界，边框边界 + margin。<strong>外边距</strong>是边框与别的盒子之间的空白区域</p>\n<p>主要 css 属性：</p>\n<ul>\n<li><code>margin-top</code> ：上外边距。px、%、rem</li>\n<li><code>margin-right</code> ：右外边距。</li>\n<li><code>margin-bottom</code> ：下外边距</li>\n<li><code>margin-left</code> ：左外边距</li>\n<li><code>margin</code> ：外边距，以上的<strong>简写</strong></li>\n</ul>\n<h3 id=\"41-负外边距\"><a class=\"anchor\" href=\"#41-负外边距\">#</a> 4.1 负外边距</h3>\n<p>不同于内边距和边框宽度，外边距可以设置为<strong>负值</strong>。负外边距有一些特殊用途，比如让元素<strong>重叠</strong>或者拉伸到<strong>比容器还宽</strong>。</p>\n<p>虽然负外边距在有些时候很实用，不过还是要尽量避免，不然网页样式可能会失控。</p>\n<h3 id=\"42-外边距折叠\"><a class=\"anchor\" href=\"#42-外边距折叠\">#</a> 4.2 外边距折叠</h3>\n<p>当<strong>顶部</strong>和<strong>底部</strong>的外边距相邻时，就会重叠，产生单个外边距。这种现象被称作<strong>折叠</strong>。折叠规则是取<strong>较大</strong>的边距。（其实就是把外边距视为<strong>自己边框 - 相邻盒子边框的距离</strong>）。&lt;font color=red&gt; 只有上下外边距会重叠，左右不会 &lt;/font&gt;</p>\n<p>如：段落（ <code>&lt;p&gt;</code> ）默认有  <code>1em</code>  的上外边 距和  <code>1em</code>  的下外边距。但当前后叠放两个段落时，它们的外边 距不会相加产生一个  <code>2em</code>  的间距，而会<strong>折叠</strong>，只产生  <code>1em</code>  的间隔。</p>\n<blockquote>\n<p>折叠外边距就像 “个人空间”。如果在公交车站站着两个人，他们每个人都认为较为舒适的 个人空间应为 3 英尺 ①，那么他们就会乐意间隔 3 英尺，而不必间隔 6 英尺才让双方满意。</p>\n</blockquote>\n<h4 id=\"421-多个外边距折叠\"><a class=\"anchor\" href=\"#421-多个外边距折叠\">#</a> 4.2.1 多个外边距折叠</h4>\n<p><strong>所有</strong>在页面上紧挨着的容器都<strong>可能</strong>会产生外边距折叠。如下例</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>main</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>main<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h2</span><span class=\"token punctuation\">></span></span>Come join us!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h2</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token comment\">&lt;!-- 无论嵌套多少层，都会产生折叠 --></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            The Franklin Running club meets at 6:00pm</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>main</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>上例中，有 3 个不同的外边距折叠到一块了： <code>&lt;h2&gt;</code>  底部的外边距、 <code>&lt;div&gt;</code>  顶部的外边距、 <code>&lt;p&gt;</code>  顶部的外边距。计算值分别是 19.92px、0px、16px。因此最终间隔还是 19.92px， 也就是三者中<strong>最大的值</strong>。</p>\n<p>但是父子间的外边距折叠有个前提，那就是<strong> padding 和 border=0</strong></p>\n<h4 id=\"422-避免外边距折叠\"><a class=\"anchor\" href=\"#422-避免外边距折叠\">#</a> 4.2.2 避免外边距折叠</h4>\n<p>外边距折叠从某种意义上来说也是<strong>外边距扩展</strong>。因为当父元素下面紧挨着的子元素外边距<strong>大于</strong>父元素的外边距时，父元素的外边距会变大（和子元素一样），因此有时候避免外边距折叠是很有必要的。</p>\n<p>有以下避免方法：</p>\n<ul>\n<li><strong>父元素</strong> <code>overflow: auto</code> （或者非 <code> visible</code>  的值），防止和<strong>子元素</strong>折叠。这种方式<strong>副作用最小</strong>。</li>\n<li><strong>父元素</strong>加上边框或者内边距，防止和<strong>子元素</strong>折叠</li>\n<li>设置为<strong>浮动元素 float</strong>、<strong>内联块 inline</strong>、<strong>绝对定位 absolute</strong> 或<strong>固定定位 fixed</strong> 时，外边距不会在它外面折叠</li>\n<li>使用  <code>Flexbox </code> 布局时，<strong>弹性布局</strong>内的元素之间不会发生外边距折叠。<strong>网格布局</strong>同理</li>\n<li>当元素显示为  <code>table-cell</code>  时不具备外边距属性，因此它们不会折叠</li>\n</ul>\n<h1 id=\"容器尺寸问题\"><a class=\"anchor\" href=\"#容器尺寸问题\">#</a> 容器尺寸问题</h1>\n<blockquote>\n<p>容器的宽度默认由其性质决定（块级元素还是行内元素）；容器的高度默认<strong>由内容决定</strong>， 而不是容器自己决定。</p>\n</blockquote>\n<h2 id=\"1-溢出问题\"><a class=\"anchor\" href=\"#1-溢出问题\">#</a> 1. 溢出问题</h2>\n<p>当明确设置一个容器的尺寸时，内容可能会<strong>溢出</strong>容器。如下</p>\n<p><img data-src=\"/2022/08/10/note/CSS/%E7%9B%92%E6%A8%A1%E5%9E%8B/image-20220811162054496.png\" alt=\"image-20220811162054496\"></p>\n<p>这种情况可以通过 <code>overflow</code>  属性控制</p>\n<ul>\n<li><code>visible</code> （默认值）：溢出可见。 所有内容可见，即使溢出容器边缘</li>\n<li><code>hidden</code> ：溢出隐藏。溢出容器内边距边缘的内容<strong>被裁剪</strong>，无法看见。</li>\n<li><code>scroll</code> ：溢出滚动。容器出现<strong>滚动条</strong>，用户可以通过滚动查看剩余内容。</li>\n<li><code>auto</code> ：只有内容溢出时容器才会出现<strong>滚动条</strong>。</li>\n</ul>\n<p>可以用  <code>overflow-x</code>  属性<strong>单独控制水平方向</strong>的溢出，或者用  <code>overflow-y</code>  控制<strong>垂直方向</strong> 溢出。</p>\n<h2 id=\"2-百分比宽高\"><a class=\"anchor\" href=\"#2-百分比宽高\">#</a> 2. 百分比宽高</h2>\n<p>百分比参考的是元素容器块（其实就是父元素）的大小，而容器的<strong>高度</strong>通常是由 <strong>子元素的高度</strong>决定的（如果没有显示的设置过的话）。那么如果使用<strong>百分比</strong>设置子元素的<strong>高度</strong>，那么就会造成<strong>死循环</strong>，就会被浏览器忽略</p>\n<p>因此，要想让百分比高度生效，必须显示地声明容器（父元素）的高度</p>\n<h1 id=\"等间距排列猫头鹰选择器\"><a class=\"anchor\" href=\"#等间距排列猫头鹰选择器\">#</a> 等间距排列（猫头鹰选择器）</h1>\n<p>经常会有这样的场景：一排组件（如卡片）需要等间距的排列，最左边和最右边都<strong>紧贴</strong>屏幕或外部容器（没有最左外边距和最右的外边距）。</p>\n<p>这就有了个问题，统一设置外边距总有一边是会有空白的，有时候会把所有都设置一个外边距，然后到最边上的一个元素用 0 覆盖。其实有个更加方便的方法就是使用<strong>猫头鹰选择器</strong> <code>* + *</code> 。</p>\n<p><code>* + *</code> ：选中所有元素的除了兄弟中排第一的所有元素。</p>\n<p>这样一来，就可以设置除了第一个之外的所有卡片的左边距即可。</p>\n<p>当然，也可以只用 <code>+ *</code> ，针对性地选中对应容器下的元素</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/",
            "url": "https://nitgod1996.com/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/",
            "title": "JavaScript内存、作用域和闭包",
            "date_published": "2022-08-03T12:09:22.000Z",
            "content_html": "<h1 id=\"执行上下文作用域\"><a class=\"anchor\" href=\"#执行上下文作用域\">#</a> 执行上下文（作用域）</h1>\n<blockquote>\n<p>任何变量（不管包含的是原始值还是引用值）都存在于某个执行上下文中（也称作用域）。</p>\n</blockquote>\n<p>以上是红宝书中的原话。（之前一直搞不懂上下文和作用域有什么区别。。。其实就是同一个东西）</p>\n<p>作用域决定了变量的<strong>生命周期</strong>，以及他们可以访问代码的哪些部分。</p>\n<p><code>JavaScript</code>  有 3 种作用域：</p>\n<ul>\n<li><strong>全局作用域</strong>：最外层作用域，即 <code>window</code>  对象的作用域</li>\n<li><strong>函数作用域</strong>：函数内的作用域，也是最复杂的一个作用域。\n<ul>\n<li><code>var</code>  的声明范围即为函数作用域</li>\n</ul>\n</li>\n<li><strong>块级作用域</strong>： <code>&#123;&#125;</code>  包裹的作用域，如 <code>for</code> 、 <code>while</code> 、 <code>if</code>  等块。单独的 <code>&#123;&#125;</code>  块也算\n<ul>\n<li>函数作用域也算块级作用域</li>\n<li><code>let</code>  和 <code>const</code>  的声明范围是块级作用域</li>\n</ul>\n</li>\n</ul>\n<p>每个作用域都有一个关联的<strong>变量对象</strong>，保存该作用域下<strong>定义</strong>的所有变量和函数。</p>\n<p>如果是<strong>函数作用域</strong>，其一开始就有个定义对象 <code>arguments</code>  作为<strong>变量对象</strong></p>\n<h2 id=\"函数作用域\"><a class=\"anchor\" href=\"#函数作用域\">#</a> 函数作用域</h2>\n<p>每个函数<strong>调用</strong>都有一个专属的函数作用域，其所有代码都<strong>执行完毕</strong>后会销毁。</p>\n<p>当代码执行流进入函数，函数的作用域被推到一个作用域栈（上下文栈）上（此时原本的作用域比如全局作用域就被压在了下面），执行完毕后弹出，继续执行原来的作用域的代码。</p>\n<p>如下代码：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">changeColor</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">changeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ol>\n<li>一开始代码执行流在全局作用域，<strong>作用域栈</strong>内只有一个全局作用域（既是堆顶，也是堆底）\n<ol>\n<li>在第 1 行创建了一个 <code>color</code>  变量并赋值 <code>blue</code></li>\n<li>在第 3 行定义了一个 <code>changeColor</code>  的 <code>Function</code>  对象</li>\n</ol>\n</li>\n<li>在第 7 行执行 <code>changeColor()</code> ，代码执行流进入<strong>函数 <code>changeColor()</code>  的作用域</strong>\n<ol>\n<li>将 ** <code>changeColor</code>  作用域 ** 压入作用域栈，成为堆顶</li>\n<li><strong>全局作用域</strong>被压在 <code>changeColor</code>  作用域下</li>\n</ol>\n</li>\n<li><code>changeColor()</code>  的代码执行完毕，弹出栈顶，所有都被销毁（如临时创建的 <code>a</code>  以及 <code>arguments</code> ）</li>\n<li>代码执行流重新进入<strong>全局作用域</strong>，继续往下执行</li>\n</ol>\n<h2 id=\"作用域链\"><a class=\"anchor\" href=\"#作用域链\">#</a> 作用域链</h2>\n<p><strong>作用域链</strong>：决定各级上下文访问变量和函数的<strong>顺序</strong></p>\n<blockquote>\n<p>作用域中的代码被执行的时候，会创建<strong>变量对象</strong>的一个<strong>作用域链</strong>。<strong>正在执行</strong>的作用域的变量对象始终位于作用域链的最前端。</p>\n<p>作用域链中的下一个变量对象来自包含上下文（外面一层），再下一个对象来自再下一个包含上下文，以此类推至全局上下文。</p>\n</blockquote>\n<p>上面例子中的 <code>changeColor()</code>  的作用域链包含 2 个<strong>变量对象</strong>，一个是他本身的变量对象（包含 <code>arguments</code>  和 <code>a</code> ），另一个是全局作用域的变量对象（包含 <code>color</code> ）。因为能在作用域链中找到 <code>color</code> ，因此在 <code>changeColor()</code>  中能访问 <code>color</code></p>\n<p>在作用域链上能找到的变量，均能被访问或修改。（一般来说，外层作用域的变量对象均在作用域链上）</p>\n<hr>\n<p>看一个例子：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">changeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> anotherColor <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> temp <span class=\"token operator\">=</span> anotherColor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        anotherColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        color <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">changeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>红宝书上的作用域链图是下侧为<strong>最前端</strong>。不过我感觉有些别扭，下面画了些以顶部为<strong>最前端</strong>的简图</p>\n<ul>\n<li>\n<p>代码流执行到第 1 行的作用域链如下：</p>\n<ul>\n<li>全局作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221352152.png\" alt=\"image-20220803221352152\"></li>\n</ul>\n</li>\n<li>\n<p>执行到第 2 行：</p>\n<ul>\n<li>全局作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221633548.png\" alt=\"image-20220803221633548\"></li>\n</ul>\n</li>\n<li>\n<p>执行到第 11 行，进入 <code>changeColor</code>  作用域：红色代表 <code>changeColor</code>  函数作用域</p>\n<ul>\n<li>\n<p>执行到 <code>changeColor</code>  作用域内第 1 行的代码（第 3 行的位置 <code>let anotherColor = 'red';</code> ）</p>\n<ul>\n<li>\n<p>全局作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221633548.png\" alt=\"image-20220803221633548\"></p>\n</li>\n<li>\n<p><code>anotherColor</code>  作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221823039.png\" alt=\"image-20220803221823039\"></p>\n</li>\n</ul>\n</li>\n<li>\n<p>执行到 <code>changeColor</code>  作用域内第 2 行的代码（第 4 行的位置 <code>function swap()</code> ）</p>\n<ul>\n<li>全局作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221633548.png\" alt=\"image-20220803221633548\"></li>\n<li><code>anotherColor</code>  作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221928812.png\" alt=\"image-20220803221928812\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>执行到 <code>changeColor</code>  作用域内第 9 行的代码，进入 <code>swap</code>  作用域：这个新的颜色代表 <code>swap</code>  函数作用域</p>\n<ul>\n<li>执行到 <code>swap</code>  作用域内第 1 行的代码（第 5 行的位置 <code>let temp = anotherColor;</code> ）\n<ul>\n<li>全局作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221633548.png\" alt=\"image-20220803221633548\"></li>\n<li><code>anotherColor</code>  作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803221928812.png\" alt=\"image-20220803221928812\"></li>\n<li><code>swap</code>  作用域链：<img data-src=\"/2022/08/03/note/JavaScript/%E5%86%85%E5%AD%98%E3%80%81%E4%BD%9C%E7%94%A8%E5%9F%9F%E3%80%81%E9%97%AD%E5%8C%85/image-20220803222013207.png\" alt=\"image-20220803222013207\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>到 <code>changeColor</code>  作用域内第 9 行的代码执行完毕，释放 <code>swap</code>  作用域</p>\n</li>\n<li>\n<p>第 11 行执行完毕，释放 <code>changeColor</code>  的作用域</p>\n</li>\n</ul>\n<blockquote>\n<p><code>JavaScript</code>  引擎在查找变量时<strong>顺着作用域链</strong>找的，先找最前端的正在执行的作用域的变量对象，没找到再一层层往下找，直到全局作用域。因此，&lt;font color=red&gt; 访问局部变量比访问全局变量要快得多。&lt;/font&gt;</p>\n</blockquote>\n<h1 id=\"内存\"><a class=\"anchor\" href=\"#内存\">#</a> 内存</h1>\n<h2 id=\"垃圾回收\"><a class=\"anchor\" href=\"#垃圾回收\">#</a> 垃圾回收</h2>\n<p><code>JavaScript</code>  会自动释放内存，其基本思路是：</p>\n<ul>\n<li>确定哪些变量不会再被使用，然后释放他的内存</li>\n<li><strong>周期性</strong>：垃圾回收程序是每隔一段时间运行一次的</li>\n</ul>\n<p>但是单靠算法也无法完美避免内存的泄露，因此需要理解垃圾回收机制，注意避免。</p>\n<h3 id=\"回收算法\"><a class=\"anchor\" href=\"#回收算法\">#</a> 回收算法</h3>\n<p>前面说过，回收程序在确定变量不会再被使用时，释放他的内存，那么怎么确认呢，就需要跟踪记录哪些变量还有可能使用。</p>\n<p>一般来说，局部变量在其作用域执行时，不会被删除。此时，内存会给他分配空间以保存相应的值。当作用域中的代码执行完后，里面的变量基本就不会被使用了，此时就会释放该作用域占用的所有内存。但有一种情况例外，就是当局部变量被其他作用域的变量<strong>引用</strong>（在其他作用域被使用）时，回收程序会认为他扔需要使用，就不会释放内存。</p>\n<p>如何标记未使用的变量主要有以下两种方式：<strong>标记清理</strong>和<strong>引用计数</strong></p>\n<h4 id=\"标记清理常用\"><a class=\"anchor\" href=\"#标记清理常用\">#</a> 标记清理（常用）</h4>\n<p>标记清理是针对<strong>变量</strong>（变量名）的</p>\n<ol>\n<li>\n<p>当变量进入上下文时（如函数内声明一个变量），这个变量会被加上一个<strong>存在于上下文</strong>的标记。</p>\n<p>标记方法有很多（这都不重要）</p>\n<ul>\n<li>如反转某一位</li>\n<li>或维护 “上下文中” 和 “不在上下文中” 的变量列表</li>\n</ul>\n</li>\n<li>\n<p>当变量离开上下文时（上下文内的代码执行完），也会被加上一个<strong>离开上下文</strong>的标记。</p>\n</li>\n<li>\n<p>垃圾回收程序运行时，会标记（待删除）内存中存储的所有变量。然后将</p>\n<ul>\n<li>所有上下文中的变量</li>\n<li>被在上下文中的变量<strong>引用</strong>的变量</li>\n</ul>\n<p>的标记去掉，剩下的还带着（待删除）标记的变量就是待删除的了。（因为不会再被访问了）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 此时，a 和 b 均在上下文中，且 a 被 b 引用</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">method</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> method1 <span class=\"token operator\">=</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 此时，a 已经离开上下文，但 a 仍在被 b 引用</span></pre></td></tr></table></figure></li>\n<li>\n<p>到了回收周期进行清理待删除标记的变量，并回收他们的内存。</p>\n</li>\n</ol>\n<h4 id=\"引用计数\"><a class=\"anchor\" href=\"#引用计数\">#</a> 引用计数</h4>\n<p>引用计数是针对<strong>值</strong>（变量值）的</p>\n<ul>\n<li>\n<p>当声明一个变量并为它赋予一个<strong>引用值</strong>时，这个<strong>值</strong>的引用数为 1</p>\n<ul>\n<li>\n<p>如果这个<strong>值</strong>又被赋给了另一个变量，那么引用数 + 1</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// [1, 2, 3] 的引用数为 1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3] 的引用数为 2</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>如果保存该<strong>值</strong>的变量被覆盖了，则引用数 - 1</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// [1, 2, 3] 的引用数为 1</span></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>引用计数有一个<strong>严重</strong>的缺陷，就是当 a 引用 b，而 b 又引用 a 时，会造成<strong>循环引用</strong>，导致这两个值一直不被释放</p>\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h4>\n<ul>\n<li><strong>标记清理</strong>是针对<strong>变量</strong>（变量名）的</li>\n<li><strong>引用计数</strong>是针对<strong>值</strong>（变量值）的</li>\n<li><strong>标记清理</strong>比引用计数更常用，也更好</li>\n</ul>\n<h3 id=\"回收周期\"><a class=\"anchor\" href=\"#回收周期\">#</a> 回收周期</h3>\n<p>垃圾回收程序周期运行，当垃圾累积到一定数量会影响性能，因此回收周期（时间调度）很重要。</p>\n<p>回收频率太低会导致<strong>垃圾积压</strong>，频率太高会到处<strong>小内存片泛滥</strong>。</p>\n<p>IE7 后，JavaScript 引擎的垃圾回收程序为<strong>动态</strong>改变分配变量、字面量或数组槽位等阈值。</p>\n<ul>\n<li>\n<p>设一个初始阈值。</p>\n</li>\n<li>\n<p>如果有一次回收内存不到已分配的 15%，则阈值会翻倍。</p>\n</li>\n<li>\n<p>如果有一次回收内存达到 85%，则阈值重置为默认值。</p>\n</li>\n</ul>\n<p>（有点像网络拥塞控制的慢开始和快重传）</p>\n<h2 id=\"内存管理\"><a class=\"anchor\" href=\"#内存管理\">#</a> 内存管理</h2>\n<h3 id=\"手动释放内存\"><a class=\"anchor\" href=\"#手动释放内存\">#</a> 手动释放内存</h3>\n<p><code>JavaScript</code>  是自动回收内存的，但也可以通过<strong>解除引用</strong>的方式手动释放内存。</p>\n<blockquote>\n<p>如果数据不再必要，那么把他设置成 <code>null</code> ，从而释放引用</p>\n</blockquote>\n<p>这种方法最适合<strong>全局变量</strong>，因为局部变量在超出作用域会被自动接触引用，而全局变量会一直存在直到浏览器关闭</p>\n<p>&lt;font color=red&gt; 注：解除引用不是立即回收相关内存，而是在<strong>下一次</strong>垃圾回收的时候释放 &lt;/font&gt;</p>\n<h3 id=\"多用-let-和-const\"><a class=\"anchor\" href=\"#多用let和const\">#</a> 多用 let 和 const</h3>\n<p>let 和 const 以块级作用域为单位，比 var 更有助于被回收</p>\n<h3 id=\"善用隐藏类\"><a class=\"anchor\" href=\"#善用隐藏类\">#</a> 善用隐藏类</h3>\n<p>能够共享相同隐藏类的对象性能更好。</p>\n<p>算是属于 V8JavaScript 引擎（Chrome 使用这个引擎）的特性。</p>\n<p>通过下面这个例子来解释：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> a2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候 <code>a1</code>  和 <code>a2</code>  同属于一个类（ <code>Article</code> ）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a2<span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span><span class=\"token string\">'jake'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候 <code>a1</code>  和 <code>a2</code>  还是同属于一个类（ <code>Article</code> ），但他们不属于同一个<strong>隐藏类</strong>。其中， <code>a2</code>  的隐藏类比 <code>a1</code>  多了一个 <code>author</code>  属性</p>\n<p>再看下例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Article</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span>author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> a2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jake\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样的，此时 2 者属于同一个类，也属于同一个隐藏类</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> a1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在， <code>a1</code>  和 <code>a2</code>  又不属于同一个隐藏类了。</p>\n<hr>\n<p>&lt;font color=red&gt; 能够共享隐藏类的对象<strong>性能更好</strong>，即尽可能少的制造隐藏类 &lt;/font&gt;</p>\n<p>因此，我们可以把 <code>delete a1.author</code>  改成下面这样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用这个代替 delete</span></pre></td></tr></table></figure><h3 id=\"对象池\"><a class=\"anchor\" href=\"#对象池\">#</a> 对象池</h3>\n<p>开发者无法控制什么时候开始收集垃圾，但可以<strong>间接控制触发垃圾回收的条件</strong>。</p>\n<ul>\n<li>\n<p>** 标准 1：** 对象更替速度。</p>\n<p>如果很多对象初始化，然后一下子又都超出了作用域（不再用到），那么浏览器更频繁地垃圾回收</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> result<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    result<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result<span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上面这个例子，如果多次调用 <code>addVector()</code> ，那么 <code>Vector</code>  的实例对象被频繁的创建，又很快超出作用域，生命周期很短。垃圾回收程序会发现此处对象更替速度快，则会更频繁地安排垃圾回收。</p>\n<p><strong>解决：<strong>不要频繁的创建对象，可以通过</strong>对象池</strong>来实现。</p>\n</li>\n<li>\n<p>** 对象池：** 创建一个对象池，用来管理一组可回收的对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//vectorPool：假设这是一个已经创建好的对象池对象，先不管是怎么实现的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> v1<span class=\"token operator\">=</span>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从对象池中取一个 vector 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> v2<span class=\"token operator\">=</span>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用完把 result 对象还给对象池</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>v1<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>v2<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 函数改成这样</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    result<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    result<span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样垃圾回收检测就不会发现有对象更替，也就不会频繁的垃圾回收。</p>\n</li>\n</ul>\n<hr>\n<p>一般<strong>对象池</strong>都是用<strong>数组</strong>实现的，JavaScript 的数组大小是动态可变的， <code>Array.push()</code>  操作有可能会导致不必要的垃圾回收，因此最好一开始就初始化创建一个大小够用的数组作为<strong>对象池</strong>。</p>\n<p>原话是这样的，但不是很理解。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> vector<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>引擎会删除大小为 100 的数组，再创建一个大小为 200 的数组。垃圾回收程序看到这个删除操作，可能会跑过来进行一次垃圾回收。</p>\n</blockquote>\n<p>不知道这个是不是和 <code>C++</code>  的 capacity 一样，当数组长度超过 <code>capacity</code>  时，加长 <code>capacity</code> ，然后之后的 <code>push</code>  就不需要再花大力气分配新的内存了。但我看 JavaScript 好像并不是这样，所以不是很理解，以下是 CSDN 中说的</p>\n<blockquote>\n<p>JavaScript 据元素的增加和删除来动态调整存储空间大小，内部是通过扩容和收缩机制实现</p>\n</blockquote>\n<h3 id=\"内存泄漏\"><a class=\"anchor\" href=\"#内存泄漏\">#</a> 内存泄漏</h3>\n<p><code>JavaScript</code>  的内存泄漏大部分是由<strong>不合理的引用</strong>导致的。</p>\n<ul>\n<li>\n<p>意外声明<strong>全局变量</strong>是最常见也是最容易修复的内存泄漏</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">=</span><span class=\"token string\">'jake'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里 <code>name</code>  一不小心定义在了<strong>全局作用域</strong>（ <code>window</code> ），即使 <code>setName</code>  的上下文执行完毕不再需要，也不会释放</p>\n<p>解决：只要在 <code>name</code>  前面加上 <code>var</code> 、 <code>let</code> 、 <code>const</code>  即可。（最好不要用 <code>var</code> ）</p>\n</li>\n<li>\n<p><strong>定时器</strong>可能会导致内存泄漏。（本质上是<strong>闭包</strong>引起的）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'Jack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>只要定时器一直运行，回调函数中引用的 <code>name</code>  就会一直占内存。因而就不会清理外部变量（外面那个 <code>name</code> ）</p>\n</li>\n<li>\n<p>关于闭包的泄漏，在下面会详细讲。&lt;font color=red&gt; 其实节流和防抖函数也是利用这个，使计时器一直不被回收 &lt;/font&gt;</p>\n</li>\n</ul>\n<h1 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h1>\n<blockquote>\n<p><strong>闭包</strong>指的是那些<strong>引用</strong>了另一个函数作用域中变量的函数</p>\n</blockquote>\n<p>解析一下上面这句话：</p>\n<ol>\n<li>\n<p><strong>引用</strong>：这个引用很关键，闭包不仅仅是函数内的函数，还有个重要条件是<strong>引用</strong>了另一个函数作用域的变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'jack'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这是一个闭包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这不是</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>另一个函数域：指的一般是外部域。因为只有外层的作用域的变量是可以被引用的（变量对象在<strong>作用域链</strong>后端可以被找到）</p>\n</li>\n<li>\n<p>的函数：指的是里面那层函数，上面例子中被 <code>return</code>  的函数是闭包，而不是外层的 <code>outer</code></p>\n</li>\n</ol>\n<h2 id=\"闭包的内存泄漏\"><a class=\"anchor\" href=\"#闭包的内存泄漏\">#</a> 闭包的内存泄漏</h2>\n<p>看以下例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> <span class=\"token string\">'jack'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这是一个闭包</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> method <span class=\"token operator\">=</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过引用 outer 的返回值定义一个 method 函数</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 执行 method 函数</span></pre></td></tr></table></figure><p>在定义 <code>let method = outer();</code>  这段代码，代码执行流进入 <code>outer</code>  的函数作用域，执行完毕后本来应该释放局部变量 <code>name</code> ，但因为返回了一个匿名函数（闭包），而这个匿名函数对 <code>name</code>  有所<strong>引用</strong>（需要用到），因此 <code>name</code>  实际上与这个匿名函数<strong>共生死</strong></p>\n<p>而这个匿名函数（闭包）作为返回值被 <code>method</code> <strong> 引用</strong>，又导致匿名函数与 <code>method</code>  绑定在了一起，此时 <code>method</code> →闭包→ <code>name</code> ，只要箭头左侧的变量 / 值存在，右侧的就不会被释放（反之不会）。</p>\n<p>在这个例子中， <code>method</code>  因为是全局变量，因此直到浏览器窗口被关闭前都不会被销毁，因此只要 <code>method</code>  不被别的值覆盖， <code>name</code>  也会一直在内存中。</p>\n<p>&lt;font color=red&gt; 注：匿名函数≠闭包，只是这个例子中是同一个 &lt;/font&gt;</p>\n<hr>\n<p>不过我们可以<strong>减少</strong>闭包的内存泄漏，如下例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> temp<span class=\"token operator\">=</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这里闭包引用了 <code>obj.a</code> ，从而使得 <code>obj</code>  无法释放。当 <code>obj</code>  大到一定程度的时候，会严重影响性能，而我们仅仅是需要 <code>obj.a</code>  的属性，得不偿失。</p>\n<p>可以改成下面这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    obj <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> temp<span class=\"token operator\">=</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样一来，当执行到 <code>obj = null</code>  时， <code>obj</code>  会被<strong>解除引用</strong>（本质上是解除了 <code>obj</code>  对其他变量的引用，而 <code>obj.a</code>  由于还存在被 <code>a</code>  的引用，不会被释放），在下一次垃圾回收时会被释放。而 <code>a</code>  则会一直存在在内存中，但大大降低了内存的泄漏。</p>\n<h2 id=\"闭包的-this-指向\"><a class=\"anchor\" href=\"#闭包的this指向\">#</a> 闭包的 this 指向</h2>\n<p>如果闭包不是使用<strong>箭头函数</strong>定义，那么其 <code>this</code>  会在<strong>运行</strong>（被调用）时绑定到<strong>执行函数</strong>的上下文（调用闭包函数的对象的作用域）。也就是说，这种情况下，&lt;font color=red&gt; 闭包的 <code>this</code>  指向调用该闭包函数的对象 &lt;/font&gt;。即：</p>\n<ul>\n<li>如果在全局函数调用：\n<ul>\n<li>非严格模式下： <code>this</code>  等于（指向） <code>window</code></li>\n<li>严格模式下： <code>this</code>  为 <code>undefined</code></li>\n</ul>\n</li>\n<li>如果作为某个对象的方法调用： <code>this</code>  等于（指向）这个对象</li>\n</ul>\n<p>如下例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// red</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 相当于</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// let c = obj.getColor();</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// c();</span></pre></td></tr></table></figure><p>这里解析一下：</p>\n<ol>\n<li>\n<p>闭包是函数声明式定义，非箭头函数，因此与就看谁调用的了</p>\n</li>\n<li>\n<p>在 <code>obj.getColor()()</code>  这块，我们可以把他看成是以下 2 行代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> c <span class=\"token operator\">=</span> obj<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 先对返回的闭包函数进行一个赋值</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">c</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//c () 实际上是 window.c ()</span></pre></td></tr></table></figure><p>这样就很容易看出，闭包是在全局对象上被调用的</p>\n</li>\n</ol>\n<hr>\n<p>那么该如何通过闭包调用到 <code>obj.color</code>  呢？</p>\n<p>每个函数在<strong>被调用时</strong>会自动创建 2 个变量： <code>this</code>  和 <code>arguments</code> ，&lt;font color=red&gt; 但内部函数永远无法直接访问外部函数的这 2 个变量。&lt;/font &gt; 因此我们只能通过创建一个临时变量引用来保存这 2 个变量的值，如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> self <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// blue</span></pre></td></tr></table></figure><h2 id=\"防抖-节流\"><a class=\"anchor\" href=\"#防抖-节流\">#</a> 防抖、节流</h2>\n<p>防抖和节流是闭包的一个很经典的例子，具体的防抖节流介绍这里就不详细讲了，就列举几个例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 节流函数（计时器版）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> timeout<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 这是一个闭包</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>timeout<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            timeout <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                timeout <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> wait<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里在 <code>debounce</code>  函数域中定义了计时变量 <code>timeout</code> ，</p>\n<ul>\n<li>为了阻止 <code>timeout</code>  被<strong>自动释放</strong>，使用闭包来对其引用。</li>\n</ul>\n<hr>\n<p>计时器版也是如此</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throttle</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> wait</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> previous <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">var</span> now <span class=\"token operator\">=</span> Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> context <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">var</span> args <span class=\"token operator\">=</span> arguments<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>now <span class=\"token operator\">-</span> previous <span class=\"token operator\">></span> wait<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>context<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            previous <span class=\"token operator\">=</span> now<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><hr>\n<p>主要参考《JavaScript 高级程序设计》，由于本人水平有限，可能会有理解不到位的地方，欢迎各位指正</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/07/31/note/JavaScript/JavaScript%E5%87%BD%E6%95%B0/",
            "url": "https://nitgod1996.com/2022/07/31/note/JavaScript/JavaScript%E5%87%BD%E6%95%B0/",
            "title": "JavaScript函数",
            "date_published": "2022-07-31T12:10:23.000Z",
            "content_html": "<h1 id=\"function-函数快速入门\"><a class=\"anchor\" href=\"#function函数快速入门\">#</a> Function 函数快速入门</h1>\n<p>JavaScript 中函数实际上是<strong>对象</strong>，每个函数都是 <code>Function</code>  类型的实例</p>\n<p><strong>定义一个函数</strong>：函数有多种定义方法</p>\n<ul>\n<li>\n<p>函数声明定义：这种方法会<strong>自动提升</strong>，即调用函数的代码可以写在定义函数的代码上面。（因为在执行代码前，JavaScript 引擎会<strong>先扫描一遍</strong>，发现函数声明就将其<strong>提升</strong>到源代码树顶部，即<strong>函数声明提升</strong>。）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数表达式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>函数表达式可以简化为<strong>箭头函数</strong>，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用 <code>Function</code>  构造函数（不推荐）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> sum<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"return a+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不推荐</span></pre></td></tr></table></figure><p>这种方法不常用，也影响性能（代码会被解释 2 次）</p>\n</li>\n</ul>\n<p><strong>使用函数</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 1+2=3</span></pre></td></tr></table></figure><h1 id=\"解析函数各部分\"><a class=\"anchor\" href=\"#解析函数各部分\">#</a> 解析函数各部分</h1>\n<p>一个 <code>function</code>  函数主要有三部分组成：<strong>函数名</strong>、<strong>参数</strong>、<strong>函数体（代码块）</strong></p>\n<h2 id=\"函数名\"><a class=\"anchor\" href=\"#函数名\">#</a> 函数名</h2>\n<ul>\n<li>\n<p>函数名就是指向函数的<strong>指针</strong>（也可以理解为对该函数的<strong>引用地址</strong>），可以赋值给别的标识符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> copySum<span class=\"token operator\">=</span>sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">copySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure></li>\n<li>\n<p>ES6 中所有函数对象都有一个 <code>name</code>  属性，保存函数名</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'', 空字符串</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>ECMAScript</code>  没有<strong>重载</strong>，因为参数直接由<strong>数组</strong>表示，定义时无所谓参数<strong>数量</strong>和<strong>类型</strong></p>\n</li>\n</ul>\n<h2 id=\"参数\"><a class=\"anchor\" href=\"#参数\">#</a> 参数</h2>\n<p><code>ECMAScript</code>  的参数内部表现为一个<strong>数组</strong>。 <code>ECMAScript</code>  既不关心传入的参数个数，也不关心这些参数的数据类型。定义时如果定义了 2 个参数，但调用时只传 1 个也没事。</p>\n<h3 id=\"arguments\"><a class=\"anchor\" href=\"#arguments\">#</a> arguments</h3>\n<p><code>arguments</code>  是函数内属性（只能在函数内部使用），是个<strong>类数组</strong>对象。返回接受的参数的数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Arguments] &#123; '0': 1, '1': 2, '2': 3 &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样一来，开发者想传多少参数就传多少，相当于弥补了 JavaScript 函数不能重载的缺失</p>\n<p><strong>箭头函数</strong>没有 <code>arguments</code>  属性</p>\n<p>不过如果是被包裹在函数内部，可以调用<strong>外部函数</strong>的 <code>arguments</code> 。（好像是句废话）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test2</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">bar</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"修改参数\"><a class=\"anchor\" href=\"#修改参数\">#</a> 修改参数</h3>\n<p>关于修改参数会不会改变原变量。</p>\n<p><code>JavaScript</code>  的函数传参都是对传参进行一个<strong>浅拷贝</strong>，</p>\n<p>因此：</p>\n<ul>\n<li>基础数据类型的变量均不会发生改变</li>\n<li>引用类型的变量可能会修改内容，但引用地址（变量名指向的对象）不会变。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test1</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1，只是函数域内的 num 变了，外部的是不能改变的</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 但如果是引用类型</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test2</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>a <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 或者 num.a = 2</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> num <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span> a<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//&#123; a: 2, b: 2 &#125;</span></pre></td></tr></table></figure><h3 id=\"默认参数\"><a class=\"anchor\" href=\"#默认参数\">#</a> 默认参数</h3>\n<p>如果函数定义了参数，但没有调用时接收到，那么可以预先设置一个默认值（通过 <code>=</code> ，ES6 新增）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">makeKing</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'King'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">makeKing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//King</span></pre></td></tr></table></figure><p>但是没 Python 那么强大，比如看下面例子</p>\n<p><img data-src=\"/2022/07/31/note/JavaScript/JavaScript%E5%87%BD%E6%95%B0/image-20220205195028124.png\" alt=\"image-20220205195028124\"></p>\n<p>调用时<strong>没有按参数名传参的功能</strong>，因此只能所有参数都输进去。如果前一个参数想直接用默认值，那么可以用 <code>undefined</code>  填充代替，如<img data-src=\"/2022/07/31/note/JavaScript/JavaScript%E5%87%BD%E6%95%B0/image-20220205195237716.png\" alt=\"image-20220205195237716\"></p>\n<p>此外，默认参数还有一些特性：</p>\n<ul>\n<li>\n<p>可以用函数作为默认参数（当然调用时也可以以函数传参）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">makeKing</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'King'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">=</span><span class=\"token function\">getN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//King 26</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>后面的默认值可以<strong>引用前面</strong>定义的参数（但前面的不能引用后面的）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">makeKing</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'King'</span><span class=\"token punctuation\">,</span>name2<span class=\"token operator\">=</span>name<span class=\"token operator\">+</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//King King26</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"使用-定义-传参\"><a class=\"anchor\" href=\"#使用定义传参\">#</a> 使用 <code>...</code>  定义 / 传参</h3>\n<p>可以使用扩展操作符 <code>...</code>  的传参，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getSum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr></table></figure><p>也可以用 <code>...</code>  作为定义函数时的参数，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getSum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value1<span class=\"token punctuation\">,</span>value2<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>value1<span class=\"token operator\">+</span>value2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//9</span></pre></td></tr></table></figure><blockquote>\n<p>values.reduce ((x,y)=&gt;x+y,0) 是数组求和的代码，reduce 函数之后再介绍</p>\n</blockquote>\n<p>但是只能做为<strong>最后一个</strong>参数，像下面这样是<strong>不行</strong>的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getSum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span>value2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 报错 No parameter is allowed after rest parameter</span></pre></td></tr></table></figure><h3 id=\"函数为参数\"><a class=\"anchor\" href=\"#函数为参数\">#</a> 函数为参数</h3>\n<p><code>ECMAScript</code>  中函数（ <code>Function</code> ）就是对象（类），而函数实例就是对象实例。因此，用函数作为参数相当于用对象做参数，非常合理。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 注：不要把<strong>函数名</strong>做入参和<strong>函数表达式</strong>做入参混淆了 &lt;/font&gt;，如果是访问函数而不是调用函数，那么必须不带括号。</p>\n<p>如下：这里调用的时候用了一个<strong>函数表达式</strong>作为入参</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">,</span> c</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a <span class=\"token operator\">+</span> b <span class=\"token operator\">+</span> c<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//6</span></pre></td></tr></table></figure><h2 id=\"函数体\"><a class=\"anchor\" href=\"#函数体\">#</a> 函数体</h2>\n<p>函数体一般就是一个代码块。以 <code>return</code>  作为函数的出口（也可以没有，当函数体内代码顺序执行完就结束，这样的函数返回值是 <code>undefined</code> ）</p>\n<h3 id=\"返回值为函数\"><a class=\"anchor\" href=\"#返回值为函数\">#</a> 返回值为函数</h3>\n<p>顾名思义，函数的返回值实际上是个指向另一个函数的指针。这实际上是个<strong>闭包</strong>，防抖节流函数经常会用到这个防止计时器被自动回收</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 防抖</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">debounce</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计时器</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 清除上一次计时器</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 重新定时</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>      <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// 节流</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">throtte</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func<span class=\"token punctuation\">,</span> time</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  <span class=\"token keyword\">let</span> timer <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计时器</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>timer<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 无视，直接返回</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    timer <span class=\"token operator\">=</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>也可以用这个功能定义 <code>sort</code>  的多种排序方法</strong>，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据参数 1 升序，参数 2 降序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">nameList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span>arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj1<span class=\"token punctuation\">,</span>obj2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>obj2<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>obj2<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> obj2<span class=\"token punctuation\">[</span>arg2<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>obj1<span class=\"token punctuation\">[</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">28</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'mark'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 根据姓名升序，根据年龄降序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  &#123; name: 'joker', age: 28 &#125;,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  &#123; name: 'joker', age: 26 &#125;,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  &#123; name: 'mark', age: 21 &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>]*/</pre></td></tr></table></figure><h1 id=\"特殊函数\"><a class=\"anchor\" href=\"#特殊函数\">#</a> 特殊函数</h1>\n<h2 id=\"箭头函数\"><a class=\"anchor\" href=\"#箭头函数\">#</a> 箭头函数</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 嵌入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>和 Java 的 lambda 表达式一样，主要注意以下几点</p>\n<ul>\n<li>\n<p><strong>有且仅有</strong>一个参数，可以不写括号</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">double</span><span class=\"token operator\">=</span><span class=\"token parameter\">x</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>只有一行代码可以不写大括号（会返回值）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>x<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等效于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>箭头函数的<strong>限制</strong></p>\n<ul>\n<li>不能使用 <code>arguments</code> 、 <code>super</code> 、和 <code>new.target</code></li>\n<li>不能用作构造函数</li>\n<li>没有 <code>prototype</code>  属性</li>\n</ul>\n</li>\n</ul>\n<p>&lt;font color=red&gt; 箭头函数只能做函数，和面向对象相关的功能都没有 &lt;/font&gt;</p>\n<h2 id=\"立即执行函数\"><a class=\"anchor\" href=\"#立即执行函数\">#</a> 立即执行函数</h2>\n<p>仅使用一次的函数。好处是可以避免全局变量污染（可以少想一些变量名）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 这个括号写调用的参数</span></pre></td></tr></table></figure><p>例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"闭包\"><a class=\"anchor\" href=\"#闭包\">#</a> 闭包</h2>\n<p><strong>闭包</strong>：引用了另一个函数作用域中变量的函数，通常在<strong>嵌套函数</strong>中实现</p>\n<p>闭包会把其包含函数的<strong>活动对象</strong>添加到自己的作用域链，因此<strong>比其他函数更占内存</strong>。过度使用闭包可能导致内存过度占用，不建议经常使用闭包。这里详细解释一下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">obj</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> obj<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> temp<span class=\"token operator\">=</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">'a'</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// ...</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 如果没有下面这行代码，&#123;'a': 1&#125; 不会被释放，即使 temp 已经不需要用到了</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>temp<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 直到此时内存才被释放</span></pre></td></tr></table></figure><p>闭包会引用外部函数的变量，在外部函数返回匿名函数（闭包）时，内部函数（闭包）会将外部函数的局部活动对象添加到自己的作用域链中，即外部函数被另一个作用域<strong>引用</strong>了，就无法被回收。只有外部引用 temp 解除对函数的引用，才能释放内存。</p>\n<p><strong>闭包是面试常考的问题，这里仅做简单介绍，详细的需要自行去搜索</strong></p>\n<h2 id=\"this-指向问题\"><a class=\"anchor\" href=\"#this指向问题\">#</a> this 指向问题</h2>\n<p>在函数中 <code>this</code>  的指向问题也是一个难点，面试也经常会考到</p>\n<h3 id=\"箭头函数-普通函数\"><a class=\"anchor\" href=\"#箭头函数-普通函数\">#</a> 箭头函数 - 普通函数</h3>\n<p>一般 this 对象的指向是可变的，但是在箭头函数中，this 的指向是固定的。</p>\n<ul>\n<li><strong>标准函数</strong>： <code>this</code>  返回的是<strong>调用</strong>该函数的对象的域。（不是函数域，而是对象域）</li>\n<li><strong>箭头函数</strong>： <code>this</code>  返回的是<strong>定义</strong>该函数的域（箭头函数一旦定义好， <code>this</code>  指向就不会变了）</li>\n</ul>\n<p>看一下下面几个例子就知道了</p>\n<ul>\n<li>\n<p>例子 1：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lambda</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// red</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// red</span></pre></td></tr></table></figure><p>这里 2 个函数调用， <code>this</code>  指向的均为 <code>window</code></p>\n</li>\n<li>\n<p>例 2：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lambda</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>func<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lambda<span class=\"token operator\">=</span>lambda<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//red</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//red</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>因为 <code>fun()</code>  是<strong>全局对象</strong>在调用，实际上是 <code>window.fun()</code> ，因此 <code>this</code>  指向 <code>window</code> 。</p>\n<p>而 <code>lambda()</code>  则是本来就定义在 <code>window</code>  域，因此 <code>this</code>  也是指向 <code>window</code></p>\n</li>\n<li>\n<p>例 3：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lambda</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>func<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lambda<span class=\"token operator\">=</span>lambda<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//blue</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//red</span></pre></td></tr></table></figure><p><code>fun()</code>  由 <code>Test</code>  的对象实例 <code>t</code>  调用， <code>t.fun()</code>  的 <code>this</code>  指向 <code>t</code> ，因此 <code>this.color = t.color</code></p>\n<p><code>lambda()</code>  由于定义在 <code>window</code>  域，因此还是 <code>this.color = window.color</code></p>\n</li>\n</ul>\n<h3 id=\"千万不要和构造函数弄混了\"><a class=\"anchor\" href=\"#千万不要和构造函数弄混了\">#</a> 千万不要和构造函数弄混了</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>一般来说，使用构造函数都是通过 <code>new</code>  一个对象实例使用， <code>this</code>  指向这个对象实例。</p>\n<p>而如果<strong>直接调用</strong>，是会改变对应域的 <code>this.color</code>  的。</p>\n<ul>\n<li>\n<p>例 5：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lambda</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// yellow \t\twindow.color→yellow</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// black\t\twindow.color→black</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// black</span></pre></td></tr></table></figure></li>\n<li>\n<p>例 6：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lambda</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>func<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lambda<span class=\"token operator\">=</span>lambda<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//yellow</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//black</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// blue</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// black</span></pre></td></tr></table></figure><p>和例 5 原因一样</p>\n</li>\n<li>\n<p>例 7：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'yellow'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lambda</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>func<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lambda<span class=\"token operator\">=</span>lambda<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//yellow</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//black</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// yellow</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// black</span></pre></td></tr></table></figure><p><code>t.func()</code>  修改的是 <code>t</code>  的 <code>color</code> ； <code>t.lambda()</code>  修改的是 <code>window</code>  的 <code>color</code></p>\n</li>\n</ul>\n<h3 id=\"闭包的-this\"><a class=\"anchor\" href=\"#闭包的this\">#</a> 闭包的 this</h3>\n<p>闭包和作用域不可分割，以我的笔力暂时还讲不明白。</p>\n<h1 id=\"function-属性与方法函数\"><a class=\"anchor\" href=\"#function属性与方法函数\">#</a> Function 属性与方法（函数）</h1>\n<h2 id=\"属性arguments-argumentscallee-this-newtarget-length-name-prototype\"><a class=\"anchor\" href=\"#属性arguments-argumentscallee-this-newtarget-length-name-prototype\">#</a> 属性：arguments、arguments.callee、this、new.target、length、name、prototype</h2>\n<p><strong>内部属性</strong>：只能在函数体内使用的</p>\n<ul>\n<li>\n<p><code>arguments</code> ：该函数接受的参数的数组</p>\n<ul>\n<li>\n<p><code>arguments.callee</code> ：返回该函数名（指向该函数的指针 / 地址）。一般用来递归</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">order</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 使用 callee 属性递归</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>this</code> ：指向某个<strong>对象作用域</strong>的指针。</p>\n</li>\n<li>\n<p><code>new.target</code>  属性：</p>\n<ul>\n<li>如果函数正常调用（没有用 <code>new</code>  实例化）： <code>new.target</code>  返回 <code>undefined</code></li>\n<li>如果 <code>new</code>  实例化了对象： <code>new.target</code>  返回该（对象的）构造函数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: King]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>对象属性</strong>：对象属性，可以用函数名调用</p>\n<ul>\n<li>\n<p><code>length</code> ：返回函数定义时参数的个数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sayName<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>name</code> ：返回函数名</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sum</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'', 空字符串</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>prototype</code> ：原型，用在面向对象上的，定义在原型上的属性和方法可以继承。</p>\n</li>\n</ul>\n<h2 id=\"方法apply-call-bind\"><a class=\"anchor\" href=\"#方法apply-call-bind\">#</a> 方法：apply ()、call ()、bind ()</h2>\n<ul>\n<li>\n<p><code>apply()</code> ：在指定的环境下调用函数（以指定的 <code>this</code>  和 <code>参数</code> ）</p>\n<ul>\n<li><code>this</code> ：函数运行的指定 <code>this</code> ，指定以某个对象的作用域</li>\n<li><code>arguments</code> ：参数</li>\n</ul>\n<p>&lt;font color=red&gt; <code>this</code>  只能是对象<strong>实例</strong>，对象（类）不行 &lt;/font&gt;</p>\n<p>例 1：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> num1<span class=\"token operator\">+</span>num2<span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    num<span class=\"token operator\">:</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token constant\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">6</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//8 （this.num = 5）</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 13（this.num = 10）</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token constant\">B</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// NaN（this.num = undefined）</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 9 （this.num = 6）</span></pre></td></tr></table></figure><p>例 2：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> num1<span class=\"token operator\">+</span>num2<span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">applySum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以 applySum 的 this 作为 apply 的 this。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">applySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//13 因为调用 applySum 的是 window，因此 applySum 的 this 指向的是 window</span></pre></td></tr></table></figure><p>例 3：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> num1<span class=\"token operator\">+</span>num2<span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">applySum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 以 applySum 的 this 作为 apply 的 this。</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sum <span class=\"token operator\">=</span> applySum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//23 因为调用 applySum 的是 t，因此 applySum 的 this 指向的是 t，即 (this.num = 20)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>call()</code> ：和 <code>apply()</code>  一样，但它不能用 <code>arguments</code> ，只能显式地输入参数</p>\n<ul>\n<li><code>this</code></li>\n<li>... 参数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> num1<span class=\"token operator\">+</span>num2<span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    num<span class=\"token operator\">:</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//8</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 注意一下，call 和 apply 输入参数不太一样，apply 需要 <code>[]</code>  包裹，call 不需要 &lt;/font&gt;</p>\n<p><code>apply</code>  和 <code>call</code>  最重要的是控制函数调用<strong>指定作用域</strong> <code>this</code>  的能力</p>\n</li>\n<li>\n<p><code>bind()</code> ：以指定的<strong>对象域</strong>创建一个新的<strong>函数实例</strong>（也可以理解为  <code>返回一个绑定了指定对象域的函数</code> ）</p>\n<ul>\n<li><code>this</code> ：新函数的指定 <code>this</code></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> bindTest<span class=\"token operator\">=</span><span class=\"token function\">sayColor</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 绑定了 o 的 this</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">bindTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//blue</span></pre></td></tr></table></figure><p>用了 <code>bind()</code>  后无论以什么对象调用， <code>this</code>  指向都<strong>不会改变</strong>（就像箭头函数）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    color<span class=\"token operator\">:</span> <span class=\"token string\">'blue'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> bindTest <span class=\"token operator\">=</span> <span class=\"token function\">sayColor</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 绑定了 o 的 this</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Test</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sayColorTest <span class=\"token operator\">=</span> bindTest<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">sayColorTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// blue</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"三者区别\"><a class=\"anchor\" href=\"#三者区别\">#</a> 三者区别</h3>\n<ul>\n<li>apply 和 call 是以指定的 this 执行函数\n<ul>\n<li>apply：可以使用 <code>arguments</code> ，参数以数组形式传入</li>\n<li>call：不能用 <code>arguments</code> ，参数以 <code>...</code>  传入</li>\n</ul>\n</li>\n<li>bind：创建一个绑定了 this 的函数实例（不执行），之后该函数的执行均是在该域上</li>\n</ul>\n<h1 id=\"function-用作构造函数面向对象\"><a class=\"anchor\" href=\"#function用作构造函数面向对象\">#</a> Function 用作构造函数（面向对象）</h1>\n<p>ES6 之前 <code>JavaScript</code>  没有 <code>class</code> ，都是通过 <code>Function</code>  和原型 <code>prototype</code>  定义对象（类）的。</p>\n<ul>\n<li><code>Function</code>  定义构造函数，主要写成员变量，每个对象实例都不相同</li>\n<li><code>prototype</code>  主要定义成员方法（函数），所有对象实例共有</li>\n</ul>\n<h2 id=\"newtarget判断函数-or-对象\"><a class=\"anchor\" href=\"#newtarget判断函数or对象\">#</a> new.target：判断函数 or 对象</h2>\n<p><code>Function</code>  的内部属性 <code>new.target</code>  可以用来判断这个 <code>Function</code>  是用作函数还是对象。</p>\n<p>ES6 新增的 <code>new.target</code>  属性：</p>\n<ul>\n<li>如果函数正常调用（没有用 <code>new</code>  实例化）： <code>new.target</code>  返回 <code>undefined</code></li>\n<li>如果 <code>new</code>  实例化了对象： <code>new.target</code>  返回该（对象的）构造函数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: King]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure><h2 id=\"this定义属性\"><a class=\"anchor\" href=\"#this定义属性\">#</a> this：定义属性</h2>\n<p><code>this</code>  表示的是对象本身，指向<strong>当前作用域</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上是一个定义 <code>Person</code>  对象的代码， <code>Person</code>  在语义上是<strong>构造函数</strong>名，但同时也是该<strong>对象（类）名</strong>。 <code>this.name</code>  表示这个对象的 <code>name</code>  属性</p>\n<blockquote>\n<p>也可以在构造函数中通过 <code>this</code>  定义成员方法（函数），但一般不建议这么做。原因前面已经说过，构造函数里的内容每个对象实例都是<strong>不同</strong>的，也就是说每次通过 <code>new</code>  新建一个对象实例，都会执行一次构造函数，都会创建一次构造函数里的变量和方法（函数）。但一般来说同一个对象（类）共享一个函数即可，一般不为每个对象实例单独定义一个功能一样的函数。</p>\n</blockquote>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/04/27/note/%E5%89%8D%E7%AB%AF/Mock/",
            "url": "https://nitgod1996.com/2022/04/27/note/%E5%89%8D%E7%AB%AF/Mock/",
            "title": "",
            "date_published": "2022-04-27T13:11:32.581Z",
            "content_html": "",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/04/27/note/%E5%89%8D%E7%AB%AF/axios/",
            "url": "https://nitgod1996.com/2022/04/27/note/%E5%89%8D%E7%AB%AF/axios/",
            "title": "axios",
            "date_published": "2022-04-27T02:43:36.000Z",
            "content_html": "<h1 id=\"一-axios-基本介绍\"><a class=\"anchor\" href=\"#一-axios基本介绍\">#</a> 一、 axios 基本介绍</h1>\n<h2 id=\"axios-ajax-和-fetch-的比较\"><a class=\"anchor\" href=\"#axios-ajax和fetch的比较\">#</a> <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20vemgtY24vYXhpb3MtYWpheC1mZXRjaC1jb21wYXJlLmh0bWw=\">axios, ajax 和 fetch 的比较</span></h2>\n<h3 id=\"ajax\"><a class=\"anchor\" href=\"#ajax\">#</a> Ajax</h3>\n<p>前端程序员常说的 Ajax 是  <code>Asynchronous JavaScript and XML</code>  的缩写，意思是异步网络请求。区别于传统 web 开发中采用的同步方式。</p>\n<p>Ajax 带来的最大影响就是页面可以无刷新的请求数据。以往，页面表单提交数据，在用户点击完”submit“按钮后，页面会强制刷新一下，体验十分不友好。</p>\n<p><strong>实现一个 Ajax 请求</strong></p>\n<p>在现代浏览器上实现一个 Ajax 请求是非常容易的，</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> request <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 创建 XMLHttpRequest 对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//ajax 是异步的，设置回调函数</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 状态发生变化时，函数被回调</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>readyState <span class=\"token operator\">===</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 成功完成</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 判断响应状态码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token number\">200</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token comment\">// 成功，通过 responseText 拿到响应的文本:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">success</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>responseText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token comment\">// 失败，根据响应码判断失败原因:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>request<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\">// HTTP 请求还在继续...</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">// 发送请求:</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'GET'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'/api/categories'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">setRequestHeader</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"application/json\"</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 设置请求头</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>request<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 到这一步，请求才正式发出</span></pre></td></tr></table></figure><p>使用原生的 js 还是比较繁琐，实际工程中建议使用<strong> jQuery</strong> 之类的库，封装的 ajax 请求方法非常好用，且解决了浏览器兼容性的问题。</p>\n<h3 id=\"axios\"><a class=\"anchor\" href=\"#axios\">#</a> axios</h3>\n<p>首先需要知道：axios 不是一种新的技术。</p>\n<p>axios 是一个基于 Promise 用于浏览器和 nodejs 的 HTTP 客户端，本质上也是对原生 XHR 的封装，只不过它是 Promise 的实现版本，符合最新的 ES 规范，有以下特点：</p>\n<ul>\n<li>从浏览器中创建 XMLHttpRequests</li>\n<li>从 node.js 创建 http 请求</li>\n<li>支持 Promise API</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 XSRF</li>\n</ul>\n<p><strong>浏览器支持</strong></p>\n<p>axios 面向现代浏览器设计，所以古老的浏览器并不支持。</p>\n<p>因为 axios 设计简洁，API 简单，支持浏览器和 node，所以大受欢迎。它能很好的与各种前端框架整合。</p>\n<h3 id=\"fetch\"><a class=\"anchor\" href=\"#fetch\">#</a> fetch</h3>\n<p>fetch 是前端发展的一种新技术产物。</p>\n<blockquote>\n<p>以下内容摘自 mozilla：</p>\n<p>Fetch API 提供了一个 JavaScript 接口，用于访问和操纵 HTTP 管道的部分，例如请求和响应。它还提供了一个全局 fetch () 方法，该方法提供了一种简单，合理的方式来跨网络异步获取资源。</p>\n</blockquote>\n<p>这种功能以前是使用 XMLHttpRequest 实现的。Fetch 提供了一个更好的替代方法，可以很容易地被其他技术使用，例如 Service Workers。Fetch 还提供了单个逻辑位置来定义其他 HTTP 相关概念，例如 CORS 和 HTTP 的扩展。</p>\n<p>在使用 fetch 的时候需要注意：</p>\n<ul>\n<li>当接收到一个代表错误的 HTTP 状态码时，从 fetch () 返回的 Promise 不会被标记为 reject， 即使该 HTTP 响应的状态码是 404 或 500。相反，它会将 Promise 状态标记为 resolve （但是会将 resolve 的返回值的 ok 属性设置为 false ），仅当网络故障时或请求被阻止时，才会标记为 reject。</li>\n<li>默认情况下，fetch 不会从服务端发送或接收任何 cookies, 如果站点依赖于用户 session，则会导致未经认证的请求（要发送 cookies，必须设置 credentials 选项）。</li>\n</ul>\n<p>一个使用 fetch 获取数据的例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://example.com/movies.json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">myJson</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myJson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>fetch 代表着更先进的技术方向，但是目前兼容性不是很好，在项目中使用的时候得慎重。</p>\n<h3 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h3>\n<ul>\n<li>ajax 是异步网络请求，可以无刷新的请求数据。但原生 js 较繁琐，一般用 <code>jQuery</code>  封装的 ajax</li>\n<li>axios：封装了 ajax 的 <code>Promise</code>  实现版本。</li>\n<li>fetch：和 axios 差不多，比 axios 更新，但是因为太新，兼容性不是很好</li>\n</ul>\n<h2 id=\"1-什么是-axios\"><a class=\"anchor\" href=\"#1-什么是-axios\">#</a> 1. 什么是 axios？</h2>\n<p>Axios 是一个基于 promise 的 HTTP 库，可以用在浏览器和 node.js 中。</p>\n<h2 id=\"2-特性\"><a class=\"anchor\" href=\"#2-特性\">#</a> 2. 特性</h2>\n<ul>\n<li>从浏览器中创建 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL1hNTEh0dHBSZXF1ZXN0\">XMLHttpRequests</span></li>\n<li>从 node.js 创建 <span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5vcmcvYXBpL2h0dHAuaHRtbA==\">http</span> 请求</li>\n<li>支持 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvUHJvbWlzZQ==\">Promise</span> API</li>\n<li>拦截请求和响应</li>\n<li>转换请求数据和响应数据</li>\n<li>取消请求</li>\n<li>自动转换 JSON 数据</li>\n<li>客户端支持防御 <span class=\"exturl\" data-url=\"aHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Dcm9zcy1zaXRlX3JlcXVlc3RfZm9yZ2VyeQ==\">XSRF</span></li>\n</ul>\n<h2 id=\"3-安装\"><a class=\"anchor\" href=\"#3-安装\">#</a> 3. 安装</h2>\n<p>使用 npm:</p>\n<pre class=\" language-language-bash\"><code class=\"language-language-bash\">$ npm install axios\n</code></pre>\n<p>使用 bower:</p>\n<pre class=\" language-language-bash\"><code class=\"language-language-bash\">$ bower install axios\n</code></pre>\n<p>使用 cdn:</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"4-案例\"><a class=\"anchor\" href=\"#4-案例\">#</a> 4. 案例</h2>\n<p>看上去用法和 <code>fetch</code>  差不多，而且返回的也是个期约</p>\n<ul>\n<li>\n<p>执行  <code>GET</code>  请求</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 为给定 ID 的 user 创建请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user?ID=12345'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 上面的请求也可以这样做</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    params<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token constant\">ID</span><span class=\"token operator\">:</span> <span class=\"token number\">12345</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>执行  <code>POST</code>  请求</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Flintstone'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>执行多个并发请求</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getUserAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getUserPermissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345/permissions'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">getUserAccount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getUserPermissions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">acct<span class=\"token punctuation\">,</span> perms</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 两个请求现在都执行完成</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"axios-api\"><a class=\"anchor\" href=\"#axios-api\">#</a> axios API</h2>\n<p>可以通过向  <code>axios</code>  传递相关配置来创建请求（就是相当于 <code>fetch</code>  中的 <code>init</code> ，也就是<strong>第二个参数</strong>）</p>\n<p><strong>axios(config)</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送 POST 请求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  method<span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url<span class=\"token operator\">:</span> <span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Flintstone'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 获取远端图片</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  method<span class=\"token operator\">:</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  url<span class=\"token operator\">:</span><span class=\"token string\">'http://bit.ly/2mTM3nY'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  responseType<span class=\"token operator\">:</span><span class=\"token string\">'stream'</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>  response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ada_lovelace.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>axios(url[, config])</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送 GET 请求（默认的方法）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"二-axios-对象函数及用法\"><a class=\"anchor\" href=\"#二-axios对象函数及用法\">#</a> 二、axios 对象函数及用法</h1>\n<h2 id=\"1-基本用法\"><a class=\"anchor\" href=\"#1-基本用法\">#</a> 1. 基本用法</h2>\n<ol>\n<li>\n<p>引入 axios 后：</p>\n<ol>\n<li>\n<p>node.js</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">\"axios\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>浏览器</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://unpkg.com/axios/dist/axios.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li>\n<p>直接使用 <code>axios</code>  并配置请求参数即可<strong>发出请求</strong>，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 发送 GET 请求（默认的方法）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  method<span class=\"token operator\">:</span> <span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  url<span class=\"token operator\">:</span> <span class=\"token string\">'/user/12345'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  data<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    firstName<span class=\"token operator\">:</span> <span class=\"token string\">'Fred'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    lastName<span class=\"token operator\">:</span> <span class=\"token string\">'Flintstone'</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>返回的是个 <code>promise</code> <strong> 期约</strong>，解决为<strong>响应数据</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 获取远端图片</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  method<span class=\"token operator\">:</span><span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  url<span class=\"token operator\">:</span><span class=\"token string\">'http://bit.ly/2mTM3nY'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  responseType<span class=\"token operator\">:</span><span class=\"token string\">'stream'</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>fs<span class=\"token punctuation\">.</span><span class=\"token function\">createWriteStream</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ada_lovelace.jpg'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ol>\n<h2 id=\"2-axios-详解\"><a class=\"anchor\" href=\"#2-axios详解\">#</a> 2. axios 详解</h2>\n<ul>\n<li><code>axios(url,config)</code> ：其实格式用法和 <code>fetch</code>  差不多，有些许差别\n<ul>\n<li><code>url</code> ：可选，要访问的地址。也可以在 <code>config</code>  中配置</li>\n<li><code>config</code> ：可选，请求参数， <code>&#123;&#125;</code> 。类似 <code>fetch</code>  的 <code>init</code>\n<ul>\n<li><code>url</code> ： <code>String</code> 。必选（没有上面的 <code>url</code>  的话）。请求地址。</li>\n<li><code>baseURL</code> ： <code>String</code> 。自动加在 <code>url</code>  前，组成完整 <code>url</code> 。</li>\n<li><code>method</code> ： <code>String</code> 。请求方式。</li>\n<li><code>headers</code> ： <code>&#123;&#125;</code> 。请求头。</li>\n<li><code>params</code> ： <code>&#123;&#125;</code> 。和请求一起发送的 <code>url</code>  参数（就是 <code>?</code>  后的那一串）</li>\n<li><code>data</code> ： <code>&#123;&#125;</code> 。发给服务器的数据（ <code>get</code>  没有），类似 <code>body</code></li>\n<li><code>timeout</code> ： <code>number</code> 。超时毫秒数</li>\n<li><code>responseType</code> ： <code>String</code> 。响应数据类型，如 <code>json</code></li>\n<li><code>responseEncoding</code> ： <code>String</code> 。响应数据编码</li>\n<li><code>proxy</code> ： <code>&#123;&#125;</code> 。代理服务器的主机名称和端口等信息\n<ul>\n<li><code>host</code> ：代理主机地址</li>\n<li><code>port</code> ：端口</li>\n<li><code>auth</code> ：连接代理账号密码</li>\n</ul>\n</li>\n<li>其他的详见：<span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5heGlvcy1qcy5jb20vemgtY24vZG9jcy8jJUU4JUFGJUI3JUU2JUIxJTgyJUU5JTg1JThEJUU3JUJEJUFF\">http://www.axios-js.com/zh-cn/docs/# 请求配置</span></li>\n</ul>\n</li>\n<li><code>return</code> ：返回一个 <code>Promise</code>  期约。被解决为一个响应数据</li>\n</ul>\n</li>\n<li><code>response</code> ： <code>&#123;&#125;</code> 。由 <code>axios</code>  返回期约解决得到的<strong>响应体</strong>\n<ul>\n<li><code>data</code> ： <code>&#123;&#125;</code> 。服务器响应的数据</li>\n<li><code>status</code> ： <code>number</code> 。响应状态码</li>\n<li><code>statusText</code> ： <code>String</code> 。响应状态描述。200-299 是 ok</li>\n<li><code>headers</code> ： <code>&#123;&#125;</code> 。响应头</li>\n<li><code>config</code> ： <code>&#123;&#125;</code> 。下面 2 个都不重要</li>\n<li><code>request</code> ： <code>&#123;&#125;</code></li>\n</ul>\n</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">axios</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'get'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'./北京大学.json'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>statusText<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台：<img data-src=\"/2022/04/27/note/%E5%89%8D%E7%AB%AF/axios/image-20220427150617761.png\" alt=\"image-20220427150617761\"></p>\n<h2 id=\"3-axios-别名方法\"><a class=\"anchor\" href=\"#3-axios别名方法\">#</a> 3. axios 别名方法</h2>\n<p>虽然几乎所有功能都可以直接通过 <code>config</code>  实现，但为了方便 / 简明， <code>axios</code>  还是提供了一些别名方法</p>\n<ul>\n<li><code>axios.request(config)</code> ：发出请求（详细在 config 中配置，感觉好像和直接 <code>axios()</code>  也没啥差别）</li>\n<li><code>axios.get(url,config)</code> ：发送 get 请求</li>\n<li><code>axios.post(url,config)</code> ：发送 post 请求</li>\n<li></li>\n<li>...</li>\n</ul>\n<h2 id=\"4-并发请求\"><a class=\"anchor\" href=\"#4-并发请求\">#</a> 4. 并发请求</h2>\n<p>主要利用期约的 <code>.all()</code>  和多线程的 <code>.spread()</code>  方法异步发送请求</p>\n<ul>\n<li>\n<p><code>axios.all(iterable)</code> ：</p>\n<ul>\n<li>\n<p><code>iterable</code> ：数组，包括多个 <code>axios</code>  请求。异步执行这些请求，</p>\n</li>\n<li>\n<p><code>return</code> ：在所有请求都<strong>解决</strong>后，返回一个<strong>解决为数组的期约</strong>。数组包括所有请求的响应数据；</p>\n<p>只要有一个请求<strong>拒绝</strong>，则返回一个<strong>拒绝的期约</strong></p>\n</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">get1</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">get2</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ajax.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">get1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">get2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">responses</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> res <span class=\"token keyword\">of</span> responses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>解决：<img data-src=\"/2022/04/27/note/%E5%89%8D%E7%AB%AF/axios/image-20220427155805066.png\" alt=\"image-20220427155805066\"></p>\n<p>拒绝：<img data-src=\"/2022/04/27/note/%E5%89%8D%E7%AB%AF/axios/image-20220427155742228.png\" alt=\"image-20220427155742228\"></p>\n</li>\n<li>\n<p><code>axios.spread(callback)</code> ：这个不是很清楚，等学完多线程再来看吧</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">get1</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">get2</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ajax.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>axios<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">get1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">get2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">spread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">res1<span class=\"token punctuation\">,</span> res2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 从结果上来看和直接用参数好像没什么区别</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res1<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res2<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台：<img data-src=\"/2022/04/27/note/%E5%89%8D%E7%AB%AF/axios/image-20220427155805066.png\" alt=\"image-20220427155805066\"></p>\n<p>可以看出，和前面的例子输出是一样的</p>\n</li>\n</ul>\n<h2 id=\"5-创建-axios-实例对象\"><a class=\"anchor\" href=\"#5-创建axios实例对象\">#</a> 5. 创建 axios 实例对象</h2>\n<p>虽然可以直接通过 <code>axios()</code>  发送请求，但是有时候我们还是需要创建 <code>axios</code>  对象实例，原因如下：</p>\n<ol>\n<li>对于每个请求都配置请求参数会很麻烦，所以通常我们会配置个<strong>全局配置</strong></li>\n<li>但是有些配置也有很多请求一样，但不是所有请求都是，所以不应该配置在全局，因此需要针对性的配置实例</li>\n</ol>\n<p>用法如下：</p>\n<ul>\n<li>\n<p><code>axios.create(config)</code> ：创建 <code>axios</code>  实例，一般用于拦截器</p>\n<ul>\n<li><code>config</code> ：请求参数。&lt;font color=red&gt; 没有 <code>url</code> ，只能写 <code>baseURL</code> 。 <code>url</code>  只能在调用时写 &lt;/font&gt;</li>\n<li><code>return</code> ：返回一个 <code>axios</code>  实例，用法和 <code>axios</code>  一样。<strong>别名</strong>使用也一样</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  baseURL<span class=\"token operator\">:</span> <span class=\"token string\">'https://some-domain.com/api/'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>  timeout<span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span><span class=\"token string\">'X-Custom-Header'</span><span class=\"token operator\">:</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 发出请求</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 或者这样这发出请求</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">instance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    url<span class=\"token operator\">:</span> <span class=\"token string\">'test.json'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 或者这样</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"6-默认配置\"><a class=\"anchor\" href=\"#6-默认配置\">#</a> 6. 默认配置</h2>\n<h3 id=\"61-全局-axios-默认值\"><a class=\"anchor\" href=\"#61-全局axios默认值\">#</a> 6.1 全局 axios 默认值</h3>\n<p>直接通过 <code>axios.defaults</code>  设置参数值，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.example.com'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>common<span class=\"token punctuation\">[</span><span class=\"token string\">'Authorization'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">AUTH_TOKEN</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>axios<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>post<span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'application/x-www-form-urlencoded'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"62-axios-实例默认值\"><a class=\"anchor\" href=\"#62-axios实例默认值\">#</a> 6.2 axios 实例默认值</h3>\n<p>通过对应实例的 <code>instance.default</code>  设置参数，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>instance<span class=\"token punctuation\">.</span>defaults<span class=\"token punctuation\">.</span>baseURL <span class=\"token operator\">=</span> <span class=\"token string\">'https://api.example.com'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"63-默认配置的优先级\"><a class=\"anchor\" href=\"#63-默认配置的优先级\">#</a> 6.3 默认配置的优先级</h3>\n<p>实例默认 &gt; 全局默认 &gt; <code>axios</code>  库的自带默认</p>\n<h2 id=\"7-拦截器\"><a class=\"anchor\" href=\"#7-拦截器\">#</a> 7. 拦截器</h2>\n<blockquote>\n<p>响应拦截器的作用是：<strong>用于对处理器进行预处理和后处理。</strong></p>\n<p>应该主要是为了对应 <code>ajax</code>  的状态（ <code>readyState</code> ）响应事件，（针对所有的请求和响应的生命周期）</p>\n</blockquote>\n<p>常见用法：</p>\n<ol>\n<li>请求拦截器：如添加统一 <code>cookie</code> 、请求体加验证、设置请求头等，相当于<strong>对每个接口里相同操作的一个封装</strong></li>\n<li>响应拦截器：如数据统一处理、登录失败处理等</li>\n</ol>\n<hr>\n<p>使用：<strong>在请求或响应被  <code>then</code>  或  <code>catch</code>  处理前拦截它们。</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 添加请求拦截器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">config</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 在发送请求之前做些什么</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> config<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token comment\">// 对请求错误做些什么</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 添加响应拦截器</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token comment\">// 对响应数据做点什么</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> response<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 对响应错误做点什么</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如果你想在稍后移除拦截器，可以这样：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> myInterceptor <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>axios<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">eject</span><span class=\"token punctuation\">(</span>myInterceptor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//eject：驱逐，弹出</span></pre></td></tr></table></figure><p>可以为<strong>自定义 axios 实例</strong>添加拦截器</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> instance <span class=\"token operator\">=</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>request<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>instance<span class=\"token punctuation\">.</span>interceptors<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">/*...*/</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"三-在-vue-中使用-axios\"><a class=\"anchor\" href=\"#三-在vue中使用axios\">#</a> 三、 在 vue 中使用 axios</h1>\n<p><strong>这是个基于 vuejs 的轻度封装的 axios，也可以不用这个，直接按正常使用</strong></p>\n<h2 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装:</h2>\n<h3 id=\"commonjs\"><a class=\"anchor\" href=\"#commonjs\">#</a> CommonJS:</h3>\n<pre class=\" language-language-bash\"><code class=\"language-language-bash\">npm install --save axios vue-axios\n</code></pre>\n<h3 id=\"script\"><a class=\"anchor\" href=\"#script\">#</a> Script:</h3>\n<p>将下面代码加入入口文件:（一般是 <code>main.js</code> ）</p>\n<p>按照这个顺序分别引入这三个文件：  <code>vue</code> ,  <code>axios</code>  and  <code>vue-axios</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> Vue <span class=\"token keyword\">from</span> <span class=\"token string\">'vue'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> VueAxios <span class=\"token keyword\">from</span> <span class=\"token string\">'vue-axios'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Vue<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>VueAxios<span class=\"token punctuation\">,</span> axios<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h2 id=\"usage\"><a class=\"anchor\" href=\"#usage\">#</a> Usage:</h2>\n<blockquote>\n<p>如果您使用的是单文件组件，则此包装器会将 'axios' 绑定到 'Vue' 或 'This'。</p>\n</blockquote>\n<p>你可以按照以下方式使用:</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Vue<span class=\"token punctuation\">.</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$http<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>api<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/04/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E9%A2%98%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/",
            "url": "https://nitgod1996.com/2022/04/15/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E7%AE%97%E6%B3%95%E9%A2%98%E5%B8%B8%E7%94%A8%E7%9A%84%E5%87%BD%E6%95%B0/",
            "title": "算法题常用函数",
            "date_published": "2022-04-15T06:44:03.000Z",
            "content_html": "<h1 id=\"一-各语言基础\"><a class=\"anchor\" href=\"#一-各语言基础\">#</a> 一、 各语言基础</h1>\n<h2 id=\"1-开局-main-函数\"><a class=\"anchor\" href=\"#1-开局main函数\">#</a> 1. 开局 main 函数</h2>\n<ul>\n<li>\n<p>JavaScript：没有 main 函数，直接最外层域（node.js：global，js：window）</p>\n</li>\n<li>\n<p>java：</p>\n<pre class=\" language-language-java\"><code class=\"language-language-java\">public class demo02 &#123;\n    public static void main(String[] args) &#123;\n\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>c++：</p>\n</li>\n<li>\n<p>python：</p>\n<pre class=\" language-language-python\"><code class=\"language-language-python\"></code></pre>\n</li>\n</ul>\n<h2 id=\"2-函数定义\"><a class=\"anchor\" href=\"#2-函数定义\">#</a> 2. 函数定义</h2>\n<ul>\n<li>\n<p>JavaScript：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">/**</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre> * @param &#123;number[]&#125; nums</pre></td></tr><tr><td data-num=\"3\"></td><td><pre> * @param &#123;number&#125; target</pre></td></tr><tr><td data-num=\"4\"></td><td><pre> * @return &#123;number[]&#125;</pre></td></tr><tr><td data-num=\"5\"></td><td><pre> */</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">var</span> <span class=\"token function-variable function\">twoSum</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">nums<span class=\"token punctuation\">,</span> target</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">dfs</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>java： <code>public/private</code>  + 返回值类型 + 函数名 (数据类型 参数 1，数据类型 参数 2)</p>\n<pre class=\" language-language-java\"><code class=\"language-language-java\">class Solution &#123;\n    public int[] twoSum(int[] nums, int target) &#123;\n\t\treturn 1;\n    &#125;\n&#125;\n</code></pre>\n</li>\n<li>\n<p>C++:</p>\n<pre class=\" language-language-c++\"><code class=\"language-language-c++\">class Solution &#123;\npublic:\n    vector<int> twoSum(vector<int>& nums, int target) &#123;\n\n    &#125;\n&#125;;\n</int></int></code></pre>\n</li>\n<li>\n<p>python3：</p>\n<pre class=\" language-language-python\"><code class=\"language-language-python\">class Solution:\n    def twoSum(self, nums: List[int], target: int) -> List[int]:\n</code></pre>\n</li>\n</ul>\n<h2 id=\"3-输入输出\"><a class=\"anchor\" href=\"#3-输入输出\">#</a> 3. 输入输出</h2>\n<ul>\n<li>JavaScript：\n<ul>\n<li>输入：</li>\n<li>输出： <code>console.log();</code></li>\n</ul>\n</li>\n<li>java：\n<ul>\n<li>输入：</li>\n<li>输出： <code>System.out.println();</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-基础类型\"><a class=\"anchor\" href=\"#4-基础类型\">#</a> 4. 基础类型</h2>\n<ul>\n<li>JavaScript：</li>\n<li>java： <code>int</code> 、 <code>double</code> 、 <code>boolean</code> 、 <code>char</code> 、 <code>long</code> 、 <code>long long</code>  等\n<ul>\n<li>此外 <code>String</code>  是引用类型，引用类型首字母大写</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"5-操作符-运算符-判断符\"><a class=\"anchor\" href=\"#5-操作符-运算符-判断符\">#</a> 5. 操作符、运算符、判断符</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>JavaScript</th>\n<th>Java</th>\n<th>C++</th>\n<th>python3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>==</code></td>\n<td><code>===</code></td>\n<td><code>Objects.equals(a,b)</code></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"6-math-函数以-javascript-为基准\"><a class=\"anchor\" href=\"#6-math函数以javascript为基准\">#</a> 6. Math 函数（以 JavaScript 为基准）</h2>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>JavaScript</th>\n<th>Java</th>\n<th>C++</th>\n<th>python3</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>max</code></td>\n<td><code>Math.max()</code></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"二-常用函数及方法\"><a class=\"anchor\" href=\"#二-常用函数及方法\">#</a> 二、 常用函数及方法</h1>\n<h2 id=\"1-数据转换\"><a class=\"anchor\" href=\"#1-数据转换\">#</a> 1. 数据转换</h2>\n<ul>\n<li>JavaScript：\n<ul>\n<li>转字符串： <code>String()</code> 、 <code>.toString()</code>\n<ul>\n<li>数组转字符串： <code>list.join('')</code></li>\n</ul>\n</li>\n<li>转数字： <code>Number()</code> 、 <code>parseInt()</code></li>\n<li>转数组： <code>Array.from()</code>\n<ul>\n<li>字符串转数组： <code>s.split(&quot;&quot;)</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-swap-函数\"><a class=\"anchor\" href=\"#2-swap函数\">#</a> 2. swap 函数</h2>\n<ul>\n<li>JavaScript：[a,b]=[b,a]</li>\n</ul>\n<h2 id=\"3-排序\"><a class=\"anchor\" href=\"#3-排序\">#</a> 3. 排序</h2>\n<ul>\n<li>JavaScript：仅有数组可以， <code>list.sort(function)</code>\n<ul>\n<li>如 <code>list.sort((a,b)=&gt;a-b)</code> ：升序</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"4-遍历\"><a class=\"anchor\" href=\"#4-遍历\">#</a> 4. 遍历</h2>\n<ul>\n<li>\n<p>JavaScript：</p>\n<ul>\n<li>\n<p>遍历数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 普通 for 循环</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>nums<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 为索引</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//foreach</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>nums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//item 是 nums 的元素，而非索引</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//for-of</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> value <span class=\"token keyword\">of</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//value 是元素，而非索引</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">//map</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>nums<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value<span class=\"token punctuation\">,</span>index</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//item 是 nums 的元素，而非索引</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token comment\">//for-in</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> nums<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>nums<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//i 为索引</span></pre></td></tr></table></figure><p>以上性能依次递减。</p>\n</li>\n<li>\n<p>遍历 <code>map</code> 、 <code>set</code> ：使用 <code>Array.from</code>  转换 key-value 就行了</p>\n</li>\n<li>\n<p>遍历 <code>object</code> ：使用 <code>Object.keys</code> 、 <code>Object.values</code> 、 <code>Object.entries</code>  就行了，也可以用 <code>for-in</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"三-语言自带数据结构\"><a class=\"anchor\" href=\"#三-语言自带数据结构\">#</a> 三、 语言自带数据结构</h1>\n<h2 id=\"1-数组\"><a class=\"anchor\" href=\"#1-数组\">#</a> 1. 数组</h2>\n<ul>\n<li>\n<p>JavaScript：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10*10 的二维数组</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 尾部插入 1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 尾部删除，返回该元素</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">shift</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 头部删除，返回该元素</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 头部插入 1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 截取从索引 0-10 的数组（左闭右开），返回一个新数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除索引为 5 开头的 1 个数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在索引为 5 的位置插入 a 和 b</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">reverse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 翻转数组</span></pre></td></tr></table></figure></li>\n<li>\n<p>java：</p>\n<pre class=\" language-language-java\"><code class=\"language-language-java\">int [] array=new int [10];//创建初始值为0长度为10的数组\nint [] array=new int [] &#123;1,2,3,4,5&#125;;\nint [] array=&#123;1,2,3,4,5&#125;;//或者直接\nint[][] array = new int[10][10];//创建二维\n</code></pre>\n</li>\n</ul>\n<h2 id=\"2-map\"><a class=\"anchor\" href=\"#2-map\">#</a> 2. map</h2>\n<ul>\n<li>\n<p>JavaScript：</p>\n<ul>\n<li>\n<p>map</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回所有值，类似数组的形式，可以用 Array.from 转为数组</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 返回键值对，可以用 Array.from () 转为 2 为数组</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>map<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取长度</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>map<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>object</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> map<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>map<span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'value1'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//set，这里注意一下，键会被转为 string 类型</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>map<span class=\"token punctuation\">.</span>key2<span class=\"token operator\">=</span><span class=\"token string\">'value2'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//set</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>map<span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">]</span><span class=\"token comment\">//get</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>map<span class=\"token punctuation\">.</span>key1<span class=\"token comment\">//get</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token string\">'key1'</span> <span class=\"token keyword\">in</span> map<span class=\"token punctuation\">;</span><span class=\"token comment\">//has()</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">delete</span> map<span class=\"token punctuation\">.</span>key1<span class=\"token punctuation\">;</span><span class=\"token comment\">// 删除对应的键</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token comment\">// 返回所有的键，数组</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 键值对，二维数组</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>map<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length</pre></td></tr></table></figure><p>object 和 map 的差异：</p>\n<ul>\n<li>Object: 支持 JSON.stringify 和 JSON.parse 的操作；Map: 不支持；</li>\n<li>Object: 以字符串形式保存键；map 没有限制</li>\n<li>Object:key 升序排序；map 按 set 顺序</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-set\"><a class=\"anchor\" href=\"#3-set\">#</a> 3. set</h2>\n<ul>\n<li>\n<p>JavaScript：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>set<span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">;</span><span class=\"token comment\">// 获取长度</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>set<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"4-string\"><a class=\"anchor\" href=\"#4-string\">#</a> 4. string</h2>\n<ul>\n<li>\n<p>JavaScript</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 除了 + 是拼接字符串，其他运算符均是转为数字</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 切割字符串，也是字符串转数组的一种方法</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 截取索引 0-10 的字符串</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 截取索引 0 开始长度 10 的字符串</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 查找 `abc` 在 s 中第一次出现的索引</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">lastIndexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 查找 `abc` 在 s 中第一次出现的索引 (可用正则表达式)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 是否以 'abc' 开头</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'abc'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 把 a 替换为 b，仅替换第一个，可用正则表达式</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">replace</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">a</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">g</span></span><span class=\"token punctuation\">,</span><span class=\"token string\">'b'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//g 全局匹配，替换所有 a</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 移除左右空白</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>s<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 转为 ASCII 码</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token operator\">-</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断是否为数字</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token operator\">/</span><span class=\"token punctuation\">[</span>a<span class=\"token operator\">-</span>zA<span class=\"token operator\">-</span><span class=\"token constant\">Z</span><span class=\"token punctuation\">]</span><span class=\"token operator\">/</span><span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 判断是否为字母</span></pre></td></tr></table></figure></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/04/11/markdown%E8%AF%AD%E6%B3%95/",
            "url": "https://nitgod1996.com/2022/04/11/markdown%E8%AF%AD%E6%B3%95/",
            "title": "markdown语法",
            "date_published": "2022-04-11T07:58:56.000Z",
            "content_html": "<h1 id=\"标题-1\"><a class=\"anchor\" href=\"#标题1\">#</a> #：标题 1</h1>\n<h2 id=\"标题-2\"><a class=\"anchor\" href=\"#标题2\">#</a> ##：标题 2</h2>\n<h3 id=\"标题-3\"><a class=\"anchor\" href=\"#标题3\">#</a> ###： 标题 3</h3>\n<h4 id><a class=\"anchor\" href=\"#\">#</a> ####：....</h4>\n<p><sub>~ 中划线</sub>～：<s>中划线</s></p>\n<p>* 倾斜 *：<em>倾斜</em></p>\n<p>** 加粗 **：<strong>加粗</strong></p>\n<p>`行内代码`： <code>行内代码</code></p>\n<p>```块状代码```：如 ```javascript```，必须顶格写</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>*+ 空格：无序号编号</p>\n<ul>\n<li>\n<p>唱</p>\n<ul>\n<li>tap 键</li>\n</ul>\n</li>\n<li>\n<p>跳</p>\n<p>按回车，圆圈消失</p>\n</li>\n<li>\n<p>rap</p>\n</li>\n<li>\n<p>篮球</p>\n</li>\n</ul>\n<p>序号 + 空格：有序号编号</p>\n<ol>\n<li>\n<p>唱</p>\n<ol>\n<li>tap 键</li>\n</ol>\n</li>\n<li>\n<p>跳</p>\n<p>按回车，序号消失</p>\n</li>\n<li>\n<p>rap</p>\n</li>\n<li>\n<p>篮球</p>\n</li>\n</ol>\n<p>---：分割线</p>\n<hr>\n<h1 id=\"内嵌-html\"><a class=\"anchor\" href=\"#内嵌html\">#</a> 内嵌 html</h1>\n<p>&lt;u&gt;&lt;/u&gt;：&lt;u &gt; 下划线 &lt;/u&gt;</p>\n<p>&lt;font color=red&gt;&lt;/font&gt;：字体参数：颜色等</p>\n<p>设置锚点：</p>\n<ol>\n<li>&lt;span id = &quot;jump&quot;&gt; 跳到这 &lt;/span&gt;：</li>\n<li>[锚点](#jump)</li>\n</ol>\n<p>如下：</p>\n<p><a href=\"#jump\">锚点</a></p>\n<p>&lt;span id = &quot;jump&quot;&gt; 跳到这 &lt;/span&gt;</p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/03/16/note/%E5%89%8D%E7%AB%AF/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "url": "https://nitgod1996.com/2022/03/16/note/%E5%89%8D%E7%AB%AF/JavaScript%E7%9F%A5%E8%AF%86%E7%82%B9/",
            "title": "",
            "date_published": "2022-03-16T11:35:26.855Z",
            "content_html": "<h1 id=\"一-常见的\"><a class=\"anchor\" href=\"#一-常见的\">#</a> 一、 常见的</h1>\n<h2 id=\"1-typeof-instanceof-constructor-newtarget-的区别\"><a class=\"anchor\" href=\"#1-typeof-instanceof-constructor-newtarget的区别\">#</a> 1. typeof、instanceof、constructor、new.target 的区别</h2>\n<p>这些函数、关键字都可以判断数据类型，总结一下他们的区别</p>\n<hr>\n<p><strong>typeof</strong>： <code>typeof</code>  主要用于<strong>基本数据类型</strong>以及<strong>函数</strong>的判别，对引用数据类型<strong> object</strong> 就无法细分其类别了。其以<strong>字符串</strong>形式返回结果</p>\n<blockquote>\n<p>语法：</p>\n<ol>\n<li><code>typeof+空格+变量/常量</code></li>\n<li><code>typeof(变量/常量)</code></li>\n</ol>\n</blockquote>\n<ul>\n<li><code>undefined</code> ：表示值未定义</li>\n<li><code>boolean</code> ：布尔值</li>\n<li><code>string</code> ：字符串</li>\n<li><code>number</code> ：数值</li>\n<li><code>object</code> ：对象或 null</li>\n<li><code>function</code> ：函数和 class</li>\n<li><code>symbol</code> ：符号</li>\n</ul>\n<hr>\n<p><strong>instanceof</strong>： <code>instanceof</code>  主要是判断后者是否处于前者的<strong>原型链</strong>上游。</p>\n<p>可以用来判断：</p>\n<ol>\n<li>对象实例是否属于该对象（伪类）</li>\n<li>对象（伪类）是否继承于另一个对象（伪类）</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; <code>instanceof</code>  不适用于原始值（简单类型）&lt;/font&gt;</p>\n<hr>\n<p><strong>constructor</strong>： <code>constructor</code> ：对象的属性，是一个<strong>指针</strong>，指向创建该对象的<strong>构造函数</strong>。</p>\n<p>不过在 JavaScript 中构造函数也相当于对象（伪类）了，相当于就是返回<strong>对象实例属于哪个对象（伪类）</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Person]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Object]</span></pre></td></tr></table></figure><p><code>constructor</code>  是属于<strong>对象实例</strong>的属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Function]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这里就把 Person 看成是个函数实例了，而不是类</span></pre></td></tr></table></figure><p>但可以通过原型 <code>prototype.constructor</code>  获取构造函数（因为每个类的原型就是一个原型实例对象）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Person]</span></pre></td></tr></table></figure><p>严格说， <code>constructor</code>  就是属于 <code>prototype</code>  的属性，可以通过 <code>prototype</code>  修改 <code>constructor</code> ，本来是不可枚举，修改后不指定枚举状态的话是默认可枚举</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Object]</span></pre></td></tr></table></figure><hr>\n<p><strong>new.target</strong>：独属于<strong>函数</strong>的属性，返回对象实例的构造函数。</p>\n<ul>\n<li>如果函数正常调用（没有用 <code>new</code>  实例化）： <code>new.target</code>  返回 <code>undefined</code></li>\n<li>如果 <code>new</code>  实例化了对象： <code>new.target</code>  返回该构造函数</li>\n</ul>\n<p>因为 <code>new.target</code>  是函数的装有属性，和 <code>arguments</code>  一样，因此 &lt;font color=red&gt; 只能在函数体内调用 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: King]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure><h2 id=\"2-上下文-作用域及垃圾回收\"><a class=\"anchor\" href=\"#2-上下文-作用域及垃圾回收\">#</a> 2. 上下文、作用域及垃圾回收</h2>\n<h3 id=\"21-上下文\"><a class=\"anchor\" href=\"#21-上下文\">#</a> 2.1 上下文</h3>\n<blockquote>\n<p>我的理解是代码执行环境，以函数作用域为单位，包括该执行环境的变量、函数声明、参数等信息</p>\n</blockquote>\n<p>执行上下文主要有<strong>全局上下文</strong>（window）和<strong>函数上下文</strong></p>\n<ul>\n<li><strong>函数上下文</strong>在所有代码执行完毕会被销毁。</li>\n<li><strong>全局上下文</strong>在程序关闭时（网页关闭）销毁</li>\n<li>全局执行上下文只有一个，函数执行上下文在每次调用函数时候会创建一个新的函数执行上下文。</li>\n</ul>\n<p><strong>生命周期</strong></p>\n<p>函数调用，当<strong>代码执行流</strong>进入函数时，该函数调用的上下文（保存该层）压入<strong>上下文栈</strong>，调用结束弹出上下文（继续该层的执行）。</p>\n<p>解释一下：就是在一行行代码中，调用了一个函数，那么把执行到调用函数为止的参数等信息（<strong>上下文</strong>）先保存到栈里，进入函数进行编译，函数执行完后，再把栈里的这些参数等拿出来继续执行。</p>\n<hr>\n<h3 id=\"22-垃圾回收\"><a class=\"anchor\" href=\"#22-垃圾回收\">#</a> 2.2 垃圾回收</h3>\n<blockquote>\n<p>JavaScript 会自动释放内存，只要变量不再被引用，便会被回收</p>\n</blockquote>\n<p><strong>标记清理（最常用）</strong></p>\n<p>当变量进入上下文（在该作用域被声明）时，该变量会被加上 “存在于该上下文” 的标记（标记 called 存在于上下文），然后离开时也会被加上 “离开上下文” 的标记。</p>\n<p><strong>垃圾回收</strong>程序运行时：</p>\n<ol>\n<li>先标记内存中所有变量（认为所有变量都是待删除的）</li>\n<li>遍历所有变量</li>\n<li>找出在上下文中的变量（集合<strong> A</strong>）（正在使用的变量）</li>\n<li>找出所有被<strong> A</strong> 引用的变量（集合<strong> B</strong>）</li>\n<li>去除<strong> A</strong> 和<strong> B</strong> 的标记</li>\n<li>剩下的带标记的都清理了</li>\n</ol>\n<p>几乎所有主流浏览器都使用这种方法清理内存。</p>\n<p><strong>标记方法</strong>有多种：</p>\n<ul>\n<li>当变量进入上下文时，反转某一位</li>\n<li>维护 “在上下文中” 和 “不在上下文中” 2 个变量列表</li>\n<li>等</li>\n</ul>\n<p><strong>引用计数</strong></p>\n<blockquote>\n<p>思路：对每个值记录它被引用的次数</p>\n</blockquote>\n<ol>\n<li>该值每被一个新的变量引用，引用值 + 1</li>\n<li>引用该值的变量被覆盖 / 删除，引用值 - 1</li>\n<li>内存回收时， <code>if</code>  该变量引用值 ===0，则回收该值</li>\n</ol>\n<p>引用计数看上去很简单，但同样问题也很多，比如：</p>\n<ol>\n<li>a 和 b 互相引用，则 a 和 b 永远不会被删除，但实际上 a 和 b 可能都要被删除</li>\n</ol>\n<p><strong>回收周期</strong></p>\n<p>垃圾回收程序周期运行，当垃圾累积到一定数量会影响性能，因此回收周期（时间调度）很重要。</p>\n<p>回收频率太低会导致<strong>垃圾积压</strong>，频率太高会到处<strong>小内存片泛滥</strong>。</p>\n<p>IE7 后，JavaScript 引擎的垃圾回收程序为<strong>动态</strong>改变分配变量、字面量或数组槽位等阈值。</p>\n<ul>\n<li>\n<p>设一个初始阈值。</p>\n</li>\n<li>\n<p>如果有一次回收内存不到已分配的 15%，则阈值会翻倍。</p>\n</li>\n<li>\n<p>如果有一次回收内存达到 85%，则阈值重置为默认值。</p>\n</li>\n</ul>\n<p>（有点像网络拥塞控制的慢开始和快重传）</p>\n<h3 id=\"23-内存泄露\"><a class=\"anchor\" href=\"#23-内存泄露\">#</a> 2.3 内存泄露</h3>\n<p>上面说了，被引用的变量不会被回收内存，而我们有时候可能因为一些失误导致一些不必要的变量一直被引用着。</p>\n<ul>\n<li>\n<p>通过 <code>const</code>  和 <code>let</code>  提升性能： <code>const</code>  和 <code>let</code>  都以<strong>块</strong>为作用域，比 <code>var</code>  能更早被垃圾回收。</p>\n</li>\n<li>\n<p>尽可能少地制造<strong>隐藏类</strong>：即对象实例不要添加新的属性。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> a2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候 <code>a1</code>  和 <code>a2</code>  同属于一个类（ <code>Article</code> ）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a2<span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span><span class=\"token string\">'jake'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候 <code>a1</code>  和 <code>a2</code>  还是同属于一个类（ <code>Article</code> ），但他们不属于同一个<strong>隐藏类</strong>。其中， <code>a2</code>  的隐藏类比 <code>a1</code>  多了一个 <code>author</code>  属性。</p>\n<p>&lt;font color=red&gt; 能够共享隐藏类的对象<strong>性能更好</strong>，即尽可能少的制造隐藏类 &lt;/font&gt;</p>\n</li>\n<li>\n<p>闭包可能会引起内存泄露：不要在闭包写长期占用的变量引用</p>\n</li>\n</ul>\n<h2 id=\"3-rem-自适应\"><a class=\"anchor\" href=\"#3-rem自适应\">#</a> 3. rem 自适应</h2>\n<p>摘要：rem 是相对于根元素 &lt;html&gt;，这样就意味着，我们只需要在根元素确定一个 px 字号，则可以来算出元素的宽高。</p>\n<p>flexible.js 是如何通过 rem 实现自适应的呢？ 通过 rem 与 px 的换算，你可以把设计稿从 px 转到 rem。</p>\n<p>简单的理解， <code>rem</code>  就是相对于根元素 <code>&lt;html&gt;</code>  的 <code>font-size</code>  来做计算。而我们的方案中使用 <code>rem</code>  单位，是能轻易的根据 <code>&lt;html&gt;</code>  的 <code>font-size</code>  计算出元素的盒模型大小。而这个特色对我们来说是特别的有益处。</p>\n<hr>\n<p>简言之：rem 即是 <code>html</code>  标签的 <code>font-size</code>  的倍数，如下</p>\n<figure class=\"highlight css\"><figcaption data-lang=\"CSS\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token selector\">html</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span>20px<span class=\"token punctuation\">;</span><span class=\"token comment\">/* 这个默认是 16px*/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token selector\">.btn</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token property\">width</span><span class=\"token punctuation\">:</span> 6rem<span class=\"token punctuation\">;</span>  </pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>width 即是 120px。1rem=20px</p>\n<p>通过 flexible.js 根据屏幕分辨率自动计算合适的 <code>html</code>  的 <code>font-size</code> ，rem 的大小也就能随着屏幕（窗口）大小随动了。</p>\n<h1 id=\"二-面向对象\"><a class=\"anchor\" href=\"#二-面向对象\">#</a> 二、 面向对象</h1>\n<h2 id=\"1-原型链\"><a class=\"anchor\" href=\"#1-原型链\">#</a> 1. 原型链</h2>\n<h3 id=\"11-原型-prototype\"><a class=\"anchor\" href=\"#11-原型prototype\">#</a> 1.1 原型 prototype</h3>\n<ul>\n<li>\n<p>prototype 是对象（伪类）的一个属性，继承于 object 对象</p>\n</li>\n<li>\n<p>prototype 是所属对象的一个<strong>对象实例</strong>，即原型对象</p>\n<p>因此 prototype 都是以 <code>&#123;&#125;</code>  的形式定义的， <code>&#123;&#125;</code>  就是一个对象实例，其默认 <code>constructor</code>  属性指向其对象（伪类），而我们自己创建的 <code>&#123;&#125;</code>  的 <code>constructor</code>  指向 <code>object</code></p>\n</li>\n<li>\n<p>构造函数初始化的属性不在 prototype 内</p>\n</li>\n<li>\n<p>prototype 有个 <code>constructor</code>  属性指向构造函数</p>\n</li>\n</ul>\n<h3 id=\"12-原型层级原型链\"><a class=\"anchor\" href=\"#12-原型层级原型链\">#</a> 1.2 原型层级（原型链）</h3>\n<p>可以简单的理解为继承关系，因为 js 的继承是通过原型实现的。关键代码 <code>Child.prototype=new Father();</code> ，子类的原型是父类的实例</p>\n<p>对象实例→对象原型（父类 1 实例 /new 构造函数）→父类 1 原型（父类 2 实例 /new 构造函数）→...→object，这就是一条原型链。</p>\n<ol>\n<li>\n<p>对象创建了一个实例，当该实例访问一个属性时，</p>\n</li>\n<li>\n<p>首先看这个属性是该<strong>实例</strong>新增的还是在该实力上修改过；</p>\n</li>\n<li>\n<p>如果没有，那么看看<strong>构造函数</strong>有没有初始化这个属性（这层也是<strong>相当于实例上</strong>的，因为构造函数只有在 new 的时候才会初始化实例和属性）；</p>\n</li>\n<li>\n<p>如果还是没有，那么看看<strong>对象的原型</strong>上有没有这个属性；</p>\n</li>\n<li>\n<p>还是没有 ，再看原型对象的原型（<strong>父类的原型</strong>）有没有初始化这个属性；</p>\n</li>\n<li>\n<p>还是没有，再往原型链上游一步步找，直到<strong> object</strong> 为止。</p>\n</li>\n</ol>\n<h3 id=\"13-原型的-2-大属性constructor-和_proto_\"><a class=\"anchor\" href=\"#13-原型的2大属性constructor和_proto_\">#</a> 1.3 原型的 2 大属性：constructor 和_<em>proto</em>_</h3>\n<ul>\n<li><code>prototype.constructor</code> ：隶属于 <code>prototype</code>  的属性，指向<strong>构造函数</strong>。</li>\n<li><code>prototype.__proto__</code> ：隶属于 <code>prototype</code>  的属性，指向构造函数的<strong>原型对象</strong>。即<strong>对象的原型</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//prototype 是 Object 的对象实例</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; <code>__proto__</code> 也可以说是指向<strong>原型链中的上一级原型</strong>。因此__proto__是原型链上至关重要的属性，原型链的往上遍历就是通过 <code>__proto__</code> 实现的。&lt;/font&gt;</p>\n<h2 id=\"2-prototype-__proto__和-constructor-的区别\"><a class=\"anchor\" href=\"#2-prototype-__proto__和constructor的区别\">#</a> 2. prototype、__proto__和 constructor 的区别</h2>\n<ul>\n<li><code>prototype</code> ：原型，无需多言，函数做对象类使用时涉及的属性，保存该类的部分（还有部分是保存在构造函数中的）成员函数、成员变量和一些对象类的属性（如 <code>constructor</code>  和 <code>__proto__</code> 均是 <code>prototype</code>  的属性）</li>\n<li><code>prototype.constructor</code> ：隶属于 <code>prototype</code>  的属性，指向构造函数。详见第一章的 1</li>\n<li><code>prototype.__proto__</code> ：隶属于 <code>prototype</code>  的属性，指向构造函数的<strong>原型对象</strong>。</li>\n</ul>\n<p>下面着重讲一下 <code>__proto__</code> 的性质，及一些相关的对象：</p>\n<p>在 JavaScript 原型链中，最底层的是<strong>对象实例</strong>，其次是对应构造函数的<strong>原型对象</strong>，再次是<strong>父类</strong>的原型，一直到<strong> Object</strong>，如下所示：</p>\n<p>对象实例→对象类。原型→对象类父类。原型→...→Object. 原型→null</p>\n<p>因此 <code>__proto__</code> 也可以说是指向<strong>原型链中的上一级原型</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//prototype 是 Object 的对象实例</span></pre></td></tr></table></figure><p><strong>如何分别解释 2 中说法呢：</strong></p>\n<ol>\n<li>指向<strong>构造函数的原型对象</strong></li>\n<li>指向<strong>原型链中的上一级原型</strong>。</li>\n</ol>\n<p>看下面例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"ha\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cpro<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>JavaScript 中的继承是通过原型链实现的，子类（Child）的原型就是父类（Father）的对象实例，因此以上 2 种说法在逻辑上等价</p>\n<p>当访问一个对象的属性时：</p>\n<ul>\n<li>\n<p>如果该对象内部不存在这个属性，那么就会去它的 <code>__proto__</code> 属性所指向的对象原型里找；</p>\n</li>\n<li>\n<p>如果还是不存在，则继续往父对象的 <code>__proto__</code> 属性所指向的那个原型（可以理解为爷爷对象的原型）里找；</p>\n</li>\n<li>\n<p>直到原型链顶端 null，null 为<strong>原型链</strong>的终点</p>\n</li>\n</ul>\n<p>所以<strong>顺着原型链</strong>找就是通过 <code>__proto__</code> 实现的</p>\n<h2 id=\"3-属性取值优先级\"><a class=\"anchor\" href=\"#3-属性取值优先级\">#</a> 3. 属性取值优先级</h2>\n<p>优先级：实例赋值 &gt; 构造函数赋值 &gt; 原型赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>attribute<span class=\"token operator\">=</span><span class=\"token string\">'构造函数'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>attribute<span class=\"token operator\">=</span><span class=\"token string\">'原型'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> test<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>test<span class=\"token punctuation\">.</span>attribute<span class=\"token operator\">=</span><span class=\"token string\">'实例'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">.</span>attribute<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 优先输出 ' 实例 ',' 实例 ' 删掉输出 ' 构造函数'</span></pre></td></tr></table></figure>",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "url": "https://nitgod1996.com/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/",
            "title": "JavaScript高级程序设计",
            "date_published": "2022-01-14T09:03:50.100Z",
            "content_html": "<h1 id=\"一-什么是-javascript\"><a class=\"anchor\" href=\"#一-什么是javascript\">#</a> 一、 什么是 JavaScript</h1>\n<h2 id=\"1-javascript-的构成\"><a class=\"anchor\" href=\"#1-javascript的构成\">#</a> 1. JavaScript 的构成</h2>\n<p>完整的 JavaScript 实现包含以下 3 个部分</p>\n<ul>\n<li>核心（ECMAScript）：提供脚本的核心功能</li>\n<li>文档对象模型（DOM）：提供与网页（HTML 页面）内容交互的方法和接口</li>\n<li>浏览器对象模型（BOM）：提供与浏览器交互的方法和接口</li>\n</ul>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220114172758293.png\" alt=\"image-20220114172758293\"></p>\n<h3 id=\"11-ecmascript\"><a class=\"anchor\" href=\"#11-ecmascript\">#</a> 1.1 ECMAScript</h3>\n<p><strong>ECMAScript</strong> 即 ECMA-262 定义的语言，并不局限于 Web 浏览器。</p>\n<blockquote>\n<p>ECMA-262 是一个名叫 ECMA（欧洲计算机制造商协会）的组织发布的标准。在这个标准之下呢，又定义了 ECMAScript。而在遵循 ECMAScript 的基础上，又有了 JavaScript。可以说，JavaScript 是根据 ECMAScript 的一个实现，所以 ECMAScript 又被称为 ECMAScript 规范。</p>\n</blockquote>\n<p>ECMAScript 是众多脚本语言的一个<strong>基准</strong>，JavaScript 是其中一种，属于浏览器脚本。</p>\n<p>ECMA-262 定义了：</p>\n<ol>\n<li>语法</li>\n<li>类型</li>\n<li>语句</li>\n<li>关键字</li>\n<li>保留字</li>\n<li>操作符</li>\n<li>全局对象</li>\n</ol>\n<h3 id=\"12-dom\"><a class=\"anchor\" href=\"#12-dom\">#</a> 1.2 DOM</h3>\n<p>DOM（Document Object Model）是一个应用编程接口（API），用于在 HTML 中使用扩展的 XML。（ <code>document.</code>  调用的均是 DOM 的范畴）</p>\n<p>DOM 把整个页面（HTML）抽象为一组分层节点（类似<strong>树</strong>），如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Sample Page<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span> Hello World! <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span> 无样式标签 <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>可以构建成如下的节点树：</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220114174348004.png\" alt=\"image-20220114174348004\"></p>\n<p>（椭圆代表的不是叶节点，而是该节点的内容）</p>\n<p>使用 DOM API 可以随心所欲地删除、添加、替换、修改节点</p>\n<p>DOM 主要有以下功能模块：</p>\n<ul>\n<li>level1：\n<ul>\n<li>映射文档结构</li>\n</ul>\n</li>\n<li>level2：\n<ul>\n<li>DOM 视图：追踪文档不同视图的接口。（可以把视图看作 1 个 HTML 页面）</li>\n<li>DOM 事件：事件处理的接口</li>\n<li>DOM 样式：处理元素 CSS 样式的接口</li>\n<li>DOM 遍历和范围：遍历和操作 DOM 树的接口</li>\n</ul>\n</li>\n<li>level3：\n<ul>\n<li>加载和保存文档的方法</li>\n<li>验证文档的方法</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-bom\"><a class=\"anchor\" href=\"#13-bom\">#</a> 1.3 BOM</h3>\n<p>BOM（Browser Object Model）用于支持访问和操作浏览器的<strong>窗口</strong>的 API。（ <code>window.</code>  调用的即是 BOM 的 API，不写默认是 <code>window.</code>  如 <code>alter</code> 。实际上 <code>document</code>  也是 <code>window.document</code> ）</p>\n<p>BOM 主要针对浏览器的<strong>窗口</strong>和<strong>子窗口</strong>，主要有以下功能：</p>\n<ul>\n<li>弹出浏览器窗口</li>\n<li>移动、缩放和关闭浏览器窗口</li>\n<li><code>navigator</code>  对象提供<strong>浏览器</strong>的详细信息（版本、型号等）</li>\n<li><code>location</code>  对象提供浏览器<strong>加载页面</strong>（用于渲染浏览器的文档.html、.css、.js 等）的详细信息</li>\n<li><code>screen</code>  对象提供关于用户<strong>屏幕</strong>分辨率等信息</li>\n<li><code>performance</code>  对象提供浏览器<strong>内存占用</strong>、<strong>导航</strong>行为和<strong>时间统计</strong>等信息</li>\n<li>对<strong> cookie</strong> 的支持</li>\n<li>其他自定义对象如 <code>XMLHttpRequest</code></li>\n</ul>\n<h1 id=\"二-html-中的-javascript\"><a class=\"anchor\" href=\"#二-html中的javascript\">#</a> 二、 HTML 中的 JavaScript</h1>\n<p>本章概要：</p>\n<ul>\n<li>JavaScript 脚本的引入（内部写法，外部引入）</li>\n<li>JavaScript 脚本的加载时间（&lt;script&gt; 放在 body 最后、defer 滞后执行、aysnc 异步执行）</li>\n<li>&lt;noscript&gt; 标签，当浏览器不支持脚本时显示</li>\n</ul>\n<h2 id=\"1-ltscriptgt-元素静态加载脚本\"><a class=\"anchor\" href=\"#1-script元素静态加载脚本\">#</a> 1. &lt;script&gt; 元素（静态加载脚本）</h2>\n<p>JavaScript 插入 HTML 的主要方法是使用 &lt;script&gt; 元素。内部脚本和外部脚本的插入有细微区别。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token comment\">&lt;!-- 外部 js 插入方法，中间不允许有代码 --></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span><span class=\"token script\"><span class=\"token language-javascript\"> <span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>在<span class=\"token constant\">XHTML</span>中也可以这么写，但在<span class=\"token constant\">HTML</span>中不行<span class=\"token operator\">--</span><span class=\"token operator\">></span></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">&lt;</span>script<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span><span class=\"token operator\">--</span>内部js插入方法，代码写在这<span class=\"token operator\">--</span><span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>&lt;script&gt; 标签有以下属性：</p>\n<ul>\n<li>async：可选。表示<strong>立即开始</strong>下载脚本，但不能阻止其他页面动作（js 没加载好也不能阻断页面加载）</li>\n<li>defer：可选。文档解析和显示<strong>完成后</strong>，再执行脚本</li>\n<li>src：可选。要引入的外部 js 的地址。如果不是本地的 js，则浏览器会发送 <code>GET</code>  请求</li>\n</ul>\n<p>其他的不怎么常用，以上 3 个属性均是<strong>外部导入</strong> js 的用法</p>\n<p><strong>注意点</strong>：</p>\n<ol>\n<li>\n<p>代码中不能出现 <code>&lt;/script&gt;</code>  的字符串，否则会报错。如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>\"<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\")</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>因为 js 是<strong>解释型</strong>语言，代码会被从上到下解释。当解释器识别到 <code>&lt;/script&gt;</code>  时，会以为是结束标签。</p>\n<p>此时，在 <code>/</code>  前面加个转义符 <code>\\</code>  即可，如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"&lt;\\/script>\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>使用了 <code>src</code>  属性的 &lt;/script&gt; 标签（引入外部 js），不能再写 js 代码，如下</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"这样写是错误的\"</span><span class=\"token punctuation\">)</span></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>如果硬要这样写，那么中间的代码会被<strong>忽略</strong>，但下载外部 js 可以正常执行</p>\n</li>\n<li>\n<p>浏览器按照 &lt;script&gt; 在页面中的<strong>顺序</strong>解释脚本（前提是没用 <code>defer</code>  和 <code>async</code>  属性）</p>\n</li>\n</ol>\n<h3 id=\"11-脚本加载时机\"><a class=\"anchor\" href=\"#11-脚本加载时机\">#</a> 1.1 脚本加载时机</h3>\n<p>有些地方 <code>&lt;script&gt;</code>  被放在 <code>&lt;head&gt;</code>  标签内，如下</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 页面内容 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>但这样会先加载 js 脚本，此时页面会有<strong>空白期</strong>，再渲染页面，就可能页面加载感觉会有<strong>延迟</strong>。</p>\n<p>我们希望一点开浏览器就立马加载页面，一般由以下 3 种方法：</p>\n<ol>\n<li>\n<p>把 <code>&lt;script&gt;</code>  放在 <code>&lt;body&gt;</code>  的最后，即待页面渲染完毕，再加载外部的脚本，如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 页面内容 --></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    \t<span class=\"token comment\">// 如果这里有 jQuery 代码，则需要把引入 jQuery 的代码放在此标签下面</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>jQuery.min.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>defer</code>  属性。即<strong>延迟执行脚本</strong>属性。文档解析和显示<strong>完成后</strong>，再执行脚本</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 页面内容 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>async</code>  属性（不推荐）。即<strong>异步执行脚本</strong>。加载脚本和页面渲染<strong>互不干扰</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">async</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>example.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">&lt;!-- 页面内容 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>使用异步脚本则脚本有可能先于页面加载，那么该脚本 &lt;font color=red&gt; 不应该有修改 DOM 的操作 &lt;/font&gt;</p>\n</li>\n</ol>\n<h3 id=\"12-多个-ltscriptgt\"><a class=\"anchor\" href=\"#12-多个script\">#</a> 1.2 多个 &lt;script&gt;</h3>\n<p>当 html 页面中出现多个 &lt;script&gt; 标签时，JavaScript 引擎会多个 &lt; script &gt; 合并为一个域。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">var</span> name<span class=\"token operator\">=</span><span class=\"token string\">'meta'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'meta'</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//26</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"2-动态加载脚本\"><a class=\"anchor\" href=\"#2-动态加载脚本\">#</a> 2. 动态加载脚本</h2>\n<p>除了 <code>&lt;script&gt;</code>  标签，js 也可以通过 DOM API 添加 <code>script</code>  元素加载指定的脚本（外部脚本）。</p>\n<p>如下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> script<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>script<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span><span class=\"token string\">'gibberish.js'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>document<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>当然也可以通过 <code>jQuery</code>  或 <code>vue</code>  添加</p>\n<p>这种方法以<strong>异步</strong>加载，但不是所有浏览器都支持 <code>async</code> ，因此可以将其设置为同步加载</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>script<span class=\"token punctuation\">.</span>async<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但是这种方法获取的资源对浏览器加载器<strong>不可见</strong>，因此会影响优先级，可能会<strong>严重影响性能</strong>。如果优先级高可以在文档头部显式的声明，让预加载器知道。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>preload<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>gibberish.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h2 id=\"3-xhtml\"><a class=\"anchor\" href=\"#3-xhtml\">#</a> 3. XHTML</h2>\n<p>XHTML 是 HTML 的严格版本（已退出历史舞台，但有些地方还有残留）</p>\n<h2 id=\"4-行内代码-or-外部引入\"><a class=\"anchor\" href=\"#4-行内代码or外部引入\">#</a> 4. 行内代码 or 外部引入</h2>\n<p>虽然可以直接在 HTML 中嵌入 JavaScript 代码，但通常认为将 JavaScript 代码放在文件<strong>外部最佳</strong></p>\n<p>理由如下：</p>\n<ul>\n<li>可维护性：JavaScript 如果分散在很多 HTML 页面，对导致维护困难。用一个目录保存 js 文件比较容易维护</li>\n<li>缓存：如果 2 个页面用到同一个文件，则该文件只需下载一次</li>\n<li>适应未来：</li>\n</ul>\n<h2 id=\"5-ltnoscriptgt-元素\"><a class=\"anchor\" href=\"#5-noscript元素\">#</a> 5. &lt;noscript&gt; 元素</h2>\n<p>禁用 JavaScript 的元素，针对早期有些浏览器不支持 JavaScript（现在 100% 浏览器支持 JavaScript）</p>\n<p>在以下情况下，浏览器显示 &lt;noscript&gt;&lt;/noscript &gt; 包裹的代码：</p>\n<ul>\n<li>浏览器不支持脚本</li>\n<li>浏览器对脚本的支持<strong>关闭</strong></li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>例子<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">defer</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">'</span>example.js<span class=\"token punctuation\">'</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">&lt;!-- 当浏览器不支持脚本时显示下面内容 --></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>                这个页面不支持JavaScript脚本</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>            <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>noscript</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><h1 id=\"三-语法基础\"><a class=\"anchor\" href=\"#三-语法基础\">#</a> 三、 语法基础</h1>\n<h2 id=\"1-语法\"><a class=\"anchor\" href=\"#1-语法\">#</a> 1. 语法</h2>\n<h3 id=\"11-区分大小写\"><a class=\"anchor\" href=\"#11-区分大小写\">#</a> 1.1 区分大小写</h3>\n<p>JavaScript 严格区分大小写</p>\n<h3 id=\"12-标识符变量-函数的名称\"><a class=\"anchor\" href=\"#12-标识符变量-函数的名称\">#</a> 1.2 标识符：（变量、函数的名称）</h3>\n<ul>\n<li>\n<p>第一个字符必须是<strong>字母</strong>、<strong>下划线</strong>、或 **$**</p>\n</li>\n<li>\n<p>其他字符可以是<strong>字母</strong>、<strong>下划线</strong>、<strong>$<strong> 或</strong>数字</strong></p>\n</li>\n<li>\n<p>驼峰式命名</p>\n<ul>\n<li>一般<strong>变量</strong>、<strong>函数</strong>、<strong>对象实例</strong>首字母<strong>小</strong>写</li>\n<li><strong>类</strong>、<strong>对象构造器</strong>首字母<strong>大</strong>写</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"13-注释\"><a class=\"anchor\" href=\"#13-注释\">#</a> 1.3 注释</h3>\n<p>和 <code>C</code> 、 <code>JAVA</code>  等一样</p>\n<ul>\n<li>单行：//</li>\n<li>多行：/**/</li>\n</ul>\n<h3 id=\"14-严格模式\"><a class=\"anchor\" href=\"#14-严格模式\">#</a> 1.4 严格模式</h3>\n<p>处理 ES3 的不规范写法，对不安全的活动进行<strong>抛出错误</strong>。</p>\n<blockquote>\n<p>语法：在脚本开头加上</p>\n<p><code>&quot;use strict&quot;;</code></p>\n</blockquote>\n<p>严格模式会影响 JavaScript 执行的很多方面。</p>\n<h3 id=\"15-语句\"><a class=\"anchor\" href=\"#15-语句\">#</a> 1.5 语句</h3>\n<ul>\n<li>\n<p>一行语句以分号 <code>;</code>  结尾</p>\n<ul>\n<li>不写分号也能编译，但不推荐</li>\n<li>加分号有助于（删除空行）压缩代码</li>\n<li>加分号可以提升性能。不写分号解析器需要在合适的位置补上分号</li>\n</ul>\n</li>\n<li>\n<p>多个语句可以合并。以 <code>&#123;&#125;</code>  包裹，形成代码块。</p>\n<ul>\n<li>\n<p><code>if</code> 、 <code>for</code>  等，即使只有<strong>一行代码</strong>，也建议用 <code>&#123;&#125;</code>  包裹</p>\n</li>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"推荐\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"不推荐\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-关键字与保留字\"><a class=\"anchor\" href=\"#2-关键字与保留字\">#</a> 2. 关键字与保留字</h2>\n<ul>\n<li>\n<p><strong>关键字</strong>：JavaScript 中有专门用途，不能用作识符或变量名</p>\n<p>break、do、in、typeof、case、else、instanceof、var、catch、export、new、void、class、extends、return、while、const、finally、super、with、continue、for、switch、yield、debugger、function、this、default、if、throw、delete、import、try</p>\n</li>\n<li>\n<p><strong>保留字</strong>：以后可能会成为关键字，不建议用作标识符或变量名</p>\n<ul>\n<li>始终保留：enum</li>\n<li>严格模式保留：implements、package、public、interface、protected、static、let、private</li>\n<li>模块代码保留：await</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-变量\"><a class=\"anchor\" href=\"#3-变量\">#</a> 3. 变量</h2>\n<p>JavaScript 的变量是松散类型（弱类型）的，变量可以保存<strong>任何类型</strong>的数据。</p>\n<p>通过 <code>var</code> 、 <code>let</code> 、 <code>const</code>  关键字声明变量。其中， <code>let</code>  和 <code>const</code>  只能在 ES6 及之后版本可用</p>\n<h3 id=\"31-var-关键字\"><a class=\"anchor\" href=\"#31-var关键字\">#</a> 3.1 var 关键字</h3>\n<ul>\n<li>\n<p><strong>改变变量类型</strong></p>\n<p>可以在后序的代码中改变变量的类型，但<strong>不推荐</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> message<span class=\"token operator\">=</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>message<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 合法，但不推荐</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>作用域</strong></p>\n<p>在函数内部以 <code>var</code>  定义的变量是<strong>局部变量</strong>，出函数体便被销毁</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> message<span class=\"token operator\">=</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>合并语句</strong></p>\n<p>定义多个变量可以写在一行，以 <code>,</code>  分隔即可。（因为是弱类型）</p>\n<p><code>var message=hi,age=29;</code></p>\n</li>\n<li>\n<p><strong>var 声明提升★</strong></p>\n<p><code>var</code>  关键字声明的变量<strong>自动提升到函数域顶部</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 等价于</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">var</span> age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 所以此处输出 undefined</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"32-let-关键字\"><a class=\"anchor\" href=\"#32-let关键字\">#</a> 3.2 let 关键字</h3>\n<p><code>let</code>  和 <code>var</code>  用法基本一样，主要区别如下：</p>\n<ol>\n<li>\n<p><code>let</code>  声明的范围是<strong>块作用域</strong>， <code>var</code>  是<strong>函数作用域</strong>。&lt;font color=red&gt; 即 <code>if</code>  块内 <code>var</code>  声明的变量可以带出去 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> name<span class=\"token operator\">=</span><span class=\"token string\">'nihao'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> age<span class=\"token operator\">=</span><span class=\"token number\">12</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//nihao</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错 ReferenceError: age is not defined</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>var</code>  可以重复声明， <code>let</code>  不行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 合法，但不推荐</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错 SyntaxError: Identifier 'b' has already been declared</span></pre></td></tr></table></figure><p>此外， <code>var</code>  也不能和 <code>let</code>  混用重复声明</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> name<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SyntaxError</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> age<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">var</span> age<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//SyntaxError</span></pre></td></tr></table></figure><p>但是嵌套声明可以，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>let</code>  的声明不会提升到作用域顶部（ <code>let</code>  声明前的区域被称为<strong>暂时性死区</strong>）</p>\n</li>\n<li>\n<p><strong>全局声明</strong></p>\n<ol>\n<li>\n<p><code>var</code>  在全局作用域中声明的变量会变为 <code>window</code>  对象的属性</p>\n</li>\n<li>\n<p><code>let</code>  不会，但仍是全局变量，相应变量会在页面的<strong>生命周期</strong>中<strong>存续</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">var</span> name<span class=\"token operator\">=</span><span class=\"token string\">'meta'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">let</span> age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'meta'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220116195713707.png\" alt=\"image-20220116195713707\"></p>\n</li>\n</ol>\n</li>\n<li>\n<p>for 循环的迭代变量</p>\n<p>for 循环中用 <code>var</code>  声明的迭代变量会渗透到循环体外，而 <code>let</code>  不会。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 因为 var 只在函数域中是局部变量，条件域和循环域都不能限制 var</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//j 也会渗透出域</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 循环结束 i 销毁</span></pre></td></tr></table></figure></li>\n</ol>\n<h3 id=\"33-const-关键字\"><a class=\"anchor\" href=\"#33-const关键字\">#</a> 3.3 const 关键字</h3>\n<p>用法和<strong> let</strong> 基本相同。最大的区别是<strong> const 声明的变量不能修改值</strong>。</p>\n<ul>\n<li>const 只限制对指向变量的<strong>引用</strong>。即如果引用的是个引用类型，如对象、数组，修改其内部的值是合法的。</li>\n<li>const 也不许重复声明</li>\n<li>const 作用域也是块（所有块，和 let 一样）</li>\n</ul>\n<h3 id=\"34-最佳声明规则\"><a class=\"anchor\" href=\"#34-最佳声明规则\">#</a> 3.4 最佳声明规则</h3>\n<ul>\n<li>尽量不用 <code>var</code></li>\n<li><code>const</code>  优先， <code>let</code>  次之：既可以保证不该更改的值不被修改，又可以让读代码的知道这个值不会变</li>\n</ul>\n<h2 id=\"4-数据类型\"><a class=\"anchor\" href=\"#4-数据类型\">#</a> 4. 数据类型</h2>\n<p>ECMScript 有 6 种<strong>简单数据类型</strong>：Undefined、Null、Boolean、Number、String、Symbol。（symbol 是 EMS6 新增）</p>\n<p>和 1 种<strong>复杂数据类型</strong>：Object。（对象、数组、map、set 等都是 Object 类型，也是引用数据类型）</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>number</code></td>\n<td>整数 / 小数 / NaN（not a number）  &lt;br&gt;   <code>true为1，false为0。数字string等值转换</code></td>\n</tr>\n<tr>\n<td><code>string</code></td>\n<td>字符串。&quot;&quot; 和 '' 都表示字符串，和 Python 一样</td>\n</tr>\n<tr>\n<td><code>boolean</code></td>\n<td>true/false  &lt;br&gt;   <code>0/NaN/null/undefined/&quot;&quot;均为false</code> ，其他为 <code>true</code></td>\n</tr>\n<tr>\n<td><code>null</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>undefined</code></td>\n<td></td>\n</tr>\n<tr>\n<td><code>symbol</code></td>\n<td>符号</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"41-typeof-操作符\"><a class=\"anchor\" href=\"#41-typeof操作符\">#</a> 4.1 typeof 操作符</h3>\n<p>因为 JavaScript 是弱类型，可以通过 <code>typeof</code>  返回变量的类型。</p>\n<p><code>typeof</code>  可以返回以下类型：以<strong>字符串</strong>形式</p>\n<ul>\n<li><code>undefined</code> ：表示值未定义</li>\n<li><code>boolean</code> ：布尔值</li>\n<li><code>string</code> ：字符串</li>\n<li><code>number</code> ：数值</li>\n<li><code>object</code> ：对象（不是函数）或 null</li>\n<li><code>function</code> ：函数</li>\n<li><code>symbol</code> ：符号</li>\n</ul>\n<blockquote>\n<p>语法：</p>\n<ol>\n<li><code>typeof+空格+变量/常量</code></li>\n<li><code>typeof(变量/常量)</code></li>\n</ol>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> message<span class=\"token operator\">=</span><span class=\"token string\">'haha'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'string'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'string'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token number\">95</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'number'</span></pre></td></tr></table></figure><h3 id=\"42-undefined-类型\"><a class=\"anchor\" href=\"#42-undefined类型\">#</a> 4.2 Undefined 类型</h3>\n<p>未定义值的变量。</p>\n<ol>\n<li>未声明的变量也算 <code>undefined</code></li>\n<li><code>undefined</code>  在布尔判定时算<strong>假值</strong>，但不 === <code>false</code></li>\n</ol>\n<h3 id=\"43-null-类型\"><a class=\"anchor\" href=\"#43-null类型\">#</a> 4.3 Null 类型</h3>\n<p>空值。逻辑上讲， <code>null</code>  是一个<strong>空对象</strong>指针，这也是 <code>typeof</code>  返回 <code>object</code>  的原因</p>\n<ol>\n<li><code>null</code>  由 <code>undefined</code>  派生而来，2 者表面上相等（ <code>==</code>  相等， <code>===</code>  不等）</li>\n<li>布尔判定为<strong>假</strong></li>\n</ol>\n<h3 id=\"44-boolean-类型\"><a class=\"anchor\" href=\"#44-boolean类型\">#</a> 4.4 Boolean 类型</h3>\n<p>注：JavaScript 严格区分大小写， <code>True</code>  和 <code>False</code>  只能是标识符，不是布尔值</p>\n<p><strong>布尔转换规则：</strong></p>\n<table>\n<thead>\n<tr>\n<th>数据类型</th>\n<th>转换为 true 的值</th>\n<th>转换为 false 的值</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>number</code></td>\n<td>非零数</td>\n<td><code>0</code> 、 <code>NaN</code></td>\n</tr>\n</tbody>\n</table>\n<p>&lt;font color=red&gt; 以上虽然在布尔判定时转换为 <code>true</code>  或 <code>false</code> ，但并不代表其就是 <code>true</code>  或 <code>false</code> 。如 <code>1</code>  并不等于 <code>true</code> ， <code>0</code>  也不等于 <code>fasle</code> &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">===</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token comment\">// 不会进入块</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"45-number-类型\"><a class=\"anchor\" href=\"#45-number类型\">#</a> 4.5 Number 类型</h3>\n<p>number 正常创建是<strong>十进制</strong>整数 / 浮点数，但也可以创建<strong>八进制</strong>和<strong>十六进制</strong></p>\n<ul>\n<li>\n<p>八进制：在最前面 + 0（严格模式无效，抛出语法错误）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num1<span class=\"token operator\">=</span><span class=\"token number\">070</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 十进制为 56</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num2<span class=\"token operator\">=</span><span class=\"token number\">079</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 无效八进制，当成十进制 79</span></pre></td></tr></table></figure></li>\n<li>\n<p>十六进制：加前缀 0x。（不区分大小写）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num1<span class=\"token operator\">=</span><span class=\"token number\">0xA</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num2<span class=\"token operator\">=</span><span class=\"token number\">0X1f</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//31</span></pre></td></tr></table></figure></li>\n</ul>\n<p>但在数学运算中都视为十进制数</p>\n<h4 id=\"451-浮点数\"><a class=\"anchor\" href=\"#451-浮点数\">#</a> 4.5.1 浮点数</h4>\n<ul>\n<li>\n<p>写法：正常按小数写即可。</p>\n<ul>\n<li><code>.1</code>  视作 <code>0.1</code> ，但不推荐。</li>\n</ul>\n</li>\n<li>\n<p>小数点后为 <code>0</code> <strong> 自动转为整数</strong>。因为浮点消耗内存是整数的 2 倍。</p>\n<ul>\n<li><code>1.</code>  视作 <code>1.0</code> ，同时转换成整数 <code>1</code></li>\n</ul>\n</li>\n<li>\n<p><strong>科学计数法</strong>：</p>\n<ul>\n<li><code>3.125e7</code>  等于 <code>31250000</code> ， <code>e7</code>  表示 10 的 7 次幂</li>\n<li><code>3e-17</code>  等于 <code>0.00000000000000003</code> 。（包括小数点前，一共 17 个 0）</li>\n</ul>\n</li>\n<li>\n<p><strong>精确度</strong>：浮点数的精度远不如整数。如 0.1+0.2!==0.3，而是 0.30000000000000004</p>\n<p><strong>十进制整数转二进制方法：除 2 取余；十进制小数转二进制方法：乘 2 除整</strong></p>\n<p>十进制 0.1 转换成二进制，乘 2 取整过程：</p>\n<pre class=\" language-language-tap\"><code class=\"language-language-tap\">0.1 * 2 = 0.2 # 0\n0.2 * 2 = 0.4 # 0\n0.4 * 2 = 0.8 # 0\n0.8 * 2 = 1.6 # 1\n0.6 * 2 = 1.2 # 1\n0.2 * 2 = 0.4 # 0\n.....\n</code></pre>\n<p>从上面可以看出，0.1 的二进制格式是：0.0001100011....。这是一个<strong>二进制无限循环小数</strong></p>\n</li>\n</ul>\n<h4 id=\"452-取值范围\"><a class=\"anchor\" href=\"#452-取值范围\">#</a> 4.5.2 取值范围</h4>\n<p>最小数： <code>Number.MIN_VALUE</code> ，视浏览器而定，大多数浏览器是 <code>5e-324</code> 。（正数的最小数，大于 0）<br>\n最大数： <code>Number.MAX_VALUE</code> ，大多数浏览器是 <code>1.7976931348623157e+308</code></p>\n<p>超出最值以 <code>Infinity</code> （正无穷）/ <code>-Infinity</code> （负无穷）表示，并且不能继续任何计算</p>\n<p>通过 <code>isFinite()</code>  判断一个值是不是<strong>有限</strong>大</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> result<span class=\"token operator\">=</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token operator\">+</span>Number<span class=\"token punctuation\">.</span><span class=\"token constant\">MAX_VALUE</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isFinite</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//fasle</span></pre></td></tr></table></figure><h4 id=\"453-nan\"><a class=\"anchor\" href=\"#453-nan\">#</a> 4.5.3 NaN</h4>\n<p>不是数值，即本来要返回数值的操作失败了，如 0 除以 0。（5/0 返回 <code>Infinity</code> ）</p>\n<p>NaN 有一些独特的性质：</p>\n<ul>\n<li>NaN 与任何数运算均为 NaN</li>\n<li>NaN 不等于任何数（包括 NaN）</li>\n</ul>\n<p>通过 <code>isNaN</code>  判断<strong>任何参数</strong>是否<strong>是数值</strong>或者是否可以<strong>转换成数值</strong>。例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false, 可以转为 10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"10abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false, 可以转为 1</span></pre></td></tr></table></figure><h4 id=\"454-数值转换\"><a class=\"anchor\" href=\"#454-数值转换\">#</a> 4.5.4 数值转换</h4>\n<p><code>Number</code>  转换规则如下：</p>\n<ul>\n<li>\n<p><strong> <code>Number()</code> </strong></p>\n<ul>\n<li>\n<p>布尔值：true→1，false→0；</p>\n</li>\n<li>\n<p>数值：直接返回；</p>\n</li>\n<li>\n<p>null：0；</p>\n</li>\n<li>\n<p>undefined：NaN</p>\n</li>\n<li>\n<p>字符串：</p>\n<ul>\n<li><code>&quot;1&quot;</code> 、 <code>&quot;01&quot;</code> 、 <code>&quot;0.1&quot;</code> 、 <code>&quot;+1&quot;</code> 、 <code>&quot;-1&quot;</code>  等按正常转。 <code>Number(&quot;1&quot;)</code></li>\n<li>十六进制数转为十进制整数： <code>Number(&quot;0xf&quot;)</code>  转为 15</li>\n<li>空字符串 <code>&quot;&quot;</code> ，转为 0</li>\n<li>除去以上情况，转为 NaN</li>\n</ul>\n</li>\n<li>\n<p>对象：调用 <code>valueof()</code>  方法，并按上述规则转换返回的值。</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong> <code>parseInt()</code> </strong>：当转换<strong>字符串</strong>时，使用 <code>parseInt()</code>  更合适，其与 <code>Number()</code>  有以下不同、</p>\n<ul>\n<li>\n<p><code>&quot;123abc&quot;</code>  转为 123：如果第一个字符是 <code>+</code> / <code>-</code> / <code>数值</code> ，会一次检测每个字符，直到末尾或非数值字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//123</span></pre></td></tr></table></figure></li>\n<li>\n<p>第二个参数设置进制数：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0xA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0xA\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"A\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong> <code>parseFloat()</code> </strong>：和 <code>parseInt()</code>  差不多，有几点不一样。</p>\n<ul>\n<li>只解析<strong>十进制</strong></li>\n<li>会忽略第二次即以后出现的 <code>.</code></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"123blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//123 按整数解析</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.2.3.4\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1.2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">parseFloat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"0xA\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"46-string-类型\"><a class=\"anchor\" href=\"#46-string类型\">#</a> 4.6 String 类型</h3>\n<p>JavaScript 的字符串可以用双引号 <code>&quot;&quot;</code> 、单引号 <code>''</code>  或反引号 `` 标示，但一对一定要一致</p>\n<h4 id=\"461-特殊字符表示\"><a class=\"anchor\" href=\"#461-特殊字符表示\">#</a> 4.6.1 特殊字符表示</h4>\n<p>字符串中有时候需要一些特殊的字符或操作表示，一般使用反义符 <code>\\</code> + 字符。</p>\n<table>\n<thead>\n<tr>\n<th>字符字面量</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\\n</code></td>\n<td>换行符</td>\n</tr>\n<tr>\n<td><code>\\t</code></td>\n<td>制表符（Tab 键）</td>\n</tr>\n<tr>\n<td><code>\\b</code></td>\n<td>退格符</td>\n</tr>\n<tr>\n<td><code>\\r</code></td>\n<td>回车</td>\n</tr>\n<tr>\n<td><code>\\f</code></td>\n<td>换页</td>\n</tr>\n<tr>\n<td><code>\\\\</code></td>\n<td>反斜杠</td>\n</tr>\n<tr>\n<td><code>\\'</code></td>\n<td>单引号（双引号 / 反引号包裹单引号 <code>&quot;'&quot;</code>  可以不用反义符 <code>\\</code> ）</td>\n</tr>\n<tr>\n<td><code>\\&quot;</code></td>\n<td>双引号（同上）</td>\n</tr>\n<tr>\n<td>\\`</td>\n<td>反引号（同上）</td>\n</tr>\n<tr>\n<td><code>\\xnn</code></td>\n<td>十六进制编码 nn 表示的字符，n 是（0~F）。如 <code>\\x41</code>  表示 <code>A</code></td>\n</tr>\n<tr>\n<td><code>\\unnn</code></td>\n<td>十六进制编码 nnn 表示的 Unicode 字符。如 <code>\\u03a3</code>  表示 <code>Σ</code></td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\u03a3\"</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Σ</span></pre></td></tr></table></figure><p>以上字符字面量可以出现在字符串<strong>任意位置</strong>，且作为<strong>单个字符</strong>被解释。</p>\n<h4 id=\"462-字符串不可变\"><a class=\"anchor\" href=\"#462-字符串不可变\">#</a> 4.6.2 字符串不可变</h4>\n<p>ECMAScript 中的字符串一旦被创建，就<strong>不可变</strong>。一切字符串操作实际上均是<strong>新建再销毁</strong>的过程。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> lang<span class=\"token operator\">=</span><span class=\"token string\">'Java'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>lang<span class=\"token operator\">=</span>lang<span class=\"token operator\">+</span><span class=\"token string\">'Script'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先申请 10 字符空间，填充上 JavaScript，再销毁 Java 和 Script。</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>lang<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 无效代码，lang 仍是 JavaScript</span></pre></td></tr></table></figure><h4 id=\"463-其他值转为字符串\"><a class=\"anchor\" href=\"#463-其他值转为字符串\">#</a> 4.6.3 其他值转为字符串</h4>\n<ul>\n<li>\n<p><strong> <code>toString()</code> </strong>：toString 方法所有值都有，和 java 类似，<strong>控制台打印</strong>也是打印的 toString 函数。</p>\n<ul>\n<li>\n<p>因此， <code>toString()</code>  转换结果和控制台打印结果一致。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token number\">11</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"11\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"abc\", 返回的是 c 的一个副本</span></pre></td></tr></table></figure></li>\n<li>\n<p>数值按指定<strong>进制</strong>转换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"10\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"1010\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"12\"</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong> <code>String()</code> </strong>：当值为 <code>null</code>  或 <code>undefined</code>  时，不能调用函数，因此 <code>toString()</code>  会<strong>报错</strong>，此时可以使用 <code>String()</code>  函数（包裹了 <code>toString()</code>  的函数）</p>\n<p>逻辑如下：</p>\n<ul>\n<li>如果值存在，则调用 <code>toString()</code></li>\n<li>如果为 <code>null</code>  或 <code>undefined</code> ，则返回对应字符串</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"null\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> e<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"undefined\"</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"464-模板字面量es6-新增\"><a class=\"anchor\" href=\"#464-模板字面量es6新增\">#</a> 4.6.4 模板字面量（ES6 新增）</h4>\n<h5 id=\"4641-保留换行\"><a class=\"anchor\" href=\"#4641-保留换行\">#</a> 4.6.4.1 保留换行</h5>\n<p>ES6 新增，反引号 `` 定义的字符串可以保留<strong>换行</strong>字符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> modString<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">first line</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>second line<span class=\"token template-punctuation string\">`</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 等价于</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> modString<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">first line\\nsecond line</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>modString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220117145828412.png\" alt=\"image-20220117145828412\"></p>\n<p>但<strong>空格</strong>和<strong>换行符</strong>也会保存</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> modString<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">first line</span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>                second line<span class=\"token template-punctuation string\">`</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>modString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220117145901952.png\" alt=\"image-20220117145901952\"></p>\n<p>模板字面量在有些时候特别有用，比如 HTML 模板：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> modString<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>&lt;div id=\"v_show\"></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    &lt;p v-show=\"true\">&lt;/p></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    &lt;p v-show=\"age>=18\">&lt;/p></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    &lt;button @click=\"up\">&lt;/button></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>&lt;/div><span class=\"token template-punctuation string\">`</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>modString<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220117150032360.png\" alt=\"image-20220117150032360\"></p>\n<h5 id=\"4642-字符串插值\"><a class=\"anchor\" href=\"#4642-字符串插值\">#</a> 4.6.4.2 字符串插值</h5>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> value<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> exponent<span class=\"token operator\">=</span><span class=\"token string\">'second'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>之前的字符串拼接：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> join_s<span class=\"token operator\">=</span>value<span class=\"token operator\">+</span><span class=\"token string\">'to the '</span><span class=\"token operator\">+</span>exponent<span class=\"token operator\">+</span><span class=\"token string\">' power is '</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>value<span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><strong>模板字面量</strong>（要用反义符 ``）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> join_s<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> to the </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>exponent<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> power if </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token operator\">*</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 模板字面量对所有 <code>$&#123;&#125;</code>  插入的值使用 <code>toString()</code>  强制转换为字符串 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 对象插入</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> foo<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token function-variable function\">toString</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token string\">'World!'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>foo<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Hello World!</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 函数表达式插入</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'World!'</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Hello World!</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 也可以对自己进行覆盖</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> value<span class=\"token operator\">=</span><span class=\"token string\">'ab'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>value<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>value<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">ab</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">//abab</span></pre></td></tr></table></figure><h5 id=\"4643-标签函数\"><a class=\"anchor\" href=\"#4643-标签函数\">#</a> 4.6.4.3 标签函数</h5>\n<p>模板字面量也支持定义<strong>标签函数</strong>，通过标签函数自定义插值行为</p>\n<blockquote>\n<p>语法：自定义函数名 +`模板字面量`。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">6</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token number\">9</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">simpleTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string<span class=\"token punctuation\">,</span>aVal<span class=\"token punctuation\">,</span>bVal<span class=\"token punctuation\">,</span>sumVal</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>aVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sumVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'foobar'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> untag<span class=\"token operator\">=</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">+</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token operator\">+</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> tagged<span class=\"token operator\">=</span>simpleTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">+</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token operator\">+</span>b<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>untag<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>tagged<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220117155429561.png\" alt=\"image-20220117155429561\"></p>\n<p>如上：</p>\n<ul>\n<li>函数的第一个参数接收模板字面量的<strong>字符串数组</strong></li>\n<li>之后的参数接收 <code>$&#123;&#125;</code>  定义的变量（typeof aVal=number）</li>\n</ul>\n<h5 id=\"4644-原始字符串stringraw\"><a class=\"anchor\" href=\"#4644-原始字符串stringraw\">#</a> 4.6.4.4 原始字符串（String.raw）</h5>\n<p>前面提到，有些特殊的字符如 <code>\\n</code>  在字符串中有特殊含义，如果要显示原本的字符 <code>\\n</code>  需要在前面 + 转义字符 <code>\\</code> 。</p>\n<p>在模板字面量中，可以直接用 <code>String.raw</code>  标签函数，直接返回原始字符串，不需要用转义字符</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span>raw<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">first\\nsecond</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//first\\nsecond</span></pre></td></tr></table></figure><p>可作用于标签函数接收的第一个参数（字符串数组）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">simpleTag</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> s <span class=\"token keyword\">of</span> string<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>simpleTag<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\\n</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>a<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">\\u00A9</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220117161432968.png\" alt=\"image-20220117161432968\"></p>\n<p>但仅限于<strong>标签函数</strong>接收的字符串数组，自定义的字符串数组<strong>不行</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> strings<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span><span class=\"token string\">'first\\nsecond'</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> s <span class=\"token keyword\">of</span> strings<span class=\"token punctuation\">.</span>raw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"47-symbol-类型es6-新增暂缓\"><a class=\"anchor\" href=\"#47-symbol类型es6新增暂缓\">#</a> 4.7 Symbol 类型（ES6 新增）（暂缓）</h3>\n<h3 id=\"48-object-类型\"><a class=\"anchor\" href=\"#48-object类型\">#</a> 4.8 Object 类型</h3>\n<p>没什么好说的，JavaScript 中所有（非基本类型）对象的基类，包括但不限于数组、map、对象、set。</p>\n<p>通过 <code>new</code>  关键字创建 <code>Object</code>  类型的实例对象。</p>\n<ul>\n<li>\n<p>创建</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> ob<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ob<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 合法，但不推荐</span></pre></td></tr></table></figure></li>\n<li>\n<p>每个 <code>Object</code>  实例均有一下属性和方法：</p>\n<ul>\n<li><code>constructor</code> ：创建当前对象的函数；</li>\n<li><code>hasOwnProperty(propertyName)</code> ：判断是否存在指定<strong>属性</strong>；</li>\n<li><code>isPrototypeof(object)</code> ：判断当前对象是否是另一个对象的<strong>原型</strong></li>\n<li><code>propertyIsEnumerable(propertyName)</code> ：判断指定属性是否可以用 <code>for-in</code>  枚举，（属性名是<strong>字符串</strong>）</li>\n<li><code>toLocaleString()</code> ：返回对象字符串表示（反映对象在本地化执行环境）</li>\n<li><code>toString()</code> ：返回对象的字符串表示</li>\n<li><code>valueOf()</code> ：返回对象，通常与 <code>toString</code>  返回一致。</li>\n</ul>\n</li>\n</ul>\n<p>&lt;font color=red&gt; 宿主对象不受 ECMA-262 约束，不一定继承 Object，如 DOM、BOM&lt;/font&gt;</p>\n<h2 id=\"5-操作符\"><a class=\"anchor\" href=\"#5-操作符\">#</a> 5. 操作符</h2>\n<h3 id=\"51-一元操作符\"><a class=\"anchor\" href=\"#51-一元操作符\">#</a> 5.1 一元操作符</h3>\n<p>只操作<strong>一个值</strong>的操作符</p>\n<h4 id=\"511-递增-递减\"><a class=\"anchor\" href=\"#511-递增递减\">#</a> 5.1.1 递增 / 递减</h4>\n<p>即 <code>i++</code> 、 <code>i--</code> 、 <code>++i</code> 、 <code>--i</code> ，和其他语言差不多，不再赘述。</p>\n<p>对于其他类型，均<strong>转为数值</strong>后进行递增 / 减，不能转为数值的，返回<strong> NaN</strong></p>\n<p>按 <code>Number()</code>  转</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> f1<span class=\"token punctuation\">.</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>s1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>s2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>f<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0.100000000000000009 (浮点数不精确)</span></pre></td></tr></table></figure><p>对于对象，调用 <code>valueOf()</code>  取得可操作的值，再递增 / 减</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> o<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>o<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//-2</span></pre></td></tr></table></figure><h4 id=\"512-一元加减\"><a class=\"anchor\" href=\"#512-一元加减\">#</a> 5.1.2 一元加减</h4>\n<p>即在变量前写 <code>+</code> / <code>-</code> 。</p>\n<p>把变量<strong>转为数值</strong>，然后附上 <code>+</code> / <code>-</code>  操作。不能转为数值的，返回 NaN</p>\n<p>按 <code>Number()</code>  转</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"z\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token number\">1.1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> o<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token operator\">+</span>s1<span class=\"token punctuation\">;</span><span class=\"token comment\">//2 number</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token operator\">+</span>s2<span class=\"token punctuation\">;</span><span class=\"token comment\">//NaN</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token operator\">+</span>f<span class=\"token punctuation\">;</span><span class=\"token comment\">//1.1</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token operator\">-</span>o<span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure><h3 id=\"52-位操作符\"><a class=\"anchor\" href=\"#52-位操作符\">#</a> 5.2 位操作符</h3>\n<p>位操作符用于数值的底层操作，即 bit。</p>\n<p><code>~</code> 、 <code>&amp;</code> 、 <code>|</code> 、 <code>^</code> 、 <code>&lt;&lt;</code> 、 <code>&gt;&gt;</code> 、 <code>&gt;&gt;&gt;</code></p>\n<h4 id=\"521-按位非-~\"><a class=\"anchor\" href=\"#521-按位非~\">#</a> 5.2.1 按位非 <code>~</code></h4>\n<p>即数值的每个位取反。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num1<span class=\"token operator\">=</span><span class=\"token number\">25</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num2<span class=\"token operator\">=</span><span class=\"token operator\">~</span>num1<span class=\"token punctuation\">;</span><span class=\"token comment\">//-26</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> num3<span class=\"token operator\">=</span><span class=\"token operator\">-</span>num1<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//-26，虽然 2 者结果相同，但位操作符快得多</span></pre></td></tr></table></figure><blockquote>\n<p>在计组中，负数用对应正数的<strong>补码</strong>来表示。</p>\n<p>-8 对应的正数为 8</p>\n<p>8 的原码 ：0000 1000</p>\n<p>其反码是 ：1111 0111</p>\n<p>补码为反码进 1： 1111 1000</p>\n</blockquote>\n<h4 id=\"522-按位与-amp\"><a class=\"anchor\" href=\"#522-按位与\">#</a> 5.2.2 按位与 <code>&amp;</code></h4>\n<p>和别的语言一样</p>\n<h4 id=\"523-按位或\"><a class=\"anchor\" href=\"#523-按位或\">#</a> 5.2.3 按位或 <code>|</code></h4>\n<p>和别的语言一样</p>\n<h4 id=\"524-按位异或\"><a class=\"anchor\" href=\"#524-按位异或\">#</a> 5.2.4 按位异或 <code>^</code></h4>\n<p>和别的语言一样</p>\n<p>1 1 0</p>\n<p>1 0 1</p>\n<p>0 1 1</p>\n<p>0 0 0</p>\n<h4 id=\"525-左移-ltlt\"><a class=\"anchor\" href=\"#525-左移\">#</a> 5.2.5 左移 <code>&lt;&lt;</code></h4>\n<p>和别的语言一样。</p>\n<p>整体向左移，<strong>保留符号位</strong>，空位（符号位外）补 0。相当于 X2</p>\n<h4 id=\"526-有符号右移-gtgt\"><a class=\"anchor\" href=\"#526-有符号右移\">#</a> 5.2.6 有符号右移 <code>&gt;&gt;</code></h4>\n<p>整体向右移，<strong>保留符号位</strong>，空位（符号位外）补 0。相当于 / 2。（向下取整）</p>\n<h4 id=\"527-无符号右移-gtgtgt\"><a class=\"anchor\" href=\"#527-无符号右移\">#</a> 5.2.7 无符号右移 <code>&gt;&gt;&gt;</code></h4>\n<p>整体向右移，<strong>不保留符号位</strong>（符号位跟着一起移），空位补 0。（负数会变正数，正数还是相当于 / 2）</p>\n<h3 id=\"53-布尔操作符\"><a class=\"anchor\" href=\"#53-布尔操作符\">#</a> 5.3 布尔操作符</h3>\n<p><code>&amp;&amp;</code> 、 <code>||</code> 、 <code>!</code></p>\n<h4 id=\"531-逻辑非\"><a class=\"anchor\" href=\"#531-逻辑非\">#</a> 5.3.1 逻辑非 <code>!</code></h4>\n<p>即对条件<strong>取反</strong></p>\n<p>同时使用 2 个叹号（ <code>!!</code> ）相当于调用 <code>Boolean()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><h4 id=\"532-逻辑与-ampamp\"><a class=\"anchor\" href=\"#532-逻辑与\">#</a> 5.3.2 逻辑与 <code>&amp;&amp;</code></h4>\n<p>如 <code>a&amp;&amp;b</code></p>\n<ul>\n<li>如果 <code>a</code> （的布尔转换）为 <code>true</code> ，返回 <code>b</code></li>\n<li>如果 <code>a</code>  为 <code>false</code> ，返回 <code>a</code> 。（不再对后面求值）</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr></table></figure><h4 id=\"533-逻辑或\"><a class=\"anchor\" href=\"#533-逻辑或\">#</a> 5.3.3 逻辑或 <code>||</code></h4>\n<p>如 <code>a||b</code></p>\n<ul>\n<li>如果 <code>a</code>  为 <code>true</code> ，返回 <code>a</code> 。（不再对后面求值）</li>\n<li>如果 <code>a</code>  为 <code>false</code> ，返回 <code>b</code> 。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token operator\">||</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token operator\">||</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">||</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token operator\">||</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr></table></figure><h3 id=\"54-乘除操作符\"><a class=\"anchor\" href=\"#54-乘除操作符\">#</a> 5.4 乘除操作符</h3>\n<p><code>*</code> 、 <code>/</code> 、 <code>%</code></p>\n<h4 id=\"541-乘法操作符\"><a class=\"anchor\" href=\"#541-乘法操作符\">#</a> 5.4.1 乘法操作符 <code>*</code></h4>\n<ul>\n<li>对于能<strong>转为数值</strong>的，转为数值后按正常乘法计算。不能转为数值的，返回 NaN</li>\n<li>任意数与 <code>NaN</code>  相乘返回 NaN</li>\n<li><code>Infinity</code> :\n<ul>\n<li>*0=NaN</li>\n<li>* 非 0 有限数 = <code>Infinity</code> / <code>-Infinity</code></li>\n<li>* <code>Infinity</code> = <code>Infinity</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"542-除法操作符\"><a class=\"anchor\" href=\"#542-除法操作符\">#</a> 5.4.2 除法操作符 <code>/</code></h4>\n<ul>\n<li>前 2 条和 <code>*</code>  一样</li>\n<li>0/0=NaN</li>\n<li>非 0 有限数 / 0= <code>Infinity</code> / <code>-Infinity</code></li>\n<li><code>Infinity</code> :\n<ul>\n<li>/ 任何有限数 = <code>Infinity</code></li>\n<li>/ <code>Infinity</code> = <code>NaN</code></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"543-取模操作符\"><a class=\"anchor\" href=\"#543-取模操作符\">#</a> 5.4.3 取模操作符 <code>%</code></h4>\n<p>即取余</p>\n<ul>\n<li>懒得写</li>\n</ul>\n<h3 id=\"55-指数操作符-es6-新增\"><a class=\"anchor\" href=\"#55-指数操作符es6新增\">#</a> 5.5 指数操作符 <code>**</code> （ES6 新增）</h3>\n<p>等效于 <code>Math.pow()</code></p>\n<h3 id=\"56-加减操作符\"><a class=\"anchor\" href=\"#56-加减操作符\">#</a> 5.6 加减操作符</h3>\n<p><code>+</code> 、 <code>-</code></p>\n<h4 id=\"561-加法操作符\"><a class=\"anchor\" href=\"#561-加法操作符\">#</a> 5.6.1 加法操作符 <code>+</code></h4>\n<ul>\n<li>\n<p><code>NaN</code>  和 <code>Infinity</code>  的懒得写，反正不会等于正常数</p>\n</li>\n<li>\n<p>如果有<strong>字符串</strong>，则变为<strong>连接</strong>字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">+</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"12\"</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"562-减法操作符-\"><a class=\"anchor\" href=\"#562-减法操作符-\">#</a> 5.6.2 减法操作符 <code>-</code></h4>\n<ul>\n<li>对于非数值，转换为数值，再减法操作</li>\n</ul>\n<p>&lt;font color=red&gt; 减法不会字符串拼接 / 裁剪，而是转为算术运算 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">-</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure><h3 id=\"57-关系比较操作符-gt\"><a class=\"anchor\" href=\"#57-关系比较操作符\">#</a> 5.7 关系（比较）操作符 <code>&gt;</code></h3>\n<p><code>&gt;</code> 、 <code>&lt;</code> 、 <code>&lt;=</code> 、 <code>&gt;=</code></p>\n<p>常规用法没什么好多说的，主要讲一下<strong>非数值</strong>的比较</p>\n<ul>\n<li>字符串比较：<strong>逐个</strong>比较对应字符的 ASCII 编码</li>\n<li>一边是数值：把另一边<strong>转为数值</strong>。\n<ul>\n<li>一方 NaN（或转数值后是 NaN）返回 false</li>\n</ul>\n</li>\n<li>布尔值也转为数值比较</li>\n<li>对于对象，调用 <code>valueOf()</code>  再比较</li>\n</ul>\n<h3 id=\"58-相等操作符\"><a class=\"anchor\" href=\"#58-相等操作符\">#</a> 5.8 相等操作符</h3>\n<p><code>==</code> 、 <code>===</code> 、 <code>!=</code> 、 <code>!==</code></p>\n<h4 id=\"581-不全等\"><a class=\"anchor\" href=\"#581-不全等\">#</a> 5.8.1 不全等 <code>==</code></h4>\n<p>比较 2 边的值，<strong>不比较类型</strong></p>\n<ul>\n<li>布尔值转为数值比较</li>\n<li>字符串 - 数值：字符串转为数值比较</li>\n<li>对象：调用 <code>valueOf()</code>  后比较</li>\n</ul>\n<h4 id=\"582-全等\"><a class=\"anchor\" href=\"#582-全等\">#</a> 5.8.2 全等 <code>===</code></h4>\n<p>比较值，同时<strong>比较类型</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr2<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">==</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token operator\">===</span><span class=\"token string\">\"1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr1<span class=\"token operator\">==</span>arr2<span class=\"token punctuation\">)</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure><h3 id=\"59-条件操作符三元运算符\"><a class=\"anchor\" href=\"#59-条件操作符三元运算符\">#</a> 5.9 条件操作符（三元运算符）</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>n<span class=\"token operator\">=</span>a<span class=\"token operator\">></span>b<span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">//n=（如果 a>b 就为 a, 否则为 b）</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>n<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">></span>b<span class=\"token punctuation\">)</span><span class=\"token operator\">?</span>a<span class=\"token operator\">:</span>b<span class=\"token punctuation\">;</span><span class=\"token comment\">// 条件式加个 () 更清楚</span></pre></td></tr></table></figure><h3 id=\"510-赋值操作符\"><a class=\"anchor\" href=\"#510-赋值操作符\">#</a> 5.10 赋值操作符 <code>+=</code></h3>\n<p>即 <code>=</code>  前写运算符，如 <code>a+=1</code> 。</p>\n<p>仅仅简写语法，并不能提升性能。</p>\n<h3 id=\"511-逗号操作符\"><a class=\"anchor\" href=\"#511-逗号操作符\">#</a> 5.11 逗号操作符 <code>,</code></h3>\n<p>用来在一条语句中执行多个操作。一般是<strong>声明</strong>语句</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>a<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>a<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或者</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//a 取最后一个，也就是 a=3。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 这种方法基本不用，但确实合法</span></pre></td></tr></table></figure><h2 id=\"6-语句\"><a class=\"anchor\" href=\"#6-语句\">#</a> 6. 语句</h2>\n<p>也称<strong>流控制语句</strong></p>\n<h3 id=\"61-if-语句\"><a class=\"anchor\" href=\"#61-if语句\">#</a> 6.1 if 语句</h3>\n<p><code>if-else</code></p>\n<p>无需多言</p>\n<h3 id=\"62-do-while-语句\"><a class=\"anchor\" href=\"#62-do-while语句\">#</a> 6.2 do-while 语句</h3>\n<p>先 do 一次，再进入循环。<strong>至少执行一次</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">do</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"63-while-语句\"><a class=\"anchor\" href=\"#63-while语句\">#</a> 6.3 while 语句</h3>\n<p>无需多言</p>\n<h3 id=\"64-for-语句\"><a class=\"anchor\" href=\"#64-for语句\">#</a> 6.4 for 语句</h3>\n<p>无需多言</p>\n<p>提一句， <code>for(;;)</code>  无穷循环</p>\n<p>此外， <code>for(let i=0;i&lt;arr.length;i++)</code>  中， <code>arr</code>  长度会变化，可能会出现死循环</p>\n<h3 id=\"65-for-in-语句\"><a class=\"anchor\" href=\"#65-for-in语句\">#</a> 6.5 for-in 语句</h3>\n<p>枚举对象的（非符号）<strong>键</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//0 1 2</span></pre></td></tr></table></figure><p>性能方面比较差</p>\n<h3 id=\"66-for-of-语句\"><a class=\"anchor\" href=\"#66-for-of语句\">#</a> 6.6 for-of 语句</h3>\n<p>遍历可迭代对象的<strong>元素</strong>（值），（通过对象的 <code>.next()</code>  方法）</p>\n<p>如果对象不支持迭代，则会抛出错误</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">in</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//1 2 3</span></pre></td></tr></table></figure><p>性能比 for-in 高</p>\n<p>性能： <code>常规for</code>  &gt;  <code>倒序 for</code>  &gt;  <code>forEach</code>  &gt;  <code>for..of</code>  &gt;  <code>map</code>  &gt;  <code>for..in</code></p>\n<h3 id=\"67-标签语句\"><a class=\"anchor\" href=\"#67-标签语句\">#</a> 6.7 标签语句</h3>\n<p>给语句加标签。</p>\n<blockquote>\n<p>语法：label: statement</p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> count<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>start<span class=\"token operator\">:</span> <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>count<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//0 1 2 3 4</span></pre></td></tr></table></figure><p>上述例子中 <code>start</code>  可以在后面通过 <code>break</code>  或 <code>continue</code>  引用，用于嵌套循环等。</p>\n<h3 id=\"68-break-和-continue\"><a class=\"anchor\" href=\"#68-break和continue\">#</a> 6.8 break 和 continue</h3>\n<p><code>break</code>  跳出循环， <code>continue</code>  跳过当前这层循环（直接进入下一层循环）</p>\n<h3 id=\"69-with-语句暂缓\"><a class=\"anchor\" href=\"#69-with语句暂缓\">#</a> 6.9 with 语句（暂缓）</h3>\n<blockquote>\n<p>with 影响性能且难以调试，不建议在产品中使用</p>\n</blockquote>\n<p>那就略吧</p>\n<h3 id=\"610-switch-语句条件判断\"><a class=\"anchor\" href=\"#610-switch语句条件判断\">#</a> 6.10 switch 语句（条件判断）</h3>\n<p><code>switch-case</code></p>\n<p>注意一点，每个 <code>case</code>  后要有 <code>break</code> ，否则会一直往下执行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>使用全等操作符 <span class=\"token operator\">===</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">1</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">case</span> <span class=\"token number\">2</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>ECMAScript 赋予了一些独有特性</p>\n<ul>\n<li><code>case</code>  后可以添加<strong>表达式</strong></li>\n<li><code>case</code>  后可以添加<strong>变量</strong></li>\n</ul>\n<h2 id=\"7-函数浅谈\"><a class=\"anchor\" href=\"#7-函数浅谈\">#</a> 7. 函数（浅谈）</h2>\n<p>浅谈就无需多言了</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum1</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>严格模式下：</p>\n<ul>\n<li>函数不能以<em> eval</em> 或<em> arguments</em> 作为名称</li>\n<li>函数的参数不能叫<em> eval</em> 或<em> arguments</em></li>\n<li>2 个函数的参数不能叫同一个名称</li>\n</ul>\n<h1 id=\"四-变量-作用域与内存\"><a class=\"anchor\" href=\"#四-变量-作用域与内存\">#</a> 四、 变量、作用域与内存★</h1>\n<p>JavaScript 的变量的值和数据类型在脚本的生命周期内可以改变。功能很强大，但也有不少问题</p>\n<h2 id=\"1-原始值与引用值\"><a class=\"anchor\" href=\"#1-原始值与引用值\">#</a> 1. 原始值与引用值</h2>\n<p>原始值：即简单的数据（简单数据类型）</p>\n<p>引用值：多个值构成的数据（引用数据类型，string 不是（C++ 中字符串是引用数据类型，因为字符串是由字符组成的，但 JavaScript 中没有字符））</p>\n<p>&lt;font color=red&gt; 引用值是<strong>按引用</strong>访问的（即 C++ 中的传引调用），如，函数如果传参是个数组，在函数体内部可以改变数组的元素内容（但数组地址不会变）&lt;/font&gt;</p>\n<h3 id=\"11-动态属性\"><a class=\"anchor\" href=\"#11-动态属性\">#</a> 1.1 动态属性</h3>\n<p>引用值可以动态的<strong>添加</strong> /<strong> 删除</strong> /<strong> 修改</strong>属性（成员、元素），原始值不行。</p>\n<h3 id=\"12-复制值\"><a class=\"anchor\" href=\"#12-复制值\">#</a> 1.2 复制值</h3>\n<p>原始值可以互相复制内容并且互不干扰</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num1<span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num2<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//num1=5，num2=6，互不干扰</span></pre></td></tr></table></figure><p>但引用值不行。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num2<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num2<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//num1=[1,2,3,4],num2=[1,2,3,4]。</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 因为 num2 复制了 num1 的头指针（指向 1）</span></pre></td></tr></table></figure><p>因为引用值复制的是地址（指针）。</p>\n<p>此时可以这样复制</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num3<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token operator\">...</span>num1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> num4<span class=\"token operator\">=</span>num1<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> num5<span class=\"token operator\">=</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>num1<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"13-传递参数\"><a class=\"anchor\" href=\"#13-传递参数\">#</a> 1.3 传递参数</h3>\n<p>ECMAScript 中所有函数的参数都是<strong>按值传递</strong>的</p>\n<blockquote>\n<p>ECMAScript 中函数的参数就是<strong>局部变量</strong></p>\n</blockquote>\n<h3 id=\"14-确定类型\"><a class=\"anchor\" href=\"#14-确定类型\">#</a> 1.4 确定类型</h3>\n<blockquote>\n<p><strong>typeof</strong> 对确定简单类型很有用，但对引用类型确用处不大，为此，ECMAScript 提供了<strong> instanceof</strong> 操作符。</p>\n<p>语法： <em>result=variable instanceof constructor</em></p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure><p><code>instanceof</code>  是有种<strong>猜测</strong>的意思。&lt;font color=red&gt; 但 <code>instanceof</code>  不适用于原始值（简单类型），如下 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> n<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//fasle</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>n <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure><h2 id=\"2-执行上下文和作用域\"><a class=\"anchor\" href=\"#2-执行上下文和作用域\">#</a> 2. 执行上下文和作用域</h2>\n<p>在 JavaScript 中上下文非常重要，<strong>变量</strong>和<strong>函数</strong>的<strong>上下文</strong>决定了他们可以访问的数据。</p>\n<blockquote>\n<p>上下文：应该就是该层级的所有代码。以函数块为一层。</p>\n<p>知乎：指当前执行环境中的变量、函数声明，参数（arguments），作用域链，this 等信息</p>\n</blockquote>\n<p>执行上下文主要有<strong>全局上下文</strong>（window）和<strong>函数上下文</strong>，（eval（）调用内部存在第三种上下文）。</p>\n<ul>\n<li><strong>函数上下文</strong>在所有代码执行完毕会被销毁。（指的是调用时生成的临时代码，而非定义的代码，定义的代码算是是在全局上下文定义的）</li>\n<li><strong>全局上下文</strong>在程序关闭时（网页关闭）销毁</li>\n<li>全局执行上下文只有一个，函数执行上下文在每次调用函数时候会创建一个新的函数执行上下文。</li>\n</ul>\n<p><strong>生命周期</strong></p>\n<p>函数调用，当<strong>代码执行流</strong>进入函数时，该函数调用的上下文（保存该层）压入<strong>上下文栈</strong>，调用结束弹出上下文（继续该层的执行）。</p>\n<p>代码执行时会创建变量对象的<strong>作用域链</strong>，其决定了访问变量和函数的顺序，代码正在执行的上下文变量对象始终位于作用域链最前端</p>\n<ul>\n<li>上下文其实就相当于层，或者说函数级作用域</li>\n<li>作用域链相当于上下文栈的结构图，最上面的在最前面</li>\n</ul>\n<p>作用域链：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> color <span class=\"token operator\">=</span> <span class=\"token string\">\"blue\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">changeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> anotherColor<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">swapColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">var</span> tempColor <span class=\"token operator\">=</span> anotherColor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        anotherColor <span class=\"token operator\">=</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        color <span class=\"token operator\">=</span> tempColor<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token comment\">// 这里可以访问 color，anotherColor 和 tempeColor</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">swapColors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token comment\">// 这里可以访问 color 和 anotherColor，但不能访问 tempeColor</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">changeColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 只能访问 color（）；</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/QQ%E6%88%AA%E5%9B%BE20220120205939.jpg\" alt=\"img\"></p>\n<p>作用域链图。</p>\n<p><img data-src=\"https://pic4.zhimg.com/80/v2-9351d2345a9186cc0dc5aeb2be28e16f_720w.jpg\" alt></p>\n<p>生命周期图</p>\n<h3 id=\"21-作用域链增强\"><a class=\"anchor\" href=\"#21作用域链增强\">#</a> 2.1 作用域链增强</h3>\n<p>有些语句会在作用域前端临时添加一个上下文，该上下文在代码执行后被删除。</p>\n<ul>\n<li><code>try/catch</code>  语句的 <code>catch</code>  块：创建一个新的变量对象，这个对象包含要跑出的错误对象的声明。</li>\n<li><code>with</code>  语句：向作用域链前端添加指定的对象。</li>\n</ul>\n<p>（也就是说，这 2 个块相当于新的函数级块）</p>\n<h3 id=\"22-变量声明\"><a class=\"anchor\" href=\"#22-变量声明\">#</a> 2.2 变量声明</h3>\n<h4 id=\"221-使用-var-的函数作用域声明\"><a class=\"anchor\" href=\"#221-使用var的函数作用域声明\">#</a> 2.2.1 使用 var 的函数作用域声明</h4>\n<p><code>var</code>  会自动添加到最近的<strong>上下文</strong>，但如果变量未经声明就初始化 <code>age=10</code> ，则默认添加到<strong>全局上下文</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> sum<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    sum2<span class=\"token operator\">=</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3。因为 sum2 没声明就初始化了，是全局上下文的变量</span></pre></td></tr></table></figure><p>此外， <code>var</code>  变量声明会<strong>提升</strong>到当前上下文的顶部，（赋值不会）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">consolg</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> test<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>等价于</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> test<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">consolg</span><span class=\"token punctuation\">(</span>test<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>test<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"222-使用-let-的块级作用域声明\"><a class=\"anchor\" href=\"#222-使用let的块级作用域声明\">#</a> 2.2.2 使用 let 的块级作用域声明</h4>\n<ul>\n<li><code>let</code>  的作用域是块级（最近的一对 <code>&#123;&#125;</code> ）</li>\n<li>不能重复声明，（var 可以）</li>\n</ul>\n<h4 id=\"223-使用-const-的常量声明\"><a class=\"anchor\" href=\"#223-使用const的常量声明\">#</a> 2.2.3 使用 const 的常量声明</h4>\n<ul>\n<li>在初始化的同时必须赋值</li>\n<li>在其生命周期不能再重新赋值</li>\n<li>块级作用域</li>\n</ul>\n<h4 id=\"224-标识符查找javascript-引擎\"><a class=\"anchor\" href=\"#224-标识符查找javascript引擎\">#</a> 2.2.4 标识符查找（JavaScript 引擎）</h4>\n<p>当读取或写入一个标识符（变量）时，必须搜索确定这个标识符（找到定义的地方）。搜索开始于作用域链前端（上下文栈顶端、当前上下文、当前作用域），如果没有找到，则继续沿着作用域链搜索。，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//red</span></pre></td></tr></table></figure><p><code>getColor</code>  首先找函数体内有没有定义 <code>color</code> ，发现没有，然后找全局上下文，发现定义了 <code>color</code> ，然后 <code>return color</code> 。</p>\n<p>因此，&lt;font color=red&gt; 访问局部变量比访问全局变量快得多。&lt;/font&gt;</p>\n<p>此外，在局部变量生成后，任何方法都无法访问同名的外部变量，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 在局部变量生成后，任何方法都无法访问同名的外部变量（此例是全局变量 color='red'）</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>getColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//blue</span></pre></td></tr></table></figure><h2 id=\"3-垃圾回收\"><a class=\"anchor\" href=\"#3-垃圾回收\">#</a> 3. 垃圾回收</h2>\n<p>JavaScript 是使用垃圾回收的语言，也就是说<strong>执行环境负责管理内存</strong>，和 Java 一样</p>\n<blockquote>\n<p>基本思路：确定哪个变量不会再使用，释放它占的内存。（周期性，也就是每个一段时间回收一次）</p>\n</blockquote>\n<p>但是某块内存是否还有用不太好判定，需要对变量进行跟踪记录，关于如何标记变量主要有以下 2 中方式：<strong>标记清理</strong>和<strong>引用计数</strong></p>\n<h3 id=\"31-标记清理最常用\"><a class=\"anchor\" href=\"#31-标记清理最常用\">#</a> 3.1 标记清理（最常用）</h3>\n<p>当变量进入上下文（在该作用域被声明）时，该变量会被加上 “存在于该上下文” 的标记（标记 called 存在于上下文），然后离开时也会被加上 “离开上下文” 的标记。</p>\n<p><strong>垃圾回收</strong>程序运行时：</p>\n<ol>\n<li>先标记内存中所有变量（认为所有变量都是待删除的）</li>\n<li>遍历所有变量</li>\n<li>找出在上下文中的变量（集合<strong> A</strong>）（正在使用的变量）</li>\n<li>找出所有被<strong> A</strong> 引用的变量（集合<strong> B</strong>）</li>\n<li>去除<strong> A</strong> 和<strong> B</strong> 的标记</li>\n<li>剩下的带标记的都清理了</li>\n</ol>\n<p>几乎所有主流浏览器都使用这种方法清理内存。</p>\n<p><strong>标记方法</strong>有多种：</p>\n<ul>\n<li>当变量进入上下文时，反转某一位</li>\n<li>维护 “在上下文中” 和 “不在上下文中” 2 个变量列表</li>\n<li>等</li>\n</ul>\n<h3 id=\"32-引用计数\"><a class=\"anchor\" href=\"#32-引用计数\">#</a> 3.2 引用计数</h3>\n<blockquote>\n<p>思路：对每个值记录它被引用的次数</p>\n</blockquote>\n<ol>\n<li>该值每被一个新的变量引用，引用值 + 1</li>\n<li>引用该值的变量被覆盖 / 删除，引用值 - 1</li>\n<li>内存回收时， <code>if</code>  该变量引用值 ===0，则回收该值</li>\n</ol>\n<p>引用计数看上去很简单，但同样问题也很多，比如：</p>\n<ol>\n<li>a 和 b 互相引用，则 a 和 b 永远不会被删除，但实际上 a 和 b 可能都要被删除</li>\n</ol>\n<h3 id=\"33-性能回收周期\"><a class=\"anchor\" href=\"#33-性能回收周期\">#</a> 3.3 性能（回收周期）</h3>\n<p>垃圾回收程序周期运行，当垃圾累积到一定数量会影响性能，因此回收周期（时间调度）很重要。</p>\n<p>回收频率太低会导致<strong>垃圾积压</strong>，频率太高会到处<strong>小内存片泛滥</strong>。</p>\n<p>IE7 后，JavaScript 引擎的垃圾回收程序为<strong>动态</strong>改变分配变量、字面量或数组槽位等阈值。</p>\n<ul>\n<li>\n<p>设一个初始阈值。</p>\n</li>\n<li>\n<p>如果有一次回收内存不到已分配的 15%，则阈值会翻倍。</p>\n</li>\n<li>\n<p>如果有一次回收内存达到 85%，则阈值重置为默认值。</p>\n</li>\n</ul>\n<p>（有点像网络拥塞控制的慢开始和快重传）</p>\n<h3 id=\"34-内存管理\"><a class=\"anchor\" href=\"#34-内存管理\">#</a> 3.4 内存管理</h3>\n<h4 id=\"341-通过-const-和-let-声明提升性能\"><a class=\"anchor\" href=\"#341-通过const和let声明提升性能\">#</a> 3.4.1 通过 const 和 let 声明提升性能</h4>\n<p>ES6 增加这 2 个关键字不仅有助于改善代码风格，而且有助于改进<strong>垃圾回收</strong>的过程。</p>\n<p>因为 <code>const</code>  和 <code>let</code>  都以<strong>块</strong>为作用域，比 <code>var</code>  能更早被垃圾回收。</p>\n<h4 id=\"342-隐藏类和删除操作\"><a class=\"anchor\" href=\"#342-隐藏类和删除操作\">#</a> 3.4.2 隐藏类和删除操作</h4>\n<p>算是属于 V8JavaScript 引擎（Chrome 使用这个引擎）的特性。</p>\n<p>通过下面这个例子来解释：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> a2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候 <code>a1</code>  和 <code>a2</code>  同属于一个类（ <code>Article</code> ）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a2<span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span><span class=\"token string\">'jake'</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候 <code>a1</code>  和 <code>a2</code>  还是同属于一个类（ <code>Article</code> ），但他们不属于同一个<strong>隐藏类</strong>。其中， <code>a2</code>  的隐藏类比 <code>a1</code>  多了一个 <code>author</code>  属性</p>\n<p>再看下例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Article</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">author</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token operator\">=</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span>author<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> a2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Article</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jake\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>同样的，此时 2 者属于同一个类，也属于同一个隐藏类</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> a1<span class=\"token punctuation\">.</span>author<span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>现在， <code>a1</code>  和 <code>a2</code>  又不属于同一个隐藏类了。</p>\n<hr>\n<p>&lt;font color=red&gt; 能够共享隐藏类的对象<strong>性能更好</strong>，即尽可能少的制造隐藏类 &lt;/font&gt;</p>\n<p>因此，我们可以把 <code>delete a1.author</code>  改成下面这样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>a1<span class=\"token punctuation\">.</span>author<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用这个代替 delete</span></pre></td></tr></table></figure><h4 id=\"343-内存泄漏\"><a class=\"anchor\" href=\"#343-内存泄漏\">#</a> 3.4.3 内存泄漏</h4>\n<ul>\n<li>\n<p>意外声明<strong>全局变量</strong>是最常见也是最容易修复的内存泄漏</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">=</span><span class=\"token string\">'jake'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要在 <code>name</code>  前面加上 <code>var</code> 、 <code>let</code> 、 <code>const</code>  即可。（最好不要用 <code>var</code> ）</p>\n</li>\n<li>\n<p><strong>闭包</strong>有可能会引起内存泄漏</p>\n<p>闭包就是能够读取其他函数内部变量的函数。所以闭包可以理解成 “<em>定义在一个函数内部并且的函数</em> “。</p>\n<ul>\n<li>\n<p>避免全局变量被污染 方便调用上下文的局部变量 加强封装性</p>\n</li>\n<li>\n<p>闭包长期占用内存，内存消耗很大，可能导致内存泄露</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">outer</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上，当 <code>outer</code>  存在时， <code>name</code>  永远不会被释放，因为闭包一直在引用它。假如 <code>name</code>  的内容很大，就会有问题。</p>\n<p>可以这样解决：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">outer</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    name<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 手动释放一下</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但：<strong>来自知乎的说法：</strong></p>\n<p>IE9 之后不会出现这种情况（内存泄漏），因为之前是使用的<strong>引用计数</strong>算法，会有循环引用的问题，而 IE9 之后使用<strong>标记清除</strong>算法，就几乎不会出现闭包内存泄漏了。</p>\n</li>\n</ul>\n<h4 id=\"344-静态分配与对象池\"><a class=\"anchor\" href=\"#344-静态分配与对象池\">#</a> 3.4.4 静态分配与对象池</h4>\n<p>开发者无法控制什么时候开始收集垃圾，但可以<strong>间接控制触发垃圾回收的条件</strong>。</p>\n<ul>\n<li>\n<p>** 标准 1：** 对象更替速度。</p>\n<p>如果很多对象初始化，然后一下子又都超出了作用域（不再用到），那么浏览器更频繁地垃圾回收</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> result<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    result<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    result<span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>如上面这个例子，如果多次调用 <code>addVector()</code> ，那么 <code>Vector</code>  的实例对象被频繁的创建，又很快超出作用域，生命周期很短。垃圾回收程序会发现此处对象更替速度快，则会更频繁地安排垃圾回收。</p>\n<p><strong>解决：<strong>不要频繁的创建对象，可以通过</strong>对象池</strong>来实现。</p>\n</li>\n<li>\n<p>** 对象池：** 创建一个对象池，用来管理一组可回收的对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//vectorPool：假设这是一个已经创建好的对象池对象，先不管是怎么实现的</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> v1<span class=\"token operator\">=</span>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 从对象池中取一个 vector 对象</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> v2<span class=\"token operator\">=</span>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>vectorPool<span class=\"token punctuation\">.</span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 用完把 result 对象还给对象池</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>v1<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>v2<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addVector</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">result</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 函数改成这样</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    result<span class=\"token punctuation\">.</span>x<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    result<span class=\"token punctuation\">.</span>y<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这样垃圾回收检测就不会发现有对象更替，也就不会频繁的垃圾回收。</p>\n</li>\n</ul>\n<hr>\n<p>一般<strong>对象池</strong>都是用<strong>数组</strong>实现的，JavaScript 的数组大小是动态可变的， <code>Array.push()</code>  操作有可能会导致不必要的垃圾回收，因此最好一开始就初始化创建一个大小够用的数组作为<strong>对象池</strong>。</p>\n<p>原话是这样的，但不是很理解。</p>\n<blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> vector<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>vector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>引擎会删除大小为 100 的数组，再创建一个大小为 200 的数组。垃圾回收程序看到这个删除操作，可能会跑过来进行一次垃圾回收。</p>\n</blockquote>\n<p>不知道这个是不是和 <code>C++</code>  的 capacity 一样，当数组长度超过 <code>capacity</code>  时，加长 <code>capacity</code> ，然后之后的 <code>push</code>  就不需要再花大力气分配新的内存了。但我看 JavaScript 好像并不是这样，所以不是很理解，以下是 CSDN 中说的</p>\n<blockquote>\n<p>JavaScript 据元素的增加和删除来动态调整存储空间大小，内部是通过扩容和收缩机制实现</p>\n</blockquote>\n<h1 id=\"五-基本引用类型\"><a class=\"anchor\" href=\"#五-基本引用类型\">#</a> 五、 基本引用类型</h1>\n<p>在 JavaScript 中，基本引用类型不算<strong>类</strong>（尽管可以通过 new 创建对象），更像是 <code>C++</code>  中的结构体。不过和类其实也基本大差不差</p>\n<h2 id=\"1-date\"><a class=\"anchor\" href=\"#1-date\">#</a> 1. Date</h2>\n<p><code>Date</code>  类型将日期保存为<strong>自协调世界时</strong>（1970-01-01-00:00）至今所经历的<strong>毫秒数</strong></p>\n<p>通过 <code>let date=new Date()</code>  创建，构造参数不写 date 默认保存当前日期和时间。要指定时间，则需要传入<strong>毫秒数</strong>，ES 提供了 2 个函数转换毫秒数： <code>Date.parse()</code>  和 <code>Date.UTC()</code> 。</p>\n<ul>\n<li>\n<p><code>Date.parse()</code> ：接受一个表示日期的<strong>字符串</strong>，将其转为毫秒数</p>\n<ul>\n<li>月 / 日 / 年：如 “5/23/2019”</li>\n<li>月名 日，年：如 “May 23, 2019”</li>\n<li>周名 月名 日 年 时：分: 秒 时区：如 “Tue May 23 2019 00:00:00 GMT-0700”</li>\n<li>YYYY-MM-DDTHH:mm:ss.ssZ：如 2019-05-23T00:00:00</li>\n</ul>\n</li>\n<li>\n<p><code>Date.UTC()</code> ：参数是 <code>number</code>  类型的 “年，月 (0-11)，日 (1-31)，时 (0-23)，分，秒，毫秒”</p>\n<ul>\n<li><strong>年</strong>和<strong>月</strong>是必须的，其他的可选</li>\n<li>默认取最前面的值（日 = 1，其他 = 0）</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token constant\">UTC</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> date1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token constant\">UTC</span><span class=\"token punctuation\">(</span><span class=\"token number\">2005</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>不过 <code>new Date()</code>  接受的参数和 <code>Date.UTC()</code>  是一样的，因此上面的代码可以直接这样写</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> date<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> date1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2005</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">17</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">,</span><span class=\"token number\">55</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>Date.now()</code> ：返回当前的毫秒数，可用来分析代码的执行效率等</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> start<span class=\"token operator\">=</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">doSomething</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> stop<span class=\"token operator\">=</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> result<span class=\"token operator\">=</span>stop<span class=\"token operator\">-</span>start<span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"11-继承的方法\"><a class=\"anchor\" href=\"#11-继承的方法\">#</a> 1.1 继承的方法</h3>\n<p><code>Date</code>  类型重写了 <code>toLocaleString()</code> 、 <code>toString()</code>  和 <code>valueOf()</code> .</p>\n<ul>\n<li>\n<p><code>toLocaleString()</code> ：返回如下格式的日期    2/1/2019 12:00:00 AM</p>\n</li>\n<li>\n<p><code>toString()</code> ：返回如下格式的日期    Tue Feb 1 2019 00:00:00 GMT-0800 (Pacific Standard Time)</p>\n</li>\n<li>\n<p><code>valueOf()</code> ：返回毫秒数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> date1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> date2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Date</span><span class=\"token punctuation\">(</span><span class=\"token number\">2019</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>date1<span class=\"token operator\">&lt;</span>date2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"12-日期格式化方法\"><a class=\"anchor\" href=\"#12-日期格式化方法\">#</a> 1.2 日期格式化方法</h3>\n<p>即返回指定格式的日期（<strong>字符串</strong>形式）</p>\n<ul>\n<li><code>toDateString()</code> ：显示    周几、月、日、年</li>\n<li><code>toTimeString()</code> ：显示    时、分、秒、时区</li>\n<li><code>toLocaleDateString()</code> ：显示    周几、月、日、年</li>\n<li><code>toLocaleTimeString()</code> ：显示    时、分、秒</li>\n<li><code>toUTCString()</code> ：显示    完整的 UTC 日期</li>\n</ul>\n<p>这些方法和 <code>toString()</code>  还有 <code>toLocaleStirng()</code>  一样，具体情况还得视浏览器而定</p>\n<h3 id=\"13-日期-时间组件方法暂缓\"><a class=\"anchor\" href=\"#13-日期时间组件方法暂缓\">#</a> 1.3 日期 / 时间组件方法（暂缓）</h3>\n<h2 id=\"2-regexp暂缓\"><a class=\"anchor\" href=\"#2-regexp暂缓\">#</a> 2. RegExp（暂缓）</h2>\n<p>ES 通过 <code>RegExp</code>  支持<strong>正则表达式</strong>。正则表达式主要是用来<strong>字符串检索</strong>或<strong>字符串匹配</strong>的</p>\n<blockquote>\n<p>正则表达式语法： <code>let expression=/pattern/flags</code></p>\n<ul>\n<li>pattern：正则表达式</li>\n<li>flags：标记，用于控制正则表达式的行为，可多个标记组合\n<ul>\n<li>g：查找字符串全部内容，而不是找到第一个就结束</li>\n<li>i：不区分大小写</li>\n<li>m：查找到一行末尾仍继续查找</li>\n<li>y：只查找 lastIndex 及之后的字符串</li>\n<li>u：启用 Unicode 匹配</li>\n<li>s：表示元字符。匹配任何字符（包括 \\n 或 \\r）</li>\n</ul>\n</li>\n</ul>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> str <span class=\"token operator\">=</span> <span class=\"token string\">\"Visit Runoob!\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 搜索 \"Runoob\" 字符串，且不区分大小写：</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">search</span><span class=\"token punctuation\">(</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">Runoob</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>特殊字符需要 <code>\\</code>  转义</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> pattern1<span class=\"token operator\">=</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">[bc]at</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 匹配第一个 bat 或 cat，忽略大小写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> pattern2<span class=\"token operator\">=</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\[bc\\]at</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">i</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 匹配第一个 [bc] at，忽略大小写</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> pattern3<span class=\"token operator\">=</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">.at</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 匹配所有以 at 结尾的三字符组合，忽略大小写</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> pattern4<span class=\"token operator\">=</span><span class=\"token regex\"><span class=\"token regex-delimiter\">/</span><span class=\"token regex-source language-regex\">\\.at</span><span class=\"token regex-delimiter\">/</span><span class=\"token regex-flags\">gi</span></span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 匹配所有.at，忽略大小写</span></pre></td></tr></table></figure><p>以上都属于 RegExp 对象，也可以用 <code>new RegExp()</code>  创建，不过这种方法用的比较少</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> pattern1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[bc]at\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"i\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 匹配第一个 bat 或 cat，忽略大小写</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 根据 pattern1 创建 pattern2</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> pattern1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RegExp</span><span class=\"token punctuation\">(</span>pattern1<span class=\"token punctuation\">,</span><span class=\"token string\">\"g\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//flag 就变成 g 了</span></pre></td></tr></table></figure><h3 id=\"21-regexp-实例属性\"><a class=\"anchor\" href=\"#21-regexp实例属性\">#</a> 2.1 RegExp 实例属性</h3>\n<p>每个 RegExp 实例都有以下属性</p>\n<ul>\n<li>global：是否设置了 g 标记</li>\n<li>ignoreCase：是否设置了 i</li>\n<li>unicode：是否设置了 u</li>\n<li>sticky：是否设置了 y</li>\n<li>multiline：是否设置了 m</li>\n<li>dotAll：是否设置了 s</li>\n<li>lastIndex：整数，在源字符串下一次搜索开始的位置，始终从 0 开始</li>\n<li>source：正则表达式本体的字面量字符串</li>\n<li>flags：标记字符串</li>\n</ul>\n<h3 id=\"22-regexp-实例方法\"><a class=\"anchor\" href=\"#22-regexp实例方法\">#</a> 2.2 RegExp 实例方法</h3>\n<h4 id=\"221-exec-方法\"><a class=\"anchor\" href=\"#221-exec方法\">#</a> 2.2.1 exec () 方法</h4>\n<h4 id=\"222-test-方法\"><a class=\"anchor\" href=\"#222-test方法\">#</a> 2.2.2 test () 方法</h4>\n<h2 id=\"3-原始值包装类型\"><a class=\"anchor\" href=\"#3-原始值包装类型\">#</a> 3. 原始值包装类型</h2>\n<p>类似 Java 的包装类，为了方便操作原始值，ECMAScript 提供了 3 种特殊的<strong>引用类型</strong>：Boolean、Number、String</p>\n<p>每当用到某个原始值的<strong>方法或属性</strong>时，后台都会<strong>创建</strong>一个相应的原始包装类型的<strong>对象</strong>，从而暴露出操作原始值的方法。</p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>已知，字符串是原始值，按理原始值不应该有方法，但实际上后台把 s1 的值封装在了引用类型 <code>String</code>  的实例对象汇总。即后台做了一下操作：</p>\n<ol>\n<li>创建一个 <code>String</code>  类型的实例；</li>\n<li>调用实例上的方法；</li>\n<li>销毁实例。</li>\n</ol>\n<p>按代码来看是这样的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>s1<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>与引用类型的<strong>区别</strong>：</p>\n<ul>\n<li><strong>引用类型</strong>：new 出来的实例在<strong>离开作用域</strong>时被销毁</li>\n<li><strong>原始值包装类型</strong>：的实例在<strong>访问结束</strong>即销毁。</li>\n</ul>\n<p>因此原始值包装类型不能进行各种操作（如加一个属性之类），例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>s1<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">\"red\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时 new 了一个 String 实例对象，color=\"red\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 但结束即销毁，这里 s1.color 现在已经没了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined。这一行，又重新 new 了一个一个 String 实例对象，其没有 color 属性。或者说 color 属性是 undefined</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 然后这一行结束该包装类也被销毁</span></pre></td></tr></table></figure><p>此外，可以<strong>显式</strong>地创建原始值包装对象，如 <code>let s1=new String(&quot;text&quot;);</code> ，但这样就不是原始值了，用 <code>typeof</code>  返回的是 <code>object</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> value<span class=\"token operator\">=</span><span class=\"token string\">\"25\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token function\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//number</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//object</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 一般来说并不推荐直接创建包装类使用，但要明白原始值调用方法的逻辑 &lt;/font&gt;</p>\n<h3 id=\"31-boolean不推荐使用\"><a class=\"anchor\" href=\"#31-boolean不推荐使用\">#</a> 3.1 Boolean（不推荐使用）</h3>\n<p>对应布尔值的包装类</p>\n<p><code>Boolean</code>  类型构造时以 <code>true/false</code>  作为参数，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> bool<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>valueOf()</code> ：返回原始值 <code>true/false</code></li>\n<li><code>toString()</code> ：返回字符串 <code>true/false</code></li>\n</ul>\n<p>使用 <code>Boolean</code>  容易<strong>引起误会</strong>，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> f<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Boolean</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> result<span class=\"token operator\">=</span>f <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> f1<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> result1<span class=\"token operator\">=</span>f1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>在 <code>f &amp;&amp; true</code>  中，本来应该是 <code>false</code> ，但由于 <code>f</code>  是个 <code>object</code>  对象，只要不为空（ <code>null</code> ），就判定为 <code>true</code> ，这就导致了虽然 <code>f</code>  的值为 <code>false</code> ，但在布尔判断时却为 <code>true</code> 。</p>\n<h3 id=\"32-number\"><a class=\"anchor\" href=\"#32-number\">#</a> 3.2 Number</h3>\n<p>数值的包装类</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Number</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>valueOf()</code> ：返回原始值</p>\n</li>\n<li>\n<p><code>toString()</code> ：返回字符串。可接受参数，返回<strong>对应进制</strong>的字符串数值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"1010\"</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>toFixed()</code> ：返回包含指定小数点位数的数值字符串（精确到小数点后 n 位，四舍五入）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">toFixed</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"10.00\"</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>toExponential()</code> ：返回科学记数法，参数表示保留几位<strong>有效数字</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">toExponential</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"1.0e+1\"。</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>toPrecision()</code> ：自动判断使用科学计数法还是...</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">=</span><span class=\"token number\">99</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"1e+2\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">/</span><span class=\"token string\">\"99\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>num<span class=\"token punctuation\">.</span><span class=\"token function\">toPrecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">/</span><span class=\"token string\">\"99.0\"</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Number.isInteger()</code> （ES6 新增）：判断是否为<strong>整数</strong>（1.0 也算）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isInteger</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.01</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Number.isSafeInteger()</code> ：判断整数是否在正常范围（保存的整数如果超出范围会变成别的数）</p>\n<p>一般正常范围是（ <code>Number.MAX_SAFE_INTEGER</code> -2<sup>53+1~`Number.MIN_SAFE_INTEGER`2</sup>53-1）</p>\n<p><code>Number.MAX_SAFE_INTEGER</code>  是小于 <code>Number.MAX_VALUE</code>  的，前者是正常保存显示的范围，后者是上限</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>Number<span class=\"token punctuation\">.</span><span class=\"token function\">isSafeInteger</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">**</span><span class=\"token number\">53</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"33-string\"><a class=\"anchor\" href=\"#33-string\">#</a> 3.3 String</h3>\n<p>字符串的包装类</p>\n<p><code>String</code>  对象的方法可以在所有字符串原始值上调用</p>\n<p><code>valueOf()</code> 、 <code>toLocaleString()</code> 、 <code>toString()</code>  都返回对象的原始字符串</p>\n<h4 id=\"331-javascript-字符\"><a class=\"anchor\" href=\"#331-javascript字符\">#</a> 3.3.1 JavaScript 字符</h4>\n<p>每个字符由 16 个码元（code unit）组成，（其实就是 16bit）。</p>\n<ul>\n<li>\n<p><code>charAt()</code> ：获取对应索引的字符。效果上基本等同 <code>[]</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"text\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'e'</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>charCodeAt()</code> ：返回字符串<strong>对应索引</strong>的字符的<strong> ASCII 码</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token string\">\"abcd\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//99</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>String.fromCharCode()</code> ：通过给定 ASCII 码创建字符 / 字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">97</span><span class=\"token punctuation\">,</span><span class=\"token number\">98</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"abcd\"</span></pre></td></tr></table></figure></li>\n</ul>\n<p>** 代理对表示：** 使用 2 刚刚符号位（32 个 bit）表示一个符号</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">55357</span><span class=\"token punctuation\">,</span><span class=\"token number\">56842</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//😊</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCodePoint</span><span class=\"token punctuation\">(</span><span class=\"token number\">55357</span><span class=\"token punctuation\">,</span><span class=\"token number\">56842</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//😊</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 其实😊也可以直接用一个符号表示</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>String<span class=\"token punctuation\">.</span><span class=\"token function\">fromCharCode</span><span class=\"token punctuation\">(</span><span class=\"token number\">9786</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//😊</span></pre></td></tr></table></figure><h4 id=\"332-normalize-方法看不懂\"><a class=\"anchor\" href=\"#332-normalize方法看不懂\">#</a> 3.3.2 normalize () 方法（看不懂）</h4>\n<h4 id=\"333-字符串操作方法\"><a class=\"anchor\" href=\"#333-字符串操作方法\">#</a> 3.3.3 字符串操作方法</h4>\n<ul>\n<li>\n<p><code>concat()</code> ：拼接字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" world\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> s3<span class=\"token operator\">=</span>s1<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" world\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"！\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"hello world\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"hello world！\"</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 但一般使用 “<strong>+</strong>” 号即可，也更方便 &lt;/font&gt;</p>\n</li>\n<li>\n<p><code>slice()</code> ：提取字符串。参数<strong>负数</strong>代表<strong>倒数</strong></p>\n<ul>\n<li><code>start</code> ：可选，起始索引。\n<ul>\n<li>不写默认从 0 开始。</li>\n<li>超出 <code>length</code> ，返回<strong>空</strong></li>\n</ul>\n</li>\n<li><code>end</code> ：可选，结束索引（左闭右开）。\n<ul>\n<li>不写默认到结尾</li>\n<li>超出 <code>length</code> ，直接到结尾</li>\n<li><strong>小于</strong> <code>start</code> ，返回<strong>空</strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>substring()</code> ：提取字符串。参数<strong>负数</strong>视作<strong> 0</strong></p>\n<ul>\n<li><code>start</code> ：可选，起始索引。\n<ul>\n<li>不写默认从 0 开始</li>\n<li>超出 <code>length</code> ，返回<strong>空</strong></li>\n</ul>\n</li>\n<li><code>end</code> ：可选，结束索引（左闭右开）\n<ul>\n<li><strong>不写</strong>视作 start+1</li>\n<li>超出 <code>length</code> ，直接到结尾</li>\n<li><strong>小于</strong> <code>start</code> ，<strong>往回截取</strong>（但不反转字符串）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>substr()</code> ：提取字符串。</p>\n<ul>\n<li><code>start</code> ：可选，起始索引。\n<ul>\n<li>不写默认从 0 开始</li>\n<li>超出 <code>length</code> ，返回<strong>空</strong></li>\n<li><strong>负数</strong>代表倒数</li>\n</ul>\n</li>\n<li><code>len</code> ：可选，截取长度。\n<ul>\n<li>不写默认到结尾</li>\n<li><strong>负数</strong>视作 0</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"334-字符串位置方法\"><a class=\"anchor\" href=\"#334-字符串位置方法\">#</a> 3.3.4 字符串位置方法</h4>\n<ul>\n<li>\n<p><code>indexOf()</code> ：从字符串<strong>开头</strong>查找字符串，返回<strong>第一次</strong>匹配的索引</p>\n<ul>\n<li><code>s</code> ：待搜索的子串</li>\n<li><code>bgnIndex</code> ：开始查找的位置</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">indexOf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"l\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>lastIndexOf()</code> ：从结尾开始找</p>\n<ul>\n<li><code>s</code> ：待搜索的子串</li>\n<li><code>bgnIndex</code> ：开始查找的位置</li>\n</ul>\n</li>\n</ul>\n<p>这 2 个方法比 <code>search()</code>  快得多</p>\n<ul>\n<li><code>search()</code> ：查找是否包含指定字符串，是的话返回第一次匹配的索引</li>\n</ul>\n<h4 id=\"335-字符串包含方法\"><a class=\"anchor\" href=\"#335-字符串包含方法\">#</a> 3.3.5 字符串包含方法</h4>\n<ul>\n<li>\n<p><code>startsWith()</code> ：查看字符串是否以指定的子字符串<strong>开头</strong>。</p>\n<ul>\n<li><code>s</code> ：指定子串</li>\n<li><code>idx</code> ：开始位置（重新定义开头）</li>\n</ul>\n</li>\n<li>\n<p><code>endsWith()</code> ：查看字符串是否以指定的子字符串<strong>结尾</strong>。</p>\n<ul>\n<li><code>s</code> ：指定子串</li>\n<li><code>idx</code> ：结尾位置</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"ab☺c\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>includes()</code> ：检查字符串是否包含指定子串</p>\n<ul>\n<li><code>s</code> ：指定子串</li>\n<li><code>idx</code> ：开始查找的索引</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"336-trim-方法\"><a class=\"anchor\" href=\"#336-trim方法\">#</a> 3.3.6 trim () 方法</h4>\n<ul>\n<li>\n<p><code>trim()</code> ：删除字符串<strong>前后</strong>空格，中间的不删</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\" hello world  \"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"hello world\"</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>trimeLeft()</code> ：删除左边所有空格</p>\n</li>\n<li>\n<p><code>trimeRight()</code> ：删除右边所有空格</p>\n</li>\n</ul>\n<h4 id=\"337-repeat-方法\"><a class=\"anchor\" href=\"#337-repeat方法\">#</a> 3.3.7 repeat () 方法</h4>\n<ul>\n<li>\n<p><code>repeat()</code> ：复制字符串，用法相当于 <code>python</code>  的 <code>*</code> 。</p>\n<ul>\n<li><code>n</code> ：复制次数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"ab\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"ab\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"ababab\"</span></pre></td></tr></table></figure></li>\n</ul>\n<p>​\t\t&lt;font color=red&gt; 注： <code>repeat</code>  还需创建个新的变量去接受复制后的值 &lt;/font&gt;</p>\n<h4 id=\"338-padstart-和-padend-方法\"><a class=\"anchor\" href=\"#338-padstart和padend方法\">#</a> 3.3.8 padStart () 和 padEnd () 方法</h4>\n<ul>\n<li><code>padStart()</code> ：如果小于指定长度 <code>l</code> ，则在<strong>左边</strong>填充指定字符串 <code>s</code> ，直到满足要求\n<ul>\n<li><code>n</code> ：必选，长度</li>\n<li><code>s</code> ：可选，填充字符串。不写默认空格 <code>&quot; &quot;</code></li>\n</ul>\n</li>\n<li><code>padEnd()</code> ：如果小于指定长度 <code>l</code> ，则在<strong>右边</strong>填充指定字符串 <code>s</code> ，直到满足要求\n<ul>\n<li><code>n</code> ：必选，长度</li>\n<li><code>s</code> ：可选，填充字符串。不写默认空格 <code>&quot; &quot;</code></li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> s1<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"    hello\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">\".\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"....hello\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> s3<span class=\"token operator\">=</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">padStart</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"abcahello\"</span></pre></td></tr></table></figure><p>如果字符串不能刚好填充，那就会<strong>自动裁剪</strong>一下</p>\n<h4 id=\"339-字符串迭代与解构迭代器的用法\"><a class=\"anchor\" href=\"#339-字符串迭代与解构迭代器的用法\">#</a> 3.3.9 字符串迭代与解构（迭代器的用法）</h4>\n<p>先看一下示例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> message<span class=\"token operator\">=</span><span class=\"token string\">\"abc\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> messageIterator<span class=\"token operator\">=</span>message<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>iterator<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>messageIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; value: 'a', done: false &#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>messageIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; value: 'b', done: false &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>messageIterator<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; value: 'c', done: false &#125;</span></pre></td></tr></table></figure><p>像 <code>for-of</code>  和 <code>[...arr]</code>  都是通过<strong>迭代器</strong>实现的</p>\n<h4 id=\"3310-字符串大小写转换\"><a class=\"anchor\" href=\"#3310-字符串大小写转换\">#</a> 3.3.10 字符串大小写转换</h4>\n<ul>\n<li><code>toLowerCase()</code> ：全部转为小写</li>\n<li><code>toLocaleLowerCase()</code> ：全部转为小写（根据对应地区环境）</li>\n<li><code>toUpperCase()</code> ：全部转为大写</li>\n<li><code>toLocaleUpperCase()</code> ：全部转为大写（根据对应地区环境）</li>\n</ul>\n<p>一般建议使用 <code>Locale</code>  的</p>\n<h4 id=\"3311-字符串模式匹配方法暂缓\"><a class=\"anchor\" href=\"#3311-字符串模式匹配方法暂缓\">#</a> 3.3.11 字符串模式匹配方法（暂缓）</h4>\n<p>这里主要是讲了一些适配<strong>正则表达式</strong>的方法</p>\n<ul>\n<li><code>match()</code> ：</li>\n<li><code>search()</code> ：</li>\n</ul>\n<h4 id=\"3312-localecompare-方法\"><a class=\"anchor\" href=\"#3312-localecompare方法\">#</a> 3.3.12 localeCompare () 方法</h4>\n<ul>\n<li>\n<p><code>localeCompare()</code> ：比较 2 个字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> s<span class=\"token operator\">=</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"black\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yellow\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zoo\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//-1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">localeCompare</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"yello\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr></table></figure><ol>\n<li>按照字典序<strong>逐个</strong>比较</li>\n<li>如果<strong>大于</strong>，则返回<strong> 1</strong></li>\n<li>如果<strong>等于</strong>，则返回<strong> 0</strong></li>\n<li>如果<strong>小于</strong>，则返回 **-1**</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"4-单例内置对象\"><a class=\"anchor\" href=\"#4-单例内置对象\">#</a> 4. 单例内置对象</h2>\n<blockquote>\n<p>内置对象：任何由 ECMAScript 实现提供，与宿主环境无关在程序开始执行时就已存在的对象</p>\n</blockquote>\n<p>前面讲的 <code>Object</code> 、 <code>Number</code> 、 <code>String</code>  等都是内置对象，本章主要讲一下 <code>Global</code>  和 <code>Math</code></p>\n<h3 id=\"41-global\"><a class=\"anchor\" href=\"#41-global\">#</a> 4.1 Global</h3>\n<p>相当于 DOM 的 window，所有在全局作用域定义的变量和函数都会变成 Global 的属性和方法。此外，诸如 <code>isNaN()</code> 、 <code>parseInt()</code>  等方法实际上都是 <code>Global</code>  对象的方法。&lt;font color=red&gt; 也就是说， <code>Global</code>  的方法不需要写 <code>Global.isNaN()</code> ，直接写 <code>isNaN()</code>  即可 &lt;/font&gt;</p>\n<h4 id=\"411-url-编码方法\"><a class=\"anchor\" href=\"#411-url编码方法\">#</a> 4.1.1 URL 编码方法</h4>\n<ul>\n<li>\n<p><code>encodeURI()</code> ：对整个 URI 编码，<strong>不会对特殊字符如 <code>#</code> 、 <code>:</code> 、 <code>/</code>  等进行编码</strong></p>\n</li>\n<li>\n<p><code>encodeURIComponent()</code> ：对<strong>所有符号</strong>编码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> uri<span class=\"token operator\">=</span><span class=\"token string\">\"http:// www.wrox.com/illegal value.js#start\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURI</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//http://%20www.wrox.com/illegal%20value.js#start</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">encodeURIComponent</span><span class=\"token punctuation\">(</span>uri<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//http%3A%2F%2F%20www.wrox.com%2Fillegal%20value.js%23start</span></pre></td></tr></table></figure><p>一般 <code>encodeURIComponent()</code>  的使用频率比较高</p>\n</li>\n<li>\n<p><code>decodeURI()</code> ：对应解码</p>\n</li>\n<li>\n<p><code>decodeURIComponent()</code> ：对应解码</p>\n</li>\n</ul>\n<h4 id=\"412-eval-方法\"><a class=\"anchor\" href=\"#412-eval方法\">#</a> 4.1.2 eval () 方法</h4>\n<p>接收一个参数，即一个要执行的 JavaScript 字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"console.log('hello')\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等效于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>eval()</code>  有 2 个重要的特点：</p>\n<ul>\n<li>\n<p><code>eval</code>  调用的代码和 <code>eval</code>  属于同一个作用域</p>\n<p>例：通过 <code>ajax</code>  请求获取了一段 <code>js</code>  代码，需要在<strong>全局作用域</strong>中执行，可代码却是在函数中获得的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> s<span class=\"token operator\">=</span><span class=\"token string\">'function test()&#123;return 1;&#125;'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    window<span class=\"token punctuation\">.</span><span class=\"token function\">eval</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 通过 window.eval 使 s 在全局作用域运行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fun</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>eval</code>  定义的任何变量和函数都<strong>不会被提升</strong></p>\n</li>\n</ul>\n<h4 id=\"413-global-对象属性\"><a class=\"anchor\" href=\"#413-global对象属性\">#</a> 4.1.3 Global 对象属性</h4>\n<ul>\n<li><code>undefined</code> ：特殊值</li>\n<li><code>NaN</code> ：特殊值</li>\n<li><code>Infinity</code> ：特殊值</li>\n<li><code>Object</code> ： <code>Object</code>  的构造函数</li>\n<li><code>Array</code> ：构造函数（一下均是）</li>\n<li><code>Function</code></li>\n<li><code>Boolean</code></li>\n<li><code>String</code></li>\n<li><code>Number</code></li>\n<li><code>Date</code></li>\n<li><code>RegExp</code></li>\n<li><code>Symbol</code></li>\n<li><code>Error</code></li>\n<li><code>EvalError</code></li>\n<li><code>RangeError</code></li>\n<li><code>ReferenceError</code></li>\n<li><code>SyntaxError</code></li>\n<li><code>TypeError</code></li>\n<li><code>URIError</code></li>\n</ul>\n<h4 id=\"414-window-对象\"><a class=\"anchor\" href=\"#414-window对象\">#</a> 4.1.4 window 对象</h4>\n<p>浏览器的全局对象</p>\n<h3 id=\"42-math\"><a class=\"anchor\" href=\"#42-math\">#</a> 4.2 Math</h3>\n<p>数学方法</p>\n<h4 id=\"421-math-对象属性\"><a class=\"anchor\" href=\"#421-math对象属性\">#</a> 4.2.1 Math 对象属性</h4>\n<ul>\n<li><code>Math.E</code> ：e</li>\n<li><code>Math.LN10</code> ：ln10</li>\n<li><code>Math.LN2</code> ：ln2</li>\n<li><code>Math.LOG2E</code> ：log_2^e</li>\n<li><code>Math.LOG10E</code> ：lge</li>\n<li><code>Math.PI</code> ：π</li>\n<li><code>Math.SQRT1_2</code> ：根号（1/2）</li>\n<li><code>Math.SQRT2</code> ：根号 2</li>\n</ul>\n<h4 id=\"422-min-和-max-方法\"><a class=\"anchor\" href=\"#422-min和max方法\">#</a> 4.2.2 min () 和 max () 方法</h4>\n<ul>\n<li>\n<p><code>Math.min()</code> ：取一串数字的最小值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Math.max()</code> ：取一串数字的最大值</p>\n</li>\n</ul>\n<h4 id=\"423-舍入方法\"><a class=\"anchor\" href=\"#423-舍入方法\">#</a> 4.2.3 舍入方法</h4>\n<ul>\n<li><code>Math.ceil()</code> ：向上取整</li>\n<li><code>Math.floor()</code> ：向下取整</li>\n<li><code>Math.round()</code> ：四舍五入</li>\n<li><code>Math.fround()</code> ：返回数值最接近的单精度<strong>浮点</strong></li>\n</ul>\n<h4 id=\"424-random-方法\"><a class=\"anchor\" href=\"#424-random方法\">#</a> 4.2.4 random () 方法</h4>\n<ul>\n<li><code>Math.random()</code> ：返回 0-1 的随机数</li>\n</ul>\n<h4 id=\"425-其他方法\"><a class=\"anchor\" href=\"#425-其他方法\">#</a> 4.2.5 其他方法</h4>\n<p>略</p>\n<h1 id=\"六-集合引用类型\"><a class=\"anchor\" href=\"#六-集合引用类型\">#</a> 六、 集合引用类型</h1>\n<h2 id=\"1-object\"><a class=\"anchor\" href=\"#1-object\">#</a> 1. Object</h2>\n<p>虽然 Object 的实例没多少功能，但很适合<strong>存储</strong>和在应用程序间<strong>交换数据</strong></p>\n<p>创建方法：</p>\n<ul>\n<li>\n<p>显示创建</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"jake\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>对象字面量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"jake\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"name2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span>\t</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 属性名可以是数字或字符串</span></pre></td></tr></table></figure><p>实际上<strong>属性</strong>会自动转为字符串</p>\n</li>\n<li>\n<p>也可以直接这样创建</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 等效于 let person=new Object ();</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"jake\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>调用属性</strong>： <code>person.name</code>  或 <code>person[&quot;name&quot;]</code> 。</p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"jake\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">5</span><span class=\"token operator\">:</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token string\">\"name2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 属性名可以是数字或字符串</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">.</span>name2<span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">\"5\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">[</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//jake joker true 26</span></pre></td></tr></table></figure><ul>\n<li><strong>数值属性</strong>只能用中括号 <code>[]</code>  如 <code>person[&quot;5&quot;]</code></li>\n<li>如果属性字符串有<strong>空格</strong>，也只能用中括号 <code>[]</code></li>\n<li>通常用<strong>点语法</strong> <code>person.name</code>  比较多，但中括号 <code>person[&quot;name&quot;]</code>  适用性更广</li>\n</ul>\n<h2 id=\"2-array\"><a class=\"anchor\" href=\"#2-array\">#</a> 2. Array</h2>\n<p>JavaScript 的数组可以存储不同类型的数据</p>\n<h3 id=\"21-创建数组from-of\"><a class=\"anchor\" href=\"#21-创建数组from-of\">#</a> 2.1 创建数组：from、of</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 指定初始值的数组</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 初始长度为 3 的数组</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"Saab\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Volvo\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"BMW\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这样写也是合法的</span></pre></td></tr></table></figure><p>在使用 <code>Array</code>  构造数组时， <code>new</code>  也可以省略，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> cars<span class=\"token operator\">=</span><span class=\"token function\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 使用<strong>数组字面量</strong>创建数组不会调用 <code>Array</code>  构造函数 &lt;/font&gt;</p>\n<p>Array 还有 ES6 新增的用于创建数组的静态方法 <code>from()</code>  和 <code>of()</code></p>\n<h4 id=\"211-arrayfrom\"><a class=\"anchor\" href=\"#211-arrayfrom\">#</a> 2.1.1 Array.from()</h4>\n<p>将<strong>类数组结构</strong>转为数组实例</p>\n<ul>\n<li>\n<p>转换字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> sArr<span class=\"token operator\">=</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"matt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[\"m\",\"a\",\"t\",\"t\"]</span></pre></td></tr></table></figure></li>\n<li>\n<p>转换 <code>map</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map<span class=\"token punctuation\">.</span>set</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[[1,2],[3,4]]</span></pre></td></tr></table></figure></li>\n<li>\n<p>转换 <code>set</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2,3]</span></pre></td></tr></table></figure></li>\n<li>\n<p>复制数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> arr2<span class=\"token operator\">=</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">===</span>arr2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure></li>\n<li>\n<p>也可以转对象，但条件比较苛刻</p>\n<ul>\n<li>属性要对应索引</li>\n<li>得有 <code>length</code>  属性</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a1<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token number\">0</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    length<span class=\"token operator\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2,3]</span></pre></td></tr></table></figure></li>\n</ul>\n<p>此外， <code>Array.from()</code>  还有<strong>第二个参数</strong>，作用类似 <code>Array.from().map()</code></p>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a1<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span><span class=\"token parameter\">x</span><span class=\"token operator\">=></span>x<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 2, 4, 6 ]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">from</span><span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">,</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">*</span><span class=\"token number\">3</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 3, 6, 9 ]</span></pre></td></tr></table></figure><h4 id=\"212-arrayof\"><a class=\"anchor\" href=\"#212-arrayof\">#</a> 2.1.2 Array.of()</h4>\n<p>将<strong>一组参数</strong>转换为数组实例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span>Array<span class=\"token punctuation\">.</span><span class=\"token function\">of</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2,3]</span></pre></td></tr></table></figure><h3 id=\"22-数组空位\"><a class=\"anchor\" href=\"#22-数组空位\">#</a> 2.2 数组空位</h3>\n<p>使用<strong>数组字面量</strong>初始化数组时，可以用一串逗号来创建<strong>空位</strong>，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 创建包含 5 个元素的数组 3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr></table></figure><p>ES6 把逗号所占空位值为 <code>undefined</code></p>\n<p>ES6 之前的方法会忽略这个空位，如 <code>map</code>  会跳过这些空位</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,undefined,undefined,undefined,5]</span></pre></td></tr></table></figure><p>（所以是不是尽量别用吧）</p>\n<h3 id=\"23-数组索引\"><a class=\"anchor\" href=\"#23-数组索引\">#</a> 2.3 数组索引</h3>\n<p>提几点：</p>\n<ul>\n<li>\n<p>通过修改数组的 <code>length</code>  属性，可以从数组末尾<strong>删除</strong>或<strong>添加</strong>元素</p>\n<ul>\n<li>\n<p>删除：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2]</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>arr<span class=\"token punctuation\">[</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2,3,4,5]</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"24-检测数组isarray\"><a class=\"anchor\" href=\"#24-检测数组isarray\">#</a> 2.4 检测数组：isArray</h3>\n<p>2 种方法： <code>instanceof</code>  和 <code>Array.isArray()</code></p>\n<ul>\n<li><code>arr instanceof Array</code> ：有局限。多个框架有多个全局上下文，可能有多个<strong>不同版本的 <code>Array</code> </strong>。即可能别人的框架<strong>重写</strong>过 <code>Array</code> ，这样就不灵了</li>\n<li><code>Array.isArray(arr)</code> ：不管哪个全局上下文创建的，就是确定是不是数组</li>\n</ul>\n<p>&lt;font color=red&gt; 推荐使用 <code>Array.isArray()</code> &lt;/font&gt;</p>\n<h3 id=\"25-迭代器方法keys-value-entries\"><a class=\"anchor\" href=\"#25-迭代器方法keys-value-entries\">#</a> 2.5 迭代器方法：keys、value、entries</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<ul>\n<li><code>list.keys()</code> ：返回数组索引</li>\n<li><code>list.values()</code> ：返回数组所有值</li>\n<li><code>list.entries()</code> ：返回数组 <code>[index,value]</code>  的数组（二维数组）</li>\n</ul>\n<h3 id=\"26-复制和填充方法fill-copywithin\"><a class=\"anchor\" href=\"#26-复制和填充方法fill-copywithin\">#</a> 2.6 复制和填充方法：fill、copyWithin</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<ul>\n<li>\n<p><code>list.fill()</code> ：以固定值批量填充数组元素</p>\n<ul>\n<li>参数 1：value，用于填充的值</li>\n<li>参数 2-3：开始索引，结束索引，允许接收负数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[0,0,0,0,0]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[5,5,5,5,5]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">fill</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[5,5,0,0,5]</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>list.copyWithin(index1,index2,index3)</code> ：复制 <code>index2-index3</code>  的内容<strong>拷贝覆盖</strong>到 <code>index1</code>  的位置，数组长度不变（怎么会有这么无聊的函数）</p>\n<ul>\n<li>参数 1：index1，必选，填充的位置</li>\n<li>参数 2：index2，可选，默认为 0。复制 index2 开始的内容</li>\n<li>参数 3：index3，可选，默认为 length-1。复制 index2 开始 index3 结束的内容</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[0,1,2,3,4,0,1,2,3,4] 把 0 开始的内容填充到 index=5 处</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[5,6,7,8,9,5,6,7,8,9] 把 5 开始的内容填充到 index=0 处</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">copyWithin</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[0,1,2,0,1,2,7,8,9] 把 index=0-3 的内容拷贝到 index=4 处</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"27-转换方法tolocalestring-tostring-valueof-join\"><a class=\"anchor\" href=\"#27-转换方法tolocalestring-tostring-valueof-join\">#</a> 2.7 转换方法：toLocaleString、toString、valueOf、join</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<ul>\n<li>\n<p><code>list.toString()</code> ：返回数组的字符串表示（以逗号分隔）。其实是对数组的每个值调用 <code>toString</code> （对于 null 和 undefined 则是直接返回<strong>空字符串</strong>）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2,3,4,5</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>list.valueOf()</code> ：以数组形式返回所有值（其实和 values 差不多吧，实践出来和书上描述的不一样）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueOf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2,3,4,5] 并且值也都是 number</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>list.toLocaleString()</code> ：和 <code>toString</code>  差不多，但 <code>console.log</code>  和 <code>alert</code>  输出 <code>object</code>  对象是输出的 <code>toString</code>  值，而非 <code>toLocaleString</code></p>\n</li>\n<li>\n<p><code>list.join(str)</code> ：以 <code>str</code>  为分隔符拼接数组为字符串，不填默认为 <code>','</code>  分隔</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1,2,3</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//123</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1-2-3</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"28-栈方法push-pop\"><a class=\"anchor\" href=\"#28-栈方法push-pop\">#</a> 2.8 栈方法：push、pop</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<ul>\n<li><code>list.push(item)</code> ：尾部插入一个元素</li>\n<li><code>list.pop()</code> ：删除尾部元素。返回该元素</li>\n</ul>\n<h3 id=\"29-队列方法shift-unshift\"><a class=\"anchor\" href=\"#29-队列方法shift-unshift\">#</a> 2.9 队列方法：shift、unshift</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<ul>\n<li><code>list.unshift(item)</code> ：头部插入一个元素</li>\n<li><code>list.shift()</code> ：头部删除一个元素。返回该元素</li>\n</ul>\n<h3 id=\"210-排序方法sort-reverse\"><a class=\"anchor\" href=\"#210-排序方法sort-reverse\">#</a> 2.10 排序方法：sort、reverse</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<ul>\n<li>\n<p><code>list.reverse()</code> ：反转数组</p>\n</li>\n<li>\n<p><code>list.sort()</code> ：对数组排序</p>\n<ul>\n<li>\n<p>参数 1：回调函数，可选。不写默认按<strong>字典序</strong>排序</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 如下是个升序函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value1<span class=\"token punctuation\">,</span>value2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value1<span class=\"token operator\">&lt;</span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不一定是 - 1，负数即可</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>value1<span class=\"token operator\">></span>value2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 简化版</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>list<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"211-操作方法concat-slice-splice\"><a class=\"anchor\" href=\"#211-操作方法concat-slice-splice\">#</a> 2.11 操作方法：concat、slice、splice</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<ul>\n<li>\n<p><code>list.concat(...args)</code> ：拼接多个数组，但不会改变原数组，而是把新数组作为返回内容</p>\n<ul>\n<li>\n<p>arg：被拼接的数组 / 元素。数组会自动调用 <code>...</code>  转为多个 <code>item</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> color<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> newColor<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 1, 2, 3 ]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>newColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 1, 2, 3, 4, 5, 6 ]</span></pre></td></tr></table></figure></li>\n<li>\n<p>数组打平由一个标签属性 <code>[Symbol.isConcatSpreadable]</code>  控制， <code>true</code>  时 <code>concat</code>  会强制打平， <code>false</code>  则不会</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> color<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> newColor<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>newColor<span class=\"token punctuation\">[</span>Symbol<span class=\"token punctuation\">.</span>isConcatSpreadable<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>color<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span>newColor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 1, 2, 3, 4, [ 5, 6, [Symbol(Symbol.isConcatSpreadable)]: false ] ]</span></pre></td></tr></table></figure><p>感觉好像稀奇古怪的，不知道为什么会这样，和书上结果不一样</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>list.slice()</code> ：按索引截取<strong>拷贝</strong>数组（左闭右开），不会修改原数组。</p>\n<ul>\n<li>参数 1：可选，开始索引，默认为 0。可以是负数</li>\n<li>参数 2：可选，结束索引，默认为 length。可以是负数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 1, 2, 3, 4, 5 ]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 2, 3 ]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 5 ]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 2, 3, 4 ]</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>list.splice(idx,deleteCount,items)</code> ：删除、插入、替换数组内容</p>\n<ul>\n<li>\n<p>插入</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> fruits <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"Banana\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Orange\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Apple\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Mango\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Lemon\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Kiwi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Banana,Orange,Lemon,Kiwi,Apple,Mango</span></pre></td></tr></table></figure></li>\n<li>\n<p>删除</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Banana,Orange,Mango</span></pre></td></tr></table></figure></li>\n<li>\n<p>替换</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>fruits<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"Kiwi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Banana,Orange,Kiwi,Mango</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"212-搜索和位置方法indexof-lastindexof-includesfind-findindex\"><a class=\"anchor\" href=\"#212-搜索和位置方法indexof-lastindexof-includesfind-findindex\">#</a> 2.12 搜索和位置方法：indexOf、lastIndexOf、includes|find、findIndex</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<p><strong>严格相等</strong>：indexOf、lastIndexOf、includes 均是严格相等的搜索方法，也就是 <code>===</code>  号比较的</p>\n<ul>\n<li>\n<p><code>list.indexOf(item,startIdx)</code> ：查找 <code>item</code>  在数组中<strong>第一次</strong>出现的位置，没有则返回 - 1</p>\n<ul>\n<li><code>item</code> ：待查找元素</li>\n<li><code>startIdx</code> ：开始查找的位置</li>\n</ul>\n</li>\n<li>\n<p><code>list.lastIndexOf(item,startIdx)</code> ：查找 <code>item</code>  在数组中<strong>最后一次</strong>出现的位置，没有则返回 - 1</p>\n</li>\n<li>\n<p><code>list.includes(item,startIdx)</code> ：从头开始查找，如果数组中有 <code>item</code> ，则返回 <code>true</code> 。</p>\n<p><code>includes</code>  效率比 <code>indexOf</code>  高很多</p>\n</li>\n</ul>\n<p><strong>断言函数</strong>：find、findIndex。断言函数指的是返回值为<strong>布尔类型</strong>的函数</p>\n<ul>\n<li><code>list.find(func)</code> ：接收个函数，返回满足函数要求的<strong>第一个元素</strong>\n<ul>\n<li><code>func</code> ：函数接收 3 个参数，element、index、array\n<ul>\n<li><code>element</code> ：元素</li>\n<li><code>index</code> ：索引</li>\n<li><code>array</code> ：该数组</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>list.findIndex(func)</code> ：接收个函数，返回满足函数要求的<strong>第一个元素的索引</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> people<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        name<span class=\"token operator\">:</span> <span class=\"token string\">'Matt'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        age<span class=\"token operator\">:</span> <span class=\"token number\">27</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        name<span class=\"token operator\">:</span> <span class=\"token string\">'Nicho'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        age<span class=\"token operator\">:</span><span class=\"token number\">29</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span>people<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>element<span class=\"token punctuation\">.</span>age<span class=\"token operator\">&lt;</span><span class=\"token number\">28</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;name:\"Matt\",age:27&#125;</span></pre></td></tr></table></figure><p>再一个例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> events<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>events<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">element<span class=\"token punctuation\">,</span>index<span class=\"token punctuation\">,</span>array</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> element<span class=\"token operator\">===</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//`find` 会遍历数组，在找到目标后就停下</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220420194352718.png\" alt=\"image-20220420194352718\"></p>\n<h3 id=\"213-迭代方法every-filter-foreach-map-some\"><a class=\"anchor\" href=\"#213-迭代方法every-filter-foreach-map-some\">#</a> 2.13 迭代方法：every、filter、forEach、map、some</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<p>这几个迭代方法有一些共同的特性：</p>\n<ul>\n<li>\n<p>每个方法接收 2 个参数</p>\n<ul>\n<li>\n<p>参数 1：定义遍历方法的函数。该函数有 3 个参数，，element、index、array</p>\n<ul>\n<li><code>element</code> ：元素</li>\n<li><code>index</code> ：索引</li>\n<li><code>array</code> ：该数组</li>\n</ul>\n<p>可见，这一块和 <code>.find()</code>  差不多</p>\n</li>\n<li>\n<p>参数 2（可选）：该函数运行上下文的作用域（影响函数的 <code>this</code> ）</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>list.every(func)</code> ：对数组每一项都执行 <code>func</code> ，如果<strong>全都</strong>返回 <code>true</code> ，则该方法返回 <code>true</code></p>\n</li>\n<li>\n<p><code>list.some(func)</code> ：对数组每一项都执行 <code>func</code> ，如果<strong>有一项</strong>返回 <code>true</code> ，则该方法返回 <code>true</code></p>\n</li>\n<li>\n<p><code>list.filter(func)</code> ：过滤器。对每一项执行 <code>func</code> ，把返回 <code>true</code>  那几项过滤出来形成新数组返回。<strong>不改变原数组</strong></p>\n</li>\n<li>\n<p><code>list.forEach(func)</code> ：对每一项都运行 <code>func</code> ，没有返回值。（可以用来批量处理数组元素）</p>\n</li>\n<li>\n<p><code>list.map(func)</code> ：对每一项都运行 <code>func</code> ，返回由 <code>func</code>  返回值组成的数组。（和 <code>forEach</code>  的区别是有返回值）</p>\n</li>\n</ul>\n<h3 id=\"214-归并方法reduce-reduceright\"><a class=\"anchor\" href=\"#214-归并方法reduce-reduceright\">#</a> 2.14 归并方法：reduce、reduceRight</h3>\n<p>设 <code>list</code>  是 <code>Array</code>  的实例</p>\n<p>这 2 个方法都会迭代数组所有项，并在此基础上构建返回一个最终值</p>\n<ul>\n<li><code>list.reduce(mergeFun)</code> ：从数组第一项开始遍历到最后一项，\n<ul>\n<li><code>mergeFun</code> ：归并函数\n<ul>\n<li><code>prev</code> ：上一个归并值</li>\n<li><code>cur</code> ：当前项</li>\n<li><code>index</code> ：当前索引</li>\n<li><code>array</code> ：数组本身</li>\n</ul>\n</li>\n<li><code>return</code> ： <code>mergeFun</code>  的最终返回值</li>\n</ul>\n</li>\n<li><code>list.reduceRight(mergeFun)</code> ：从数组最后一项开始遍历到第一项，</li>\n</ul>\n<p>如下，可以用来做一个求和函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> sum<span class=\"token operator\">=</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">prev<span class=\"token punctuation\">,</span>cur</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>prev<span class=\"token operator\">+</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//45</span></pre></td></tr></table></figure><p>这是一个<strong>链式</strong>函数，不仅可以用来累加，也可以实现别的串联相关的方法</p>\n<h2 id=\"3-定型数组暂缓\"><a class=\"anchor\" href=\"#3-定型数组暂缓\">#</a> 3. 定型数组（暂缓）</h2>\n<p>这章挺复杂的，暂时好像也用不太到，先缓缓以后再看</p>\n<h3 id=\"31-arraybuffer\"><a class=\"anchor\" href=\"#31-arraybuffer\">#</a> 3.1 ArrayBuffer</h3>\n<p>差不多就是个不能改变长度的数组</p>\n<h2 id=\"4-map\"><a class=\"anchor\" href=\"#4-map\">#</a> 4. Map</h2>\n<p>终于到这一章了</p>\n<h3 id=\"41-基本用法及-api\"><a class=\"anchor\" href=\"#41-基本用法及api\">#</a> 4.1 基本用法及 API</h3>\n<ul>\n<li>\n<p>创建： <code>new Map()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> map<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'key1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'val1'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'key2'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'val2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'key3'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'val3'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加： <code>map.set(key,value)</code></p>\n<p><code>set</code>  可以串联，如 <code>map.set(k1,vl).set(k2,v2)</code> ；</p>\n<p>也可以在初始化时插入，如 <code>new Map().set(k,v)</code></p>\n</li>\n<li>\n<p>是否存在： <code>map.has(key)</code></p>\n</li>\n<li>\n<p>查找： <code>map.get(key)</code></p>\n</li>\n<li>\n<p>删除： <code>map.delete(key)</code></p>\n</li>\n<li>\n<p>清空： <code>map.clear()</code></p>\n</li>\n<li>\n<p>返回长度： <code>map.size</code></p>\n</li>\n</ul>\n<h3 id=\"42-顺序与迭代keys-values-entries\"><a class=\"anchor\" href=\"#42-顺序与迭代keys-values-entries\">#</a> 4.2 顺序与迭代：keys、values、entries</h3>\n<p>迭代顺序和插入顺序一致</p>\n<ul>\n<li>遍历键： <code>map.keys()</code></li>\n<li>遍历值： <code>map.values()</code></li>\n<li>遍历键值对： <code>map.entries()</code></li>\n</ul>\n<h3 id=\"43-与-object-的区别\"><a class=\"anchor\" href=\"#43-与object的区别\">#</a> 4.3 与 Object 的区别</h3>\n<ul>\n<li>\n<p>功能方面：语法那些就不过多赘述了</p>\n<ul>\n<li>关于键的类型：\n<ul>\n<li><code>Object</code>  的键以字符串存储，所有变量都会转成字符串，因此不能同时以 <code>'1'和1</code>  作为键，会被覆盖</li>\n<li><code>Map</code>  则可以存<strong>任何类型</strong>的键，且按严格模式 <code>===</code>  匹配键值对</li>\n</ul>\n</li>\n<li>关于迭代顺序：\n<ul>\n<li><code>Object</code> ：按键的字典序</li>\n<li><code>Map</code> ：按插入顺序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>性能方面：</p>\n<ul>\n<li>\n<p>内存占用： <code>Map</code>  优。相同内存，map 大约可以比 object 多存储 50% 键值对</p>\n</li>\n<li>\n<p>插入性能： <code>Map</code>  优。</p>\n</li>\n<li>\n<p>查找速度： <code>Object</code>  稍优。特别是连续整数为属性，浏览器会对其进行优化</p>\n</li>\n<li>\n<p>删除性能： <code>Map</code>  优。且更优雅</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>综上，如果用来做表，还是选用 <code>Map</code>  更合适</p>\n<h2 id=\"5-weakmap-暂缓\"><a class=\"anchor\" href=\"#5-weakmap暂缓\">#</a> 5. WeakMap (暂缓)</h2>\n<p>弱化版 Map，也没看懂这东西有啥用</p>\n<h2 id=\"6-set\"><a class=\"anchor\" href=\"#6-set\">#</a> 6. Set</h2>\n<p>应该是 Map 改的，底层应该和 Map 差不多</p>\n<h3 id=\"61-基本用法及-api\"><a class=\"anchor\" href=\"#61-基本用法及api\">#</a> 6.1 基本用法及 API</h3>\n<ul>\n<li>\n<p>创建： <code>new Set()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> set<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">4.4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>添加： <code>set.add(key)</code></p>\n<p><code>add</code>  可以串联，如 <code>set.add(k1).add(k2)</code> ；</p>\n<p>也可以在初始化时插入，如 <code>new Set().add(k)</code></p>\n</li>\n<li>\n<p>是否存在： <code>set.has(key)</code></p>\n</li>\n<li>\n<p>删除： <code>set.delete(key)</code></p>\n</li>\n<li>\n<p>清空： <code>set.clear()</code></p>\n</li>\n<li>\n<p>返回长度： <code>set.size</code></p>\n</li>\n</ul>\n<h3 id=\"62-顺序与迭代keys-values-entries\"><a class=\"anchor\" href=\"#62-顺序与迭代keys-values-entries\">#</a> 6.2 顺序与迭代：keys、values、entries</h3>\n<p>迭代顺序和插入顺序一致</p>\n<ul>\n<li>遍历键： <code>map.keys()</code></li>\n<li>遍历值： <code>map.values()</code></li>\n<li>遍历键值对： <code>map.entries()</code></li>\n</ul>\n<p>不过 set 中的值和键是一样的</p>\n<h3 id=\"63-定义类-set-类型暂缓\"><a class=\"anchor\" href=\"#63-定义类set类型暂缓\">#</a> 6.3 定义类 Set 类型（暂缓）</h3>\n<p>...</p>\n<h2 id=\"7-weakset暂缓\"><a class=\"anchor\" href=\"#7-weakset暂缓\">#</a> 7. WeakSet（暂缓）</h2>\n<p>和 WeakMap 一样，是个弱化的 Set，也是不知道有什么用</p>\n<h1 id=\"八-对象-类与面向对象编程\"><a class=\"anchor\" href=\"#八-对象-类与面向对象编程\">#</a> 八、 对象、类与面向对象编程</h1>\n<p>ECMA-262 把对象定义为一组属性的无序集合。即可以把 ECMAScript 的对象想象成一张<strong>散列表</strong>，其中的内容就是一组键值对，值可以是<strong>数据</strong>或<strong>函数</strong>。</p>\n<h2 id=\"1-理解对象实例\"><a class=\"anchor\" href=\"#1-理解对象实例\">#</a> 1. 理解对象（实例）</h2>\n<p>创建自定义通常是先创建一个 <code>Object</code>  对象，然后添加属性和方法，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>person<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>但现在更流行直接使用<strong>对象字面量</strong>的形式，即大括号 <code>&#123;&#125;</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 函数也可以直接像这样定义</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"11-属性的类型\"><a class=\"anchor\" href=\"#11-属性的类型\">#</a> 1.1 属性的类型</h3>\n<p>属性分类 2 种：<strong>数据属性</strong>和<strong>访问器属性</strong></p>\n<h4 id=\"111-数据属性\"><a class=\"anchor\" href=\"#111-数据属性\">#</a> 1.1.1 数据属性</h4>\n<p>数据属性包含一个<strong>保存数据值</strong>的位置。</p>\n<p>数据属性的 4 个<strong>特性</strong>：</p>\n<ul>\n<li><code>[[configurable]]</code> ：表示属性是否可通过 <code>delete</code>  删除并重定义，是否可修改特性，以及是否可改为<strong>访问器属性</strong>。默认为 <code>true</code> ， <code>false</code>  表示<strong>不可删除</strong>\n<ul>\n<li>在把 <code>configurable</code>  设为 <code>false</code>  后，再次调用 <code>Object.defineProperty</code>  修改非 <code>writable</code>  特性会报错</li>\n</ul>\n</li>\n<li><code>[[enumberable]]</code> ：表示属性是否可以通过 <code>for-in</code>  循环返回。默认为 <code>true</code></li>\n<li><code>[[writable]]</code> ：表示属性的值是否可被修改。默认为 <code>true</code> ， <code>false</code>  表示<strong>只读</strong></li>\n<li><code>[[value]]</code> ：包含属性实际的值。默认为 <code>undefined</code></li>\n</ul>\n<p>当属性被显式地添加到对象后，Configurable、Enumberable、Writable 都被设为 <code>true</code> ，Value 被设为指定的值</p>\n<p><strong>默认特性</strong>通过 <code>Object.defineProperty()</code>  修改。</p>\n<ul>\n<li><code>Object.defineProperty()</code> ：修改对象的属性特性\n<ul>\n<li><code>object</code> ：待修改对象</li>\n<li><code>propertyName</code> ：属性名（字符串）。</li>\n<li>``：修改特性</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 定义好了一个对象</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    writable<span class=\"token operator\">:</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 表示只读</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    value<span class=\"token operator\">:</span><span class=\"token string\">\"jake\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 修改默认特性</span></pre></td></tr></table></figure><h4 id=\"112-访问器属性\"><a class=\"anchor\" href=\"#112-访问器属性\">#</a> 1.1.2 访问器属性</h4>\n<p>访问器属性不包含数据值，而是包含一个 get 函数和一个 set 函数（但不是必须的）</p>\n<p>访问器属性也有 4 个<strong>特性</strong>：</p>\n<ul>\n<li><code>[[configurable]]</code> ：同<strong>数据属性</strong></li>\n<li><code>[[enumberable]]</code> ：同<strong>数据属性</strong></li>\n<li><code>[[get]]</code> ：获取函数，读取属性时调用。默认为 <code>undefined</code></li>\n<li><code>[[set]]</code> ：设置函数，写入属性时调用。默认为 <code>undefined</code></li>\n</ul>\n<p>&lt;font color=red&gt; <code>get/set</code>  函数也可以直接在<strong>对象字面量</strong>定义，看 1.6.3&lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> book<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    year_<span class=\"token operator\">:</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 后面加下划线 \"_\" 表示不希望被直接访问（伪私有变量）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    author<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>book<span class=\"token punctuation\">.</span>year_<span class=\"token operator\">=</span><span class=\"token number\">2019</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>year_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2019</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token string\">\"year_\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>newYear<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>year_<span class=\"token operator\">=</span>newYear<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>book<span class=\"token punctuation\">.</span>year<span class=\"token operator\">=</span><span class=\"token number\">2022</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2022</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>book<span class=\"token punctuation\">.</span>year_<span class=\"token operator\">=</span><span class=\"token number\">2023</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错，RangeError: Maximum call stack size exceeded</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">.</span>year_<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错，RangeError: Maximum call stack size exceeded</span></pre></td></tr></table></figure><p><strong>重点来了</strong></p>\n<ol>\n<li>本例中， <code>year_</code> 属性表示该变量不希望直接被外部访问\n<ol>\n<li>但实际上还是可以直接访问的，如第 5、6 行</li>\n<li>在 <code>Object.defineProperty()</code>  设置 <code>get/set</code>  函数后，该属性就无法访问了（真正被封装变为<strong>私有变量</strong>了）</li>\n</ol>\n</li>\n<li><code>Object.defineProperty()</code>  设置 <code>get/set</code>  函数后，生成了一个对应的 <code>year</code>  属性，即 <code>year_</code> 对应的<strong>访问器属性</strong>，可以被调用和设置值。\n<ol>\n<li><code>year</code>  属性相当于 <code>public</code>  的 <code>get/set</code>  函数</li>\n<li><code>get</code>  函数： <code>book.year;</code> 。相当于 Java 的 <code>book.getYear();</code></li>\n<li><code>set</code>  函数： <code>book.year=2022;</code> 。相当于 Java 的 <code>book.setYear(2022);</code></li>\n<li>但实际上 <code>year</code>  不保存值，保存值的是 <code>year_</code> 这个数值属性</li>\n</ol>\n</li>\n</ol>\n<h3 id=\"12-定义多个属性\"><a class=\"anchor\" href=\"#12-定义多个属性\">#</a> 1.2 定义多个属性</h3>\n<ul>\n<li><code>Object.defineProperties()</code>  可以同时定义 / 修改多个属性。</li>\n</ul>\n<p>如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> book<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    year_<span class=\"token operator\">:</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 后面加下划线 \"_\" 表示不希望被直接访问（伪私有变量）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    author<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    year_<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        value<span class=\"token operator\">:</span><span class=\"token number\">2017</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    author<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        value<span class=\"token operator\">:</span><span class=\"token string\">\"king\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"13-读取属性的特性\"><a class=\"anchor\" href=\"#13-读取属性的特性\">#</a> 1.3 读取属性的特性</h3>\n<ul>\n<li><code>Object.getOwnPropertyDescriptor()</code> ：获取对象属性的特性\n<ul>\n<li><code>object</code> ：对应的对象</li>\n<li><code>propertyName</code> ：对象的属性名（字符串）</li>\n</ul>\n</li>\n</ul>\n<p>例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> book<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    year_<span class=\"token operator\">:</span><span class=\"token number\">2021</span><span class=\"token punctuation\">,</span><span class=\"token comment\">// 后面加下划线 \"_\" 表示不希望被直接访问（伪私有变量）</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    author<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> descriptor<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptor</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token string\">\"year_\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2021</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>descriptor<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure><p>ECMAScript 2017 新增了 <code>Object.getOwnPropertyDescriptors()</code> ，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> descriptors<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyDescriptors</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>descriptors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220124164024765.png\" alt=\"image-20220124164024765\"></p>\n<h3 id=\"14-合并对象\"><a class=\"anchor\" href=\"#14-合并对象\">#</a> 1.4 合并对象</h3>\n<p>ES6 提供了 <code>Object.assign()</code>  方法。可以合并多个对象的属性。</p>\n<ul>\n<li>\n<p><code>Object.assign()</code> ：将源对象（参数）的属性复制到目标对象（返回值）。</p>\n<p>属性有以下要求：</p>\n<ul>\n<li>\n<p>可枚举的。 <code>Object.propertyIsEnumerable()</code>  返回 <code>true</code></p>\n</li>\n<li>\n<p>自由属性。 <code>Object.hasOwnProperty()</code>  返回 <code>true</code></p>\n</li>\n</ul>\n</li>\n</ul>\n<p>其通过<strong>源对象</strong>的 <code>get</code>  取得属性的值，然后通过<strong>目标对象</strong>的 <code>set</code>  设置属性的值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> dest<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>cls<span class=\"token operator\">:</span><span class=\"token string\">\"dest\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">idx</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> src<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>id<span class=\"token operator\">:</span><span class=\"token string\">\"src\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> s2<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span>aa<span class=\"token operator\">:</span><span class=\"token string\">'aaa'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> result<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span>src<span class=\"token punctuation\">,</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; cls: 'dest', idx: [Function: idx], id: 'src', aa: 'aaa' &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; cls: 'dest', idx: [Function: idx], id: 'src', aa: 'aaa' &#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; id: 'src' &#125;</span></pre></td></tr></table></figure><p>另外， <code>Object.assign()</code>  有几点需要注意的：</p>\n<ul>\n<li>\n<p>相同属性会被覆盖（按最后一个参数）</p>\n</li>\n<li>\n<p>合并到<strong>第一个对象</strong>，也可以通过一个<strong>标识符</strong>来接收</p>\n</li>\n<li>\n<p>不能回滚</p>\n<p>解释一下，比如 <code>Object.assign(a1,a2,a3)</code>  在 <code>a2</code>  处发生了<strong>异常</strong>，抛出错误，那么已经完成的合并不会恢复， <code>a1</code>  已经是合并后的样子了</p>\n</li>\n</ul>\n<h3 id=\"15-对象标识及相等判定\"><a class=\"anchor\" href=\"#15-对象标识及相等判定\">#</a> 1.5 对象标识及相等判定</h3>\n<p>ES6 新增了一个 <code>Object.is()</code>  判断 2 个对象是否相等。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">,</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>这和 <code>===</code>  在一些判断规则上有些许不同</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">===</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2\"</span><span class=\"token operator\">===</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token operator\">===</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">+</span><span class=\"token number\">0</span><span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0</span><span class=\"token operator\">===</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token operator\">===</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isNaN</span><span class=\"token punctuation\">(</span><span class=\"token number\">NaN</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>可以看出，</p>\n<ul>\n<li><code>===</code>  中正负 0 是一样的；但 <code>Object.is()</code>  只有 + 0 和 0 是相等的</li>\n<li><code>===</code>  中 <code>NaN</code>  之间是不等的，只能用 <code>isNaN()</code> ；而 <code>Object.is()</code>  可以判等</li>\n</ul>\n<h3 id=\"16-增强的对象语法\"><a class=\"anchor\" href=\"#16-增强的对象语法\">#</a> 1.6 增强的对象语法</h3>\n<h4 id=\"161-属性值简写\"><a class=\"anchor\" href=\"#161-属性值简写\">#</a> 1.6.1 属性值简写</h4>\n<p>给对象添加变量时，可能会有属性名和变量名是一样的，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span>name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这时候可以直接简写为</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>name</code>  会被自动解释为同名的属性键，如果找不到同名变量，则会抛出 ReferenceError</p>\n<hr>\n<p>此外，对象会在不同作用域<strong>保留属性</strong>，以防找不到。如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a1<span class=\"token punctuation\">,</span>a2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 但最终局部临时变量不会被保存</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        name<span class=\"token operator\">:</span>a1<span class=\"token punctuation\">,</span><span class=\"token comment\">// 像这种属性会被保存</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        a2</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> t<span class=\"token operator\">=</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"jake\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>ans<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jake</span></pre></td></tr></table></figure><h4 id=\"162-可计算属性\"><a class=\"anchor\" href=\"#162-可计算属性\">#</a> 1.6.2 可计算属性</h4>\n<p><strong>可计算属性</strong>支持在对象字面量中使用<strong>变量</strong>定义属性，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> nameKey<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ageKey<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> arg<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span>nameKey<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">[</span>ageKey<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token number\">123</span><span class=\"token comment\">// 函数表达式也行</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; name: 'joker', age: 16, key123: 123 &#125;</span></pre></td></tr></table></figure><p>通过中括号 <code>[]</code>  即可用<strong>变量</strong>或<strong>表达式</strong>定义属性名。</p>\n<p>如果不用 <code>[]</code> （可计算属性）的话就是这样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> nameKey<span class=\"token operator\">=</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> ageKey<span class=\"token operator\">=</span><span class=\"token string\">\"age\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> arg<span class=\"token operator\">+</span><span class=\"token string\">\"\"</span><span class=\"token operator\">+</span><span class=\"token string\">\"123\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    nameKey<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    ageKey<span class=\"token operator\">:</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">//    get (\"key\"):123   // 这行会报错</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; nameKey: 'joker', ageKey: 16 &#125;</span></pre></td></tr></table></figure><h4 id=\"163-简写方法名\"><a class=\"anchor\" href=\"#163-简写方法名\">#</a> 1.6.3 简写方法名</h4>\n<p>一般定义方法的属性，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function-variable function\">id</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>简写如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">id</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>也可以对<strong>获取函数</strong>和<strong>设置函数</strong>（ <code>get/set</code> ）使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name_<span class=\"token operator\">:</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name_<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>person<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"</span></pre></td></tr></table></figure><p>使用<strong>可计算属性</strong>的简写</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> key<span class=\"token operator\">=</span><span class=\"token string\">\"method\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token string\">\"haha\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"haha\"</span></pre></td></tr></table></figure><h3 id=\"17-对象解构\"><a class=\"anchor\" href=\"#17-对象解构\">#</a> 1.7 对象解构</h3>\n<p>通俗点讲，就是<strong>通过对象初始化变量</strong>，和 <code>let [a,b]=[b,a]</code>  有异曲同工之妙</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span>personName<span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span>personAge<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>personName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>personAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16</span></pre></td></tr></table></figure><ul>\n<li>也可以使用<strong>简写</strong>（让变量直接用属性的名称）</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//16</span></pre></td></tr></table></figure><ul>\n<li>如果引用的属性<strong>不存在</strong>，则为 <code>undefined</code></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure><ul>\n<li>也可以先使用个<strong>默认值</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>job<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"driver\"</span></pre></td></tr></table></figure><ul>\n<li>&lt;font color=red&gt;<strong> 原始值</strong>会被当成对象（通过调用 <code>toObject()</code> ）结构，但， <code>null</code>  和 <code>undefined</code>  无法被解构 &lt;/font&gt;</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>length<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token string\">\"footer\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>constructor<span class=\"token operator\">:</span>c<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">===</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><ul>\n<li>解构可以不用 <code>let</code>  等关键字声明，但这样的话需要用 <code>()</code>  包裹</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>job<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不用 () 包裹会报错</span></pre></td></tr></table></figure><h4 id=\"171-嵌套解构\"><a class=\"anchor\" href=\"#171-嵌套解构\">#</a> 1.7.1 嵌套解构</h4>\n<p>如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    job<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        title<span class=\"token operator\">:</span><span class=\"token string\">'software'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span> job<span class=\"token operator\">:</span> newJob<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>newJob<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123; title: 'software' &#125;</span></pre></td></tr></table></figure><p>实际上， <code>newJob</code>  复制的还是 <code>&#123; title: 'software' &#125;</code>  的地址，当 <code>person.job.title</code>  改动时， <code>newJob</code>  也会改动</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token punctuation\">&#123;</span>job<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>title<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'software'</span></pre></td></tr></table></figure><p>这样嵌套复制 <code>title</code>  就是复制 <code>&quot;software&quot;</code>  这个值了</p>\n<h4 id=\"172-部分解构\"><a class=\"anchor\" href=\"#172-部分解构\">#</a> 1.7.2 部分解构</h4>\n<p>如果一个<strong>解构表达式</strong>涉及多个赋值，开始的赋值成功而后面的赋值出错，那么赋值会完成一部分。（不会回滚）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> personName<span class=\"token punctuation\">,</span>personFoo<span class=\"token punctuation\">,</span>personAge<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">//person 没有 foo，所以为 undefined。而 undefined 没有属性值 bar，会抛出错误</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span>personName<span class=\"token punctuation\">,</span>foo<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span>bar<span class=\"token operator\">:</span>personFoo<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span>personAge<span class=\"token punctuation\">&#125;</span><span class=\"token operator\">=</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//TypeError: Cannot read properties of undefined (reading 'bar')</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>personName<span class=\"token punctuation\">,</span>personFoo<span class=\"token punctuation\">,</span>personAge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker undefined undefined</span></pre></td></tr></table></figure><p>此例中只有 <code>personName</code>  成功赋值了</p>\n<h4 id=\"173-参数上下文匹配\"><a class=\"anchor\" href=\"#173-参数上下文匹配\">#</a> 1.7.3 参数上下文匹配</h4>\n<p>在<strong>参数列表</strong>也可以进行解构赋值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">//&#123;name,age&#125; 正好接收 person 的值</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>bar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">printPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1st'</span><span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'2nd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">//[Arguments] &#123; '0': '1st', '1': &#123; name: 'joker', age: 10 &#125;, '2': '2nd' &#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// joker 10</span></pre></td></tr></table></figure><p>但实际上发现这个功能挺<strong>鸡肋</strong>的，可以直接传 <code>person</code>  为参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">printPerson1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">foo<span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">,</span>bar</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">printPerson1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1st'</span><span class=\"token punctuation\">,</span>person<span class=\"token punctuation\">,</span><span class=\"token string\">'2nd'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">//[Arguments] &#123; '0': '1st', '1': &#123; name: 'joker', age: 10 &#125;, '2': '2nd' &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// &#123; name: 'joker', age: 10 &#125;</span></pre></td></tr></table></figure><h2 id=\"2-创建对象伪类\"><a class=\"anchor\" href=\"#2-创建对象伪类\">#</a> 2. 创建对象（伪类）</h2>\n<p>之前使用<strong>对象字面量</strong>创建对象其实相当于直接创建<strong>对象实例</strong>，即一次性对象，更多时候 <code>&#123;&#125;</code>  是当做 <code>map/字典</code> 用的</p>\n<p>当需要<strong>同样的接口</strong>的多个不同对象实例时，需要用 <code>function</code>  创建（此时还不是 <code>class</code>  类）</p>\n<h3 id=\"21-概述\"><a class=\"anchor\" href=\"#21-概述\">#</a> 2.1 概述</h3>\n<p>ES5.1 还没有正式支持面向对象的结构，如类或继承。但可以通过原型式继承可以实现同样的功能。</p>\n<p>ES6 正式支持类和继承，不过实际上是封装了 ES5.1 构造函数 + 原型继承的语法糖而已</p>\n<h3 id=\"22-工厂模式\"><a class=\"anchor\" href=\"#22-工厂模式\">#</a> 2.2 工厂模式</h3>\n<blockquote>\n<p>工厂模式：用于抽象创建特定对象的过程。</p>\n</blockquote>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 创建一个工厂函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>job</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> o<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    o<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    o<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    o<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"software\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token function\">createPerson</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joker\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"doctor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>可以用不同的参数多次调用这个函数</p>\n<h3 id=\"23-构造函数模式\"><a class=\"anchor\" href=\"#23-构造函数模式\">#</a> 2.3 构造函数模式</h3>\n<p>前面的例子可以写成构造函数，创建一个类</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 通过 function 设置构造函数。</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>job</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job<span class=\"token operator\">=</span>job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 不建议在构造函数内定义函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 一个 Person 类就创建好了，此时只有一个构造函数</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 不过这个按理不应该叫类，但是和类功能大差不差</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Nicholas\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"software\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Joker\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"doctor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>person1<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Nicholas</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>person2<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Joker</span></pre></td></tr></table></figure><p>这里 <code>function</code>  的函数功能起到<strong>构造函数</strong>的作用，后面可以通过 <code>prototype</code>  添加成员变量 / 方法</p>\n<p><code>Person</code>  和 <code>createPerson</code>  主要有以下几点区别：</p>\n<ul>\n<li>没有显式地创建对象；</li>\n<li>属性和方法直接赋予的 <code>this</code> ；</li>\n<li>没有 <code>return</code> ；</li>\n<li>创建 <code>Person</code>  的实例要用 <code>new</code>  关键字。</li>\n</ul>\n<p>通过 ** <code>new</code> ** 调用构造函数会执行如下操作：</p>\n<ol>\n<li>在内存中新建一个对象</li>\n<li>新对象内部的 <code>[[prototype]]</code>  特性被赋值为构造函数的 <code>prototype</code>  属性</li>\n<li>构造函数内部的 <code>this</code>  被赋值给这个新对象</li>\n<li>执行构造函数内部的代码（给这个新对象添加初始属性）</li>\n<li>如果构造函数返回<strong>非空</strong>对象，则返回该对象；否则，返回刚创建的新对象</li>\n</ol>\n<p>以上 <code>person1</code>  和 <code>person2</code>  都有一个 <code>constructor</code>  属性指向 <code>Person</code> 。即</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>constructor</code> ：用于标识对象类型</p>\n</li>\n<li>\n<p>构造函数也可以用 <code>let Person=function()&#123;&#125;</code>  这种形式写，都一样。</p>\n</li>\n<li>\n<p>如果空参，也可以不写 <code>()</code> 。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2 个等效</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"231-构造函数也是函数\"><a class=\"anchor\" href=\"#231-构造函数也是函数\">#</a> 2.3.1 构造函数也是函数</h4>\n<p>构造函数和普通函数唯一区别是调用方式不同。</p>\n<ul>\n<li>\n<p>作为构造函数使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">29</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"soft\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"</span></pre></td></tr></table></figure></li>\n<li>\n<p>作为普通函数调用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"doctor\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"jack\"</span></pre></td></tr></table></figure><p>&lt;font color=red&gt;<strong> 注：此处没有 <code>new</code>  新建实例，则 &quot;jack&quot; 等属性会被保存到 Global 对象（浏览器中是 window 对象）</strong>&lt;/font&gt;</p>\n<p>即 <code>this</code>  指向全局对象</p>\n</li>\n</ul>\n<h4 id=\"232-构造函数的问题\"><a class=\"anchor\" href=\"#232-构造函数的问题\">#</a> 2.3.2 构造函数的问题</h4>\n<p>构造函数是<em>每创建一个实例便调用一次</em>。因此，在构造函数中定义的函数也会在每个实例上<strong>重新定义一遍</strong>。</p>\n<p>同一个功能的方法反复定义当然不合适，<strong>有一种方法</strong>是把函数定义在全局作用域，但这样会搞乱全局作用域（变得很杂）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 这样有用，但也不推荐</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">,</span>job</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>job<span class=\"token operator\">=</span>job<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>sayName<span class=\"token operator\">=</span>sayName<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>如上，函数便只会定义一次，但会把全局作用域搞得很乱很杂。</p>\n<p>这个问题可以通过 &lt;font size=6&gt;<strong> 原型</strong> &lt;/font&gt; 来解决</p>\n<h3 id=\"24-原型模式\"><a class=\"anchor\" href=\"#24-原型模式\">#</a> 2.4 原型模式</h3>\n<p>每个函数都会创建一个 <code>prototype</code>  属性，这个属性其实是个对象，即<strong>原型对象</strong>。使用<strong>原型对象</strong>，在它上面定义的属性和方法可以被对象的所有实例共享。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    job<span class=\"token operator\">:</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 但是这样 constructor 属性就不指向 Person 了，详细看 2.5.1 解释</span></pre></td></tr></table></figure><p>这样定义的变量是跟随 “类” 的，相当于 Java 的静态变量。但又不能直接通过 <code>Person.name</code>  调取</p>\n<p>通过原型，完美解决了之前的问题：</p>\n<ul>\n<li>对象函数只定义一次</li>\n<li>函数定义不会弄乱全局作用域</li>\n</ul>\n<p>&lt;font color=red&gt; 需要注意一点，原型并不是说保存了对象（伪类）的所有属性，比如<strong>构造函数</strong>初始化的属性就不在原型里 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"ha\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;\"ha\"&#125;</span></pre></td></tr></table></figure><p>因为构造函数的属性算是<strong>实例</strong>创建后定义的，这个属性属于实例，而不属于原型（或者说实例的父类）</p>\n<h4 id=\"241-理解原型\"><a class=\"anchor\" href=\"#241-理解原型\">#</a> 2.4.1 理解原型</h4>\n<p>只要创建一个<strong>函数</strong>，这个函数就会生成一个 <code>prototype</code>  属性（指向<strong>原型对象</strong>）。且所有<strong>原型对象</strong>都有一个 <code>constructor</code>  属性（指向对应的构造函数，即相当于返回类名）。</p>\n<ul>\n<li>\n<p><code>prototype.constructor</code> ：返回构造函数。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>prototype.__proto__</code> ：返回原对象（构造函数 / 父类）的原型对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>当访问一个对象的属性时，如果该对象内部不存在这个属性，那么就会去它的__proto__属性所指向的那个对象（可以理解为父对象）里找，如果父对象也不存在这个属性，则继续往父对象的__proto__属性所指向的那个对象（可以理解为爷爷对象）里找，直到原型链顶端 null，null 为<strong>原型链</strong>的终点</p>\n</li>\n<li>\n<p><code>prototype</code> ：原型对象，** 函数（伪类）** 所独有的属性。</p>\n</li>\n</ul>\n<p>深入理解 <code>prototype</code> 、 <code>__proto__</code> 、 <code>constructor</code>  的关系还是得上网看一下</p>\n<ul>\n<li>\n<p><code>prototype.isPrototypeof()</code> ：判断 <code>person1</code>  是否是 <code>Person</code>  的实例对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeof</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Object.getPrototype()</code> ：获取实例对象的原型（构造函数、父类）的原型对象。和 <code>__proto__</code> 的作用差不多</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeof</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token operator\">===</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n</ul>\n<p>&lt;font color=red&gt; 这里有个需要注意的地方，如果 <code>prototype</code>  是以 <code>&#123;&#125;</code>  定义的，那么 <code>constructor</code>  的返回结果会有所出路 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    job<span class=\"token operator\">:</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Object<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 发现与之前的例子结果<strong>相反</strong>， <code>Person.prototype.constructor</code>  的返回结果是 <code>[Function: Object]</code> （之前是 <code>[Function: Person]</code> ）&lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Object]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: Object]</span></pre></td></tr></table></figure><p>但 <code>__proto__</code> 是不受影响的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>__proto__<span class=\"token operator\">===</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><h4 id=\"242-原型层级\"><a class=\"anchor\" href=\"#242-原型层级\">#</a> 2.4.2 原型层级</h4>\n<p>即此前讲过的<strong>原型链</strong>。</p>\n<p>当访问实例对象的属性时，先在该实例找，找不到原型（构造函数 / 父类）找；再找不到一直往上找。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>person1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"mack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"mack\"，来自实例</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"，来自原型</span></pre></td></tr></table></figure><p>只要给对象<strong>实例</strong>添加属性，这个属性就会<strong>遮蔽</strong>原型对象上的<strong>同名属性</strong>（屏蔽对他的访问）。</p>\n<p>可以通过 <code>delete</code>  删除实例上的属性，对原型该属性的访问又可以恢复</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">delete</span> person1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"，来自原型</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>hasOwnPrototype()</code> ：判断属性是在实例上还是原型对象上</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>person1<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnPrototype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 来自实例返回 true，来自原型（父辈）返回 false</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"243-原型和-in-操作符\"><a class=\"anchor\" href=\"#243-原型和in操作符\">#</a> 2.4.3 原型和 in 操作符</h4>\n<p><code>in</code>  操作符单独使用时，可以判断属性是否是该对象的属性，（通过构造函数或父类）继承的也算。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>person1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"mack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span> <span class=\"token keyword\">in</span> person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ture</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnPrototype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true 来自实例</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span> <span class=\"token keyword\">in</span> person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//ture</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnPrototype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false 来自原型</span></pre></td></tr></table></figure><p>只要对象可以（通过原型链）访问到该属性， <code>in</code>  操作符就返回 <code>true</code> 。</p>\n<p>因此，只要 <code>in</code>  操作符返回 <code>true</code> ；且 <code>hasOwnPrototype()</code>  方法返回 <code>false</code> ，就说明该属性是<strong>原型属性</strong>（也就是（通过构造函数、父类）继承下来的）</p>\n<ul>\n<li>\n<p><code>hasPrototypeProperty()</code> ：属性是否来自对象的<strong>原型</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">hasOwnPrototype</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">,</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 来自原型（父辈）返回 true，来自实例返回 false</span></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>此外，当<strong>对象</strong>用作 <code>map</code>  时用得最多</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> hashmap<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"key1\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"key2\"</span><span class=\"token operator\">:</span><span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span> <span class=\"token keyword\">in</span> hashmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>对应于 ES6 新增的 <code>Map</code>  类的 <code>.has()</code>  方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> hashmap<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"value1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key2\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"value2\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>hashmap<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>其实同样的， <code>delete</code>  操作符类似 <code>Map</code>  的 <code>.delete()</code>  方法</p>\n<h4 id=\"244-属性枚举\"><a class=\"anchor\" href=\"#244-属性枚举\">#</a> 2.4.4 属性枚举</h4>\n<p>对象的枚举一般通过 <code>for-in</code> 、 <code>Object.keys()</code> 、 <code>Object.getOwnPropertyNames()</code> 、 <code>Object.getOwnPropertySymbols()</code>  以及 <code>Object.assign()</code>  等 5 种方法。</p>\n<p>以此例子说明</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>for-in</code> ：遍历对象实例的<strong>可访问</strong>且<strong>可枚举</strong>的属性（可来自原型）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"mack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> p <span class=\"token keyword\">in</span> person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//name age job sayName</span></pre></td></tr></table></figure><ul>\n<li>限制：\n<ul>\n<li><strong>可枚举</strong></li>\n<li><strong>可访问</strong>（能在<strong>原型链</strong>上找到的所有属性）</li>\n</ul>\n</li>\n<li>遍历顺序：<strong>无序</strong></li>\n</ul>\n</li>\n<li>\n<p><code>Object.keys()</code> ：（数组形式）返回对象实例<strong>自身</strong>的属性（可枚举的）。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>person2<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[\"name\"]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 'name', 'age', 'job', 'sayName' ]</span></pre></td></tr></table></figure><ul>\n<li>限制：\n<ul>\n<li><strong>可枚举</strong></li>\n<li>对象实例<strong>自身属性</strong>（不需要遍历原型链即可直接访问到的属性）</li>\n</ul>\n</li>\n<li>遍历顺序：<strong>无序</strong></li>\n</ul>\n</li>\n<li>\n<p><code>Object.getOwnPropertyNames()</code> ：返回<strong>对象实例</strong>所有属性（包括不可枚举的）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[\"name\"]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertyNames</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 'constructor', 'name', 'age', 'job', 'sayName' ]</span></pre></td></tr></table></figure><p>如上， <code>constructor</code>  本身不可枚举的类型，但还是通过 <code>getOwnPropertyNames()</code>  枚举了</p>\n<ul>\n<li>限制：\n<ul>\n<li><strong>无论是否可枚举都遍历</strong></li>\n<li>对象实例<strong>自身属性</strong></li>\n</ul>\n</li>\n<li>遍历顺序：\n<ol>\n<li>先以<strong>数值键升序</strong></li>\n<li>再按插入顺序升序</li>\n</ol>\n</li>\n</ul>\n</li>\n<li>\n<p><code>Object.getOwnPropertySymbols()</code> ：返回实例对象的<strong>符号属性</strong>。（ES6 之前没有 <code>symbol</code>  类型，此为 ES6 新增）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person3<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'k1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token string\">'k1'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'k2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token string\">'k2'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">getOwnPropertySymbols</span><span class=\"token punctuation\">(</span>person3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ Symbol(k1), Symbol(k2) ]</span></pre></td></tr></table></figure><ul>\n<li>限制：\n<ul>\n<li><strong>可枚举</strong></li>\n<li>对象实例<strong>自身属性</strong>。（其实符号属性基本也不会用在伪类上，因此也没有继承符号属性的）</li>\n<li>仅限<strong> Symbol 属性</strong></li>\n</ul>\n</li>\n<li>遍历顺序：\n<ul>\n<li>先以<strong>数值键升序</strong></li>\n<li>再按插入顺序升序</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>Object.assign()</code> ：返回<strong>对象实例</strong>的所有<strong>可枚举</strong>属性和值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Person &#123; name: 'jack' &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tname: 'joker',</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    age: 26,</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    job: 'driver',</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    sayName: [Function (anonymous)]</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>&#125;*/</pre></td></tr></table></figure><ul>\n<li>限制：\n<ul>\n<li><strong>可枚举</strong></li>\n<li>对象实例<strong>自身属性</strong>。</li>\n</ul>\n</li>\n<li>遍历顺序：\n<ul>\n<li>先以<strong>数值键升序</strong></li>\n<li>再按插入顺序升序</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"25-对象迭代\"><a class=\"anchor\" href=\"#25-对象迭代\">#</a> 2.5 对象迭代</h3>\n<p>首先介绍 2 个函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>job<span class=\"token operator\">=</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>person1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>Object.values()</code> ：返回对象的<strong>值</strong>的数组（对象实例<strong>自身</strong>）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 'jack' ]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ 'joker', 26, 'driver', [Function (anonymous)] ]</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>Object.entries()</code> ：返回对象<strong>键值对</strong>的数组（对象实例<strong>自身</strong>）</p>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ [ 'name', 'jack' ] ]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>[</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  [ 'name', 'joker' ],</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  [ 'age', 26 ],</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  [ 'job', 'driver' ],</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  [ 'sayName', [Function (anonymous)] ]</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>]</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>*/</pre></td></tr></table></figure><p>和 <code>Object.keys()</code>  属于同源方法，仅限<strong>可枚举</strong>、<strong>对象实例自身</strong>、<strong>非符号属性</strong></p>\n<h4 id=\"251-其他原型语法\"><a class=\"anchor\" href=\"#251-其他原型语法\">#</a> 2.5.1 其他原型语法</h4>\n<p>上面说过，对象的原型可以按以下方法定义</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    job<span class=\"token operator\">:</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是这样 <code>constructor</code>  属性就不指向 <code>Person</code>  了，因为这样默认是给 <code>Person.prototype</code>  定义了一个新对象（ <code>Object</code> ），虽然 <code>instanceof</code>  仍然可靠，但 <code>constructor</code>  已经不能正确使用了</p>\n<p>此时可以<strong>手动设置</strong> <code>constructor</code>  属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    constructor<span class=\"token operator\">:</span> Person<span class=\"token punctuation\">,</span><span class=\"token comment\">// 像这样，但这种方法 constructor 的 [[Enumerable]] 属性是 true（正常应该是 false）</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    job<span class=\"token operator\">:</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>想要设置 <code>constructor</code>  属性为 <code>false</code> ，可以用 <code>Object.defineProperty()</code>  方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    job<span class=\"token operator\">:</span><span class=\"token string\">\"driver\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 像这样</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span><span class=\"token string\">\"constructor\"</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    enumerable<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    value<span class=\"token operator\">:</span> Person</pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h4 id=\"252-原型的动态性\"><a class=\"anchor\" href=\"#252-原型的动态性\">#</a> 2.5.2 原型的动态性</h4>\n<p>从原型上的搜索值的过程是<strong>动态</strong>的，即使实例在<strong>修改原型之前</strong>已存在，修改后还是会在实例上反映出来，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> friend<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时实例创建好</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 修改原型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>friend<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"hi\", 正常输出</span></pre></td></tr></table></figure><p>这是因为<strong>实例和原型之间是松散的联系</strong>。当在实例中找不到 <code>sayHi</code>  属性，便会去原型中找。</p>\n<p>&lt;font color=red&gt; 简单的修改没事，但<strong>重写</strong>原型就不行了 &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> friend<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时实例创建好</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 重新定义原型</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">:</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>friend<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 错误</span></pre></td></tr></table></figure><p>因为 <code>friend</code>  指向的原型<strong>不再是之前的原型</strong>了，而是最初的原型。而最初的原型上没有 <code>sayHi</code>  这个属性</p>\n<h4 id=\"253-原生对象原型\"><a class=\"anchor\" href=\"#253-原生对象原型\">#</a> 2.5.3 原生对象原型</h4>\n<p>原生对象：即本来就有的对象，如 <code>Object</code> 、 <code>Array</code> 、 <code>String</code>  等。</p>\n<p>这些对象都在<strong>原型上</strong>定义了实例方法。如 <code>arr.sort()</code>  便是定义在 <code>Array.prototype</code>  上的。</p>\n<p>特别的，像基础数据类型，调用实例方法时，如 <code>s.startsWith()</code> ，先是创建一个包装类 <code>String</code>  将 <code>s</code>  设为包装类对象的<strong>值</strong>，然后调用 ** 包装类 <code>String</code> ** 的方法</p>\n<h4 id=\"254-原型的问题\"><a class=\"anchor\" href=\"#254-原型的问题\">#</a> 2.5.4 原型的问题</h4>\n<ol>\n<li>\n<p>原型<strong>弱化了</strong>构造函数传递初始化参数的能力</p>\n</li>\n<li>\n<p>原型上的属性由所有实例<strong>共享</strong></p>\n<p>如果在原型上定义了一个<strong>引用属性</strong>，如数组。那么会出现如下问题。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>person1<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[0,1,2]</span></pre></td></tr></table></figure><p>没错， <code>person1</code>  修改数组， <code>person2</code>  调用的数组也随之改变</p>\n</li>\n</ol>\n<h2 id=\"3-继承\"><a class=\"anchor\" href=\"#3-继承\">#</a> 3. 继承</h2>\n<p>JavaScript 的继承通过原型来实现，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>property<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"ha\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>cpro<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>Child</code>  通过创建 <code>Father</code>  的实例赋值给自己的原型实现继承。 <code>constructor</code>  属性也指向了 <code>Father</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Father &#123; property: true &#125;</span></pre></td></tr></table></figure><p>这里发现，原型属性只有 <code>property</code>  没有 <code>cpro</code>  和 <code>name</code>  和 <code>age</code> ，因为：</p>\n<ul>\n<li>\n<p><code>Child.prototype</code>  实际上就是个 <code>Father</code>  的实例，上述代码和如下代码实际是等价的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Father &#123; property: true &#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>cpro</code>  是因为本来就不是 <code>Child</code>  的原型属性，而是构造函数初始化的属性（实例的属性）</p>\n</li>\n<li>\n<p><code>age</code>  是因为<strong>原型</strong>被覆盖了</p>\n</li>\n<li>\n<p>通过这种方法最多继承 <code>Father</code>  的<strong>构造函数</strong>，无法继承 <code>Father</code>  的原型。可以看出， <code>property</code>  并不是原型的属性， <code>name</code>  才是，却没有被继承到 <code>Child.prototype</code>  上</p>\n</li>\n</ul>\n<p>&lt;font color=red&gt; 但是， <code>let c=new Child()</code>  则可以访问到除了 <code>age</code>  的<strong>所有属性</strong> &lt;/font&gt;</p>\n<h3 id=\"31-原型链\"><a class=\"anchor\" href=\"#31-原型链\">#</a> 3.1 原型链</h3>\n<p>上面已经说过，原型链就是对实例的属性的访问链。对 <code>person</code>  的 <code>property</code>  属性进行访问时，先查找实例有没有该属性（如果创建时 / 后定义修改的就是）；如果没有，像上级（原型，其实是父类）找；找到为止 / 到 null 为止</p>\n<p>此外，如果用<strong>对象字面量</strong>的方法修改原型，会<strong>破坏</strong>之前的原型链</p>\n<h4 id=\"311-默认原型\"><a class=\"anchor\" href=\"#311-默认原型\">#</a> 3.1.1 默认原型</h4>\n<p>任何函数的默认原型都是 <code>Object</code>  的<strong>实例</strong>。</p>\n<p>因此实例必有一个内部指针指向 <code>Object</code> 。</p>\n<p>所以所有自定义类型都能使用 <code>toString()</code>  等方法。</p>\n<p>如上例子，</p>\n<ol>\n<li><code>Child</code>  的 <code>prototype</code>  指向 <code>Father</code>  的实例；</li>\n<li><code>Father</code>  的实例通过原型链找到 <code>Father</code>  原型；</li>\n<li><code>Father</code>  的<strong>默认原型</strong>指向 <code>Object</code>  的实例；</li>\n<li><code>Object</code>  的实例可以通过原型链访问到这些方法如 <code>String</code> 。</li>\n</ol>\n<h4 id=\"312-原型与继承关系\"><a class=\"anchor\" href=\"#312-原型与继承关系\">#</a> 3.1.2 原型与继承关系</h4>\n<ul>\n<li>\n<p><code>instanceof</code> ：如果实例的原型链中出现过，则返回 <code>true</code> 。自下往上</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>isPrototype</code> ：原型调用，只要原型链出现过，返回 <code>true</code> 。自上往下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"313-关于方法\"><a class=\"anchor\" href=\"#313-关于方法\">#</a> 3.1.3 关于方法</h4>\n<p>继承后可以添加新的方法和覆盖原来的旧方法。</p>\n<h4 id=\"314-原型链的问题\"><a class=\"anchor\" href=\"#314-原型链的问题\">#</a> 3.1.4 原型链的问题</h4>\n<ul>\n<li>\n<p>第一个问题：包含的<strong>引用值</strong>所有实例共享，这也是为什么属性通常都在构造函数定义的原因。</p>\n<p>当使用原型继承时，如果被继承的构造函数初始化了引用值（如数组），那么子类的原型也有数组，那么子类的所有对象共享一个数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> c1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> c2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>c1<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2,3]</span></pre></td></tr></table></figure></li>\n<li>\n<p>第二个问题：子类在实例化时不能给父类的构造函数传参。即，不能有效利用父类的<strong>构造函数</strong>。</p>\n</li>\n</ul>\n<h3 id=\"32-盗用构造函数\"><a class=\"anchor\" href=\"#32-盗用构造函数\">#</a> 3.2 盗用构造函数</h3>\n<p>也叫 “对象伪装” 和 “经典继承”。是为了解决原型包含<strong>引用值</strong>的继承问题。</p>\n<blockquote>\n<p>基本思路：在子类构造函数中调用父类构造函数。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 继承 Father</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">Father</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> c1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> c2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>c1<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2]</span></pre></td></tr></table></figure><p>这里就和 Python 有点像了，类似 Python 的 <code>self(this)</code></p>\n<h4 id=\"321-传递参数\"><a class=\"anchor\" href=\"#321-传递参数\">#</a> 3.2.1 传递参数</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">Father</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"joker\"</span></pre></td></tr></table></figure><h4 id=\"322-盗用构造函数的问题\"><a class=\"anchor\" href=\"#322-盗用构造函数的问题\">#</a> 3.2.2 盗用构造函数的问题</h4>\n<p>此方法的<strong>缺点</strong>是：</p>\n<ol>\n<li>必须在构造函数中定义方法，因此函数不能重用</li>\n<li>子类不能访问在父类<strong>原型</strong>上定义的方法。（即只继承构造函数，不继承原型）</li>\n</ol>\n<p>因此<strong>盗用构造函数</strong>也不能单独使用</p>\n<h3 id=\"33-组合继承\"><a class=\"anchor\" href=\"#33-组合继承\">#</a> 3.3 组合继承</h3>\n<p>也叫伪经典继承。结合了以上两种方法（原型链和盗用构造函数）</p>\n<blockquote>\n<p>基本思路：使用原型链继承原型上的属性和方法，使用盗用构造函数继承实例属性（构造函数）</p>\n</blockquote>\n<ul>\n<li>在<strong>构造函数</strong>上定义<strong>属性</strong>（尤其像引用类型），这样就不会导致数组在原型上所有实例共享的情况了</li>\n<li>在<strong>原型</strong>上定义<strong>方法</strong>，这样方法可以被<strong>重载</strong></li>\n</ul>\n<p>以上述例子为例，这时候其实实例和原型都有 <code>name</code>  属性，但根据原型链，访问到的是实例中的 <code>name</code>  属性，原型中的 <code>name</code>  属性被隐蔽。</p>\n<h3 id=\"34-原型式继承\"><a class=\"anchor\" href=\"#34-原型式继承\">#</a> 3.4 原型式继承</h3>\n<p>如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span>o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>相当于对 <code>o</code>  的<strong>浅拷贝</strong>。即复制基础对象和引用对象的地址，引用对象实际上还是共享的。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    friends<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p1<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2,3]</span></pre></td></tr></table></figure><p>在 ES5 后将此方法封装在了 <code>Object.create()</code>  内</p>\n<ul>\n<li>\n<p><code>Object.create()</code> ：拷贝一个对象创建新对象</p>\n<ul>\n<li><code>obj</code> ：被复制的对象</li>\n<li><code>k-v</code> ：可选。新增的属性。属性一样会覆盖</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        value<span class=\"token operator\">:</span><span class=\"token string\">\"mark\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//mark [ 1, 2 ]</span></pre></td></tr></table></figure></li>\n</ul>\n<p>这种方法<strong>适用于</strong>不需要单独构建函数的对象共享信息。</p>\n<p>即 <code>&#123;&#125;</code>  这种像 <code>map</code>  一样的对象的信息共享（引用信息不行，是同一个）</p>\n<h3 id=\"35-寄生式继承\"><a class=\"anchor\" href=\"#35-寄生式继承\">#</a> 3.5 寄生式继承</h3>\n<p>和原型式继承类似，不过是多添加了一个函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">createAnthor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> clone<span class=\"token operator\">=</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    clone<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayHi</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hi\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>寄生式继承添加函数会导致难以重载，和构造函数模式一样</p>\n<h3 id=\"36-寄生式组合继承\"><a class=\"anchor\" href=\"#36-寄生式组合继承\">#</a> 3.6 寄生式组合继承</h3>\n<p>组合继承的问题：</p>\n<ul>\n<li>\n<p>效率：父类构造函数始终会被<strong>调用 2 次</strong></p>\n<ol>\n<li>\n<p>创建子类原型时 1 次（原型链继承）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Father</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>创建子类实例时 1 次（盗用构造函数继承）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">Father</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n</ol>\n</li>\n</ul>\n<p>因此会有 2 组属性（父类构造器的属性），1 组在子类实例上，1 组在子类原型上。</p>\n<p><strong>解决方法</strong>：原型的继承 用寄生式继承代替原型链继承</p>\n<p>寄生式实现：直接<strong>拷贝</strong>原型</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">Child<span class=\"token punctuation\">,</span>Father</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> prototype<span class=\"token operator\">=</span><span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 或者用 Object.create ()</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">=</span>Child<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token class-name\">Child</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span>prototype<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>继承示例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Father</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token class-name\">Father</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Child</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 继承实例属性</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">Father</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">=</span><span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 继承方法</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">inheritPrototype</span><span class=\"token punctuation\">(</span>Child<span class=\"token punctuation\">,</span>Father<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> c<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[1,2]</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 不能用 <code>Child.prototype=Father.prototype</code> ，因为 <code>prototype</code>  是对象，是引用值，如果子类重写方法，那么父类的方法也会变化。所以方法不能重写。&lt;/font&gt;</p>\n<p>而用 <code>inheritPrototype(Child,Father);</code> ，其 <code>prototype</code>  拷贝逻辑是</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">object</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype<span class=\"token operator\">=</span>o<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>返回的是一个 <code>new</code>  出来的实例，这个实例作为 <code>Child</code>  的原型，也就是说， <code>Child</code>  的原型是 <code>new</code>  出来的，所以不会操作关联。</p>\n<p>（可能关联的是 <code>Child</code>  的原型的原型，即 <code>Child.prototype.prototype</code> ，但对象是没有 <code>prototype</code>  属性的，所以不需要担心）</p>\n<h2 id=\"4-类\"><a class=\"anchor\" href=\"#4-类\">#</a> 4. 类</h2>\n<blockquote>\n<p>终于到类了，之前说的类都是伪类</p>\n</blockquote>\n<p>实际上 ES6 的类还是通过原型和构造函数实现的，不过把这些方法进行了封装。</p>\n<h3 id=\"41-类定义\"><a class=\"anchor\" href=\"#41-类定义\">#</a> 4.1 类定义</h3>\n<p>类声明</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类表达式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> Person<span class=\"token operator\">=</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>类的构成</p>\n<ul>\n<li>构造函数（可选）： <code>constructor()&#123;&#125;</code></li>\n<li>get/set（可选）： <code>get name()&#123;&#125;</code></li>\n<li>静态方法（可选）： <code>static method()&#123;&#125;</code></li>\n</ul>\n<h3 id=\"42-类构造函数\"><a class=\"anchor\" href=\"#42-类构造函数\">#</a> 4.2 类构造函数</h3>\n<p>构造函数，即使用 <code>new</code>  创建对象实例时调用的函数。</p>\n<p>&lt;font color=red&gt;Javascript 不支持定义多个构造函数 &lt;/font&gt;</p>\n<h4 id=\"421-实例化\"><a class=\"anchor\" href=\"#421-实例化\">#</a> 4.2.1 实例化</h4>\n<p>使用 <code>new</code>  调用类的构造器会执行如下操作：</p>\n<ol>\n<li>在内存中创建一个新的对象</li>\n<li>新对象内部的 <code>[[Prototype]]</code>  指针被赋值为构造函数的 <code>prototype</code>  属性</li>\n<li>构造函数内部的 <code>this</code>  被赋值为这个新对象</li>\n<li>执行构造函数内部的代码</li>\n<li>如果构造函数返回非空对象，则返回该对象；否则，返回刚创建的新对象\n<ol>\n<li>这里也就是说 JavaScript 的构造函数是可以 <code>return</code>  返回对象的</li>\n<li>如果构造函数有返回\n<ol>\n<li>返回的对象会被用作实例化的对象。</li>\n<li><code>this</code>  不指向返回的对象。</li>\n<li>如果之后没有引用 <code>this</code>  指向的新创建的对象，那么该对象会被销毁</li>\n<li><code>instanceof</code>  和类判别返回 <code>fasle</code> （ <code>per instanceof Per === false</code> ）</li>\n</ol>\n</li>\n</ol>\n</li>\n</ol>\n<p><strong>与 function 构造函数的区别</strong>：</p>\n<ul>\n<li><code>function</code>  如果不用 <code>new</code> ，则以全局（ <code>window</code> ）作为 <code>this</code></li>\n<li><code>class</code>  如果不用 <code>new</code>  则会报错</li>\n</ul>\n<h4 id=\"422-把类当成特殊的函数\"><a class=\"anchor\" href=\"#422-把类当成特殊的函数\">#</a> 4.2.2 把类当成特殊的函数</h4>\n<p>JavaScript 本来没有类，ES6 的类是通过函数实现的。</p>\n<ul>\n<li>\n<p>用 <code>typeof</code>  返回也是 <code>function</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> Person<span class=\"token punctuation\">)</span><span class=\"token comment\">//function</span></pre></td></tr></table></figure></li>\n<li>\n<p>类标签符也有 <code>prototype</code>  属性，且 <code>prototype</code>  也有 <code>constructor</code>  属性指向自身</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor<span class=\"token operator\">===</span>Person<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n<li>\n<p>和 <code>function</code>  一样可以用 <code>instanceof</code>  检测实例是否存在于原型链</p>\n</li>\n<li>\n<p>类可以像函数一样作为<strong>参数</strong>传递</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">add<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>Person<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure><p>下面是函数当参数传递的例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test1</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">add<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure></li>\n<li>\n<p>类也可以<strong>立即实例化</strong>（直接创建个对象）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//bar 表示直接以 bar 作为构造函数的传参，所以这里直接就输出 bar</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Person &#123;&#125;</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220202194557710.png\" alt=\"image-20220202194557710\"></p>\n<p>下面是函数的<strong>立即实例化</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">p</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//bar</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"43-实例-原型和类成员\"><a class=\"anchor\" href=\"#43-实例-原型和类成员\">#</a> 4.3 实例、原型和类成员</h3>\n<h4 id=\"431-实例成员\"><a class=\"anchor\" href=\"#431-实例成员\">#</a> 4.3.1 实例成员</h4>\n<p>每次通过 <code>new</code>  创建新实例对象，都会执行类构造函数，在函数内部为这个实例 <code>this</code>  添加 “自有属性”。</p>\n<p>每个实例都对应一个<strong>唯一</strong>的成员对象，不会在原型上共享。</p>\n<h4 id=\"432-原型方法与访问器\"><a class=\"anchor\" href=\"#432-原型方法与访问器\">#</a> 4.3.2 原型方法与访问器</h4>\n<ul>\n<li>\n<p>在类块中定义的方法作为<strong>原型方法</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">locate</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 这里如果对象实例调用了构造函数，locale 把原型上的 locale 覆盖</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token comment\">// 直接在类块里面定义相当于是定义在 prototype 上</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">locate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">locate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">locate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//mark</span></pre></td></tr></table></figure><p>其实和 <code>function</code>  对象类似，在构造器上定义的是实例属性 / 方法。在构造器外（类块）定义的是原型属性 / 方法</p>\n</li>\n<li>\n<p>使用 <code>=</code>  定义成员变量</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错 SyntaxError: Unexpected identifier</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>不能在类块定义<strong>原型</strong>的属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure></li>\n<li>\n<p>类方法等同于对象属性，可以使用字符串、符号、或计算的值作为键</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> symbolKey<span class=\"token operator\">=</span><span class=\"token function\">Symbol</span><span class=\"token punctuation\">(</span><span class=\"token string\">'symbolKey'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">stringKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"字符串键\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span>symbolKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"符号键\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'computed'</span><span class=\"token operator\">+</span><span class=\"token string\">'Key'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>         console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"计算值键\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">stringKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 字符串键</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>person<span class=\"token punctuation\">[</span>symbolKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 符号键</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">computedKey</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 计算值键</span></pre></td></tr></table></figure></li>\n<li>\n<p>支持 <code>get/set</code>  函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">set</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newName</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name_<span class=\"token operator\">=</span>newName<span class=\"token punctuation\">;</span><span class=\"token comment\">// 之前说过，_表示变量不想被直接访问到</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">get</span> <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name_<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>person<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 set</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 调用 get</span></pre></td></tr></table></figure><p>所以一般变量的定义通过 <code>get/set</code>  函数</p>\n</li>\n</ul>\n<h4 id=\"433-静态类方法\"><a class=\"anchor\" href=\"#433-静态类方法\">#</a> 4.3.3 静态类方法</h4>\n<p>这里和 Java 一样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 定义在类本身上</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> name1<span class=\"token operator\">=</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    name2<span class=\"token operator\">=</span><span class=\"token string\">\"mark\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>Person<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//hi!</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>Person<span class=\"token punctuation\">.</span><span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker undefined</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr></table></figure><ul>\n<li>直接通过<strong>类名</strong>调用</li>\n<li>和 Java 一样，静态方法只能访问静态属性</li>\n<li>静态方法定义在<strong>类本身</strong>上，而不是原型上</li>\n</ul>\n<h4 id=\"434-非函数原型和类成员\"><a class=\"anchor\" href=\"#434-非函数原型和类成员\">#</a> 4.3.4 非函数原型和类成员</h4>\n<p>虽然不支持在类块内添加原型的数据属性，但可以在<strong>外面添加</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span><span class=\"token string\">\"joker\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker</span></pre></td></tr></table></figure><p>为什么不支持在类里显式地添加原型数据属性？</p>\n<p>因为原型属性是类所有对象共有的，一般每个对象的数据属性都不同。数据是必然被覆盖的，保存一个必然被覆盖（无用武之地）的数据的值有什么意义呢？</p>\n<p>一般来说，对象实例独自拥有通过 <code>this</code>  引用的数据。</p>\n<h4 id=\"435-迭代器与生成器的方法暂缓迭代器和生成器还没看\"><a class=\"anchor\" href=\"#435-迭代器与生成器的方法暂缓迭代器和生成器还没看\">#</a> 4.3.5 迭代器与生成器的方法（暂缓，迭代器和生成器还没看）</h4>\n<h3 id=\"44-继承\"><a class=\"anchor\" href=\"#44-继承\">#</a> 4.4 继承</h3>\n<p>前面讲的是 ES5 的继承，这里是 ES6 class 的继承</p>\n<h4 id=\"441-继承基础\"><a class=\"anchor\" href=\"#441-继承基础\">#</a> 4.4.1 继承基础</h4>\n<p>ES6 支持<strong>单继承</strong>（不能同时继承多个类），使用 <code>extends</code>  关键字，就可以继承任何拥有 <code>[[Construct]]</code>  的原型和对象（因此也可以继承构造函数）</p>\n<ul>\n<li>\n<p>类继承（静态方法也能继承）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">=</span><span class=\"token string\">'queen'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    friend<span class=\"token operator\">=</span><span class=\"token string\">'king'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">getFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 类继承</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    friend<span class=\"token operator\">=</span><span class=\"token string\">'jack'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> cld<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cld<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//queen</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>cld<span class=\"token punctuation\">.</span><span class=\"token function\">getFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Jack</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">getFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//king</span></pre></td></tr></table></figure></li>\n<li>\n<p>构造函数继承</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> cld<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"jack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cld<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jack</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>cld <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n</ul>\n<p>类上定义的方法和变量都会带到派生类上</p>\n<h4 id=\"442-构造函数-homeobject-和-super\"><a class=\"anchor\" href=\"#442-构造函数-homeobject和super\">#</a> 4.4.2 构造函数、HomeObject 和 super ()</h4>\n<p>派生类方法可以通过 <code>super</code>  关键字引用他们的原型（父类），一般用于重载函数， <code>super</code>  就是调用父类的<strong>对应函数</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name_<span class=\"token operator\">=</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    friend<span class=\"token operator\">=</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">sayFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>friend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// 继承</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Child</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token comment\">// 构造函数使用 super</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>age</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age_<span class=\"token operator\">=</span>age<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    <span class=\"token comment\">// 静态方法使用 super</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    <span class=\"token keyword\">static</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'again hi hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>    <span class=\"token comment\">// 普通原型方法使用 super</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>    <span class=\"token function\">sayFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">sayFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"new frined is king\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre></pre></td></tr><tr><td data-num=\"33\"></td><td><pre><span class=\"token keyword\">let</span> cld<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Child</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jack'</span><span class=\"token punctuation\">,</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre>Child<span class=\"token punctuation\">.</span><span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>cld<span class=\"token punctuation\">.</span><span class=\"token function\">sayFriend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220202215426211-16438100670181.png\" alt=\"image-20220202215426211\"></p>\n<ul>\n<li>\n<p>构造器使用 <code>super</code>  的语法： <code>super(参数)</code></p>\n</li>\n<li>\n<p>方法使用 <code>super</code>  的语法： <code>super.method(...args)</code></p>\n</li>\n<li>\n<p>构造函数不能在 <code>super</code>  之前使用 <code>this</code> ，换言之，重写时一定要用 <code>super</code> 。（方法重新写不需要这样）</p>\n<p>或者不写 <code>super</code> ，直接返回一个对象。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"443-抽象基类抽象类-接口\"><a class=\"anchor\" href=\"#443-抽象基类抽象类-接口\">#</a> 4.4.3 抽象基类（抽象类、接口）</h4>\n<p>即抽象类，抽象类有 2 个特点：</p>\n<ol>\n<li>可供其他类继承，但本身<strong>不被实例化</strong>。</li>\n<li>子类继承一定要实现<strong>抽象函数</strong></li>\n</ol>\n<h5 id=\"1-不被实例化\"><a class=\"anchor\" href=\"#1-不被实例化\">#</a> 1. 不被实例化</h5>\n<p>ES 中没有这种语法，但可以通过 <code>new.target</code>  实现。</p>\n<p><strong>通过 <code>new.target</code>  阻止抽象类实例化，如下：</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 抽象类</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token operator\">===</span>Vehicle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vehicle不能被实例化'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// 派生类</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Bus</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">Bus</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[class Bus extends Vehicle]</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[class Vehicle]</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Error: Vehicle 不能被实例化</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>以上可知， <code>new.target</code>  返回当前对象直属的类。检验 <code>Vehicle</code>  类就报错。</p>\n<p><strong>但是为什么不直接在构造函数输出错误呢？</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vehicle不能被实例化'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>因为 <code>Vehicle</code>  的构造函数会<strong>继承</strong>给子类，这样的话子类也不能实例化了</p>\n<h5 id=\"2-一定要被实现的抽象函数\"><a class=\"anchor\" href=\"#2-一定要被实现的抽象函数\">#</a> 2. 一定要被实现的抽象函数</h5>\n<p>JavaScript 也没有抽象函数，但可以通过 <code>this.method()</code>  是否存在来限制函数的实现。如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Vehicle</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token operator\">===</span>Vehicle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Vehicle不能被实例化'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 抽象函数</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>            <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo方法没被实现'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过判断 <code>foo</code>  函数有没有被定义（如果未定义就是 <code>undefined</code> ，布尔判断为假）</p>\n<hr>\n<p>&lt;font color=red&gt; 虽然 JavaScript 可以实现抽象类的功能，但编写失误时（继承抽象类却没实现抽象函数）编译器不会报警，较之 Java 等语言容易出错 &lt;/font&gt;</p>\n<h4 id=\"444-继承内置类型\"><a class=\"anchor\" href=\"#444-继承内置类型\">#</a> 4.4.4 继承内置类型</h4>\n<p>也就是继承 <code>Array</code> 、 <code>Math</code>  这些原本就有的内置类型。相当于对其再次封装，基于他们添加自己想要的功能</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">SuperArray</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    </pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 如此这般</span></pre></td></tr></table></figure><h4 id=\"445-类混入多继承\"><a class=\"anchor\" href=\"#445-类混入多继承\">#</a> 4.4.5 类混入（多继承）</h4>\n<p>JavaScript 没有多继承的功能，但同样可以通过其他方法实现。</p>\n<p>如果只是需要合并多个对象的<strong>属性</strong>，使用 <code>Object.assign</code>  便足够</p>\n<p><strong>混入模式</strong>：B 继承 A，C 继承 B，D 继承 C。这样就相当于 D 继承了 A、B、C。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aaa</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Bbb</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">SuperClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 继承方法，返回一个继承 Super 且定义了 foo 方法的类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> SuperClass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span> </pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Ccc</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">SuperClass</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> SuperClass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ddd</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Ccc</span><span class=\"token punctuation\">(</span><span class=\"token function\">Bbb</span><span class=\"token punctuation\">(</span>Aaa<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 现在 D 就继承了 ABC</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token comment\">//Bbb (Aaa) 返回继承了 Aaa 的 Bbb 类</span></pre></td></tr></table></figure><p>简化</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Aaa</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Bbb</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">SuperClass</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> SuperClass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">Ccc</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">SuperClass</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">class</span> <span class=\"token class-name\">extends</span> SuperClass<span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>通过辅助函数把<strong>嵌套调用展开</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">mix</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">BaseClass<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>Mixins</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> Mixins<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">accumulator<span class=\"token punctuation\">,</span>current</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">current</span><span class=\"token punctuation\">(</span>accumulator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>BaseClass<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">class</span> <span class=\"token class-name\">Ddd</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">mix</span><span class=\"token punctuation\">(</span>Aaa<span class=\"token punctuation\">,</span>Bbb<span class=\"token punctuation\">,</span>Ccc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 现在 D 就继承了 ABC</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 不过这种方法不能同时继承已定义好的类，如同时继承 <code>Array</code>  和 <code>String</code> 。而且被继承的类都是自己一步步实现的（感觉好像直接写在一个类上也差不多）&lt;/font&gt;</p>\n<p>因为这是<strong>串行</strong>的多继承，一个继承一个，而不是<strong>并行</strong>的多继承。</p>\n<p>并行多继承需要解决以下问题：</p>\n<ol>\n<li>当 2 个父类有同名函数，用哪个</li>\n<li>等...</li>\n</ol>\n<p>不过好像网上<strong>不太建议</strong>使用多继承</p>\n<h1 id=\"九-反射与代理\"><a class=\"anchor\" href=\"#九-反射与代理\">#</a> 九、 反射与代理</h1>\n<h1 id=\"十-函数\"><a class=\"anchor\" href=\"#十-函数\">#</a> 十、 函数</h1>\n<p>JavaScript 中函数实际上是<strong>对象</strong>，每个函数都是 <code>Function</code>  类型的实例</p>\n<p>函数有多种定义方法：</p>\n<ul>\n<li>\n<p>函数声明定义：这种方法会<strong>自动提升</strong>，即调用函数的代码可以写在定义函数的代码上面</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>函数表达式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>函数表达式可以简化为<strong>箭头函数</strong>，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>利用 <code>Function</code>  构造函数（不推荐）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> sum<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Function</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"b\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"return a+b\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不推荐</span></pre></td></tr></table></figure><p>这种方法不常用，也影响性能（代码会被解释 2 次）</p>\n</li>\n</ul>\n<h2 id=\"1-箭头函数es6-新增\"><a class=\"anchor\" href=\"#1-箭头函数es6新增\">#</a> 1. 箭头函数（ES6 新增）</h2>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 定义函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 嵌入</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>a<span class=\"token operator\">-</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>和 Java 的 lambda 表达式一样，主要注意以下几点</p>\n<ul>\n<li>\n<p><strong>有且仅有</strong>一个参数，可以不写括号</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">double</span><span class=\"token operator\">=</span><span class=\"token parameter\">x</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">2</span><span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>只有一行代码可以不写大括号（会返回值）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>x<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 等效于</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sayName</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>箭头函数的<strong>限制</strong></p>\n<ul>\n<li>不能使用 <code>arguments</code> 、 <code>super</code> 、和 <code>new.target</code></li>\n<li>不能用作构造函数</li>\n<li>没有 <code>prototype</code>  属性</li>\n</ul>\n</li>\n</ul>\n<p>可以认为箭头函数只能做函数，不能做对象用</p>\n<h2 id=\"2-函数名\"><a class=\"anchor\" href=\"#2-函数名\">#</a> 2. 函数名</h2>\n<ul>\n<li>\n<p>函数名就是指向函数的<strong>指针</strong>，可以赋值给别的标识符。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">sum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> copySum<span class=\"token operator\">=</span>sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">copySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure></li>\n<li>\n<p>ES6 中所有函数对象都有一个 <code>name</code>  属性，保存函数名</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//sum</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//'', 空字符串</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"3-理解参数\"><a class=\"anchor\" href=\"#3-理解参数\">#</a> 3. 理解参数</h2>\n<p>ECMAScript 函数既不关心传入的参数个数，也不关心这些参数的数据类型。定义时要接受 2 个参数，但调用时只传 1 个也没事</p>\n<p>&lt;font color=red&gt; 因为在 ECMAScript 的参数内部表现为一个<strong>数组</strong> &lt;/font&gt;</p>\n<ul>\n<li>\n<p><code>arguments</code> ：函数内属性，是个<strong>类数组</strong>对象。返回接受的参数的数组</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Arguments] &#123; '0': 1, '1': 2, '2': 3 &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这样一来，开发者想传多少参数就传多少，相当于弥补了 JavaScript 函数不能重载的缺失</p>\n</li>\n<li>\n<p><strong>函数域</strong>内修改 <code>arguments</code>  会自动同步对应的参数，使之同步更改</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test1</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//10</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> num<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">test1</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1，只是函数域内的 num 变了，外部的是不能改变的</span></pre></td></tr></table></figure></li>\n</ul>\n<p><strong>箭头函数中的参数</strong></p>\n<p>箭头语法没有 <code>arguments</code>  属性，不过如果是被包裹在函数内部，可以调用外部函数的 <code>arguments</code> 。（好像是句废话）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">test2</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> <span class=\"token function-variable function\">bar</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arguments<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">test2</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"4-没有重载\"><a class=\"anchor\" href=\"#4-没有重载\">#</a> 4. 没有重载</h2>\n<p>因为 ECMAScript 函数没有签名（接收参数的类型和数量），因为参数直接由数组表示，自然也就没有重载</p>\n<p>如果 2 个函数同名，那就直接<strong>重定义</strong>了</p>\n<h2 id=\"5-默认参数值\"><a class=\"anchor\" href=\"#5-默认参数值\">#</a> 5. 默认参数值</h2>\n<p>如果函数定义了参数，但没有调用时接收到，那么可以预先设置一个默认值（通过 <code>=</code> ，ES6 新增）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">makeKing</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'King'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">makeKing</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//King</span></pre></td></tr></table></figure><p>但是没 Python 那么强大，比如看下面例子</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220205195028124.png\" alt=\"image-20220205195028124\"></p>\n<p>调用时没有按参数名传参的功能，因此只能所有参数都输进去。如果前一个参数想直接用默认值，那么可以用 <code>undefined</code>  填充代替，如<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220205195237716.png\" alt=\"image-20220205195237716\"></p>\n<p>此外，默认参数还有一些特性：</p>\n<ul>\n<li>\n<p>可以用函数作为默认参数（当然调用时也可以以函数传参）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">getN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">makeKing</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'King'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">=</span><span class=\"token function\">getN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//King 26</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>后面的默认值可以<strong>引用前面</strong>定义的参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">makeKing</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">=</span><span class=\"token string\">'King'</span><span class=\"token punctuation\">,</span>name2<span class=\"token operator\">=</span>name<span class=\"token operator\">+</span><span class=\"token number\">26</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span>name2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//King King26</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但前面的不能引用后面的</p>\n</li>\n</ul>\n<h2 id=\"6-参数扩展与收集\"><a class=\"anchor\" href=\"#6-参数扩展与收集\">#</a> 6. 参数扩展与收集</h2>\n<h3 id=\"61-扩展参数\"><a class=\"anchor\" href=\"#61-扩展参数\">#</a> 6.1 扩展参数</h3>\n<p>即扩展操作符 <code>...</code>  的用法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> arr<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getSum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> sum<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        sum<span class=\"token operator\">+=</span>i<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//6</span></pre></td></tr></table></figure><h3 id=\"62-收集参数\"><a class=\"anchor\" href=\"#62-收集参数\">#</a> 6.2 收集参数</h3>\n<p>可以用 <code>...</code>  作为定义函数时的参数，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getSum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value1<span class=\"token punctuation\">,</span>value2<span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>values</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> values<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span>y</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>x<span class=\"token operator\">+</span>y<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>value1<span class=\"token operator\">+</span>value2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">getSum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token operator\">...</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//9</span></pre></td></tr></table></figure><blockquote>\n<p>values.reduce ((x,y)=&gt;x+y,0) 是数组求和的代码，reduce 函数之后再介绍</p>\n</blockquote>\n<p>但是只能做为<strong>最后一个</strong>参数，像下面这样是<strong>不行</strong>的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getSum</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token operator\">...</span>values<span class=\"token punctuation\">,</span>value2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 报错 No parameter is allowed after rest parameter</span></pre></td></tr></table></figure><h2 id=\"7-函数声明与函数表达式\"><a class=\"anchor\" href=\"#7-函数声明与函数表达式\">#</a> 7. 函数声明与函数表达式</h2>\n<p>函数声明： <code>function method()&#123;&#125;</code></p>\n<p>函数表达式： <code>let method=function()&#123;&#125;</code></p>\n<p>前面已经说过，可以在函数声明前调用函数，但不能在函数表达式前调用该函数。因为在执行代码前，JavaScript 引擎会<strong>先扫描一遍</strong>，发现函数声明就将其<strong>提升</strong>到源代码树顶部，即<strong>函数声明提升</strong>。</p>\n<p>除此之外，两者是等价的</p>\n<h2 id=\"8-函数作为值\"><a class=\"anchor\" href=\"#8-函数作为值\">#</a> 8. 函数作为值</h2>\n<p>因为函数名在 ECMAScript 中就是变量，因此函数可以用在任何可以使用变量的地方。&lt;font color=red&gt; 包括作为函数的参数 &lt;/font&gt;</p>\n<ul>\n<li>\n<p>函数作为参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">,</span>func</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>add<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 注：这里的<strong>函数名做参数</strong>和前面的<strong>调用函数做默认值</strong>还是有区别的 &lt;/font&gt;，如果是访问函数而不是调用函数，那么必须不带括号。</p>\n</li>\n<li>\n<p>函数作为返回值</p>\n<p><strong>可以用这个功能定义 <code>sort</code>  的多种排序方法</strong>，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 根据参数 1 升序，参数 2 降序</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">nameList</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg1<span class=\"token punctuation\">,</span>arg2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">obj1<span class=\"token punctuation\">,</span>obj2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>obj2<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>obj1<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>obj2<span class=\"token punctuation\">[</span>arg1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">return</span> obj2<span class=\"token punctuation\">[</span>arg2<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span>obj1<span class=\"token punctuation\">[</span>arg2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> list<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">28</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">26</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token punctuation\">&#123;</span>name<span class=\"token operator\">:</span><span class=\"token string\">'mark'</span><span class=\"token punctuation\">,</span>age<span class=\"token operator\">:</span><span class=\"token number\">21</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token comment\">// 根据姓名升序，根据年龄降序</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token function\">nameList</span><span class=\"token punctuation\">(</span><span class=\"token string\">'name'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'age'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token comment\">/*[</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>  &#123; name: 'joker', age: 28 &#125;,</pre></td></tr><tr><td data-num=\"22\"></td><td><pre>  &#123; name: 'joker', age: 26 &#125;,</pre></td></tr><tr><td data-num=\"23\"></td><td><pre>  &#123; name: 'mark', age: 21 &#125;</pre></td></tr><tr><td data-num=\"24\"></td><td><pre>]*/</pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"9-函数内部\"><a class=\"anchor\" href=\"#9-函数内部\">#</a> 9. 函数内部</h2>\n<p>ES5 中函数内部有 2 个特殊的对象 <code>arguments</code>  和 <code>this</code> ，在 ES6 中又新增了 <code>new.target</code>  属性</p>\n<h3 id=\"91-arguments\"><a class=\"anchor\" href=\"#91-arguments\">#</a> 9.1 arguments</h3>\n<p>前面说过了，是个类数组对象，保存所有传进来的参数。 <code>arguments</code>  还有一个 <code>callee</code>  属性，是<strong>指向该函数的指针</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 阶乘函数，递归实现</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token function\">fact</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这种方法递归有一个<strong>问题</strong>，如果之后函数指针被拷贝并且<strong>重定义</strong>了，那么拷贝函数的逻辑会发生错误</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> f1<span class=\"token operator\">=</span>fact<span class=\"token punctuation\">;</span><span class=\"token comment\">//f1 拷贝了 fact 函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function-variable function\">fact</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//0，预期是 120</span></pre></td></tr></table></figure><p>因为 <code>f1</code>  中有一行代码是 <code> return fact(num-1)*num;</code>  但因为 <code>fact()</code>  已经重定义了，因此 <code>f1</code>  不再是递归函数</p>\n<hr>\n<p>** 解决：** 可以用 <code>arguments.callee</code>  让递归与函数名解耦（就是不直接输入函数名）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">order</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    arguments<span class=\"token punctuation\">.</span><span class=\"token function\">callee</span><span class=\"token punctuation\">(</span>root<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 使用 callee 属性递归</span></pre></td></tr></table></figure><p>这样就不会出现上面的问题了</p>\n<h3 id=\"92-this\"><a class=\"anchor\" href=\"#92-this\">#</a> 9.2 this</h3>\n<ul>\n<li><strong>标准函数</strong>： <code>this</code>  返回的是<strong>调用</strong>该函数的对象的域</li>\n<li><strong>箭头函数</strong>： <code>this</code>  返回的是<strong>定义</strong>该函数的域</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'red'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">lambda</span><span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>func<span class=\"token operator\">=</span>func<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>lambda<span class=\"token operator\">=</span>lambda<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//red，实际上是 window.func ()，window.color=red，因此是 red</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//red</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token keyword\">let</span> t<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Test</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//blue</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>t<span class=\"token punctuation\">.</span><span class=\"token function\">lambda</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//red</span></pre></td></tr></table></figure><p>总之，箭头函数在定义好后 <code>this</code>  返回就已经定死了，赋值给别的函数也不行</p>\n<h3 id=\"93-caller\"><a class=\"anchor\" href=\"#93-caller\">#</a> 9.3 caller</h3>\n<p>回调：<strong>引用调用当前函数的函数</strong>。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">inner</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>inner<span class=\"token punctuation\">.</span>caller<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//outer</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: outer]</span></pre></td></tr></table></figure><p><code>arguments.callee</code>  是返回该函数， <code>caller</code>  是返回父函数</p>\n<h3 id=\"94-newtarget\"><a class=\"anchor\" href=\"#94-newtarget\">#</a> 9.4 new.target</h3>\n<p>ECMAScript 中的函数始终可以作为构造函数实例化的新<strong>对象</strong>。</p>\n<p>ES6 新增的 <code>new.target</code>  属性：</p>\n<ul>\n<li>如果函数正常调用（没有用 <code>new</code>  实例化）： <code>new.target</code>  返回 <code>undefined</code></li>\n<li>如果 <code>new</code>  实例化了对象： <code>new.target</code>  返回该构造函数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span><span class=\"token punctuation\">.</span>target<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">new</span> <span class=\"token class-name\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[Function: King]</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">King</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr></table></figure><h2 id=\"10-函数属性与方法\"><a class=\"anchor\" href=\"#10-函数属性与方法\">#</a> 10. 函数属性与方法</h2>\n<p>属性：length、prototype</p>\n<p>方法：call ()、apply ()、bind ()</p>\n<ul>\n<li>\n<p><code>length</code> ：返回函数定义时的参数个数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> a<span class=\"token operator\">+</span>b<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sayName<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>sum<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//2</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>prototype</code> ：原型，前面讲了很多了</p>\n</li>\n</ul>\n<p>接下来是方法，这些方法主要是以何种（作用域、参数）调用函数的方法</p>\n<ul>\n<li>\n<p><code>apply()</code> ：以指定的 <code>this</code>  和参数调用函数</p>\n<ul>\n<li><code>this</code> ：函数运行的指定 this</li>\n<li><code>arguments</code> ：函数运行的指定参数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>num<span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> num1<span class=\"token operator\">+</span>num2<span class=\"token operator\">+</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> o<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    num<span class=\"token operator\">:</span><span class=\"token number\">5</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">applySum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span>b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">applySum</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//13</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//8</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>call()</code> ：和 <code>apply()</code>  一样，但它不能用 <code>arguments</code> ，只能显式地输入参数</p>\n<ul>\n<li><code>this</code></li>\n<li>... 参数</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">add</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//8</span></pre></td></tr></table></figure><p>&lt;font color=red&gt; 注意一下，call 和 apply 输入参数不太一样，apply 需要 <code>[]</code>  包裹，call 不需要 &lt;/font&gt;</p>\n<p><code>apply</code>  和 <code>call</code>  最重要的是控制函数调用<strong>指定作用域</strong> <code>this</code>  的能力</p>\n</li>\n<li>\n<p><code>bind()</code> ：创建一个新的<strong>函数实例</strong></p>\n<ul>\n<li><code>this</code> ：新函数的指定 this</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> o<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    color<span class=\"token operator\">=</span><span class=\"token string\">'blue'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayColor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> bindTest<span class=\"token operator\">=</span><span class=\"token function\">sayColor</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 绑定了 o 的 this</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">bindTest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//blue</span></pre></td></tr></table></figure></li>\n</ul>\n<h2 id=\"11-函数表达式\"><a class=\"anchor\" href=\"#11-函数表达式\">#</a> 11. 函数表达式</h2>\n<p>这节归根结底一句话，不要把函数定义写在条件表达式内</p>\n<p><strong>不要这样做</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>改成这样</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sayHi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'yo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"12-递归\"><a class=\"anchor\" href=\"#12-递归\">#</a> 12. 递归</h2>\n<p>前面说过，如果把递归函数赋值给其他变量会出错，要在函数体内用 <code>arguments.callee()</code>  代替函数名。但是在<strong>严格模式</strong>不能访问 <code>arguments.callee</code> ，因此还可以使用<strong>命名函数表达式</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> fact<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> num<span class=\"token operator\">*</span><span class=\"token function\">f</span><span class=\"token punctuation\">(</span>num<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"13-尾调用优化es6-新增\"><a class=\"anchor\" href=\"#13-尾调用优化es6新增\">#</a> 13. 尾调用优化（ES6 新增）</h2>\n<p><strong>尾调用</strong>：即外部函数的返回值是一个内部函数的返回值</p>\n<p>看不懂，需要在<strong>严格模式</strong>下</p>\n<h2 id=\"14-闭包\"><a class=\"anchor\" href=\"#14-闭包\">#</a> 14. 闭包</h2>\n<p><strong>闭包</strong>：引用了另一个函数作用域中变量的函数，一般是嵌套函数</p>\n<p>闭包会把其包含函数的<strong>活动对象</strong>添加到自己的作用域链，因此<strong>比其他函数更占内存</strong>。过度使用闭包可能导致内存过度占用，不建议经常使用闭包。这里详细解释一下：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> num<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> temp<span class=\"token operator\">=</span><span class=\"token function\">outer</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>temp<span class=\"token operator\">=</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 直到此时内存才被释放</span></pre></td></tr></table></figure><p>闭包会引用外部函数的变量，在外部函数返回匿名函数（闭包）时，内部函数（闭包）会将外部函数的局部活动对象添加到自己的作用域链中，即外部函数被另一个作用域<strong>引用</strong>了，就无法被回收。只有外部引用 temp 解除对函数的引用，才能释放内存。</p>\n<hr>\n<p>不过以上是因为返回了函数，如果仅仅是返回常量应该不会这样</p>\n<h3 id=\"141-this-对象\"><a class=\"anchor\" href=\"#141-this对象\">#</a> 14.1 this 对象</h3>\n<p>内部函数会造成 this 指向错误，看下面例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span>identity<span class=\"token operator\">=</span><span class=\"token string\">'Window'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    identity<span class=\"token operator\">:</span><span class=\"token string\">'Obj'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">getIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Window</span></pre></td></tr></table></figure><p>因为内部函数永远无法获取外部函数的 <code>this</code>  和 <code>arguments</code></p>\n<p>可以将 <code>this</code>  保存到其他变量中</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    identity<span class=\"token operator\">:</span><span class=\"token string\">'Obj'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">getIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">let</span> that<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token keyword\">return</span> that<span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Obj</span></pre></td></tr></table></figure><p>当然这个例子不用闭包也是可以的</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> obj<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    identity<span class=\"token operator\">:</span><span class=\"token string\">'Obj'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">getIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>identity<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>obj<span class=\"token punctuation\">.</span><span class=\"token function\">getIdentity</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Obj</span></pre></td></tr></table></figure><h3 id=\"142-内存泄漏\"><a class=\"anchor\" href=\"#142-内存泄漏\">#</a> 14.2 内存泄漏</h3>\n<p>垃圾回收机制中，被引用的作用域无法被销毁释放内存</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span>  <span class=\"token function\">showId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    el<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>      <span class=\"token function\">aler</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 这样会导致闭包引用外层的 el，当执行完 showId 后，el 无法释放</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里只要匿名函数存在， <code>el</code>  就不会被回收。可以改成下面这样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 改成下面</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span>  <span class=\"token function\">showId</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> el <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"app\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">var</span> id  <span class=\"token operator\">=</span> el<span class=\"token punctuation\">.</span>id</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    el<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclick</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      <span class=\"token function\">aler</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">)</span>   <span class=\"token comment\">// 这样会导致闭包引用外层的 el，当执行完 showId 后，el 无法释放</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    el <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>    <span class=\"token comment\">// 主动释放 el</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>此处：</p>\n<ol>\n<li>将 <code>el.id</code>  保存在变量 <code>id</code>  中，消除了循环引用（闭包对 <code>el</code>  的引用）</li>\n<li><code>el=null</code>  主动销毁了 <code>el</code> ，成功释放了内存</li>\n</ol>\n<h2 id=\"15-立即调用的函数表达式\"><a class=\"anchor\" href=\"#15-立即调用的函数表达式\">#</a> 15. 立即调用的函数表达式</h2>\n<p>仅使用一次的函数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 代码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//5</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"16-私有变量\"><a class=\"anchor\" href=\"#16-私有变量\">#</a> 16. 私有变量</h2>\n<p>严格讲，JavaScript 没有<strong>私有成员</strong>的概念，所有对象属性都是公有的，但是却有<strong>私有变量</strong>的概念。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num1<span class=\"token punctuation\">,</span>num2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> sum<span class=\"token operator\">=</span>num1<span class=\"token operator\">+</span>num2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><code>num1</code> 、 <code>num2</code>  和 <code>sum</code>  就是私有变量，在外部无法访问到。但闭包可以访问这些变量，可以通过闭包创建公有方法</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        name<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>person<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//mark</span></pre></td></tr></table></figure><p>这种方法是直接将 <code>get/set</code>  写在了<strong>构造函数</strong>。但是这样的<strong>缺点</strong>是每个实例都要重新创造一遍新方法</p>\n<h3 id=\"161-静态私有变量\"><a class=\"anchor\" href=\"#161-静态私有变量\">#</a> 16.1 静态私有变量</h3>\n<ol>\n<li>\n<p>创建一个匿名直接函数：创建函数作用域，把<strong>静态变量</strong>存在这个作用域内</p>\n</li>\n<li>\n<p>在作用域内创建<strong>构造函数</strong>，定义<strong>公开方法</strong></p>\n</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token string\">''</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 把变量保存在此作用域内，只要还有 Person 的引用就不会被释放</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">Person</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        name<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token comment\">// 可以访问外部域的 name</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">return</span> name<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token class-name\">Person</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">setName</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        name<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token keyword\">let</span> person1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'joker'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//joker</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>person1<span class=\"token punctuation\">.</span><span class=\"token function\">setName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mark'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//mark</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token keyword\">let</span> person2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jack'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person1<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jack</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>person2<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//jack</span></pre></td></tr></table></figure><p>但这样会把变量变成静态变量，是所有实例共享的</p>\n<p>静态变量不用把 <code>get/set</code>  方法放在构造函数，但所有实例共享一个变量。</p>\n<blockquote>\n<p>使用闭包和私有变量会导致作用域链变长，查找变量的时间变长</p>\n</blockquote>\n<h3 id=\"162-模块模式\"><a class=\"anchor\" href=\"#162-模块模式\">#</a> 16.2 模块模式</h3>\n<p>就是<strong>单例对象</strong>添加私有属性和私有方法，返回公开方法和公开属性，减少全局变量的使用。</p>\n<blockquote>\n<p>单例对象：只有一个实例的对象</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">singleton</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 创建私有变量</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> privateNum <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 创建私有函数</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">privateFunc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token comment\">// 实现自己的业务逻辑代码</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 返回一个对象包含公有方法和属性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        publicVariable<span class=\"token operator\">:</span> publicVariable<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        publicMethod<span class=\"token operator\">:</span> publicMethod</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此处， <code>singleton</code>  最终是一个对象 <code>&#123;&#125;</code> （因为 = 直接函数），属性是公开方法和公开属性。</p>\n<p>通过模块模式，我们把<strong>私有变量</strong>和<strong>私有方法</strong>定义在直接函数体内，不会被外界访问到（临时变量和方法），对象实例以 <code>&#123;&#125;</code>  形式返回，赋值给 <code>singleton</code> 。</p>\n<h3 id=\"163-模块增强模式\"><a class=\"anchor\" href=\"#163-模块增强模式\">#</a> 16.3 模块增强模式</h3>\n<p>返回对象之前先对其进行增强。</p>\n<p>适用场景：当单例对象需要是某个<strong>特定的类型</strong>，但又必须添加额外的属性或方法时</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> singleton <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 定义私有变量和私有函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">let</span> privateA <span class=\"token operator\">=</span> <span class=\"token string\">\"privateA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">privateMethodA</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 函数内容</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token comment\">// 特定的类型 CustomType</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">var</span> object <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CustomType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 添加方法和属性</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    object<span class=\"token punctuation\">.</span>publicA <span class=\"token operator\">=</span> <span class=\"token string\">\"publicA\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    object<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">publicB</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token keyword\">return</span> privateA<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token comment\">// 返回该对象</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> object<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h1 id=\"十一-期约与异步函数promise\"><a class=\"anchor\" href=\"#十一-期约与异步函数promise\">#</a> 十一、 期约与异步函数（promise）</h1>\n<h2 id=\"1-异步编程settimeout\"><a class=\"anchor\" href=\"#1-异步编程settimeout\">#</a> 1. 异步编程（setTimeout）</h2>\n<h3 id=\"11-同步与异步\"><a class=\"anchor\" href=\"#11-同步与异步\">#</a> 1.1 同步与异步</h3>\n<ul>\n<li><strong>同步</strong>：顺序执行的处理器指令，一条条指令<strong>相继执行</strong></li>\n<li><strong>异步</strong>：多条指令同时进行，互不干扰。（记得计组中是这样实现异步的：把时间分成一块块时间片，每条指令执行一个时间片，轮换执行，如 ABCDABCDABCD...）</li>\n</ul>\n<h3 id=\"12-settimeout-异步\"><a class=\"anchor\" href=\"#12-settimeout异步\">#</a> 1.2 setTimeout 异步</h3>\n<p>如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1000 毫秒后执行函数</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220321212349317.png\" alt=\"image-20220321212349317\"></p>\n<p>此处， <code>console.log(1)</code>  和 <code>console.log(3)</code>  是顺序（同步）执行， <code>setTimeout</code>  是异步执行</p>\n<hr>\n<blockquote>\n<p>下面的我感觉没什么好看的，P324 吧，主要是以往的异步编程及缺点</p>\n<p>如：嵌套异步回调很复杂</p>\n</blockquote>\n<h3 id=\"13-settimeout-语法\"><a class=\"anchor\" href=\"#13-settimeout语法\">#</a> 1.3 setTimeout 语法</h3>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">,</span> milliseconds<span class=\"token punctuation\">,</span> param1<span class=\"token punctuation\">,</span> param2<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><table>\n<thead>\n<tr>\n<th style=\"text-align:left\">参数</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">code/function</td>\n<td style=\"text-align:left\">必需。要调用一个代码串，也可以是一个函数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">milliseconds</td>\n<td style=\"text-align:left\">可选。执行或调用 code/function 需要等待的时间，以毫秒计。默认为 0。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">param1, param2, ...</td>\n<td style=\"text-align:left\">可选。 传给执行函数的参数</td>\n</tr>\n</tbody>\n</table>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1s 后控制台打印 hello</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h2 id=\"2-期约promisees6-新增\"><a class=\"anchor\" href=\"#2-期约promisees6新增\">#</a> 2. 期约（promise）（ES6 新增）</h2>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY25ibG9ncy5jb20vbHZkYWJhby9wL2VzNi1wcm9taXNlLTEuaHRtbA==\">https://www.cnblogs.com/lvdabao/p/es6-promise-1.html</span> 这个比较通俗易懂</p>\n<h3 id=\"21-期约基础\"><a class=\"anchor\" href=\"#21-期约基础\">#</a> 2.1 期约基础</h3>\n<p>期约 <code>promise</code>  是一个引用类型，以及有一些封装好的方法</p>\n<ul>\n<li>构造函数内： <code>resolve</code> 、 <code>reject</code> 、 <code>all</code></li>\n<li>原型内： <code>then</code> 、 <code>catch</code> ...</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &lt;pending></span></pre></td></tr></table></figure><h4 id=\"211-期约的三种状态\"><a class=\"anchor\" href=\"#211-期约的三种状态\">#</a> 2.1.1 期约的三种状态</h4>\n<ul>\n<li>待定（pending）： <code>promise</code>  初始态，等待接受任务</li>\n<li>兑现（fulfilled，或者 resolve）：调用 <code>resolve()</code>  方法进入</li>\n<li>拒绝（reject）：调用 <code>reject()</code>  进入，一般是当拒绝时（比如出错了）调用</li>\n</ul>\n<p>期约的状态改变<strong>不可逆</strong>，并且其状态是<strong>私有</strong>的，不能被外界读取（为了不被同步方式处理）。</p>\n<blockquote>\n<p>期约故意将异步行为封装起来，从而隔离外部的同步代码</p>\n</blockquote>\n<h4 id=\"212-promiseresolve\"><a class=\"anchor\" href=\"#212-promiseresolve\">#</a> 2.1.2  <code>Promise.resolve()</code></h4>\n<p>上面提过， <code>resolve</code>  用来转换 <code>promise</code>  的状态，并且做一个回调函数，在别的地方定义函数内容，一般是成功时执行。</p>\n<p>而<strong>静态</strong>的 <code>resolve()</code>  方法则可用来<strong>实例化</strong>期约对象，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 以上 2 种等价</span></pre></td></tr></table></figure><p>此外， <code>p</code>  的值对应<strong>第一个</strong>传给 <code>resolve()</code>  的参数，形如 <code>Promise &#123;参数&#125;</code> ，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; undefined &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 3 &#125;</span></pre></td></tr></table></figure><p>如果参数是个<strong>期约</strong>，那么 <code>p=Promise.resolve(p)</code> ，相当于没变，这个称作<strong>幂等性</strong></p>\n<h4 id=\"213-promisereject\"><a class=\"anchor\" href=\"#213-promisereject\">#</a> 2.1.3   <code>Promise.reject()</code></h4>\n<p>和 <code>resolve</code>  类似。但是 <code>reject</code>  没有<strong>幂等性</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//Promise &#123;rejected&#125;: Promise &#123;resolve&#125;</span></pre></td></tr></table></figure><p>也就是说，p 会成为新的期约的<strong>拒绝理由</strong></p>\n<h4 id=\"214-new-promise-详解\"><a class=\"anchor\" href=\"#214-new-promise详解\">#</a> 2.1.4  <code>new Promise()</code>  详解</h4>\n<p>通过 <code>new Promise()</code>  创建期约一般如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token comment\">// 代码块 </span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><ul>\n<li>\n<p>代码块中的代码会被立即执行，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello promise'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 控制台打印 hello promise</span></pre></td></tr></table></figure><p>应该是在构造函数中调用了 <code>apply</code>  函数，向下面这样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">func</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">func</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> d<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Demo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">123</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 控制台打印 123</span></pre></td></tr></table></figure><p><strong>此时 p 的状态为 pending</strong></p>\n</li>\n<li>\n<p>通过 <code>resolve()</code>  和 <code>reject()</code>  函数<strong>设置状态</strong>，同时两者都写只有前面的有效（状态不可逆）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;undefined&#125;：就是 resolve 状态，resolve 的参数为 undefined</span></pre></td></tr></table></figure><p><strong>此时 p 的状态为 resolve</strong></p>\n<p>或者如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr></table></figure><p><strong>此时 p 的状态为 reject</strong></p>\n</li>\n<li>\n<p>不过因为 <code>resolve</code>  和 <code>reject</code>  是异步代码，且是类似回调函数的待重写函数，因此其只会在 <code>then</code>  或 <code>catch</code>  调用并重写 <code>resolve</code>  和 <code>reject</code>  时才会在同步代码执行完后执行。</p>\n</li>\n</ul>\n<h4 id=\"215-异步的错误处理\"><a class=\"anchor\" href=\"#215-异步的错误处理\">#</a> 2.1.5 异步的错误处理</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Error: foo</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>这里，第 2 个错误<strong>没有被捕获</strong>，而是中断了进程，控制台报错。</p>\n<p>因为：同步代码只能通过<strong>异步模式</strong>捕获期约抛出的错误，<strong>异步模式一旦开始执行，则唯一与之交互的方式就是使用异步结构 ---- 也就是期约的方法</strong></p>\n<h3 id=\"22-期约的实例方法\"><a class=\"anchor\" href=\"#22-期约的实例方法\">#</a> 2.2 期约的实例方法</h3>\n<blockquote>\n<p>期约的实例方法是连接外部同步代码与内部异步代码之间的桥梁。</p>\n<p>这些代码可以：</p>\n<ul>\n<li>访问异步操作返回的数据</li>\n<li>处理期约成功和失败的输出</li>\n<li>连续对期约求值</li>\n<li>添加只有期约进入终止状态时才会执行的代码</li>\n</ul>\n</blockquote>\n<h4 id=\"221-promiseprototypethen\"><a class=\"anchor\" href=\"#221-promiseprototypethen\">#</a> 2.2.1  <code>Promise.prototype.then()</code></h4>\n<blockquote>\n<p><code>then()</code>  函数是为期约实例<strong>添加处理程序</strong>的主要方法</p>\n</blockquote>\n<p><code>then</code>  会在 <code>promise</code> <strong> 转变状态</strong>后执行，但<strong>不会阻断</strong>执行函数内接下来的代码。其接收 2 个参数：<strong>响应解决</strong>状态的执行函数和<strong>响应拒绝</strong>状态的执行函数</p>\n<ul>\n<li><code>Promise.prototype.then((res) =&gt; &#123;&#125;, (rej) =&gt; &#123;&#125;)</code> ：\n<ul>\n<li><code>(res) =&gt; &#123;&#125;</code> ：（必写）<strong>响应解决</strong>状态的执行函数。在 <code>promise</code>  实例状态转为<strong>解决</strong>时调用。 <code>res</code>  为解决值</li>\n<li><code>(rej) =&gt; &#123;&#125;</code> ：（可写）<strong>拒绝解决</strong>状态的执行函数。在 <code>promise</code>  实例状态转为<strong>拒绝</strong>时调用。 <code>rej</code>  为拒绝理由</li>\n<li><code>return</code> ：一个新的 <code>promise</code>  实例。下面细说</li>\n</ul>\n</li>\n</ul>\n<p>例 1：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'reject'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 到这一步 p2 已经是 rejected 了</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 因为 promise 状态只能改变一次，所以还是 rejected</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">// reject</span></pre></td></tr></table></figure><p>例 2： <code>then</code>  会在 <code>promise</code> <strong> 转变状态</strong>后执行，但<strong>不会阻断</strong>执行函数内接下来的代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'before resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'after resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 输出：</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token comment\">// before resolve</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// after resolve</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token comment\">// （3 秒后）resolved</span></pre></td></tr></table></figure><hr>\n<p><strong>返回 <code>promise</code>  实例</strong></p>\n<p>下面主要讲一下 <code>then</code>  返回的 <code>promise</code>  的情况：默认以<strong>返回值</strong>作为<strong>解决值</strong>创建<strong>解决状态</strong>的 <code>promise</code>  实例返回</p>\n<p>调用 <code>then</code>  的实例 <code>p1</code>  是 <code>resolve</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>默认 <code>resolve</code>  状态，并根据 <code>then</code>  的<strong>返回值</strong>确定状态</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; undefined &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; undefined &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'resolve' &#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 上面几种新实例都是 resolve 状态，根据返回值赋予 resolve 参数</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果返回 <code>promise</code>  实例，按返回的实例算</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p5<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'bar' &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p6<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p7<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>抛出<strong>异常</strong>，按 <code>reject</code>  状态</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p8<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> 'baz' &#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>返回<strong>错误</strong>，也按 <code>resolve</code> 。（其实就是第一条）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p9<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Promise &#123;</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  Error: err</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>      at F:\\JavaProject\\jsdemo\\practice\\ 期约.js:32:20</pre></td></tr><tr><td data-num=\"6\"></td><td><pre>      at processTicksAndRejections (internal/process/task_queues.js:93:5)</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>*/</pre></td></tr></table></figure></li>\n<li>\n<p>只有 <code>then()</code> ，和调用 <code>then</code>  的实例一致</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">////Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 但是 p2!==p1</span></pre></td></tr></table></figure></li>\n</ul>\n<p>实例 <code>p1</code>  为 <code>reject</code>  或 <code>pending</code> ：和调用 <code>then</code>  的实例一致，<strong>也是创建解决状态的 <code>promise</code>  实例返回</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// Promise &#123;undefined&#125; 以 undefined 为解决值</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h4 id=\"222-promiseprototypecatch\"><a class=\"anchor\" href=\"#222-promiseprototypecatch\">#</a> 2.2.2  <code>Promise.prototype.catch()</code></h4>\n<blockquote>\n<p>用于给期约添加<strong>拒绝处理程序</strong>。调用他就相当于调用 <code>Promise.prototype.then(null,代码块)</code></p>\n</blockquote>\n<p><code>then</code>  和 <code>catch</code>  实际上是<strong>根据期约的状态来调用函数</strong>，类似同步代码 <code>try-catch</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onRejected</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//rejected</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//rejected</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 以上 2 者等价</span></pre></td></tr></table></figure><p>另外，再举个例子来说明 <code>then</code>  和 <code>catch</code> <strong> 根据实例状态调用</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onResolved</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onRejected</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//resolved</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//rejected</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 因为 p1 的状态是 resolve, 而 p2 的状态是 reject</span></pre></td></tr></table></figure><p>此外， <code>catch</code>  返回的期约实例状态规则和 <code>then</code>  差不多（&lt;font color=red&gt; 也是默认 <code>resolve</code> &lt;/font&gt;）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;undefined&#125;, 包括一些 void 类型的函数调用，如 console.log</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'resolve' &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> p5<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'bar' &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> p6<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> p7<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> p8<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> 'baz' &#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> p9<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">/*</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>Promise &#123;</pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  Error: err</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      at F:\\JavaProject\\jsdemo\\demo\\ 期约 \\catch.js:23:21</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>&#125;</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>*/</pre></td></tr></table></figure><h4 id=\"223-promiseprototypefinally\"><a class=\"anchor\" href=\"#223-promiseprototypefinally\">#</a> 2.2.3  <code>Promise.prototype.finally()</code></h4>\n<blockquote>\n<p>为期约添加一个 <code>onFinally</code>  处理程序，即在转换为 resolve 或 reject 状态时都会执行</p>\n</blockquote>\n<p><strong>用处</strong>：和 <code>try-catch</code>  中的 <code>finally</code>  类似，用来避免 <code>then</code>  和 <code>catch</code>  的代码冗余</p>\n<p><strong>返回实例</strong>：原样往后传，即新实例和调用实例<strong>保持一致</strong>，除了 3 种情况</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 对于 Promise.reject 也是一样的情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token string\">'resolve'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">let</span> p5<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> p9<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'err'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'foo' &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">let</span> p6<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> undefined &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> p7<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> p8<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token string\">'baz'</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;rejected> 'baz' &#125;</span></pre></td></tr></table></figure><ul>\n<li>当返回的是拒绝 <code>reject</code>  或待定 <code>pending</code> ，则新实例按照返回的算</li>\n<li>当抛出异常时，新实例为 <code>reject</code></li>\n</ul>\n<p><strong>使用场景</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onResolved</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'resolve'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onRejected</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'rejected'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'reject'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onFinally</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token string\">'finally'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">'finally'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>onFinally<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>onRejected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">finally</span><span class=\"token punctuation\">(</span>onFinally<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>最后输出是这样的<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220330212934061.png\" alt=\"image-20220330212934061\">，原因很简单，因为 <code>finally</code>  也是异步，并不会像同步那样按顺序来。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 'resolve' &#125; Promise &#123; 'reject' &#125;</span></pre></td></tr></table></figure><h4 id=\"224-非重入期约方法执行顺序\"><a class=\"anchor\" href=\"#224-非重入期约方法执行顺序\">#</a> 2.2.4 非重入期约方法（执行顺序）</h4>\n<ul>\n<li>\n<p>期约的处理程序一定在<strong>同步代码</strong>执行之后才执行</p>\n</li>\n<li>\n<p><s> <code>then</code> 、 <code>catch</code>  函数会定义对应的 <code>resolve</code> 、 <code>reject</code>  执行方法，且将其推进<strong>消息队列</strong></s></p>\n</li>\n<li>\n<p><s>在 <code>resolve</code> 、 <code>reject</code>  执行<strong>且</strong> <code>then</code> 、 <code>catch</code>  将其推进后，执行异步函数</s></p>\n</li>\n<li>\n<p>上面 2 点总结一下，就是 <code>resolve</code>  异步函数执行需要满足 2 个条件</p>\n<ol>\n<li><code>then</code>  对其定义，并推入消息队列</li>\n<li>期约转为 <code>resolve</code>  状态\n<ol>\n<li>如期约以 <code>Promies.resolve()</code>  创建</li>\n<li>在  <code>new Promise()</code>  中调用 <code>resolve()</code></li>\n</ol>\n</li>\n</ol>\n</li>\n</ul>\n<p>看下面例子：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> syn<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function-variable function\">syn</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 同步</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 异步</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 同步</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//then 添加处理程序（resolve 的实现），把处理程序推进消息队列（在 p 的状态变为 resolve 后异步执行）</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token function\">syn</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 执行同步代码，并且改变期约状态</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 同步</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220331150158027.png\" alt=\"image-20220331150158027\"></p>\n<p>解析：</p>\n<ol>\n<li><code>syn</code>  是同步代码，且内部的 <code>console.log</code>  也是，因此和 <code>console.log(3)</code>  相继先行输出</li>\n<li><code>p</code>  在 <code>syn</code>  调用后转为 <code>resolve</code>  状态，准备执行 <code>console.log(4)</code> （在所有同步代码执行完后）</li>\n</ol>\n<h4 id=\"225-邻近处理程序的执行顺序执行顺序-2\"><a class=\"anchor\" href=\"#225-邻近处理程序的执行顺序执行顺序2\">#</a> 2.2.5 邻近处理程序的执行顺序（执行顺序 2）</h4>\n<ul>\n<li>\n<p>对应同一个期约，按照<strong>添加顺序</strong>执行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> method1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">method1</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220331153554905.png\" alt=\"image-20220331153554905\"></p>\n</li>\n<li>\n<p>对于不同期约，按照<strong>状态更新顺序</strong>执行</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> method1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> method2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function-variable function\">method1</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">method2</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token function\">method2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 先执行 p2</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre><span class=\"token function\">method1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220331153703014.png\" alt=\"image-20220331153703014\"></p>\n</li>\n</ul>\n<h4 id=\"226-传递解决值和拒绝理由\"><a class=\"anchor\" href=\"#226-传递解决值和拒绝理由\">#</a> 2.2.6 传递解决值和拒绝理由</h4>\n<p>如，第一次网络请求返回的 JSON 是发送第二次请求必须的数据，那么第一次请求返回的值就应该传给 <code>onResolved</code>  处理程序；失败的网络请求也应该把 HTTP 状态码传给 <code>onRejected</code>  处理程序</p>\n<ul>\n<li>\n<p>解决值： <code>resolve()</code>  的第一个参数，可以传给 <code>then</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//foo</span></pre></td></tr></table></figure></li>\n<li>\n<p>拒绝理由： <code>reject()</code>  的第一个参数，可以传给 <code>catch</code>  或 <code>then</code>  的第二个参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p2<span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//bar</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"227-拒绝期约与拒绝错误处理\"><a class=\"anchor\" href=\"#227-拒绝期约与拒绝错误处理\">#</a> 2.2.7 拒绝期约与拒绝错误处理</h4>\n<ul>\n<li>\n<p>在期约的执行函数中<strong>抛出错误</strong>会被拒绝</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//  &lt;rejected> Error: foo</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//  &lt;rejected> Error: foo</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//  &lt;rejected> Error: foo</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//  &lt;rejected> Error: foo</span></pre></td></tr></table></figure><p>&lt;font color =red&gt; 此外，程序还会抛出 4 个错误。但是因为是异步错误，因此不会中断同步进程。&lt;/font&gt;</p>\n</li>\n<li>\n<p>异步错误无法通过同步代码内的 <code>try-catch</code>  捕获，但可以在同个异步下的 <code>try-catch</code>  捕获</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 抛出错误，无法捕获，此时 p2 为 & lt;rejected> Error: foo</span></pre></td></tr></table></figure><p>可以在同个异步下的 <code>try-catch</code>  捕获</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 可以捕获，此时 p2 为 pending 状态</span></pre></td></tr></table></figure><p>或者</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onResolved</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 无法捕获</span></pre></td></tr></table></figure><p>但这样可以</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">onResolved</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token keyword\">throw</span> <span class=\"token function\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>onResolved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>catch</code>  捕获异步错误并隔离。</p>\n<blockquote>\n<p>then/catch 和 try-catch 在语义上一致，出发点都是捕获错误之后将其隔离，同时不影响正常逻辑执行</p>\n</blockquote>\n<p>可以在创建期约时，同时通过 <code>catch</code>  定义如果遇见错误请求被拒绝后的处理</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p5<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决或拒绝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝函数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决函数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 这里 catch 后会生成新实例（Promise &#123;undefined&#125;），然后 then 继续按照 resolve 执行</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220331163831765.png\" alt=\"image-20220331163831765\"></p>\n</li>\n<li>\n<p>也可以通过 <code>then</code>  捕获</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p6<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决或拒绝'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决函数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝函数'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 这种就是每次 `then` 调用，择其一执行（根据 resolve 或 reject 状态）</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220331164020571.png\" alt=\"image-20220331164020571\"></p>\n</li>\n</ul>\n<h3 id=\"23-期约连锁与期约合成\"><a class=\"anchor\" href=\"#23-期约连锁与期约合成\">#</a> 2.3 期约连锁与期约合成</h3>\n<h4 id=\"231-期约连锁\"><a class=\"anchor\" href=\"#231-期约连锁\">#</a> 2.3.1 期约连锁</h4>\n<p>因为每个期约实例方法（then、catch、finally）都会返回一个新实例，然后新实例又可以调用实例方法，实现串联，如下</p>\n<p><code>p.then().then()....</code></p>\n<p><strong>使用场景</strong>：主要用来串行化异步任务，让一串异步任务有序进行，看下面例子</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>p1<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4 executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印：</p>\n<pre><code>p1 executor\t （立即）\np2 executor  （1秒后）\np3 executor\t （2秒后）\np4 executor\t （3秒后）\n</code></pre>\n<p><strong>每个后续的期约都会等待前一个期约解决，然后实例化一个新期约并返回</strong>。也就是说，这是严格按顺序执行的异步任务</p>\n<p>用个工厂函数简化一下以上代码</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token string\">' executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><hr>\n<p>再看如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">str</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>str<span class=\"token operator\">+</span><span class=\"token string\">'executor'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印</p>\n<pre><code>p1 executor\t \t\t （立即）\np1 another executor\t （立即）\np2 executor  \t\t （1秒后）\np2 another executor  （1秒后）\np3 executor  \t\t （2秒后）\np3 another executor  （2秒后）\np4 executor \t\t （3秒后）\np4 another executor  （3秒后）\n</code></pre>\n<p>可以看出，多个串行期约之间是<strong>并行</strong>的。</p>\n<h4 id=\"232-期约图\"><a class=\"anchor\" href=\"#232-期约图\">#</a> 2.3.2 期约图</h4>\n<p>其实就是 <code>then</code>  的消息队列的执行顺序，书上用了树的层次遍历来举例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//      A</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">//     / \\</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">//    B   C</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">//   / \\ / \\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//  D  E F  G</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token constant\">A</span><span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'A'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token constant\">B</span><span class=\"token operator\">=</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'B'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token constant\">C</span><span class=\"token operator\">=</span><span class=\"token constant\">A</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'C'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token constant\">B</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'D'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token constant\">B</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'E'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'F'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre><span class=\"token constant\">C</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'G'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220331200539976.png\" alt=\"image-20220331200539976\"></p>\n<p><strong>解释一下</strong>：</p>\n<ol>\n<li>B、C 同属于 A 的消息队列，因此先 B 执行完再执行 C</li>\n<li>而 B、C 又属于并行队列，因为同属于 A 的下级，因此 B 和 C 的执行是前后关系（C 一定执行在 B 的下级 D、E 前）</li>\n</ol>\n<p>其实这个和上面我举例的差不多，即</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p1 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p2 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p3 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">method</span><span class=\"token punctuation\">(</span><span class=\"token string\">'p4 another'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 这里用树表示就是</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// p1 \tp1 another</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// |       |</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// p2\t p2 another</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// |\t   |</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">//    ...</span></pre></td></tr></table></figure><h4 id=\"233-promiseall-和-promiserace\"><a class=\"anchor\" href=\"#233-promiseall和promiserace\">#</a> 2.3.3  <code>Promise.all()</code>  和 <code>Promise.race()</code></h4>\n<ul>\n<li>\n<p><strong> <code>Promise.all()</code> </strong>：创建的期约会在一组期约全部解决之后再解决。</p>\n<ul>\n<li>\n<p>解释下： <code>Promise.all</code>  创建一个期约 <code>p</code> ，参数是一组期约。并且这组期约相继执行，执行完毕后 <code>p</code>  状态改变（待定→解决 / 拒绝）</p>\n</li>\n<li>\n<p><code>p</code>  的状态：</p>\n<ul>\n<li>如果这组期约全部解决， 则为 <code>resolve</code> ，解决值是所有期约的解决值的<strong>数组</strong>；</li>\n<li>如果有一个是待定，则为 <code>pending</code> ；</li>\n<li>如果有一个拒绝的，则为 <code>reject</code> ，且拒绝原因和第一个拒绝期约一致。此外，只需要在 <code>p</code>  后面加 <code>catch</code> ，所有拒绝都会被处理</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p1<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 永远为待定</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> p2<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝理由'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;&lt;rejected> ' 拒绝理由 ' &#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token keyword\">let</span> p3<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; [ 1, undefined, 3, 5 ] &#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p><code>p</code>  只有<strong>第一个</strong>拒绝理由会进入 <code>catch</code> ，但所有拒绝都会别 <code>catch</code> <strong> 静默处理</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p4<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝5'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝6'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拒绝 5</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 虽然原因只有拒绝 5，但拒绝 6 也被捕获处理了，不会出现未处理的错误（不会有报错）</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><strong> <code>Promise.race()</code> </strong>：返回一组集合中<strong>最先解决或拒绝</strong>的期约的<strong>镜像</strong></p>\n<ul>\n<li>参数：可以是一组期约，也可以是一组数据（数据成为期约的解决值，通过 <code>Promise.resolve()</code>  转换）</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123;&lt;rejected> ' 拒绝 1' &#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 有红字警告</span></pre></td></tr></table></figure><p>组数据按照<strong>迭代顺序</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; 1 &#125;</span></pre></td></tr></table></figure><p><strong>空数组</strong>返回待定期约</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &#123; &lt;pending> &#125;</span></pre></td></tr></table></figure><ul>\n<li><strong>拒绝处理</strong>：和 <code>all</code>  一样，第一个拒绝理由成为 <code>all</code>  的拒绝理由，别的拒绝会被<strong>静默处理</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">race</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'拒绝1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">'解决1'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">reason</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 拒绝 1</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\">// 无红字警告，错误都已被处理</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"234-串行期约的合成\"><a class=\"anchor\" href=\"#234-串行期约的合成\">#</a> 2.3.4 串行期约的合成</h4>\n<p>串行期约可以连续传值，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addThree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addFive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addTen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">return</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token comment\">// 此时 x 是 8</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>addTwo<span class=\"token punctuation\">)</span><span class=\"token comment\">// 此时 (x)=>x+2,x 传入是 8，输出是 10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>addThree<span class=\"token punctuation\">)</span><span class=\"token comment\">// 此时 (x)=>x+3,x 传入是 10，输出是 13</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>        <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>addFive<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此时 (x)=>x+5,x 传入是 13，输出是 18</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">addTen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18</span></pre></td></tr></table></figure><h3 id=\"24-期约扩展\"><a class=\"anchor\" href=\"#24-期约扩展\">#</a> 2.4 期约扩展</h3>\n<h4 id=\"241-期约取消暂缓\"><a class=\"anchor\" href=\"#241-期约取消暂缓\">#</a> 2.4.1 期约取消（暂缓）</h4>\n<p>期约<strong>正在处理</strong>，但程序<strong>不再需要</strong>其结果时，其实可以取消这个期约了。</p>\n<p>一般用取消令牌（cancel token）</p>\n<h4 id=\"242-期约进度通知暂缓\"><a class=\"anchor\" href=\"#242-期约进度通知暂缓\">#</a> 2.4.2 期约进度通知（暂缓）</h4>\n<h4 id=\"es6-不支持取消期约和进度通知\"><a class=\"anchor\" href=\"#es6不支持取消期约和进度通知\">#</a> ES6 不支持取消期约和进度通知</h4>\n<h2 id=\"3-异步函数async\"><a class=\"anchor\" href=\"#3-异步函数async\">#</a> 3. 异步函数（async）</h2>\n<p>在期约中的解决值必须在同个异步队列中处理，这样很不方便，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span>reject</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 这里后续处理解决值 3 只能通过 then</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//3</span></pre></td></tr></table></figure><h3 id=\"31-异步函数\"><a class=\"anchor\" href=\"#31-异步函数\">#</a> 3.1 异步函数</h3>\n<h4 id=\"311-async\"><a class=\"anchor\" href=\"#311-async\">#</a> 3.1.1 async</h4>\n<p>async 关键字表示这是一个异步函数（类似 java 的 @注解）。其可以让函数具有异步特征，但总体上其代码仍是同步求值的。</p>\n<ul>\n<li>async 异步函数的代码仍是<strong>同步代码</strong></li>\n<li>如果有 <code>return</code>  返回值，则会包装成期约对象（ <code>Promise.resolve()</code> ）</li>\n<li>没有 <code>return</code>  其实相当于 <code>return undefined</code> ，也会包装成 <code>Promise&#123; undefined &#125;</code></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token comment\">// 等效于 return Promise.resolve (3);</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401173943661.png\" alt=\"image-20220401173943661\"></p>\n<ul>\n<li>&lt;font color=red&gt; 没有 <code>return</code>  其实相当于 <code>return undefined</code> &lt;/font&gt;</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401174228330.png\" alt=\"image-20220401174228330\"></p>\n<ul>\n<li>\n<p>抛出错误相当于 <code>return reject</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">throw</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401173943661.png\" alt=\"image-20220401173943661\"></p>\n</li>\n</ul>\n<h4 id=\"312-await等待\"><a class=\"anchor\" href=\"#312-await等待\">#</a> 3.1.2 await（等待）</h4>\n<ul>\n<li>\n<p>await 关键字<strong>只能用在 async 函数内</strong>。可以暂停异步代码的执行，等待期约解决。</p>\n</li>\n<li>\n<p>也就是卡住进程，等 <code>await</code>  后的代码执行完毕（其实是期约解决完毕），再继续执行。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 等待 p.then 执行完，才会执行下面的 console.log (2)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401193023929.png\" alt=\"image-20220401193023929\"></p>\n<p>或者</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve<span class=\"token punctuation\">,</span> reject</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><strong>1 秒后</strong>，控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401193742334.png\" alt=\"image-20220401193742334\"></p>\n<p><strong>但， <code>await</code>  后一定得是期约解决 / 拒绝，否则不会等待</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> p<span class=\"token operator\">=</span>Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 此处就不会等待，因为这里仅是输出一个 P 的状态，p 已经是 resolve 了，不需要等待 P 解决或拒绝</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401193917826.png\" alt=\"image-20220401193917826\"></p>\n</li>\n<li>\n<p>如果 <code>await</code>  后面的是 <code>reject</code> ，则后面的都不会执行了。</p>\n<p>即被 <code>reject</code>  卡住</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401200619638.png\" alt=\"image-20220401200619638\">，2 没有被打印</p>\n<p>但如果像这样</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 在这里处理错误</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401200742161.png\" alt=\"image-20220401200742161\"></p>\n<p>因为这里， <code>Promise.reject(1)</code>  经过 <code>catch</code>  处理后新实例变成了 <code>resolve</code> ，因此 <code>await</code>  等待的是 <code>resolve</code>  的期约解决</p>\n</li>\n<li>\n<p><code>await</code>  仅在作用域内有效，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 仍是最优先输出</span></pre></td></tr></table></figure><p>控制台打印<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220401201033691.png\" alt=\"image-20220401201033691\"></p>\n</li>\n</ul>\n<h3 id=\"32-停止和恢复执行\"><a class=\"anchor\" href=\"#32-停止和恢复执行\">#</a> 3.2 停止和恢复执行</h3>\n<p>利用 <code>await</code>  阻塞作用域，看下面的执行顺序</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 其实相当于在这里阻塞，同步代码 3 执行，这里继续后 log4 执行</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220402144644261.png\" alt=\"image-20220402144644261\"></p>\n<p>官方解释： <code>await</code>  暂停执行，为<strong>立即可用</strong>的 <code>null</code>  向消息队列添加<strong>一个</strong>任务；打印完 3，从消息队列取出任务，恢复异步函数执行</p>\n<hr>\n<p>（下面可以不看）</p>\n<p>而如果是<strong>期约</strong>，需要向消息队列添加<strong> 2 个</strong>任务。（新版浏览器只需一个，两种执行顺序会有些不同）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> Promise<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">await</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre><span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>旧版执行顺序是：123456789。因为 <code>Promise.resolve</code>  需要向消息队列添加 2 个任务</li>\n<li>新版执行顺序是：123458967。（node.js 和 Chrome 是这种）</li>\n</ul>\n<h3 id=\"33-异步函数策略\"><a class=\"anchor\" href=\"#33-异步函数策略\">#</a> 3.3 异步函数策略</h3>\n<h4 id=\"331-sleep\"><a class=\"anchor\" href=\"#331-sleep\">#</a> 3.3.1  <code>sleep()</code></h4>\n<p>用 <code>setTimeout</code>  实现 <code>sleep</code>  函数。再 <code>await</code>  搭配 <code>sleep</code>  实现非阻塞暂停（仅在域内阻塞）。</p>\n<ul>\n<li>\n<p><code>sleep()</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>resolve<span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> t0<span class=\"token operator\">=</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>t0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token comment\">//1502 左右，因为运行时间也需要几毫秒</span></pre></td></tr></table></figure><p>为什么一定要异步函数搭配 <code>await</code> ？</p>\n<ol>\n<li>因为只有 <code>await</code>  才能等待暂停</li>\n<li><code>await</code>  只能在异步函数内</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">delay</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">,</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 这样就不行，同步函数会直接输出</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"332-利用平行执行\"><a class=\"anchor\" href=\"#332-利用平行执行\">#</a> 3.3.2 利用平行执行</h4>\n<p>先初始化再 <code>awiat</code>  等待解决，加速执行时间。具体看 P356-359</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">id</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> delay<span class=\"token operator\">=</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">10000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Promise</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">resolve</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>id<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\"> finished,delay=</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>delay<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span>delay<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>有如下 2 种方案</p>\n<ul>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> t0<span class=\"token operator\">=</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">await</span> <span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>t0<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">ms elapsed</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种是依次等待，依次执行，总时间是所有加起来</p>\n<p>控制台输出<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220402154708767.png\" alt=\"image-20220402154708767\"></p>\n</li>\n<li>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">const</span> t0<span class=\"token operator\">=</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span> p0<span class=\"token operator\">=</span><span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">const</span> p1<span class=\"token operator\">=</span><span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">const</span> p2<span class=\"token operator\">=</span><span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">const</span> p3<span class=\"token operator\">=</span><span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">const</span> p4<span class=\"token operator\">=</span><span class=\"token function\">randomDelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">await</span> p0<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">await</span> p1<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">await</span> p2<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">await</span> p3<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token keyword\">await</span> p4<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">$&#123;</span>Date<span class=\"token punctuation\">.</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>t0<span class=\"token interpolation-punctuation punctuation\">&#125;</span></span><span class=\"token string\">ms elapsed</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种是全部初始化完后，按时间等待执行，总时间是其中最长的那个</p>\n<p>控制台输出<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220402154527035.png\" alt=\"image-20220402154527035\"></p>\n</li>\n<li>\n<p>&lt;font color=red&gt;<strong> 解释一下：</strong>&lt;/font&gt;</p>\n<ul>\n<li>\n<p>1 中：因为有 <code>await</code> ，因此只有在前一个期约<strong>计时进入解决状态后，下一个期约才进入计时</strong></p>\n</li>\n<li>\n<p>2 中：在 <code>const p0=randomDelay(0);</code>  处<strong>就开始计时，各自的时间一到就为解决状态，并不会像 1 那样被 <code>await</code>  阻塞</strong>，一解决 <code>await</code>  就马上可以执行。实际上到 <code>await</code>  的不用 <code>await</code>  等待结果也是一样的， <code>await</code>  不过是为了等最后的 <code>    setTimeout</code>  函数，下面是不用 <code>await</code>  的输出结果</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220402155539617.png\" alt=\"image-20220402155539617\"></p>\n<p>这里 <code>await</code>  最大的用处是阻塞 <code>setTimeout</code>  函数</p>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"333-串行执行期约\"><a class=\"anchor\" href=\"#333-串行执行期约\">#</a> 3.3.3 串行执行期约</h4>\n<p>之前我们使用 <code>then</code>  串行执行期约，但这仍有些复杂（需要手动写很多 <code>then</code> ）。只用 <code>async/await</code>  可以直接通过循环搞定</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addTwo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addThree</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">addFive</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addTen</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> fn <span class=\"token keyword\">of</span> <span class=\"token punctuation\">[</span>addTwo<span class=\"token punctuation\">,</span>addThree<span class=\"token punctuation\">,</span>addFive<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        x<span class=\"token operator\">=</span><span class=\"token keyword\">await</span> <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token function\">addTen</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//18</span></pre></td></tr></table></figure><h4 id=\"334-栈追踪与内存管理\"><a class=\"anchor\" href=\"#334-栈追踪与内存管理\">#</a> 3.3.4 栈追踪与内存管理</h4>\n<p>期约与异步函数在功能上有相当大的重叠，但在内存中的表示则差别很大。</p>\n<p>详细看 P359</p>\n<p>大概就是性能方面异步稍好点</p>\n<h1 id=\"十二-bom\"><a class=\"anchor\" href=\"#十二-bom\">#</a> 十二、 BOM</h1>\n<h2 id=\"1-window-对象\"><a class=\"anchor\" href=\"#1-window对象\">#</a> 1. window 对象</h2>\n<p>本章概要：</p>\n<ul>\n<li>\n<p><a href=\"#%E7%AA%97%E5%8F%A3%E5%85%B3%E7%B3%BB\">窗口关系</a></p>\n<ul>\n<li>\n<p><code>window.parent</code> ：返回父窗口（当前窗口的上一层窗口）</p>\n</li>\n<li>\n<p><code>window.top</code> ：返回最顶层（最外层）的父窗口。</p>\n</li>\n<li>\n<p><code>window.self</code> ：指向自身窗口，即 <code>window</code></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AA%97%E5%8F%A3%E4%BD%8D%E7%BD%AE%E4%B8%8E%E5%83%8F%E7%B4%A0%E6%AF%94\">窗口位置</a></p>\n<ul>\n<li>\n<p><code>window.screenLeft</code> ：窗口距<strong>屏幕左侧</strong>的位置，返回值是 CSS 的像素</p>\n</li>\n<li>\n<p><code>window.screenTop</code> ：窗口距<strong>屏幕顶部</strong>的位置</p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AA%97%E5%8F%A3%E4%BD%8D%E7%BD%AE%E4%B8%8E%E5%83%8F%E7%B4%A0%E6%AF%94\">移动窗口</a></p>\n<ul>\n<li>\n<p><code>window.moveTo()</code> ：把窗口的左上角移动到一个指定的坐标。</p>\n</li>\n<li>\n<p><code>window.moveBy()</code> ：把窗口挪动指定<strong>像素单位</strong></p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F\">窗口尺寸</a></p>\n<ul>\n<li>\n<p><code>window.devicePixelRatio</code> ：物理像素（屏幕分辨率）与逻辑像素（CSS 像素 px）之间的<strong>缩放比</strong></p>\n</li>\n<li>\n<p><code>window.outerWidth</code> ：浏览器窗口宽度（包括...）</p>\n</li>\n<li>\n<p><code>window.outerHeight</code> ：高度</p>\n</li>\n<li>\n<p><code>window.innerWidth</code> ：窗口内<strong>可视</strong>页面宽度（不包括浏览器边框和工具栏）</p>\n</li>\n<li>\n<p><code>window.innerHeight</code> ：高度</p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%AA%97%E5%8F%A3%E5%A4%A7%E5%B0%8F\">调整窗口大小</a></p>\n<ul>\n<li>\n<p><code>window.resizeTo()</code> ：调整到指定宽高</p>\n</li>\n<li>\n<p><code>window.resizeBy()</code> ：增加的宽度和高度</p>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E8%A7%86%E5%8F%A3%E4%BD%8D%E7%BD%AE\">滚动页面</a></p>\n<ul>\n<li><code>scrollTo()</code> ：滚动到指定坐标</li>\n<li><code>scrollBy()</code> ：向指定方向滚动指定像素</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AF%BC%E8%88%AA%E4%B8%8E%E6%89%93%E5%BC%80%E6%96%B0%E7%AA%97%E5%8F%A3\">弹窗</a></p>\n<ul>\n<li><code>window.open()</code> ：弹窗函数</li>\n<li><code>window.opener</code> ：打开弹窗的窗口</li>\n<li><code>window.close()</code> ：关闭窗口</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E5%AE%9A%E6%97%B6%E5%99%A8\">定时器</a></p>\n<ul>\n<li><code>setTimeout()</code> ：指定一定时间后执行某段代码</li>\n<li><code>clearTimeout()</code> ：取消 <code>setTimeout</code>  排期</li>\n<li><code>setInterval()</code> ：<strong>每隔</strong>一段时间执行某段代码</li>\n<li><code>clearInterval()</code> ：取消 <code>setInterval</code>  任务</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#%E7%B3%BB%E7%BB%9F%E5%AF%B9%E8%AF%9D%E6%A1%86\">弹框</a></p>\n<ul>\n<li><code>alert()</code> ：警告框</li>\n<li><code>confirm()</code> ：确认框</li>\n<li><code>prompt()</code> ：提示框（输入框）</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>BOM 的核心就是 window 对象，即浏览器的实例。</p>\n</blockquote>\n<p>window 有 2 重身份：</p>\n<ol>\n<li>ECMAScript 中的 <code>Global</code>  对象</li>\n<li>浏览器窗口的 JavaScript 接口</li>\n</ol>\n<hr>\n<p>下面是一些本章没有讲到的属性。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1jbG9zZWQuaHRtbA==\">closed</span></td>\n<td style=\"text-align:left\">返回窗口是否已被关闭。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1uYW1lLmh0bWw=\">name</span></td>\n<td style=\"text-align:left\">设置或返回窗口的名称。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1pbm5lcmhlaWdodC5odG1s\">innerHeight</span></td>\n<td style=\"text-align:left\">返回窗口的文档显示区的高度。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1pbm5lcmhlaWdodC5odG1s\">innerWidth</span></td>\n<td style=\"text-align:left\">返回窗口的文档显示区的宽度。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1vdXRlcmhlaWdodC5odG1s\">outerHeight</span></td>\n<td style=\"text-align:left\">返回窗口的外部高度，包含工具条与滚动条。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1vdXRlcmhlaWdodC5odG1s\">outerWidth</span></td>\n<td style=\"text-align:left\">返回窗口的外部宽度，包含工具条与滚动条。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1sb2NhbHN0b3JhZ2UuaHRtbA==\">localStorage</span></td>\n<td style=\"text-align:left\">在浏览器中存储 key/value 对。没有过期时间。<strong>本地存储</strong></td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXdpbi1zZXNzaW9uc3RvcmFnZS5odG1s\">sessionStorage</span></td>\n<td style=\"text-align:left\">在浏览器中存储 key/value 对。 在关闭窗口或标签页之后将会删除这些数据。<strong>会话存储</strong></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"11-global-作用域\"><a class=\"anchor\" href=\"#11-global作用域\">#</a> 1.1 Global 作用域</h3>\n<p>即全局作用域，</p>\n<ul>\n<li>\n<p><strong>通过 <code>var</code>  声明的全局变量和函数都会变为 <code>window</code>  对象的属性和方法</strong>。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> age<span class=\"token operator\">=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> <span class=\"token function-variable function\">sayAge</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//29</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//29</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    window<span class=\"token punctuation\">.</span><span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//29</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>但 <code>let</code>  和 <code>const</code>  不行。</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> age<span class=\"token operator\">=</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">sayAge</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>age<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\twindow<span class=\"token punctuation\">.</span><span class=\"token function\">sayAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined\t</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>访问未定义的变量会抛出错误，但查询 <code>window</code>  是否存在变量不会</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> newValue<span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">var</span> newValue<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">;</span><span class=\"token comment\">//undefined</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"12-ltspan-id-quot窗口关系quotgt-窗口关系-ltspangt\"><a class=\"anchor\" href=\"#12-span-id-窗口关系窗口关系span\">#</a> 1.2 &lt;span id = &quot;窗口关系&quot;&gt; 窗口关系 &lt;/span&gt;</h3>\n<ul>\n<li><code>window.parent</code> ：返回父窗口（当前窗口的上一层窗口）</li>\n<li><code>window.top</code> ：返回最顶层（最外层）的父窗口，即浏览器窗口本身。</li>\n</ul>\n<p>如果当前窗口是最外层窗口，那么 <code>parent</code>  等于 <code>top</code> （都等于 <code>window</code> ）</p>\n<ul>\n<li><code>window.self</code> ：使用指向 <code>window</code></li>\n</ul>\n<p>利用这些可以把多个浏览器窗口<strong>串联</strong>起来，比如 <code>window.parent.parent</code></p>\n<h3 id=\"13-ltspan-id-quot窗口位置与像素比quotgt-窗口位置与像素比-ltspangt\"><a class=\"anchor\" href=\"#13-span-id-窗口位置与像素比窗口位置与像素比span\">#</a> 1.3 &lt;span id = &quot;窗口位置与像素比&quot;&gt; 窗口位置与像素比 &lt;/span&gt;</h3>\n<p>获取位置</p>\n<ul>\n<li><code>window.screenLeft</code> ：窗口距<strong>屏幕左侧</strong>的位置，返回值是 CSS 的像素</li>\n<li><code>window.screenTop</code> ：窗口距<strong>屏幕顶部</strong>的位置</li>\n</ul>\n<p>挪动窗口</p>\n<ul>\n<li><code>window.moveTo()</code> ：把窗口的左上角移动到一个指定的坐标。\n<ul>\n<li>参数 1：横坐标</li>\n<li>参数 2：纵坐标</li>\n</ul>\n</li>\n<li><code>window.moveBy()</code> ：把窗口挪动指定<strong>像素单位</strong>\n<ul>\n<li>参数 1：<strong>右移</strong>的像素数</li>\n<li>参数 2：<strong>下移</strong>的像素数</li>\n</ul>\n</li>\n</ul>\n<p>像素比</p>\n<ul>\n<li>\n<p><code>window.devicePixelRatio</code> ：物理像素（屏幕分辨率）与逻辑像素（CSS 像素 px）之间的<strong>缩放比</strong></p>\n<p>为了让 <code>1920X1080</code>  分辨率屏幕和 <code>640X320</code>  的文字看上去一样大，将 <code>window.devicePixelRatio</code>  设为 3，那么 <code>12像素</code> 的文字实际上用 <code>36像素</code> 的物理像素来显示</p>\n</li>\n</ul>\n<h3 id=\"14-ltspan-id-quot窗口大小quotgt-窗口大小-ltspangt\"><a class=\"anchor\" href=\"#14-span-id-窗口大小窗口大小span\">#</a> 1.4 &lt;span id = &quot;窗口大小&quot;&gt; 窗口大小 &lt;/span&gt;</h3>\n<ul>\n<li><code>window.outerWidth</code> ：浏览器窗口宽度（包括...）</li>\n<li><code>window.outerHeight</code> ：高度</li>\n<li><code>window.innerWidth</code> ：窗口内<strong>可视</strong>页面宽度（不包括浏览器边框和工具栏）</li>\n<li><code>window.innerHeight</code> ：高度</li>\n</ul>\n<p>调整大小</p>\n<ul>\n<li><code>window.resizeTo()</code> ：调整到指定宽高\n<ul>\n<li>参数 1：新的宽度。像素 px</li>\n<li>参数 2：新的高度。</li>\n</ul>\n</li>\n<li><code>window.resizeBy()</code> ：增加的宽度和高度\n<ul>\n<li>参数 1：增加的宽度。像素</li>\n<li>参数 2：增加的高度。</li>\n</ul>\n</li>\n</ul>\n<p>什么是可视页面？</p>\n<p>就是能看见内容的页面，简称<strong>视口</strong></p>\n<p>在浏览器中，不仅不包括边框和工具栏，就连按 F12 调出调试台也会缩减可视页面大小。</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220406220553167.png\" alt=\"image-20220406220553167\"></p>\n<p>特别是在<strong>移动端</strong>，视口仅是页面的一小部分，如何布局视口、适配不同屏幕很关键。</p>\n<p><code>document.documentElement.clientWidth</code>  和 <code>document.documentElement.clientHeight</code>  也能返回视口大小。</p>\n<ul>\n<li><code>document.documentElement.clientWidth</code> ：返回视口宽度</li>\n<li><code>document.documentElement.clientHeight</code> ：返回视口高度</li>\n</ul>\n<p>在 IE 中则是 <code>document.body.clientWidth</code>  和 <code>document.body.clientHeight</code></p>\n<h3 id=\"15-ltspan-id-quot视口位置quotgt-视口位置-ltspangt\"><a class=\"anchor\" href=\"#15-span-id-视口位置视口位置span\">#</a> 1.5 &lt;span id = &quot;视口位置&quot;&gt; 视口位置 &lt;/span&gt;</h3>\n<blockquote>\n<p>浏览器窗口尺寸通常无法满足完整显示整个页面。</p>\n</blockquote>\n<p><strong>滚动页面</strong></p>\n<ul>\n<li>\n<p><code>scroll()</code> ：...</p>\n</li>\n<li>\n<p><code>scrollTo()</code> ：滚动到指定坐标</p>\n<ul>\n<li>参数 1：横坐标</li>\n<li>参数 2：纵坐标</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 滚动到页面左上角</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 滚动到距离屏幕左边和顶边各 100 像素的位置</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>scrollBy()</code> ：向指定方向滚动指定像素</p>\n<ul>\n<li>参数 1：向右滚动 n 个像素</li>\n<li>参数 2：向下滚动 n 个像素</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向下滚动 100 像素</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">scrollBy</span><span class=\"token punctuation\">(</span><span class=\"token number\">40</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 向右滚动 40 像素</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"16-ltspan-id-quot导航与打开新窗口quotgt-导航与打开新窗口-ltspangt\"><a class=\"anchor\" href=\"#16-span-id-导航与打开新窗口导航与打开新窗口span\">#</a> 1.6 &lt;span id = &quot;导航与打开新窗口&quot;&gt; 导航与打开新窗口 &lt;/span&gt;</h3>\n<p>本节概要：</p>\n<ul>\n<li><code>window.open()</code> ：弹窗函数</li>\n<li><code>window.opener</code> ：返回打开弹窗的窗口</li>\n<li><code>window.close()</code> ：关闭窗口</li>\n</ul>\n<hr>\n<blockquote>\n<p><code>window.open()</code>  用于导航到指定 URL，也可以用于打开新浏览器窗口</p>\n</blockquote>\n<ul>\n<li>\n<p><code>window.open()</code> ：根据指定的 url 跳转页面或打开新窗口</p>\n<ul>\n<li>\n<p>参数 1：必选，url。（完整路径， <code>http</code>  不可漏）</p>\n</li>\n<li>\n<p>参数 2：可选，target，目标窗口。对应窗口名打开 url，如果没有，则新窗口打开，并命名为 target。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'newWindow'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 如果有窗口名叫 'newWindow'，那么这个窗口打开百度，否则新创建一个窗口打开百度，并且将其命名为 'newWindow'</span></pre></td></tr></table></figure><ul>\n<li>特殊窗口名：\n<ul>\n<li><code>_self</code> ：指向自己</li>\n<li><code>_parent</code> ：指向父窗口</li>\n<li><code>_top</code> ：最顶端窗口</li>\n<li><code>_blank</code> ：最低端窗口</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>参数 3：可选，窗口特性（工具栏、地址栏、状态栏等）</p>\n<ul>\n<li>height：新窗口高度</li>\n<li>width：新窗口宽度</li>\n<li>left：新窗口 x 轴坐标</li>\n<li>top：新窗口 y 轴坐标</li>\n<li>location：是否显示<strong>地址栏</strong>。bool</li>\n<li>Menubar：是否显示<strong>菜单栏</strong>。bool</li>\n<li>status：是否显示<strong>状态栏</strong></li>\n<li>toolbar：是否显示<strong>工具栏</strong></li>\n<li>fullscreen：新窗口是否最大化（仅 IE 支持），bool</li>\n<li>resizable：是否可以拖动改变新窗口大小</li>\n<li>scrollbars：是否可在内容过长时<strong>滚动</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'_self'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"height=400,width=400,top=10,left=10,resizable\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>此外，为了限制弹窗广告，各浏览器对弹窗的特性做了一些限制，有些状态并不能使用。</p>\n</li>\n<li>\n<p>参数 4 一般很少使用</p>\n</li>\n<li>\n<p>返回：一个 <code>window</code>  对象，可以调用所有 <code>window</code>  函数及属性</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> wroxWin<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wroxWin'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"height=400,width=400,top=10,left=10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>wroxWin<span class=\"token punctuation\">.</span><span class=\"token function\">resizeTo</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 缩放 wroxWin 窗口</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>wroxWin<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 关闭 wroxWin 窗口</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 关闭后，虽然 wroxWin 这个变量还在，但只能用来访问 wroxWin.closed 属性了（关闭后为 true）</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p><code>window.open()</code>  打开新窗口后，有一个 <code>window.opener</code>  属性，指向<strong>打开它的窗口</strong></p>\n<p>但窗口不会记录自己打开的窗口。（孩子知道父亲，父亲不知道孩子）</p>\n<ul>\n<li>\n<p><code>window.opener</code> ：打开这个窗口的窗口</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> wroxWin<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wroxWin'</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"height=400,width=400,top=10,left=10\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>wroxWin<span class=\"token punctuation\">.</span>opener<span class=\"token operator\">===</span>window<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure><p>把 <code>window.opener</code>  设为 <code>null</code>  表示不需要和打开它的标签页通信，这样可以在<strong>独立的进程中运行</strong>。此操作不可逆</p>\n</li>\n</ul>\n<p><strong>弹窗屏蔽</strong></p>\n<p>有时候弹窗被浏览器屏蔽，那么 <code>window.open()</code>  则会返回 <code>null</code>  或者抛出异常，那么我们需要用 <code>try-catch</code>  包裹并且判断是否返回空</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> wroxWin<span class=\"token operator\">=</span>window<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'wroxWin'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>wroxWin<span class=\"token operator\">===</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'弹窗被屏蔽，null'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'弹窗被屏蔽，err'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"17-ltspan-id-quot定时器quotgt-定时器-ltspangt\"><a class=\"anchor\" href=\"#17-span-id-定时器定时器span\">#</a> 1.7 &lt;span id = &quot;定时器&quot;&gt; 定时器 &lt;/span&gt;</h3>\n<p>本节概要</p>\n<ul>\n<li><code>setTimeout()</code> ：指定一定时间后执行某段代码</li>\n<li><code>clearTimeout()</code> ：取消 <code>setTimeout</code>  排期</li>\n<li><code>setInterval()</code> ：<strong>每隔</strong>一段时间执行某段代码</li>\n<li><code>clearInterval()</code> ：取消 <code>setInterval</code>  任务</li>\n</ul>\n<hr>\n<blockquote>\n<p>JavaScript 在浏览器中是单线程执行的，但允许使用定时器指定在某个时间之后或每隔一段时间就执行相应代码（仿多线程），主要由 2 个函数： <code>setTimeout</code>  和 <code>setInterval()</code>  实现</p>\n</blockquote>\n<ul>\n<li>\n<p><code>setTimeout()</code> ：指定一定时间后执行某段代码</p>\n<ul>\n<li>参数 1：要执行的代码，可以是个回调函数</li>\n<li>参数 2：等待时间。</li>\n<li>参数 3、4、5：如果参数 1 写的是回调函数，回调函数的参数</li>\n<li>返回值： <code>timeout</code>  任务的 ID。</li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1s 后执行箭头函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">,</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以上两者者等价</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 千万不能 setTimeout (console.log ('hello world'),1000); 这样写</span></pre></td></tr></table></figure><p>JavaScript 引擎维护一个任务队列，&lt;u&gt; <code>setTimeout</code>  的参数 2 告诉 JavaScript 引擎在指定毫秒数后把任务添加到队列。&lt;/u&gt; 如果代码在队列头， 则会立即执行，否则等待前面的代码执行完后执行。</p>\n</li>\n<li>\n<p><code>clearTimeout()</code> ：取消等待中的排期（ <code>setTimeout</code> ）任务。</p>\n<p><code>setTimeout</code>  会返回一个表示该超时排期的数值 ID（其实就相当于是该 <code>setTimeout</code>  的 ID）， <code>clearTimeout</code>  用于取消该任务</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> timeoutID<span class=\"token operator\">=</span><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hello world'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1s 后执行箭头函数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">clearTimeout</span><span class=\"token punctuation\">(</span>timeoutID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 取消延时任务</span></pre></td></tr></table></figure><p>只要在指定时间到达之前调用，就可以取消超时（延时）任务。任务执行后再调用就没有效果</p>\n</li>\n<li>\n<p><code>setInterval()</code> ：<strong>每隔</strong>一段时间执行某段代码，用法和 <code>setTimeout</code>  相似</p>\n<ul>\n<li>参数...</li>\n<li>返回：循环 ID</li>\n</ul>\n</li>\n<li>\n<p><code>clearInterval()</code> ：取消 <code>setInterval</code>  任务</p>\n</li>\n</ul>\n<p>&lt;font color=red&gt; 注： <code>setTimeout</code>  不一定要记录 id，因为其到时执行后就会自动销毁，而 <code>setInterval</code>  则必须留 id，设置 <code>clearInterval</code> ，否则会一直循环执行直到页面卸载 &lt;/font&gt;</p>\n<h3 id=\"18-ltspan-id-quot系统对话框quotgt-系统对话框-ltspangt\"><a class=\"anchor\" href=\"#18-span-id-系统对话框系统对话框span\">#</a> 1.8 &lt;span id = &quot;系统对话框&quot;&gt; 系统对话框 &lt;/span&gt;</h3>\n<p>本节概要：</p>\n<ul>\n<li><code>alert()</code> ：警告框</li>\n<li><code>confirm()</code> ：确认框</li>\n<li><code>prompt()</code> ：提示框（输入框）</li>\n</ul>\n<hr>\n<blockquote>\n<p>系统提示框，无法设置 css 等属性，外观由操作系统或浏览器决定。当他们显示时，<strong>代码会停止运行</strong></p>\n</blockquote>\n<ul>\n<li>\n<p><code>alert()</code> ：警告框。</p>\n<ul>\n<li>提示消息。传给 <code>alert</code>  的参数会自动以 <code>toString()</code>  转换为字符串。一般用于提示或警告</li>\n</ul>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411163521065.png\" alt=\"image-20220411163521065\"></p>\n</li>\n<li>\n<p><code>confirm()</code> ：确认框。</p>\n<ul>\n<li>参数 1：提示消息</li>\n<li>返回值：如果用户点击<strong>确定</strong>，返回 <code>true</code> ；否则，返回 <code>false</code></li>\n</ul>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411163820994.png\" alt=\"image-20220411163820994\"></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">confirm</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Are you sure?'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'OK'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'cancel'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>prompt()</code> ：提示框（输入框）。除了<strong>确认</strong>和<strong>取消</strong>，还会有一行文本框让用户输入内容</p>\n<ul>\n<li>参数 1：提示消息</li>\n<li>参数 2：文本框默认值</li>\n<li>返回：如果用户点击确定，返回文本框内的字符串，否则返回 <code>null</code></li>\n</ul>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411164344540.png\" alt=\"image-20220411164344540\"></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token function\">prompt</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你的名字?'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'五月天'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'你好'</span><span class=\"token operator\">+</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'无名侠'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<p>此外 JavaScript 还有另外 2 种对话框 <code>find()</code>  和 <code>print()</code> 。</p>\n<ul>\n<li>\n<p><code>window.print()</code> ：显示打印对话框</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411165112296.png\" alt=\"image-20220411165112296\"></p>\n</li>\n<li>\n<p><code>window.find()</code> ：显示查找对话框</p>\n</li>\n</ul>\n<p>用的很少，略过</p>\n<h2 id=\"2-location-对象\"><a class=\"anchor\" href=\"#2-location对象\">#</a> 2. location 对象</h2>\n<p>本章概要：</p>\n<ul>\n<li><code>location</code>  的各项属性，包括但不限于各种返回 / 修改 url 的属性</li>\n<li><code>URLSearchParams</code> ：获取查询键值对的类</li>\n<li><code>location.assign(url)</code> ：转到新的 url，同时增加一条历史记录</li>\n<li><code>location.replace(url)</code> ：重定向，<strong>不增加历史记录</strong>，也不能 “后退” 回到前一页</li>\n<li><code>location.reload(param)</code> ：重新加载，其实就相当于刷新。考虑到网络延迟和系统资源等问题，一般放在最后一行</li>\n</ul>\n<hr>\n<blockquote>\n<p>location 是最有用的 BOM 对象之一，提供了当前窗口中<strong>加载文档</strong>的信息，以及通常的<strong>导航功能</strong></p>\n</blockquote>\n<ul>\n<li><code>location</code>  既是 <code>window</code>  的属性，也是 <code>document</code>  的属性。即 <code>window.location</code>  和 <code>document.location</code>  指向同一个对象</li>\n<li><code>location</code>  保存着这些信息\n<ul>\n<li>当前加载的文档的信息</li>\n<li>把 URL 解析为离散片段后能够通过属性访问的信息</li>\n</ul>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n<th>示例</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>location.href</code></td>\n<td>当前页面完整的 url</td>\n<td><code>&quot;http://www.wrox.com:80/WileyCDA/?q=javascript#contents&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.host</code></td>\n<td>服务器名及端口号</td>\n<td><code>&quot;www.wrox.com:80&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.hostname</code></td>\n<td>服务期名</td>\n<td><code>&quot;www.wrox.com&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.port</code></td>\n<td>端口号</td>\n<td><code>&quot;80&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.pathname</code></td>\n<td>url 中的路径（文档的相对路径）</td>\n<td><code>&quot;/WileyCDA/&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.protocol</code></td>\n<td>协议，一般就是 <code>http:</code>  或 <code>https:</code></td>\n<td><code>&quot;http:&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.search</code></td>\n<td>url 的查询字符串，以 <code>?</code>  开头</td>\n<td><code>&quot;?q=javascript&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.hash</code></td>\n<td>url 的哈希值，如果没有则为空字符串</td>\n<td><code>&quot;#contents&quot;</code></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td><code>location.username</code></td>\n<td>域名前指定的用户名</td>\n<td><code>&quot;ninglidashen1996&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.password</code></td>\n<td>用户密码</td>\n<td><code>&quot;cjq123456789&quot;</code></td>\n</tr>\n<tr>\n<td><code>location.origin</code></td>\n<td>url 的源地址（只读）, 一般是协议 + 服务器名</td>\n<td><code>&quot;http://www.wrox.com&quot;</code></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"21-查询字符串\"><a class=\"anchor\" href=\"#21-查询字符串\">#</a> 2.1 查询字符串</h3>\n<p><code>location.search</code>  我们获取的是一串字符串，我们通常使用如下一系列操作提取 <code>k-v</code>  值</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> <span class=\"token function-variable function\">getQueryStringArgs</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> qs<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span>length<span class=\"token operator\">></span><span class=\"token number\">0</span><span class=\"token operator\">?</span> location<span class=\"token punctuation\">.</span>search<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        args<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> item <span class=\"token keyword\">of</span> qs<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'&amp;'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">kv</span><span class=\"token operator\">=></span>kv<span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">'='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token comment\">// 对获取的字符串解码（url 中的汉字会被进行 encode 编码）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">let</span> name<span class=\"token operator\">=</span><span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            value<span class=\"token operator\">=</span><span class=\"token function\">decodeURIComponent</span><span class=\"token punctuation\">(</span>item<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            args<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">return</span> args<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>但是 JavaScript 中有个 <code>URLSearchParams</code>  类提供了专门提取 <code>k-v</code>  的 API</p>\n<p><strong>URLSearchParams</strong></p>\n<ul>\n<li>创建（初始化）： <code>new URLSearchParams(location.search);</code></li>\n<li><code>has(key)</code> ：查找是否有指定的键</li>\n<li><code>get(key)</code> ：通过指定键获取值。（会自动解码）</li>\n<li><code>set(key,value)</code> ：添加指定的键值对。（要用字符串）</li>\n<li><code>delete(key)</code> ：删除指定的键值对</li>\n</ul>\n<p>用法和 <code>map</code>  基本上差不多</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> qs<span class=\"token operator\">=</span><span class=\"token string\">\"name=陈家琪&amp;age=16\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> searchParams<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">URLSearchParams</span><span class=\"token punctuation\">(</span>qs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//name=%E9%99%88%E5%AE%B6%E7%90%AA&amp;age=16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 陈家琪（会自动解码）</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"3\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//name=%E9%99%88%E5%AE%B6%E7%90%AA&amp;age=16&amp;page=3</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>searchParams<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><h3 id=\"22-操作地址\"><a class=\"anchor\" href=\"#22-操作地址\">#</a> 2.2 操作地址</h3>\n<p><code>location</code>  的一大用处就是<strong>修改浏览器地址</strong>（即要访问的 url 地址，也就是地址栏上的那串字符串，如下图）</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411202010739.png\" alt=\"image-20220411202010739\"></p>\n<ul>\n<li>\n<p><code>location.assign(url)</code> ：转到新的 url，同时增加一条历史记录</p>\n</li>\n<li>\n<p><code>location.href</code> ：调用 <code>location.assign</code> ，转到新的 url。<strong>最常用</strong></p>\n</li>\n<li>\n<p><code>window.location</code> ：直接改 <code>location</code>  也可，也是调用 <code>assign</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>location<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>location<span class=\"token punctuation\">.</span>href<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>location<span class=\"token operator\">=</span><span class=\"token string\">\"https://www.baidu.com\"</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>此外，修改<strong>除了 hash</strong> 的任意 ** <code>location</code>  属性 ** 都会导致页面重新加载新的 url。同时增加一条历史记录。</p>\n<ul>\n<li>修改 <code>hash</code>  虽然不会刷新页面，但会增加历史记录</li>\n</ul>\n</li>\n<li>\n<p><code>location.replace(url)</code> ：重定向，<strong>不增加历史记录</strong>，也不能 “后退” 回到前一页</p>\n</li>\n<li>\n<p><code>location.reload(param)</code> ：重新加载，其实就相当于<strong>刷新</strong>。考虑到网络延迟和系统资源等问题，一般放在最后一行</p>\n<ul>\n<li><code>location.reload()</code> ：从缓存中加载。（如果页面自上次请求以来就没有修改过，就会从缓存中加载）</li>\n<li><code>location.reload(true)</code> ：强制从服务器加载</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-navigator-对象\"><a class=\"anchor\" href=\"#3-navigator对象\">#</a> 3. navigator 对象</h2>\n<p>主要关于浏览器程序的一些信息，用的不多。在第 13 章会详细介绍。</p>\n<ul>\n<li>检测插件</li>\n<li>注册处理程序</li>\n</ul>\n<h2 id=\"4-screen-对象\"><a class=\"anchor\" href=\"#4-screen对象\">#</a> 4. screen 对象</h2>\n<p>也很少使用，主要获取客户端显示器信息。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">属性</th>\n<th style=\"text-align:left\">说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1hdmFpbGhlaWdodC5odG1s\">availHeight</span></td>\n<td style=\"text-align:left\">返回屏幕的高度（不包括 Windows 任务栏）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1hdmFpbHdpZHRoLmh0bWw=\">availWidth</span></td>\n<td style=\"text-align:left\">返回屏幕的宽度（不包括 Windows 任务栏）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1jb2xvcmRlcHRoLmh0bWw=\">colorDepth</span></td>\n<td style=\"text-align:left\">返回目标设备或缓冲器上的调色板的比特深度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1oZWlnaHQuaHRtbA==\">height</span></td>\n<td style=\"text-align:left\">返回屏幕的总高度</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi1waXhlbGRlcHRoLmh0bWw=\">pixelDepth</span></td>\n<td style=\"text-align:left\">返回屏幕的颜色分辨率（每象素的位数）</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucnVub29iLmNvbS9qc3JlZi9wcm9wLXNjcmVlbi13aWR0aC5odG1s\">width</span></td>\n<td style=\"text-align:left\">返回屏幕的总宽度</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"5-history-对象\"><a class=\"anchor\" href=\"#5-history对象\">#</a> 5. history 对象</h2>\n<p>主要保存历史记录，每个 <code>window</code>  都有一个自己的 <code>history</code>  对象。</p>\n<p>出于安全考虑， <code>history</code>  其实并不会暴露用户访问过的 url，但提供前进和后退等方法可以转到访问过的 url</p>\n<h3 id=\"51-导航\"><a class=\"anchor\" href=\"#51-导航\">#</a> 5.1 导航</h3>\n<ul>\n<li>\n<p><code>history.go()</code> ：沿任何方向导航</p>\n<ul>\n<li>\n<p>参数可以是数字</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前进一页</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 后退一页</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 前进 2 页</span></pre></td></tr></table></figure></li>\n<li>\n<p>也可以是字符串</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>history<span class=\"token punctuation\">.</span><span class=\"token function\">go</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrox.com\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 导航到最近的 wrox.com 页面</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>history.back()</code> ：后退一页</p>\n</li>\n<li>\n<p><code>history.forward()</code> ：前进一页（两者都是 <code>go</code>  的简化）</p>\n</li>\n<li>\n<p><code>history.length</code> ：返回历史记录数。如果 <code>length===1</code> ，则说明这是用户窗口第一个页面。</p>\n</li>\n</ul>\n<h3 id=\"52-历史状态管理看不懂\"><a class=\"anchor\" href=\"#52-历史状态管理看不懂\">#</a> 5.2 历史状态管理（看不懂）</h3>\n<h1 id=\"十三-客户端检测暂缓\"><a class=\"anchor\" href=\"#十三-客户端检测暂缓\">#</a> 十三、 客户端检测（暂缓）</h1>\n<p>主要是检测是什么浏览器，谷歌、火狐、还是 IE 或者别的</p>\n<h1 id=\"十四-dom\"><a class=\"anchor\" href=\"#十四-dom\">#</a> 十四、 DOM</h1>\n<blockquote>\n<p>DOM (文档对象模型)。通过 HTML DOM，可访问 JavaScript HTML 文档的所有元素。最主要的就是 2 点：</p>\n<ol>\n<li>设置 html 文档内容</li>\n<li>设置事件</li>\n</ol>\n</blockquote>\n<h2 id=\"1-节点层级\"><a class=\"anchor\" href=\"#1-节点层级\">#</a> 1. 节点层级</h2>\n<p>在 HTML DOM (Document Object Model) 中，每一个元素都是 <strong>节点</strong></p>\n<p>节点关系如下图：文档树</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/pic_htmltree.gif\" alt=\"DOM HTML tree\"></p>\n<blockquote>\n<p>每个节点都是 html 中一个组成</p>\n</blockquote>\n<p>对应于下面的</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token doctype\"><span class=\"token punctuation\">&lt;!</span><span class=\"token doctype-tag\">DOCTYPE</span> <span class=\"token name\">html</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span> <span class=\"token attr-name\">lang</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>en<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>My title<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>文档层级.html<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>My link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>My header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>每个节点（Node）都是一个标签如 <code>&lt;h1&gt;</code></p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411213156751.png\" alt=\"image-20220411213156751\"> 每个红线框着的都是节点</p>\n<h3 id=\"11-node-类型\"><a class=\"anchor\" href=\"#11-node类型\">#</a> 1.1 Node 类型</h3>\n<p><code>node</code>  是一个比较泛化的对象，上面圈的这些节点都是 <code>node</code> ，最常见的如元素节点（标签节点） <code>element</code>  是通过 <code>document.getElement</code>  得到的</p>\n<p>本节概要：</p>\n<ul>\n<li>各种节点的属性和操作节点的方法</li>\n<li><code>node.nodeType</code> ：节点类型</li>\n<li><code>node.nodeName</code> ：返回节点名</li>\n<li><code>node.nodeValue</code> ：同 <code>name</code></li>\n<li><code>node.childNodes</code> ：返回节点的所有孩子节点。</li>\n<li><code>NodeList</code> ：类数组的对象</li>\n<li><a href=\"#%E8%8A%82%E7%82%B9%E5%85%B3%E7%B3%BB\">节点层级关系</a>\n<ul>\n<li><code>node.parentNode</code> ：返回节点的父节点。</li>\n<li><code>node.previousSibling</code> ：上一个兄弟节点。第一个返回 <code>null</code></li>\n<li><code>node.nextSibling</code> ：下一个兄弟节点。最后一一个返回 <code>null</code></li>\n<li><code>node.firstChild</code> ：第一个孩子节点</li>\n<li><code>node.lastChild</code> ：最后一个孩子节点。如果没有孩子节点返回 <code>null</code></li>\n<li><code>node.hasChildNodes()</code> ：返回是否有孩子节点</li>\n</ul>\n</li>\n<li><a href=\"#%E6%93%8D%E4%BD%9C%E8%8A%82%E7%82%B9\">操作节点</a>\n<ul>\n<li><code>node.appendChild()</code> ：在 <code>childNodes</code>  列表结尾添加一个子节点</li>\n<li><code>node.insertBefore()</code> ：在特定位置插入一个<strong>子节点</strong></li>\n<li><code>node.replaceChild()</code> ：替换指定节点</li>\n<li><code>node.removeChild()</code> ：删除指定节点</li>\n</ul>\n</li>\n</ul>\n<hr>\n<blockquote>\n<p>DOM Level 1 描述了名为 Node 的接口，这个接口是所有 DOM 节点类型都必须实现的，即所有结点类型都继承 Node 类型</p>\n</blockquote>\n<p>每个节点都有 <code>nodeType</code>  属性，表示该节点的类型。</p>\n<p>设一个 <code>node</code>  是一个节点对象实例</p>\n<ul>\n<li>\n<p><code>node.nodeType</code> ：节点类型，如下</p>\n<ol>\n<li><code>Node.ELEMENT_NODE</code> ：1</li>\n<li><code>Node.ATTRIBUTE_NODE</code> ：2</li>\n<li><code>Node.TEXT_NODE</code> ：3</li>\n<li><code>Node.CDATA_SECTION_NODE</code> ：4</li>\n<li><code>Node.ENTITY_REFERENCE_NODE</code> ：5</li>\n<li><code>Node.ENTITY_NODE</code> ：6</li>\n<li><code>Node.PROCESSING_INSTRUCTION_NODE</code> ：7</li>\n<li><code>Node.COMMENT_NODE</code> ：8</li>\n<li><code>Node.DOCUMENT_NODE</code> ：9</li>\n<li><code>Node.DOCUMENT_TYPE_NODE</code> ：10</li>\n<li><code>Node.DOCUMENT_FRAGMENT_NODE</code> ：11</li>\n<li><code>Node.DOCUMENT_NODE</code> ：12</li>\n</ol>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> node<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"id1\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//1</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">.</span>nodeType<span class=\"token operator\">===</span>Node<span class=\"token punctuation\">.</span><span class=\"token constant\">ELEMENT_NODE</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\">// 解释一下，node 是 element 类型的节点，所以是 Node.ELEMENT_NODE，也就是 1</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"111-nodename-和-nodevalue\"><a class=\"anchor\" href=\"#111-nodename和nodevalue\">#</a> 1.1.1 nodeName 和 nodeValue</h4>\n<ul>\n<li><code>node.nodeName</code> ：返回节点名，每个节点类型返回可能都不一样\n<ul>\n<li><code>element</code>  元素节点：返回标签名（大写）</li>\n<li>....</li>\n</ul>\n</li>\n<li><code>node.nodeValue</code> ：同 <code>name</code> ，每个节点类型返回都不一样\n<ul>\n<li><code>element</code>  元素节点：返回 <code>null</code></li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"112-ltspan-id-quot节点关系quotgt-节点关系-ltspangt\"><a class=\"anchor\" href=\"#112-span-id-节点关系节点关系span\">#</a> 1.1.2 &lt;span id = &quot;节点关系&quot;&gt; 节点关系 &lt;/span&gt;</h4>\n<p>文档中所有节点都与其他节点有关系，可以形容为家族关系，大家都在一个族谱（文档树）上。</p>\n<ul>\n<li>\n<p><code>node.childNodes</code> ：返回节点的所有孩子节点。他们共有一个父节点（ <code>parentNode</code> ）</p>\n<ul>\n<li>返回： <code>NodeList</code>  类型的实例。</li>\n</ul>\n<p>&lt;font color=red&gt; 注： <code>childNodes</code>  会把空白也当成文本节点算进去 &lt;/font&gt;</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411215520567.png\" alt=\"image-20220411215520567\"> 这些空白都会被当成节点</p>\n<p>除非这样写成一行<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411215548440.png\" alt=\"image-20220411215548440\"></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>123.html<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>id1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>My link<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span>My header<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token keyword\">let</span> node<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementsByTagName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'body'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token keyword\">of</span> node<span class=\"token punctuation\">.</span>childNodes<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>nodeType<span class=\"token operator\">===</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">.</span>nodeName<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                document<span class=\"token punctuation\">.</span><span class=\"token function\">writeln</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>            <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>如图：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220411215629845.png\" alt=\"image-20220411215629845\"></p>\n</li>\n<li>\n<p><code>NodeList</code> ：类数组的对象，可以使用几乎所有 <code>Array</code>  的属性和方法（但其并不是 <code>Array</code>  是实例）</p>\n<p>假设 <code>nodes</code>  是一个 <code>NodeList</code>  的实例</p>\n<ul>\n<li><code>nodes[0]</code> ：返回第一个节点</li>\n<li><code>nodes.item(0)</code> ：返回第一个节点</li>\n<li><code>nodes.length</code> ：返回节点数</li>\n<li>可以通过 <code>Array.from</code>  等操作转为数组</li>\n</ul>\n</li>\n<li>\n<p><code>node.parentNode</code> ：返回节点的父节点。</p>\n</li>\n<li>\n<p><code>node.previousSibling</code> ：上一个兄弟节点。第一个返回 <code>null</code></p>\n</li>\n<li>\n<p><code>node.nextSibling</code> ：下一个兄弟节点。最后一一个返回 <code>null</code></p>\n</li>\n<li>\n<p><code>node.firstChild</code> ：第一个孩子节点</p>\n</li>\n<li>\n<p><code>node.lastChild</code> ：最后一个孩子节点。如果没有孩子节点返回 <code>null</code></p>\n</li>\n<li>\n<p><code>node.hasChildNodes()</code> ：返回是否有孩子节点</p>\n</li>\n</ul>\n<h4 id=\"113-ltspan-id-quot操作节点quotgt-操作节点-ltspangt\"><a class=\"anchor\" href=\"#113-span-id-操作节点操作节点span\">#</a> 1.1.3 &lt;span id = &quot;操作节点&quot;&gt; 操作节点 &lt;/span&gt;</h4>\n<p>其实就是类似数组的增删改</p>\n<ul>\n<li>\n<p><code>node.appendChild()</code> ：在 <code>childNodes</code>  列表结尾添加一个子节点</p>\n<ul>\n<li>参数：要添加的节点</li>\n<li>返回：要添加的节点</li>\n</ul>\n</li>\n<li>\n<p><code>node.insertBefore()</code> ：在特定位置插入一个<strong>子节点</strong></p>\n<ul>\n<li>\n<p>参数 1：插入节点</p>\n</li>\n<li>\n<p>参数 2：被插队的节点。（要通过 <code>node</code>  获取），如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>node<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>newNode<span class=\"token punctuation\">,</span>node<span class=\"token punctuation\">.</span>lastChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 把 newNode 插入到 node 最后一个节点前</span></pre></td></tr></table></figure></li>\n<li>\n<p>返回：新插入的节点</p>\n</li>\n</ul>\n</li>\n<li>\n<p><code>node.replaceChild()</code> ：替换指定节点</p>\n<ul>\n<li>参数 1：替换的节点</li>\n<li>参数 2：被替换的节点（要通过 <code>node.属性</code> 获取）</li>\n</ul>\n</li>\n<li>\n<p><code>node.removeChild()</code> ：删除指定节点</p>\n<ul>\n<li>参数：被删除的节点（要通过 <code>node.属性</code> 获取）</li>\n</ul>\n</li>\n<li>\n<p>以上所有方法都需要先获取父节点（可通过 <code>parentNode</code>  属性获取）</p>\n</li>\n</ul>\n<h4 id=\"114-其他方法\"><a class=\"anchor\" href=\"#114-其他方法\">#</a> 1.1.4 其他方法</h4>\n<h3 id=\"12-document-类型\"><a class=\"anchor\" href=\"#12-document类型\">#</a> 1.2 document 类型</h3>\n<p>即文档节点，代表的是当前页面。 <code>document</code>  是 <code>window</code>  的属性，是文档的全局对象，有以下特征：</p>\n<ul>\n<li><code>nodeType</code>  为 9；</li>\n<li><code>nodeName</code>  为 <code>&quot;#document&quot;</code> ；</li>\n<li><code>nodeValue</code>  为 <code>null</code> ；</li>\n<li><code>parentNode</code>  为 <code>null</code> ；</li>\n<li><code>ownerDocument</code>  为 <code>null</code> ；</li>\n<li>子节点可以是 <code>DocumentType</code> 、 <code>Element</code> 、 <code>ProcessingInstruction</code>  或 <code>Comment</code>  类型</li>\n</ul>\n<h4 id=\"121-获取文档子节点\"><a class=\"anchor\" href=\"#121-获取文档子节点\">#</a> 1.2.1 获取文档子节点</h4>\n<p>除了 <code>node</code>  公用的访问子节点的属性 / 方法， <code>document</code>  还提供了几个访问特殊子节点的方法 / 属性</p>\n<ul>\n<li><code>document.documentElement</code> ：返回 <code>&lt;html&gt;</code>  元素节点的引用</li>\n<li><code>document.body</code> ：返回 <code>&lt;body&gt;</code>  元素节点的引用。<strong>用的最多</strong></li>\n<li><code>document.doctype</code> ：返回 <code>&lt;!doctype html&gt;</code>  元素节点的引用</li>\n</ul>\n<p>一般来说，不会对 <code>document</code>  进行 <code>appendChild()</code> 、 <code>removeChild()</code> 、 <code>replaceChild()</code>  等操作</p>\n<h4 id=\"122-文档信息\"><a class=\"anchor\" href=\"#122-文档信息\">#</a> 1.2.2 文档信息</h4>\n<ul>\n<li><code>document.title</code> ：取得 <code>&lt;head&gt;</code>  中的 <code>&lt;title&gt;</code>  的引用</li>\n<li><code>document.URL</code> ：取得当前文档的完整 <code>url</code> （只读）</li>\n<li><code>document.domain</code> ：取得当前文档的<strong>域名</strong>（只能设置 URL 中包含的值）</li>\n<li><code>document.referrer</code> ：取得当前文档<strong>来源</strong>（只读，url 根地址）</li>\n</ul>\n<h4 id=\"123-定位元素获取元素节点\"><a class=\"anchor\" href=\"#123-定位元素获取元素节点\">#</a> 1.2.3 定位元素（获取元素节点）</h4>\n<ul>\n<li><code>document.getElementById(id)</code> ：根据<strong> id</strong> 获取元素节点，找不到返回 <code>null</code> 。（多个相同的 id，返回第一个）\n<ul>\n<li><code>id</code> ：字符串，标签 id</li>\n</ul>\n</li>\n<li><code>document.getElementsByTagName(tagName)</code> ：根据<strong>标签名</strong>返回元素节点的<strong>数组</strong>，没有匹配则是空数组。\n<ul>\n<li><code>tagName</code> ：字符串，标签名。可以是 <code>'*'</code> ，意为捕获所有元素节点</li>\n<li><code>return</code> ： <code>HTMLCollection</code> ，html 集合，类数组对象，这里讲的<strong>数组</strong>就是他</li>\n</ul>\n</li>\n<li><code>document.getElementsByName(name)</code> ：根据标签的<strong> name 属性</strong>返回元素节点的<strong>数组</strong></li>\n<li><code>document.getElementsByClassName(className)</code> ：根据标签的<strong> class 属性</strong>返回元素节点的<strong>数组</strong></li>\n</ul>\n<h4 id=\"124-特殊集合元素节点数组\"><a class=\"anchor\" href=\"#124-特殊集合元素节点数组\">#</a> 1.2.4 特殊集合（元素节点数组）</h4>\n<ul>\n<li><code>document.anchors</code> ：所有带 <code>name</code>  属性的 <code>&lt;a&gt;</code>  元素</li>\n<li><code>document.forms</code> ：所有 <code>&lt;form&gt;</code>  元素</li>\n<li><code>document.images</code> ：所有 <code>&lt;img&gt;</code>  元素</li>\n<li><code>document.links</code> ：所有带 <code>href</code>  属性的 <code>&lt;a&gt;</code>  元素</li>\n</ul>\n<h4 id=\"125-dom-兼容性检测\"><a class=\"anchor\" href=\"#125-dom兼容性检测\">#</a> 1.2.5 DOM 兼容性检测</h4>\n<h1 id=\"二十三-json\"><a class=\"anchor\" href=\"#二十三-json\">#</a> 二十三、 JSON</h1>\n<p>JSON（JavaScript Object Notation）：JavaScript 对象标准（JSON 的格式借用了 JavaScript 的对象形式）</p>\n<p>JSON 是一种<strong>数据格式</strong>，而不是编程语言</p>\n<h2 id=\"1-语法\"><a class=\"anchor\" href=\"#1-语法-2\">#</a> 1. 语法</h2>\n<ul>\n<li>\n<p>JSON 借用了 JavaScript 的对象格式，以<strong>字符串</strong>为<strong>键</strong></p>\n</li>\n<li>\n<p>JSON 支持 3 种类型的<strong>值</strong></p>\n<ul>\n<li><strong>简单值</strong>：如字符串、数值、布尔值和 null（undefined 不可）</li>\n<li><strong>对象</strong></li>\n<li><strong>数组</strong></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"11-简单值\"><a class=\"anchor\" href=\"#11-简单值\">#</a> 1.1 简单值</h3>\n<p>无需多言</p>\n<h3 id=\"12-对象\"><a class=\"anchor\" href=\"#12-对象\">#</a> 1.2 对象</h3>\n<p>和 JavaScript 有细微不同。</p>\n<ul>\n<li>\n<p>JavaScript：键可以不用 <code>&quot;&quot;</code>  包裹</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> person<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    name<span class=\"token operator\">:</span> <span class=\"token string\">'Jake'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    age<span class=\"token operator\">:</span> <span class=\"token number\">16</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>JSON：键必须用 <code>&quot;&quot;</code>  包裹</p>\n<pre class=\" language-language-json\"><code class=\"language-language-json\">&#123;\n    \"name\": \"Jake\",\n    \"age\": 16\n&#125;\n</code></pre>\n</li>\n</ul>\n<h3 id=\"13-数组\"><a class=\"anchor\" href=\"#13-数组\">#</a> 1.3 数组</h3>\n<p>无需多言</p>\n<h2 id=\"2-解析与序列化\"><a class=\"anchor\" href=\"#2-解析与序列化\">#</a> 2. 解析与序列化</h2>\n<p>JSON 可以直接被解析为可用的 JavaScript 对象，然后调用 <code>Object</code>  的语法</p>\n<h3 id=\"21-json-对象\"><a class=\"anchor\" href=\"#21-json对象\">#</a> 2.1 JSON 对象</h3>\n<p>JSON 全局对象有两个方法： <code>stringify()</code>  和 <code>parse()</code></p>\n<ul>\n<li>\n<p><code>JSON.stringify(obj)</code> ：将 JavaScript 对象转为 JSON<strong> 字符串</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> a<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span><span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">,</span><span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//\"[[1,2,3],[4,5,6],[7,null,9]]</span></pre></td></tr></table></figure><ul>\n<li>在 <code>Array</code>  中， <code>undefined</code>  会被转为 <code>null</code></li>\n</ul>\n<p>如果是 <code>object</code>  对象</p>\n<ul>\n<li>所有函数、原型都会被<strong>省略</strong></li>\n<li>值为 <code>undefined</code>  的属性会被<strong>跳过</strong></li>\n</ul>\n</li>\n<li>\n<p><code>JSON.parse(str)</code> ：将 JSON<strong> 字符串</strong>转为 JavaScript 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> b<span class=\"token operator\">=</span><span class=\"token string\">\"[[1,2,3],[4,5,6],[7,8,9]]\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//[ [ 1, 2, 3 ], [ 4, 5, 6 ], [ 7, 8, 9 ] ]</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Array</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"22-jsonstringify-补充\"><a class=\"anchor\" href=\"#22-jsonstringify补充\">#</a> 2.2  <code>JSON.stringify</code>  补充</h3>\n<p>其实 <code>JSON.stringify()</code>  还可以接受 2 个参数</p>\n<ul>\n<li>\n<p>参数 2：过滤器</p>\n<ul>\n<li>\n<p>如果是<strong>数组</strong>，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> book<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    title<span class=\"token operator\">:</span> <span class=\"token string\">\"宁理大神1996漂流记\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    authors<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"宁理大神1996\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"nitgod1996\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    edition<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    year<span class=\"token operator\">:</span> <span class=\"token number\">2017</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> jsonText<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token punctuation\">[</span><span class=\"token string\">\"title\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;\"title\":\"宁理大神 1996 漂流记\",\"year\":2017&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>如果是<strong>函数</strong>，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> jsonText1<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"authors\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">','</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"year\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token number\">5000</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token keyword\">case</span> <span class=\"token string\">\"edition\"</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>                <span class=\"token keyword\">return</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 值设为 undefined 会跳过属性</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>                <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;\"title\":\"宁理大神 1996 漂流记\",\"authors\":\"宁理大神 1996,nitgod1996\",\"year\":5000&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>参数 3：字符串缩进。</p>\n<ul>\n<li>\n<p>如果是<strong>数值</strong>，则是每级的缩进的<strong>空格数</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> jsonText<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;\"title\":\"宁理大神 1996 漂流记\",\"year\":2017&#125;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220427202739405.png\" alt=\"image-20220427202739405\"></p>\n</li>\n<li>\n<p>如果是<strong>字符串</strong>。字符串缩进 <code>JSON.parse</code>  不可还原，会报错</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> jsonText<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">,</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span><span class=\"token string\">'--'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//&#123;\"title\":\"宁理大神 1996 漂流记\",\"year\":2017&#125;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220427202854005.png\" alt=\"image-20220427202854005\"> 每级 + 1</p>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"23-tojson\"><a class=\"anchor\" href=\"#23-tojson\">#</a> 2.3  <code>toJSON()</code></h3>\n<p>每个 JavaScript 对象都有一个 <code>toJSON()</code>  函数，类似 <code>toString()</code> ，在调用 <code>JSON.stringify()</code>  时返回的就是对象的 <code>toJSON()</code>  的返回值。</p>\n<p>重写 <code>toJSON</code>  可以<strong>自定义</strong> <code>JSON.stringify()</code> （通过第二个参数也可以），如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> book<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    title<span class=\"token operator\">:</span> <span class=\"token string\">\"宁理大神1996漂流记\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    authors<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"宁理大神1996\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"nitgod1996\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    edition<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    year<span class=\"token operator\">:</span> <span class=\"token number\">2017</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token function-variable function\">toJSON</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>title<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        <span class=\"token comment\">// 或者 return &#123;\"title\": this.title&#125;;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li><code>toJSON()</code>  也可以和<strong>第 2 个参数</strong>、<strong>第三个参数</strong>混用（基于 <code>toJSON()</code>  的返回）</li>\n</ul>\n<h3 id=\"24-jsonparse-补充\"><a class=\"anchor\" href=\"#24-jsonparse补充\">#</a> 2.4  <code>JSON.parse</code>  补充</h3>\n<p><code>JSON.parse()</code>  也可以接收一个额外的参数，类似 <code>JSON.stringify</code>  的第二个参数的函数形式，为了区分，我们把 <code>stringify</code>  的称为<strong>替代函数</strong>， <code>parse</code>  的称为<strong>还原函数</strong>。</p>\n<p>例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> book<span class=\"token operator\">=</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    title<span class=\"token operator\">:</span> <span class=\"token string\">\"宁理大神1996漂流记\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    authors<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"宁理大神1996\"</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token string\">\"nitgod1996\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    edition<span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    year<span class=\"token operator\">:</span> <span class=\"token number\">2017</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">let</span> jsonText<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>book<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token comment\">// 下面还原</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token keyword\">let</span> bookCopy<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span>jsonText<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key<span class=\"token punctuation\">,</span>value</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>key<span class=\"token operator\">===</span><span class=\"token string\">\"year\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        <span class=\"token keyword\">return</span> <span class=\"token number\">2022</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    <span class=\"token keyword\">return</span> value<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>bookCopy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220427204612459.png\" alt=\"image-20220427204612459\"></p>\n<p>此外，对于设置了<strong>缩进</strong>的，如果缩进是<strong>空格</strong>，那么 <code>JSON.parse</code>  仍可还原，否则会报错</p>\n<h1 id=\"二十四-网络请求与远程资源\"><a class=\"anchor\" href=\"#二十四-网络请求与远程资源\">#</a> 二十四、 网络请求与远程资源</h1>\n<blockquote>\n<p>本章会全面介绍 XMLHttpRequest，但它实际上是<strong>过时</strong>的产物。</p>\n<p>实际开发中，应该尽可能使用 fetch ()</p>\n</blockquote>\n<p>Ajax：Asynchronous JavaScript and XML，即异步 JavaScript 加 XML，或者说异步网络请求</p>\n<p>最早由 XMLHttpRequest 对象（简称 XHR）实现，不过因为太复杂，现已过时</p>\n<h2 id=\"1-xmlhttprequest-对象\"><a class=\"anchor\" href=\"#1-xmlhttprequest对象\">#</a> 1. XMLHttpRequest 对象</h2>\n<h3 id=\"11-xhr-使用步骤\"><a class=\"anchor\" href=\"#11-xhr使用步骤\">#</a> 1.1 XHR 使用步骤</h3>\n<ol>\n<li>\n<p>创建一个 XHR 对象</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> xhr<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">XMLHttpRequest</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p>使用 <code>.open()</code>  定义请求参数</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"get\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"beijing.json\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数 1：请求类型。get/post</li>\n<li>参数 2：请求 url。\n<ul>\n<li><strong>只能访问同源 url。也就是域名相同、端口相同、协议相同</strong>，即发出请求的地址和响应地址属于同一个根目录。简单点说就是只能访问<strong>本地数据</strong></li>\n<li>url 需要用 <code>URI</code>  编码，使用 <code>encodeURI()</code>  函数。（只有字母和数字则可以不用）</li>\n</ul>\n</li>\n<li>参数 3：是否异步请求。同步请求会等待服务器响应后才继续执行 JavaScript 代码</li>\n</ul>\n</li>\n<li>\n<p>使用 <code>.send()</code>  发送请求</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li>参数：必填。请求体发送的数据。如果没有则传 <code>null</code></li>\n</ul>\n</li>\n<li>\n<p>返回的所有信息都在 <code>xhr</code>  中</p>\n</li>\n</ol>\n<h3 id=\"12-xhr-的属性与方法\"><a class=\"anchor\" href=\"#12-xhr的属性与方法\">#</a> 1.2 XHR 的属性与方法</h3>\n<p>上面说过，服务器返回的信息全都保存在 <code>xhr</code>  内，其实也就是保存在了 <code>xhr</code>  的各个属性上</p>\n<ul>\n<li>\n<p><code>response</code> ：响应体返回的内容</p>\n</li>\n<li>\n<p><code>responseText</code> ：返回的文本格式内容</p>\n</li>\n<li>\n<p><code>responseXML</code> ：返回的 XML 格式内容</p>\n</li>\n<li>\n<p>★ <code>status</code> ：HTTP 响应状态码</p>\n<ul>\n<li>1xx：指示信息–表示请求已接收，继续处理</li>\n<li>2xx：成功–表示请求已被成功接收、理解、接受</li>\n<li>3xx：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT0lRTklODclOEQlRTUlQUUlOUElRTUlOTAlOTEmYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\">重定向</span>–信息不完整需要进一步补充\n<ul>\n<li>304：表示资源未修改，直接从浏览器缓存中拿取。（也表示响应有效）</li>\n</ul>\n</li>\n<li>4xx：<strong>客户端错误</strong>–请求有语法错误或请求无法实现</li>\n<li>5xx：<strong>服务器端错误</strong>–服务器未能实现合法的请求</li>\n</ul>\n<p>主要记这些就行了</p>\n</li>\n<li>\n<p><code>statusText</code> ：HTTP 响应状态描述。在跨浏览器的情况下不可靠</p>\n</li>\n<li>\n<p><code>readyState</code> ：当前 <code>xhr</code>  对象处于什么阶段</p>\n<ul>\n<li>0：未初始化。尚未调用 <code>open()</code>  方法</li>\n<li>1：已打开。已调用 <code>open()</code>  但未调用 <code>send()</code>  方法</li>\n<li>2：已发送。已调用 <code>send()</code> ，但未收到响应</li>\n<li>3：接受中。已收到部分响应</li>\n<li>4：完成。收到所有响应</li>\n</ul>\n</li>\n<li>\n<p><code>onreadystatechange</code> ：每当 <code>readyState</code>  变化状态，都会触发一次 <code>readystatechange</code>  事件。我们可以通过定义 <code>xhr.onreadystatechange</code>  设置每个阶段应该发生什么的函数，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onreadystatechange</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>readyState<span class=\"token operator\">===</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        </pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>open(method,url,async,username,password)</code> ：打开请求（定义请求）。</p>\n<ul>\n<li><code>method</code> ：HTTP 请求方法，POST、GET 和 HEAD，大小写不敏感。</li>\n<li><code>url</code> ：请求的  <code>URL</code>  字符串，仅支持<strong>同源</strong>请求。</li>\n<li><code>async</code> ：是否为异步方式，默认为  <code>true</code> 。如果为 false，当状态改变时会立即调用 onreadystatechange 属性指定的回调函数。</li>\n<li><code>username</code> ：（可选）如果服务器需要验证，该参数指定用户名，如果未指定，当服务器需要验证时，会弹出验证窗口。</li>\n<li><code>password</code> ：（可选）验证信息中的密码部分，如果用户名为空，则该值将被忽略。</li>\n</ul>\n</li>\n<li>\n<p><code>send()</code> ：发送请求</p>\n</li>\n<li>\n<p><code>abort()</code> ：终止异步请求</p>\n</li>\n</ul>\n<h3 id=\"13-http-协议格式\"><a class=\"anchor\" href=\"#13-http协议格式\">#</a> 1.3 HTTP 协议格式</h3>\n<h4 id=\"131-http-协议请求格式\"><a class=\"anchor\" href=\"#131-http协议请求格式\">#</a> 1.3.1 HTTP 协议请求格式</h4>\n<ul>\n<li>\n<p><strong>请求行</strong>：请求方式 + 请求 url + 请求协议 / 版本。（<em>也可以算是请求头里</em>）</p>\n<ul>\n<li>请求方式：\n<ul>\n<li>GET：请求参数在请求行中，url 有长度限制</li>\n<li>POST：请求参数在请求体中，url 无长度限制</li>\n<li>GET /nit/hello HTTP/1.1</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>请求头</strong>：</p>\n<ul>\n<li><code>Accept</code> ：浏览器可以（想）解析的格式</li>\n<li><code>Accept-Encoding</code> ：浏览器可接受压缩编码类型。</li>\n<li><code>Accept-Language</code> ：浏览器可接受的语言</li>\n<li><code>Connection</code> ：与服务器的连接类型\n<ul>\n<li><code>keep-alive</code> -- 连接一直保持（不会一次传输结束就释放连接）</li>\n</ul>\n</li>\n<li><code>Cookie</code> ：页面中设置的 Cookie</li>\n<li><code>Host</code> ：发送请求的页面所在<strong>域</strong>（主机）</li>\n<li><code>Referer</code> ：发送请求页面的<strong> URI</strong>。告诉服务器我从哪里来 (来源是超链接所在的 html 页面)<br>\n 作用：1. 防盗链 2. 统计作用</li>\n<li><code>User-Agent</code> ：用户代理（浏览器客户端）版本信息，服务器可根据不同浏览器信息...</li>\n</ul>\n<p>例：<em>把请求行算在请求头</em></p>\n<pre class=\" language-language-http\"><code class=\"language-language-http\">GET url此处太长略 HTTP/1.1\nHost: static.firefoxchina.cn\nUser-Agent: Mozilla/5.0 (Windows NT 6.1; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0\nAccept: image/webp,*/*\nAccept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2\nAccept-Encoding: gzip, deflate, br\nConnection: keep-alive\nReferer: https://home.firefoxchina.cn/\nCookie:Hm_lvt_dd4738b5fb302cb062ef19107df5d2e4=1598241941;Hm_lpvt_dd4738b5fb302cb062ef19107df5d2e4=1598241941\n</code></pre>\n</li>\n<li>\n<p><strong>请求空行</strong>：空行，用于区分请求头和请求体</p>\n</li>\n<li>\n<p><strong>请求体</strong>：</p>\n</li>\n</ul>\n<hr>\n<p>可以通过以下函数设置<strong>请求头</strong>数据：</p>\n<ul>\n<li><code>xhr.setRequestHeader(key,value)</code> ：设置请求头</li>\n</ul>\n<h4 id=\"132-http-协议响应格式\"><a class=\"anchor\" href=\"#132-http协议响应格式\">#</a> 1.3.2 HTTP 协议响应格式</h4>\n<ul>\n<li><strong>响应行</strong>：协议 / 版本 + 响应状态码 + 状态码描述\n<ul>\n<li><strong>响应状态码</strong>：\n<ul>\n<li>100+：服务器接收消息未完成，等待一段时间后发送 1xx</li>\n<li>200+：200 - 成功</li>\n<li>300+：\n<ul>\n<li>302 - 重定向（迭代查找服→A→服务器→C）</li>\n<li>304 - 访问缓存</li>\n</ul>\n</li>\n<li>400+：请求错误\n<ul>\n<li>404 - 访问路径没有对应资源</li>\n<li>405 - 请求方式（服务器端）没有对应 doXxx 方法</li>\n</ul>\n</li>\n<li>500+：服务器端错误\n<ul>\n<li>500 - 服务器内部异常（如 1/0 异常）</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>​\t如 <code>HTTP/1.1 200 OK</code></p>\n<ul>\n<li>\n<p><strong>响应头</strong>：</p>\n<ul>\n<li><code>Content-Type</code> ：服务器告诉客户端本次响应体数据格式以及编码格式（解决乱码问题）</li>\n<li><code>Content-disposition</code> ：服务器告诉客户端以什么形式打开响应体数据\n<ul>\n<li><code>in-line</code> ：在当前页面打开（默认）</li>\n<li><code>attachment;filename=xxx;</code>  以附件形式打开响应体。文件下载</li>\n</ul>\n</li>\n</ul>\n<p>例：</p>\n<pre class=\" language-language-http\"><code class=\"language-language-http\">HTTP/1.1 200 OK\nDate: Mon, 24 Aug 2020 04:05:50 GMT\nContent-Type: image/jpeg\nContent-Length: 30012\nConnection: keep-alive\nServer: AliyunOSS\nx-oss-request-id: 5F432919D6D43930376801E5\nAccept-Ranges: bytes\nETag: \"E7D17141FED40D822B443DA50DCBFB52\"\nLast-Modified: Mon, 24 Aug 2020 02:42:00 GMT\nx-oss-object-type: Normal\nx-oss-hash-crc64ecma: 14682076664506887655\nx-oss-storage-class: Standard\nContent-MD5: 59FxQf7UDYIrRD2lDcv7Ug==\nx-oss-server-time: 1\nx-cc-via: 34_dx-jiangsu-huaian-4-cache-1[H,3]\n</code></pre>\n</li>\n<li>\n<p><strong>响应空行</strong>：</p>\n</li>\n<li>\n<p><strong>响应体</strong>：服务器显示的 html 文档</p>\n</li>\n</ul>\n<hr>\n<p>可以通过以下函数获取<strong>响应头</strong>数据：</p>\n<ul>\n<li><code>xhr.getRequestHeader(key)</code> ：获取指定的响应头数据</li>\n<li><code>xhr.getAllRequestHeader()</code> ：获取全部响应头数据</li>\n</ul>\n<h3 id=\"14-getpost-请求方法\"><a class=\"anchor\" href=\"#14-getpost请求方法\">#</a> 1.4 GET/POST 请求方法</h3>\n<ul>\n<li>GET 请求：在 <code>xhr.open()</code>  中将第一个参数设为 <code>get</code>\n<ul>\n<li><code>url</code>  中的所有键 / 值都应该用 <code>encodeURIComponent()</code>  编码。（ <code>encodeURIComponent</code>  会编译 <code>httpURI</code>  的预留符号， <code>encodeURI</code>  不会）</li>\n<li><code>url</code>  中的所有键值对必须以 <code>&amp;</code>  分隔</li>\n<li>键值对最前面应该用 <code>?</code>  和路径分隔</li>\n</ul>\n</li>\n<li>POST 请求：在 <code>xhr.open()</code>  中将第一个参数设为 <code>post</code>\n<ul>\n<li>区别于 <code>get</code>  把提交数据直接放在 <code>url</code>  中， <code>post</code>  将提交数据通过 <code>send()</code>  发送。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"15-xhr-level-2这些就不记了\"><a class=\"anchor\" href=\"#15-xhr-level-2这些就不记了\">#</a> 1.5 XHR level 2（这些就不记了）</h3>\n<h2 id=\"2-进度事件\"><a class=\"anchor\" href=\"#2-进度事件\">#</a> 2. 进度事件</h2>\n<p><code>xhr</code>  在不同的进度会触发不同的函数（类似 vue 的生命周期），主要有如下 6 个进度事件</p>\n<ul>\n<li><code>loadstart</code> ：在接收到响应的第一个字节时触发</li>\n<li><code>progress</code> ：在接收响应期间<strong>反复</strong>触发</li>\n<li><code>error</code> ：在请求出错时触发</li>\n<li><code>abort</code> ：在调用 <code>abort()</code>  让请求终止时触发</li>\n<li><code>load</code> ：在成功接收完响应时触发</li>\n<li><code>loadend</code> ：在通信完成时，且在前三者之后，触发</li>\n</ul>\n<p>一般通过 <code>on+事件名</code> 的属性设置事件函数。函数接收一个 <code>event</code>  参数，其 <code>target</code>  属性是 <code>xhr</code>  的实例，可以获取 <code>xhr</code>  的所有属性和方法。但不是所有浏览器都支持这个 <code>event</code>  对象</p>\n<h3 id=\"21-load-事件\"><a class=\"anchor\" href=\"#21-load事件\">#</a> 2.1 load 事件</h3>\n<blockquote>\n<p>load 事件在响应接收完成后触发，这样就不用检查 readyState 属性了</p>\n</blockquote>\n<p>通过 <code>xhr.onload</code>  属性设置该事件，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onload</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token operator\">>=</span><span class=\"token number\">200</span> <span class=\"token operator\">&amp;&amp;</span> xhr<span class=\"token punctuation\">.</span>status<span class=\"token operator\">&lt;</span><span class=\"token number\">300</span><span class=\"token punctuation\">)</span><span class=\"token operator\">||</span>xhr<span class=\"token punctuation\">.</span>status<span class=\"token operator\">===</span><span class=\"token number\">304</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token comment\">//...</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>只要从服务器收到响应，<strong>无论状态码是什么</strong>，都会触发 <code>load</code>  事件。所以说还得检查 <code>status</code>  属性才能确定<strong>数据是否有效</strong></p>\n<h3 id=\"22-progress-事件\"><a class=\"anchor\" href=\"#22-progress事件\">#</a> 2.2 progress 事件</h3>\n<blockquote>\n<p>在浏览器接收数据期间，这个时间会反复触发。每次触发时， <code>onprogress</code>  时间处理程序</p>\n</blockquote>\n<p><code>onprogress</code>  的 <code>event</code>  除了 <code>target</code>  属性，还有 3 个额外属性：</p>\n<ul>\n<li><code>lengthComputable</code> ：boolean，进度信息是否可用</li>\n<li><code>position</code> ：目前接收到的字节数</li>\n<li><code>totalSize</code> ：响应 <code>Content-Length</code>  头定义的总字节数</li>\n</ul>\n<p>&lt;font color=red&gt; 利用这些信息给用户提供<strong>进度条</strong> &lt;/font&gt;</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>xhr<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onprogress</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> progressBar<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"status\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>lengthComputable<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        progressBar<span class=\"token operator\">=</span><span class=\"token string\">\"已接收：\"</span><span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>position<span class=\"token operator\">+</span><span class=\"token string\">\"总共有：\"</span><span class=\"token operator\">+</span>event<span class=\"token punctuation\">.</span>totalSize<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"3-跨域资源共享\"><a class=\"anchor\" href=\"#3-跨域资源共享\">#</a> 3. 跨域资源共享</h2>\n<p>可参考：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAxMTE0NTM2NA==\">https://segmentfault.com/a/1190000011145364</span></p>\n<p><strong>什么是跨域？</strong></p>\n<p>浏览器从一个域名的网页去请求另一个域名的资源时，域名、端口、协议任一不同，都是跨域。</p>\n<p><strong>为什么会有跨域？</strong></p>\n<p>在前后端分离的模式下，前后端的域名是不一致的，此时就会发生跨域访问问题。此外，有时候也需要获取别的在线资源</p>\n<p><strong>为什么 ajax 不能跨域？</strong></p>\n<p>因为浏览器的<strong>同源策略（SOP）</strong>。他是浏览器最核心也最基本的安全功能，如果缺少了同源策略，浏览器很容易受到 XSS、CSFR 等攻击。所谓同源是指 &quot;协议 + 域名 + 端口&quot; 三者相同，即便两个不同的域名指向同一个 ip 地址，也非同源。</p>\n<h3 id=\"31-cors-实现跨域\"><a class=\"anchor\" href=\"#31-cors实现跨域\">#</a> 3.1 CORS 实现跨域</h3>\n<p>跨域资源共享（CORS，Cross-Origin Resource Sharing）定义了浏览器与服务器如何实现跨域通信。其基本思路是：<em>使用自定义的 HTTP 头部允许浏览器和服务器相互了解</em>。</p>\n<ul>\n<li>对于简单请求，如 GET/POST，在跨域请求发送时会有一个额外的头部叫 <code>Origin</code> ，其包含发送请求的页面的源（协议 + 域名 + 端口），如 <code>Origin: http://127.0.0.1:5501</code> 。而在服务器端如果允许跨域请求，则会有一个 <code>Access-Control-Allow-Origin</code> ，包含允许响应的源。如果与请求源一致，则正常响应请求。<strong>也就是说，这种方法需要在后端设置 <code>Access-Control-Allow-Origin</code> ，且不能访问别人的在线资源</strong></li>\n<li>非简单请求暂时就不说了</li>\n</ul>\n<p>为了区分，通常<strong>同源请求</strong> <code>url</code>  用<strong>相对 URL</strong>，<strong>跨域请求</strong>用<strong>绝对 URL</strong></p>\n<p>此外，跨域请求有以下限制：</p>\n<ul>\n<li>不能使用 <code>setRequestHeader()</code>  设置自定义头部</li>\n<li>不能发送和接受<strong> cookie</strong></li>\n<li><code>getAllResponseHeaders()</code>  始终返回空字符串</li>\n</ul>\n<h3 id=\"32-jsonp-实现跨域\"><a class=\"anchor\" href=\"#32-jsonp实现跨域\">#</a> 3.2 JSONP 实现跨域</h3>\n<blockquote>\n<p>跨域原理： 通常为了减轻 web 服务器的负载，我们把 js、css，img 等静态资源分离到另一台独立域名的服务器上，在 html 页面中再通过相应的标签从不同域名下加载静态资源，而被浏览器允许，基于此原理，我们可以通过动态创建 script，再请求一个带参网址实现跨域通信。</p>\n</blockquote>\n<h4 id=\"原生-javascript-实现-jsonp\"><a class=\"anchor\" href=\"#原生javascript实现jsonp\">#</a> 原生 JavaScript 实现 jsonp</h4>\n<p>他的原理是通过 <code>&lt;script&gt;</code>  的 <code>src</code>  属性获取在线资源，</p>\n<p>实现如下：</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> script<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"script\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    script<span class=\"token punctuation\">.</span>src<span class=\"token operator\">=</span><span class=\"token string\">\"https://restapi.amap.com/v3/direction/walking?origin=120.050000,30.232000&amp;destination=120.039000,30.227500&amp;extensions=all&amp;output=json&amp;key=873b8484a133897729b7cf7f388a4acc&amp;callback=handleResponse\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">insertBefore</span><span class=\"token punctuation\">(</span>script<span class=\"token punctuation\">,</span>document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>firstChild<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token comment\">&lt;!-- 或者直接 --></span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">handleResponse</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">res</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre></pre></td></tr><tr><td data-num=\"17\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>https://restapi.amap.com/v3/direction/walking?origin=120.050000,30.232000&amp;destination=120.039000,30.227500&amp;extensions=all&amp;output=json&amp;key=873b8484a133897729b7cf7f388a4acc&amp;callback=handleResponse<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p><code>callback</code>  回调函数是页面响应之后调用的函数，<strong>参数就是响应的数据</strong></p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220425213343895.png\" alt=\"image-20220425213343895\"></p>\n<hr>\n<p>实际上，所有拥有 <code>src</code>  属性的标签（如 <code>&lt;script&gt;</code> 、 <code>&lt;img&gt;</code> 、 <code>&lt;iframe&gt;</code> ）都拥有跨域功能。</p>\n<p>如<strong>图片探测</strong></p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span><span class=\"token punctuation\">></span></span><span class=\"token script\"><span class=\"token language-javascript\"></span></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">var</span> img <span class=\"token operator\">=</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">createElement</span><span class=\"token punctuation\">(</span><span class=\"token string\">'img'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    img<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> <span class=\"token string\">'img/png'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 传参并指定回调执行函数为 onBack</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    img<span class=\"token punctuation\">.</span>src <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png?callback=onBack\"</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    document<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span><span class=\"token function\">appendChild</span><span class=\"token punctuation\">(</span>img<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token comment\">// 回调执行函数</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">function</span> <span class=\"token function\">onBack</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">1223</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure><p>页面显示如下：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220425204621488.png\" alt=\"image-20220425204621488\"></p>\n<p><strong>但是图片探测没有 callback 功能</strong></p>\n<h4 id=\"使用-jquery-的-jsonp\"><a class=\"anchor\" href=\"#使用jquery的jsonp\">#</a> 使用 jQuery 的 jsonp</h4>\n<h4 id=\"总结\"><a class=\"anchor\" href=\"#总结\">#</a> 总结</h4>\n<p>不过<strong> JSONP</strong> 有诸多缺点：</p>\n<ul>\n<li>容易受到攻击。</li>\n<li>不好确定请求是否失败</li>\n</ul>\n<p>此外，对于<strong> JSONP</strong> 的跨域请求，有可能被 CORB 所阻止，如下</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220421200915934.png\" alt=\"image-20220421200915934\"></p>\n<blockquote>\n<p><strong>CORB</strong> 是一个新的 web 平台安全功能，阻止某些不安全的跨域响应。</p>\n<p>例如：它将清除一个从 &lt;script&gt; 或者 &lt;img&gt; 标签发起的跨源 text/html 响应。将响应的内容，用空值代替。这是网站隔离 (Site Isolation) 非常重要的一部分.</p>\n<p>因为在<strong>同源策略</strong>浏览器下通常会阻止一个网站读取其它源的任意网络资源。但是，在实际情况中，实施同源策略并非只是简单阻止所有的跨域资源.</p>\n<p>浏览器对于有些情况是允许加载跨域资源的，例如 &lt;img&gt; , &lt;script&gt; 标签，它们可以加载跨域的资源。允许加载跨域资源，意味着存在着安全隐患.</p>\n<p><strong>CORB</strong> 可以减少<strong> XSSI</strong> 攻击（它通过 <code>&lt;script&gt;</code>  指向一个不是 JavaScript 代码文件的目标资源，并且让浏览器执行.）</p>\n</blockquote>\n<h2 id=\"4-fetch-api更先进的-ajax\"><a class=\"anchor\" href=\"#4-fetch-api更先进的ajax\">#</a> 4. Fetch API（更先进的 ajax）</h2>\n<blockquote>\n<p>Fetch API 能够执行 XMLHttpRequest 对象的所有任务，但更容易使用，接口也更现代化，能够在 Web 工作线程等现代 Web 工具中使用</p>\n<p>XHR 可以选择异步，而 Fetch<strong> 必须是异步</strong></p>\n</blockquote>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/v2-eb392ec883659c506cbe249b8949e73c_720w.jpg\" alt=\"img\"></p>\n<h3 id=\"41-基本用法\"><a class=\"anchor\" href=\"#41-基本用法\">#</a> 4.1 基本用法</h3>\n<ul>\n<li>\n<p><strong>创建</strong>：返回一个 Promise 期约</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//Promise &lt;pending></span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>获取响应</strong>：通过 <code>then()</code>  处理响应</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>status<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 状态码</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>redirected<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 获取响应数据</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或者也可以展开</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>response<span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span><span class=\"token comment\">// 获取响应数据</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>处理失败</strong>： <code>then()</code>  的第二个参数（处理错误的函数）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>违反 CORS、无网络连接、HTTPS 错配及其他浏览器 / 网络问题都会导致期约被拒绝</p>\n</li>\n</ul>\n<hr>\n<p><strong>关于 fetch 函数</strong></p>\n<ul>\n<li><code>fetch(url,init)</code> ：发送请求\n<ul>\n<li><code>url</code> ：必选，默认发送 get 请求</li>\n<li><code>init</code> ：可选，请求的详细设置，以 <code>&#123;&#125;</code>  的形式\n<ul>\n<li><code>body</code> ：请求体</li>\n<li><code>cache</code> ：缓存</li>\n<li><code>method</code> ：请求方式，默认 get</li>\n<li>...</li>\n</ul>\n</li>\n<li><code>return</code> ：期约解决完后返回一个 <code>Response</code>  实例，是获取的响应数据。可以用 <code>.then((res)=&gt;&#123;&#125;)</code>  处理</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"42-常见-fetch-请求模式\"><a class=\"anchor\" href=\"#42-常见fetch请求模式\">#</a> 4.2 常见 Fetch 请求模式</h3>\n<p>和 XHR 一样， <code>fetch()</code>  既可以发送数据，也可以接收数据。可通过 <code>init</code>  属性发送数据</p>\n<ul>\n<li>\n<p><strong>发送 JSON 数据</strong>：放在请求体内</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> payload<span class=\"token operator\">=</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    foo<span class=\"token operator\">:</span> <span class=\"token string\">'bar'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> jsonHeaders<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/send-me-json'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    body<span class=\"token operator\">:</span> payload<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    headers<span class=\"token operator\">:</span> jsonHeaders</pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>发送参数</strong>：请求体内</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> payload<span class=\"token operator\">=</span><span class=\"token string\">'foo=bar&amp;baz=qux'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> paramHeaders<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/x-www-form-urlencoded;charset=UTF-8'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/send-me-params'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    body<span class=\"token operator\">:</span> payload<span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    headers<span class=\"token operator\">:</span> paramHeaders</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>发送文件</strong>：请求体。通过 <code>FormData</code>  对象实现</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> imageFormData<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> imageInput<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input[type='file']\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>imageFormData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span>imageInput<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/img-upload'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    body<span class=\"token operator\">:</span> imageFormData</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>或者也可以多个文件</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> imageFormData<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">FormData</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> imageInput<span class=\"token operator\">=</span>document<span class=\"token punctuation\">.</span><span class=\"token function\">querySelector</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input[type='file'][multiple]\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>imageInput<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    imageFormData<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'image'</span><span class=\"token punctuation\">,</span>imageInput<span class=\"token punctuation\">.</span>files<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/img-upload'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'POST'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    body<span class=\"token operator\">:</span> imageFormData</pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>加载 Blob 文件</strong></p>\n</li>\n<li>\n<p><strong>发送跨源请求</strong>：因为同源策略，不同源的请求，要包含 CORS 头部才能保证浏览器收到响应。但如果<strong>不需要访问响应</strong>，可以发送 <code>no-cors</code> ，此时 <code>type</code>  属性为 <code>opaque</code> ，因此<strong>无法读取响应内容</strong>，一般作为探测请求或将响应缓存起来以后使用。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>mode<span class=\"token operator\">:</span> <span class=\"token string\">'no-cors'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//opaque</span></pre></td></tr></table></figure><p>&lt;font color=red&gt;<strong> 或者像上面一样使用 jsonp</strong>&lt;/font&gt;</p>\n</li>\n<li>\n<p><strong>中断请求</strong>：当希望停止传输大文件时，可以使用 <code>AbortController</code>  的 <code>abort</code>  方法终止传输</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> abortController<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">AbortController</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'wikipedia.zip'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>signal<span class=\"token operator\">:</span> abortController<span class=\"token punctuation\">.</span>signal<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'aborted!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 中断请求会导致期约拒绝</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">//10 毫秒后中断请求</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>abortController<span class=\"token punctuation\">.</span><span class=\"token function\">abort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220426110922900.png\" alt=\"image-20220426110922900\"></p>\n</li>\n</ul>\n<h3 id=\"43-headers-对象\"><a class=\"anchor\" href=\"#43-headers对象\">#</a> 4.3 Headers 对象</h3>\n<p><code>Headers</code>  是每个 <code>Request</code>  实例都包含的对象，可以通过 <code>Request.prototype.headers</code>  访问，和 <code>map</code>  与 <code>Object</code>  均有相似之处。</p>\n<p>我们发送 <code>fetch</code>  请求时通常会定义 <code>Headers</code>  属性，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> jsonHeaders<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/send-me-json'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    headers<span class=\"token operator\">:</span> jsonHeaders</pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>也可以直接以 <code>&#123;&#125;</code>  的形式</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/send-me-json'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><hr>\n<p>下面讲一下 Headers 对象的具体用法</p>\n<ul>\n<li>\n<p><strong>创建</strong>：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> headers<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 空参</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> headers1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span> <span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以 object 实例初始化</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">let</span> headers2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Headers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'Content-Type'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'application/json'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token punctuation\">[</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">]</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 以二维数组初始化（和 map 一样）</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>设置键</strong>（新增 / 更新）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bar'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新增 / 更新</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo1'</span><span class=\"token punctuation\">,</span><span class=\"token string\">'bar1'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 新增键值对</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>检查键</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>获取值</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>删除键值对</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n<li>\n<p><strong>返回键 / 值 / 键值对</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>headers<span class=\"token punctuation\">.</span><span class=\"token function\">entries</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>但不是所有 HTTP 头部都可以被客户端修改，详细看 P732</p>\n<h3 id=\"44-request-对象\"><a class=\"anchor\" href=\"#44-request对象\">#</a> 4.4 Request 对象</h3>\n<p>用来获取资源的请求的接口</p>\n<p><code>Request</code>  的构造函数和 <code>fetch</code>  函数很类似</p>\n<ul>\n<li>\n<p><code>new Request(url,init)</code> ：发送请求</p>\n<ul>\n<li><code>url</code> ：必选，默认发送 get 请求</li>\n<li><code>init</code> ：可选，请求的详细设置，以 <code>&#123;&#125;</code>  的形式\n<ul>\n<li><code>body</code> ：请求体</li>\n<li><code>cache</code> ：缓存</li>\n<li><code>method</code> ：请求方式，默认 get</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>创建</strong>：默认 get 请求</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220426150623168.png\" alt=\"image-20220426150623168\"></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    method<span class=\"token operator\">:</span> <span class=\"token string\">'post'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220426151025753.png\" alt=\"image-20220426151025753\"></p>\n</li>\n</ul>\n<h4 id=\"克隆-request-实例\"><a class=\"anchor\" href=\"#克隆request实例\">#</a> 克隆 Request 实例</h4>\n<ul>\n<li>\n<p><strong>直接传参新建</strong>：将 Request 实例作为 input 参数传给 Request 构造函数，会得到该请求的一个<strong>副本</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>r1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这种方法有个问题，即如果 <code>r1</code>  有 <code>body</code> （post 才能有 body），复制 <code>r1</code>  时 <code>r2</code>  会把 <code>body</code>  也复制进去，这就导致了 <code>r1</code>  的 <code>bodyUsed</code>  属性从 <code>false</code>  变为了 <code>true</code> ，如下</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>method<span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>body<span class=\"token operator\">:</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>bodyUsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">.</span>bodyUsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//fasle</span></pre></td></tr></table></figure><p>此外， <code>bodyUsed=true</code>  后就不能被复制了，会报错</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220426154233653.png\" alt=\"image-20220426154233653\"></p>\n</li>\n<li>\n<p><strong>使用 clone () 方法</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r1<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span>r1<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>使用 <code>clone</code>  不会使 <code>bodyUsed</code>  变为 <code>true</code> 。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>method<span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>body<span class=\"token operator\">:</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>bodyUsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">.</span>bodyUsed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//false</span></pre></td></tr></table></figure><p>和上面一样， <code>bodyUsed=true</code>  后就不能被复制了，会报错</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span>method<span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>body<span class=\"token operator\">:</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>r<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">data</span><span class=\"token operator\">=></span>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token comment\">// 把 bodyUsed 变为 true</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span>r<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错</span></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"在-fetch-中使用-request\"><a class=\"anchor\" href=\"#在fetch中使用request\">#</a> 在 fetch 中使用 Request</h4>\n<p><code>fetch()</code>  和 <code>Request</code>  构造函数拥有相同的结构不是巧合，在调用 <code>fetch()</code>  时可以传入已经创建好的 <code>Request</code>  实例</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    headers<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token comment\">// 或者直接在 request 中设置 init</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./北京大学.json'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    headers<span class=\"token operator\">:</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>        <span class=\"token string\">'Content-Type'</span><span class=\"token operator\">:</span><span class=\"token string\">'application/json'</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>r2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>和<strong>克隆</strong>一样， <code>fetch</code>  不能拿<strong>已经用过</strong>的 <code>Request</code>  实例来发送请求</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span>，<span class=\"token punctuation\">&#123;</span>method<span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>body<span class=\"token operator\">:</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只有 post 才有 body</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>r<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错 Cannot construct a Request with a Request object that has already been used.</span></pre></td></tr></table></figure><p><strong> <code>fetch</code>  发送请求也算使用</strong>，所以 <code>fetch</code>  使用过 <code>Request</code>  实例后不能也克隆，<strong>克隆</strong>得在 <code>fetch</code>  使用前</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span>，<span class=\"token punctuation\">&#123;</span>method<span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span>body<span class=\"token operator\">:</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 只有 post 才有 body</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">=</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>r<span class=\"token punctuation\">.</span><span class=\"token function\">clone</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 报错 Request body is already used</span></pre></td></tr></table></figure><h3 id=\"45-response-对象\"><a class=\"anchor\" href=\"#45-response对象\">#</a> 4.5 Response 对象</h3>\n<p>服务端用于响应请求的对象</p>\n<ul>\n<li>\n<p><code>new Response(body,init)</code> ：响应实例</p>\n<ul>\n<li>\n<p><code>body</code> ：可选，响应体</p>\n</li>\n<li>\n<p><code>init</code> ：可选，请求的详细设置，以 <code>&#123;&#125;</code>  的形式</p>\n</li>\n</ul>\n</li>\n<li>\n<p><strong>创建</strong></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">let</span> r2<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Response</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    status<span class=\"token operator\">:</span> <span class=\"token number\">418</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p><code>response</code>  实例包括响应头、响应体等各参数</p>\n<p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220426162702113.png\" alt=\"image-20220426162702113\"></p>\n</li>\n</ul>\n<p>大多数时候，产生 <code>Response</code>  对象的主要方式是调用 <code>fetch</code> ，他会返回一个最后会解决为 <code>Response</code>  对象的期约，这个 <code>Response</code>  对象代表实际的 HTTP 响应。</p>\n<p><strong>静态方法</strong></p>\n<ul>\n<li><code>Response.redirect(url,status)</code> ：重定向</li>\n<li><code>Response.error()</code> ：</li>\n</ul>\n<p><strong>克隆 Response 对象</strong></p>\n<p>和 <code>Request</code>  一样，使用 <code>clone()</code>  方法</p>\n<p>（感觉上面这些都没啥用，下面才是重点）</p>\n<h3 id=\"46-request-response-的属性及方法\"><a class=\"anchor\" href=\"#46-request-response的属性及方法\">#</a> 4.6 Request、Response 的属性及方法★</h3>\n<p>前面比较乱，这里我们把 <code>req</code>  和 <code>res</code>  的属性、方法放到一起，比较方便记忆和查阅。</p>\n<h4 id=\"461-request-属性\"><a class=\"anchor\" href=\"#461-request属性\">#</a> 4.6.1 Request 属性</h4>\n<p>就是初始化 <code>Request</code>  对象的时候 <code>init</code>  那部分，也可以通过 <code>Request</code>  对象访问</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">,</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>这块有点多，主要列一部分，详细看第 4 版 P725</p>\n<ul>\n<li>\n<p><code>body</code> ：请求体（只有 <code>post</code>  请求有）。可以是 <code>Blob</code> 、 <code>BufferSource</code> 、 <code>FormData</code> 、 <code>URLSearchParams</code> 、 <code>ReadableStream</code> 、 <code>String</code>  类型。这一部分通常不能直接访问（因为使用的是 <code>ReadableStream</code>  流保存的，需要通过混入的方法，在下面讲）</p>\n</li>\n<li>\n<p><code>cache</code> ：缓存</p>\n<ul>\n<li><code>Default</code> ：\n<ul>\n<li>如果有缓存，直接返回，不发送请求；</li>\n<li>命中无效缓存（响应已改变），发送请求更新缓存，并返回该值；</li>\n<li>未命中缓存，发送请求并缓存响应，返回该值</li>\n</ul>\n</li>\n<li><code>no-store</code> ：不检查缓存，直接发送请求；不缓存响应，直接返回</li>\n<li><code>reload</code> ：不检查缓存，直接发送请求；缓存响应，再返回</li>\n<li><code>no-cache</code> ：无论是否命中缓存都发送请求，如果有更新则更新缓存</li>\n<li><code>force-cache</code> ：只要命中缓存（无论是否有效），均返回缓存；未命中则发送请求并更新缓存</li>\n<li><code>only-if-cached</code> ：...</li>\n</ul>\n</li>\n<li>\n<p><code>credentials</code> ：资格证书，指定外发请求如何包含 <code>cookie</code></p>\n<ul>\n<li><code>omit</code> ：省略，不发送 <code>cookie</code></li>\n<li><code>same-origin</code> ：（默认）只在同源请求时发送 <code>cookie</code></li>\n<li><code>include</code> ：不论同源还是跨源均发送 <code>cookie</code></li>\n</ul>\n</li>\n<li>\n<p><code>headers</code> ： <code>Headers</code>  对象，请求头</p>\n</li>\n<li>\n<p><code>method</code> ：请求方式。get、post、put、patch...。默认 get</p>\n</li>\n<li>\n<p><code>mode</code> ：请求模式。主要针对跨源响应</p>\n<ul>\n<li><code>cors</code> ：（默认）允许<strong>遵守 CORS 协议</strong>的跨源请求</li>\n<li><code>no-cors</code> ：允许<strong>不需要发送预检请求</strong>的跨源请求。响应类型（ <code>response.type</code> ）是 <code>opaque</code> ，也就是不能读取响应内容</li>\n<li><code>same-origin</code> ：任何跨源请求都不允许发送</li>\n<li><code>navigate</code> ：...</li>\n</ul>\n</li>\n<li>\n<p><code>redirect</code> ：如何处理重定向响应</p>\n<ul>\n<li>...</li>\n</ul>\n</li>\n<li>\n<p><code>referrer</code> ：指定请求源。用于指定 HTTP 的 <code>Referer</code>  头部内容</p>\n<ul>\n<li><code>no-referred</code> ：以 <code>no-referred</code>  为值</li>\n<li><code>client/about:client</code> ：（默认），就是当前 URL 或 <code>no-referred</code> （取决于来源策略 <code>referredPolicy</code> ）</li>\n<li><code>url</code> ：伪造 <code>url</code> 。<strong>仅能和请求源同源的 url</strong></li>\n</ul>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    referrer<span class=\"token operator\">:</span> <span class=\"token string\">'weghj'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">.</span>referrer<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//http://127.0.0.1:5501/js%E7%BB%83%E4%B9%A0/ajax/weghj</span></pre></td></tr></table></figure></li>\n<li>\n<p><code>referredPolicy</code> ：来源策略</p>\n<ul>\n<li>...</li>\n</ul>\n</li>\n<li>\n<p><code>signal</code> ：...</p>\n</li>\n</ul>\n<h4 id=\"462-response-属性\"><a class=\"anchor\" href=\"#462-response属性\">#</a> 4.6.2 Response 属性</h4>\n<p><code>Response</code>  对象包含了一组只读属性，描述了请求完成后的状态</p>\n<ul>\n<li><code>headers</code> ： <code>Headers</code>  对象，返回响应头对象</li>\n<li><code>ok</code> ：布尔值，200-299 的状态码返回 <code>true</code> ，其他返回 <code>false</code></li>\n<li><code>redirected</code> ：布尔值，返回响应是否至少经过一次<strong>重定向</strong>。</li>\n<li><code>status</code> ：整数，返回响应状态码</li>\n<li><code>statusText</code> ：字符串，返回响应状态码的文字描述</li>\n<li><code>type</code> ：字符串，返回响应类型\n<ul>\n<li><code>basic</code> ：标准的同源响应</li>\n<li><code>cors</code> ：标准的跨源响应</li>\n<li><code>error</code> ：表示响应对象是通过 <code>Response.error()</code>  创建的</li>\n<li><code>opaque</code> ：不可访问的响应。表示 <code>no-cors</code>  的 <code>fetch()</code>  返回的跨源响应</li>\n<li><code>opaqueredirect</code> ：表示对 <code>redirect</code>  设置为 <code>manual</code>  的请求的响应</li>\n</ul>\n</li>\n<li><code>url</code> ：字符串，响应的 <code>url</code></li>\n</ul>\n<h4 id=\"463-request-response-方法\"><a class=\"anchor\" href=\"#463-request-response方法\">#</a> 4.6.3 Request、Response 方法</h4>\n<p><code>Request</code>  和 <code>Response</code>  均用了流来使用 <code>body</code> ，主要有以下 2 点原因：</p>\n<ol>\n<li>有效载荷（body）的大小可能会导致网络延迟</li>\n<li>流 API 本身在处理有效载荷方面有优势</li>\n</ol>\n<p>body 提供了 5 个方法，用于将 <code>ReadableStream</code>  转存到缓冲区的内存，将缓冲区转换为某种 JavaScript 类型，以及通过期约来产生结果。此外，这些流方法<strong>只能调用一次</strong>，（ <code>body</code>  只能使用一次）</p>\n<ul>\n<li>\n<p><code>.text()</code> ：返回一个期约，解决为（解决后的返回值）缓冲区转存得到的<strong> UTF-8 字符串</strong></p>\n<ul>\n<li>\n<p><code>Response</code> ：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./ajax.html'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">response</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span>response<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220426191956717.png\" alt=\"image-20220426191956717\"></p>\n</li>\n<li>\n<p><code>Request</code> ：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> r<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Request</span><span class=\"token punctuation\">(</span><span class=\"token string\">'https://www.baidu.com'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    method<span class=\"token operator\">:</span><span class=\"token string\">'post'</span><span class=\"token punctuation\">,</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    body<span class=\"token operator\">:</span> <span class=\"token string\">'foo'</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>r<span class=\"token punctuation\">.</span><span class=\"token function\">text</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span>console<span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//foo</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p><code>.json()</code> ：转换为<strong> json 类型</strong></p>\n</li>\n<li>\n<p><code>.formData()</code> ：转为<strong> FormData 类型</strong>（类似 Headers 的类型）</p>\n</li>\n<li>\n<p><code>.arrayBuffer()</code> ：转为<strong> ArrayBuffer 类型</strong>（类数组类型）</p>\n</li>\n<li>\n<p><code>.blob()</code> ：转为<strong> Blob 类型</strong></p>\n</li>\n</ul>\n<h3 id=\"47-直接读取-readablestream-的-body暂缓\"><a class=\"anchor\" href=\"#47-直接读取readablestream的body暂缓\">#</a> 4.7 直接读取 ReadableStream 的 body（暂缓）</h3>\n<p>通过混入方法，我们可以很简便地读取响应数据，但他是数据全部接收完后再转换的，当数据较大时，会比较费时间。</p>\n<p><code>ReadableStream</code>  支持在这些数据块到达时就<strong>实时</strong>读取和操作这些数据</p>\n<p>... 下面暂时还没看，等学完流的部分吧</p>\n<h3 id=\"48-beacon-api暂缓\"><a class=\"anchor\" href=\"#48-beacon-api暂缓\">#</a> 4.8 Beacon API（暂缓）</h3>\n<h3 id=\"49-web-socket\"><a class=\"anchor\" href=\"#49-web-socket\">#</a> 4.9 Web Socket</h3>\n<p>套接字，即 TCP + 端口。是通过一个长时连接实现与服务器全双工的通信。</p>\n<ul>\n<li>Web Socket 使用自定义协议，使用 <code>ws://</code>  和 <code>wss://</code>  代替 <code>http://</code>  和 <code>https://</code></li>\n<li>优点：\n<ul>\n<li>不会对 HTTP 造成负担</li>\n<li>更小的数据报使 Web Socket 非常适合<strong>带宽</strong>和<strong>延迟</strong>较严重的<strong>移动应用</strong></li>\n</ul>\n</li>\n<li>缺点：定义协议的时间较长</li>\n</ul>\n<p>此外，<strong>同源策略</strong>不适用于 Web Socket，是否与特定源的页面通信，完全取决于服务器</p>\n<h4 id=\"491-api\"><a class=\"anchor\" href=\"#491-api\">#</a> 4.9.1 API</h4>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">let</span> socket<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://www.example.com/server.php\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><ul>\n<li><code>readyState</code> ：通过 <code>readyState</code>  属性查看状态\n<ul>\n<li>0：OPENING，连接正在建立</li>\n<li>1：OPEN，连接已建立</li>\n<li>2：CLOSING，连接正在关闭</li>\n<li>3：CLOSE，连接已经关闭</li>\n</ul>\n</li>\n<li><code>close()</code> ：通过 <code>close</code>  方法立即关闭连接。调用 <code>close()</code>  后 <code>readyState</code>  立即变为 2，关闭后变为 3</li>\n</ul>\n<h4 id=\"492-发送和接收数据\"><a class=\"anchor\" href=\"#492-发送和接收数据\">#</a> 4.9.2 发送和接收数据</h4>\n<ul>\n<li>\n<p><code>send()</code> ：通过 <code>send()</code>  方法发送数据</p>\n<ul>\n<li>参数： <code>String</code> 、 <code>ArrayBuffer</code> 、 <code>Blob</code>  类型的数据</li>\n</ul>\n</li>\n<li>\n<p><code>onmessage</code> ：通过 <code>onmessage</code>  属性事件接收数据</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">let</span> data<span class=\"token operator\">=</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 操作数据代码</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p><code>data</code>  的数据可能是 <code>blob</code>  或 <code>arraybuffer</code>  类型</p>\n</li>\n</ul>\n<h4 id=\"493-其他事件\"><a class=\"anchor\" href=\"#493-其他事件\">#</a> 4.9.3 其他事件</h4>\n<p>WebSocket 对象在连接生命周期中有可能触发 3 个其他事件</p>\n<ul>\n<li><code>open</code> ：在连接成功建立时触发</li>\n<li><code>error</code> ：在发生错误时触发</li>\n<li><code>close</code> ：在连接关闭时触发。这个事件对象 <code>event</code>  还有 3 个额外属性\n<ul>\n<li><code>wasClean</code> ：布尔值，连接是否干净地关闭</li>\n<li><code>code</code> ：来自服务器的数值状态码</li>\n<li><code>reason</code> ：字符串，服务器发来的消息</li>\n</ul>\n</li>\n<li><code>message</code> ：在接收到数据时触发（这个是上面讲的）</li>\n</ul>\n<p>例：</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onclose</span><span class=\"token operator\">=</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'关闭连接'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>WebSocket<span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span>code<span class=\"token punctuation\">,</span>event<span class=\"token punctuation\">.</span>reason<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>socket<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr></table></figure><p>控制台输出：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220426201955135.png\" alt=\"image-20220426201955135\"></p>\n<h3 id=\"410-安全\"><a class=\"anchor\" href=\"#410-安全\">#</a> 4.10 安全</h3>\n<p>关于 Ajax 的安全防护一般是通过<strong>验证</strong>请求发送者对资源的<strong>访问权限</strong>，如</p>\n<ul>\n<li>要求通过<strong> SSL</strong> 访问能够被 Ajax 访问的资源</li>\n<li>要求每个请求都发送一个按约定算法计算好的<strong>令牌</strong>（token）</li>\n<li>下列防护对<strong> CSRF（跨站请求伪造）攻击</strong>无效\n<ul>\n<li>要求 POST 而非 GET（很容易修改请求方法）</li>\n<li>使用来源 URL 验证来源（很容易伪造来源 URL）</li>\n<li>基于 cookie 验证（也很容易伪造）</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"二十六-模块\"><a class=\"anchor\" href=\"#二十六-模块\">#</a> 二十六、 模块</h1>\n<p>类似 python 的 import，C++ 的 include</p>\n<h2 id=\"1-es6-模块\"><a class=\"anchor\" href=\"#1-es6模块\">#</a> 1. ES6 模块</h2>\n<ul>\n<li>ES6 模块不共享全局命名空间</li>\n<li>模块中的 <code>var</code>  声明不会被添加到 <code>window</code>  对象</li>\n<li>ES6 模块是<strong>异步</strong>加载和执行的</li>\n<li>模块最上层的 <code>this</code>  是 <code>uindefined</code> （常规脚本是 <code>window</code> ）</li>\n<li>ES6 的模块可以在浏览器中使用，在这之前是不行的</li>\n</ul>\n<h3 id=\"11-模块配置\"><a class=\"anchor\" href=\"#11-模块配置\">#</a> 1.1 模块配置</h3>\n<blockquote>\n<p>同一个模块无论被引入多少次，也不管是如何加载的，都只会<strong>加载一次</strong></p>\n</blockquote>\n<ul>\n<li>\n<p>在浏览器上使用 <code>module</code>  需要在标签内引入</p>\n<p>通过设置标签的 <code>type=&quot;module&quot;</code>  告诉浏览器相关代码<strong>作为模块</strong>执行</p>\n<figure class=\"highlight html\"><figcaption data-lang=\"HTML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>module<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation attr-equals\">=</span><span class=\"token punctuation\">\"</span>./myModule.js<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span></pre></td></tr></table></figure></li>\n<li>\n<p>在 node.js 使用需要在 <code>package.json</code>  设置 <code>type: module</code> 。<span class=\"exturl\" data-url=\"aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3NpbmF0XzM2NTIxNjU1L2FydGljbGUvZGV0YWlscy8xMDk4NjMzNjQ=\">https://blog.csdn.net/sinat_36521655/article/details/109863364</span></p>\n<p>执行 <code>npm init -y</code> ，快速生成 package.json</p>\n</li>\n</ul>\n<h3 id=\"12-模块导出\"><a class=\"anchor\" href=\"#12-模块导出\">#</a> 1.2 模块导出</h3>\n<p><code>export</code>  关键字，导出语句必须在模块顶级（最外层），不能嵌套在某块中。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    <span class=\"token keyword\">export</span> <span class=\"token operator\">...</span><span class=\"token comment\">// 不允许</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>命名导出： <code>export</code>  关键字。用于导出一些定义好的变量 / 对象 / 函数</p>\n<ul>\n<li>\n<p>先定义，再导出</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">method</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'method'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>a<span class=\"token punctuation\">,</span>method<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 就算只导出一个，&#123;&#125; 也不能少</span></pre></td></tr></table></figure></li>\n<li>\n<p>定义的同时导出</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> a<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">method</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'method'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n<li>\n<p>命名导出 <code>as</code> （对导出的变量赋予新名字）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> a<span class=\"token operator\">=</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>a <span class=\"token keyword\">as</span> newA<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">// 这样 a 变量就换了个名字导出</span></pre></td></tr></table></figure></li>\n</ul>\n</li>\n<li>\n<p>默认导出： <code>export default</code></p>\n<blockquote>\n<p><code>export default</code>  命令用于指定模块的默认输出。</p>\n<p>显然，一个模块只能有一个默认输出，因此 export default 命令只能<strong>使用一次</strong>。</p>\n<p>所以， <code>import</code>  命令后面才<strong>不用加大括号</strong>，因为只可能唯一对应 export default 命令。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">//export default 不支持定义变量的同时导出，export default foo='foo' 错误</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 但支持定义函数的同时导出，export default function foo ()&#123;&#125; 正确</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">// 但一般 export default 不需要声明，直接匿名导出即可，如下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token string\">'foo'</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\">// 或者</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token comment\">// 在另一个 js 文件中导入可以任意命名，也不需要 &#123;&#125; 如</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token keyword\">import</span> foo123 <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.js'</span></pre></td></tr></table></figure><p>默认导出可以和普通导出组合在一起</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> foo<span class=\"token operator\">=</span><span class=\"token string\">'foo'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> bar<span class=\"token operator\">=</span><span class=\"token string\">'bar'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token punctuation\">&#123;</span>foo <span class=\"token keyword\">as</span> <span class=\"token keyword\">default</span><span class=\"token punctuation\">,</span>bar<span class=\"token punctuation\">&#125;</span><span class=\"token comment\">//foo as default 等价于 export default foo</span></pre></td></tr></table></figure></li>\n<li>\n<p>允许转移导出：A 导入 B 的 foo，A 导出该 foo</p>\n</li>\n</ul>\n<h3 id=\"13-模块导入\"><a class=\"anchor\" href=\"#13-模块导入\">#</a> 1.3 模块导入</h3>\n<p><code>import</code>  关键字：和 <code>export</code>  一样，不允许嵌套在块内</p>\n<p><strong>以此导出为例</strong></p>\n<p><code>foo.js</code></p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> foo<span class=\"token operator\">=</span><span class=\"token string\">'foo'</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">method</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'method'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'default'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><ul>\n<li>\n<p>按需导入</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">&#123;</span>foo<span class=\"token punctuation\">,</span>method <span class=\"token keyword\">as</span> newMethod<span class=\"token punctuation\">,</span><span class=\"token keyword\">default</span> <span class=\"token keyword\">as</span> d<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.js'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//import 可以使用 as 重新命名</span></pre></td></tr></table></figure></li>\n<li>\n<p>全部导入</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.js'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 导入的是个类 object 的对象</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">// 必须有 as，否则会报错</span></pre></td></tr></table></figure><p>Foo：<img data-src=\"/2022/01/14/note/%E5%89%8D%E7%AB%AF/js%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1/image-20220419140745598.png\" alt=\"image-20220419140745598\"></p>\n<p>也可以在全部导入的同时单独分离一些出来，如</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> foo<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'./bar.js'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 不过 Foo 里还是有 foo 这个属性的</span></pre></td></tr></table></figure></li>\n<li>\n<p>仅导入默认</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> d <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.js'</span><span class=\"token punctuation\">;</span><span class=\"token comment\">// 默认导入不用 &#123;&#125;, 但要给他一个名字</span></pre></td></tr></table></figure></li>\n</ul>\n<hr>\n<p>导入命名后，不能对该变量重新赋值，但可以修改变量内容（如果是 object 的话）</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">import</span> foo<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> Foo <span class=\"token keyword\">from</span> <span class=\"token string\">'./foo.js'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>foo<span class=\"token operator\">=</span><span class=\"token string\">'foo1'</span> <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>Foo<span class=\"token punctuation\">.</span>foo<span class=\"token operator\">=</span><span class=\"token string\">'foo1'</span> <span class=\"token comment\">// 错误</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>foo<span class=\"token punctuation\">.</span>bar<span class=\"token operator\">=</span><span class=\"token string\">'bar1'</span> <span class=\"token comment\">// 允许</span></pre></td></tr></table></figure><h3 id=\"vue-中的-export-default\"><a class=\"anchor\" href=\"#vue中的export-default\">#</a> Vue 中的 export default</h3>\n<h2 id=\"2-commonjs-模块加载器es6-之前\"><a class=\"anchor\" href=\"#2-commonjs模块加载器es6之前\">#</a> 2. CommonJS 模块加载器（ES6 之前）</h2>\n<h3 id=\"21-导出\"><a class=\"anchor\" href=\"#21-导出\">#</a> 2.1 导出</h3>\n<p><code>module.export</code></p>\n<h3 id=\"22-导入\"><a class=\"anchor\" href=\"#22-导入\">#</a> 2.2 导入</h3>\n<p><code>require</code></p>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/12/24/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",
            "url": "https://nitgod1996.com/2021/12/24/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/",
            "title": "",
            "date_published": "2021-12-24T07:30:16.294Z",
            "content_html": "<ul>\n<li>\n<p><strong>优先队列</strong>：优先队列也是一种抽象数据类型。优先队列中的每个元素都有优先级，而优先级高（或者低）的将会先出队，而优先级相同的则按照其在优先队列中的顺序依次出队。</p>\n</li>\n<li>\n<p><strong>字符串哈希</strong>：即将一个字符串<strong>转化成一个整数</strong>，并保证字符串不同，得到的哈希值不同，这样就可以用来判断一个该字串是否重复出现过。</p>\n<p>用字符串 Hash，最怕的就是，出现冲突的情况，即不同字符串却有着相同的 hash 值，这是我们不想看到的。所以为了降低冲突的概率，可以用双 Hash 方法。</p>\n<p>将一个字符串用不同的 Base 和 MOD，hash 两次，将这两个结果用一个二元组表示，作为一个总的 Hash 结果。</p>\n<p>相当于我们用不同的 Base 和 MOD，进行两次 单 Hash 方法 操作，然后将得到的结果，变成一个二元组结果，这样子，我们要看一个字符串，就要同时对比两个 Hash 值，这样子出现冲突的概率就很低了。</p>\n<p>那么对应的 Hash 公式为：</p>\n<p><img data-src=\"/2021/12/24/note/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20211224154225327.png\" alt=\"image-20211224154225327\"></p>\n<p>映射的 Hash 结果为：</p>\n<p>这种 Hash 很安全。</p>\n<figure class=\"highlight javascript\"><figcaption data-lang=\"javascript\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">MOD</span> <span class=\"token operator\">=</span> <span class=\"token number\">1000000007</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 大质数</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">B1</span> <span class=\"token operator\">=</span> <span class=\"token number\">26</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// constant</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token constant\">B2</span> <span class=\"token operator\">=</span> <span class=\"token number\">31</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// constant</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">function</span> <span class=\"token function\">check</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">len</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    <span class=\"token keyword\">let</span> hashCode1 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    <span class=\"token keyword\">let</span> hashCode2 <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>    <span class=\"token keyword\">let</span> set1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    <span class=\"token keyword\">let</span> set2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Set</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token keyword\">let</span> maxTerm1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">let</span> maxTerm2 <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> s<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>        maxTerm1 <span class=\"token operator\">=</span> maxTerm1 <span class=\"token operator\">*</span> <span class=\"token constant\">B1</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        maxTerm2 <span class=\"token operator\">=</span> maxTerm2 <span class=\"token operator\">*</span> <span class=\"token constant\">B2</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        hashCode1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashCode1<span class=\"token operator\">*</span><span class=\"token constant\">B1</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>        hashCode2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashCode2<span class=\"token operator\">*</span><span class=\"token constant\">B2</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>        hashCode1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashCode1<span class=\"token operator\">*</span><span class=\"token constant\">B1</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxTerm1<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>        <span class=\"token comment\">// 减法之后有可能 h1 或者 h2 小于 0，所以要 + MOD</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashCode1 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> hashCode1 <span class=\"token operator\">+=</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>        hashCode2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>hashCode2<span class=\"token operator\">*</span><span class=\"token constant\">B2</span> <span class=\"token operator\">+</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> s<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> len<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">charCodeAt</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>maxTerm2<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>hashCode2 <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> hashCode2 <span class=\"token operator\">+=</span> <span class=\"token constant\">MOD</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>set1<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>hashCode1<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> set2<span class=\"token punctuation\">.</span><span class=\"token function\">has</span><span class=\"token punctuation\">(</span>hashCode2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">-</span> len <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> len <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>        set1<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>hashCode1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre>        set2<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>hashCode2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>      <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>    <span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token string\">''</span><span class=\"token punctuation\">;</span></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>  <span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"待学习\"><a class=\"anchor\" href=\"#待学习\">#</a> 待学习</h1>\n<ul>\n<li>二维偏序：<span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvY291bnQtbnVtYmVyLW9mLXJlY3RhbmdsZXMtY29udGFpbmluZy1lYWNoLXBvaW50L3NvbHV0aW9uL2J5LXRzcmVhcGVyLThjMmwv\">https://leetcode-cn.com/problems/count-number-of-rectangles-containing-each-point/solution/by-tsreaper-8c2l/</span></li>\n<li></li>\n</ul>\n",
            "tags": []
        },
        {
            "id": "https://nitgod1996.com/2021/11/14/note/%E6%89%BE%E5%B7%A5%E4%BD%9C/LeetCode%E9%94%99%E9%A2%98%E9%9B%86/",
            "url": "https://nitgod1996.com/2021/11/14/note/%E6%89%BE%E5%B7%A5%E4%BD%9C/LeetCode%E9%94%99%E9%A2%98%E9%9B%86/",
            "title": "LeetCode错题集",
            "date_published": "2021-11-14T05:20:40.511Z",
            "content_html": "<h1 id=\"动态规划\"><a class=\"anchor\" href=\"#动态规划\">#</a> 动态规划</h1>\n<p><span class=\"exturl\" data-url=\"aHR0cHM6Ly9sZWV0Y29kZS1jbi5jb20vcHJvYmxlbXMvZ3Vlc3MtbnVtYmVyLWhpZ2hlci1vci1sb3dlci1paS8=\">375. 猜数字大小 II</span></p>\n<p><img data-src=\"/2021/11/14/note/%E6%89%BE%E5%B7%A5%E4%BD%9C/LeetCode%E9%94%99%E9%A2%98%E9%9B%86/1636819374-fdWexn-image.png\" alt=\"1636819374-fdWexn-image\"></p>\n",
            "tags": []
        }
    ]
}